[
  {
    "postid":1533,
    "postdate":1248813540,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.147475585,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.559717483,
    "polarity":-1,
    "normalized_text_entropy":4.147475585,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.559717483,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"In Java, is it legal to call remove on a collection when iterating through the collection using a foreach loop?For instance: As an addendum, is it legal to remove items that have not been iterated over yet? For instance, "
  },
  {
    "postid":1534,
    "postdate":1248813780,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.280518759,
    "concept_entropy":1,
    "UMASS(coherence)":0.609950835,
    "TFIDF(informativeness)":2.006465526,
    "polarity":3,
    "normalized_text_entropy":4.280518759,
    "normalized_concept_entropy":1,
    "normalized_UMASS":0.609950835,
    "normalized_TFIDF":2.006465526,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"To safely remove from a collection while iterating over it you should use an Iterator. For example:"
  },
  {
    "postid":1535,
    "postdate":1248813780,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.461699621,
    "concept_entropy":2,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.349065535,
    "polarity":4,
    "normalized_text_entropy":4.461699621,
    "normalized_concept_entropy":2,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":2.349065535,
    "normalized_polarity":4,
    "tagtext":"loops",
    "posttext":"You don't want to do that. It can cause undefined behavior depending on the collection. You want to use an directly. Although the for each construct is syntactic sugar and is really using an iterator, it hides it from your code so you can't access it to call. Instead write your code: Note that the code calls, not. Even if you are removing an element that has not been iterated over yet, you still don't want to modify the collection and then use the. It might modify the collection in a way that is surprising and affects future operations on the."
  },
  {
    "postid":1536,
    "postdate":1248814020,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.314520812,
    "concept_entropy":3,
    "UMASS(coherence)":0.726866245,
    "TFIDF(informativeness)":3.055772155,
    "polarity":3,
    "normalized_text_entropy":4.314520812,
    "normalized_concept_entropy":3,
    "normalized_UMASS":0.726866245,
    "normalized_TFIDF":3.055772155,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"The java design of the \"enhanced for loop\" was to not expose the iterator to code, but the only way to safely remove an item is to access the iterator. So in this case you have to do it old school: If in the real code the enhanced for loop is really worth it, then you could add the items to a temporary collection and call removeAll on the list after the loop. EDIT (re addendum): No, changing the list in any way outside the iterator.remove() method while iterating will cause problems. The only way around this is to use a CopyOnWriteArrayList, but that is really intended for concurrency issues. The cheapest (in terms of lines of code) way to remove duplicates is to dump the list into a LinkedHashSet (and then back into a List if you need). This preserves insertion order while removing duplicates."
  },
  {
    "postid":1537,
    "postdate":1305727740,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.274026395,
    "concept_entropy":4,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.78105041,
    "polarity":0,
    "normalized_text_entropy":4.274026395,
    "normalized_concept_entropy":4,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":2.78105041,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I didn't know about iterators, however here's what I was doing until today to remove elements from a list inside a loop:This is always working, and could be used in other languages or structs not supporting iterators."
  },
  {
    "postid":1538,
    "postdate":1291981920,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.051272244,
    "concept_entropy":5,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.108359667,
    "polarity":1,
    "normalized_text_entropy":4.051272244,
    "normalized_concept_entropy":5,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":2.108359667,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Yes you can use the for-each loop,To do that you have to maintain a separate list to hold removing items and then remove that list from names list using method,"
  },
  {
    "postid":1539,
    "postdate":1321289820,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.306096303,
    "concept_entropy":0,
    "UMASS(coherence)":0.691350457,
    "TFIDF(informativeness)":1.600725364,
    "polarity":0,
    "normalized_text_entropy":4.306096303,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.691350457,
    "normalized_TFIDF":1.600725364,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Make sure this is not code smell.Is it possible to reverse the logic and be 'inclusive' rather than 'exclusive'? The situation that led me to this page involved old code that looped through a List using indecies to remove elements from the List. I wanted to refactor it to use the foreach style. It looped through an entire list of elements to verify which ones the user had permission to access, and removed the ones that didn't have permission from the list. To reverse this and not use the remove: When would \"remove\" be preferred? One consideration is if gien a large list or expensive \"add\", combined with only a few removed compared to the list size.It might be more efficient to only do a few removes rather than a great many adds.But in my case the situation did not merit such an optimization."
  },
  {
    "postid":1540,
    "postdate":1248823500,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.256930681,
    "concept_entropy":0,
    "UMASS(coherence)":0.635922986,
    "TFIDF(informativeness)":1.77348919,
    "polarity":-1,
    "normalized_text_entropy":4.256930681,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.635922986,
    "normalized_TFIDF":1.77348919,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Those saying that you can't safely remove an item from a collection except through the Iterator aren't quite correct, you can do it safely using one of the concurrent collections such as ConcurrentHashMap."
  },
  {
    "postid":1541,
    "postdate":1248813840,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.231913779,
    "concept_entropy":0,
    "UMASS(coherence)":0.645749604,
    "TFIDF(informativeness)":2.037797504,
    "polarity":0,
    "normalized_text_entropy":4.231913779,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.645749604,
    "normalized_TFIDF":2.037797504,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"That will throw an exception usually.As noted before, use an iterator."
  },
  {
    "postid":1542,
    "postdate":1294237440,
    "tag":"0",
    "TFMvalue":0.65,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.386101026,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.035692834,
    "polarity":1,
    "normalized_text_entropy":4.386101026,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":3.035692834,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1543,
    "postdate":1328777460,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":0,
    "concept_entropy":4.330359561,
    "UMASS(coherence)":0.586162334,
    "TFIDF(informativeness)":2.113856583,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.330359561,
    "normalized_UMASS":0.586162334,
    "normalized_TFIDF":2.113856583,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It's better to use an Iterator when you want to remove element from a list because the source code of remove isso ,if you remove an element from the list, the list will be restructure ,the other element's index will be changed, this can result something that you want to happened."
  },
  {
    "postid":1544,
    "postdate":1358978460,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.298794911,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.810235633,
    "polarity":0,
    "normalized_text_entropy":4.298794911,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.810235633,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Here is a clean way to remove say, all occurrences of 0 in a list. You clone the list and iterate through that list while you remove from the original list. A bit cleaner than the top answer."
  },
  {
    "postid":1545,
    "postdate":1294948500,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.381957768,
    "concept_entropy":0,
    "UMASS(coherence)":0.636895417,
    "TFIDF(informativeness)":1.756130203,
    "polarity":2,
    "normalized_text_entropy":4.381957768,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.636895417,
    "normalized_TFIDF":1.756130203,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"FWIW there is a proposed enhancement to make this easier: "
  },
  {
    "postid":1546,
    "postdate":1242810420,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.349875457,
    "concept_entropy":0,
    "UMASS(coherence)":0.482246404,
    "TFIDF(informativeness)":0.761102786,
    "polarity":1,
    "normalized_text_entropy":4.349875457,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.482246404,
    "normalized_TFIDF":0.761102786,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I've got a nested loop construct like this: Now how can I break out of both loops. I've looked at similar questions, but none concerns Java specifically. I couldn't apply these solutions because most used gotos. I don't want to put the inner loop in a different method. Update: I don't want to rerun the loops, when breaking I'm finished with the execution of the loop block."
  },
  {
    "postid":1547,
    "postdate":1242810660,
    "tag":"0",
    "TFMvalue":0.777777778,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.266387111,
    "concept_entropy":0,
    "UMASS(coherence)":0.445141457,
    "TFIDF(informativeness)":0.557704628,
    "polarity":0,
    "normalized_text_entropy":4.266387111,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.445141457,
    "normalized_TFIDF":0.557704628,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"(EDIT: Like other answerers, I'd definitely to put the inner loop in a different method. This answer just shows how the requirements in the question can be met.) You can use with a label for the outer loop. For example: This prints:"
  },
  {
    "postid":1548,
    "postdate":1321295160,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.276009386,
    "concept_entropy":0,
    "UMASS(coherence)":0.683611901,
    "TFIDF(informativeness)":0.542463011,
    "polarity":0,
    "normalized_text_entropy":4.276009386,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.683611901,
    "normalized_TFIDF":0.542463011,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Technically the correct answer is to label the outer loop. In practice if you want to exit at any point inside an inner loop then you would be better off externalizing the code into a method (a static method if needs be) and then call it. That would pay off for readability.The code would become something like that:Matching the example for the accepted answer:"
  },
  {
    "postid":1549,
    "postdate":1242810720,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":2.75,
    "concept_entropy":0,
    "UMASS(coherence)":0.442386208,
    "TFIDF(informativeness)":0.106638028,
    "polarity":0,
    "normalized_text_entropy":2.75,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.442386208,
    "normalized_TFIDF":0.106638028,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"You can use a named block around the loops:"
  },
  {
    "postid":1550,
    "postdate":1323280320,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.367211468,
    "concept_entropy":0,
    "UMASS(coherence)":0.489784983,
    "TFIDF(informativeness)":1.986446137,
    "polarity":-1,
    "normalized_text_entropy":4.367211468,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.489784983,
    "normalized_TFIDF":1.986446137,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"I never use labels. It seems like a bad practice to get into. Here's what I would do:"
  },
  {
    "postid":1551,
    "postdate":1242810660,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.282778545,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.392762723,
    "TFIDF(informativeness)":3.661662264,
    "polarity":1,
    "normalized_text_entropy":4.282778545,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.392762723,
    "normalized_TFIDF":3.661662264,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"you can use labels;"
  },
  {
    "postid":1552,
    "postdate":1242819780,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.294303179,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.409052321,
    "TFIDF(informativeness)":1.574052203,
    "polarity":-1,
    "normalized_text_entropy":4.294303179,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.409052321,
    "normalized_TFIDF":1.574052203,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"maybe with a function?"
  },
  {
    "postid":1553,
    "postdate":1242810660,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.125011263,
    "concept_entropy":3.864224733,
    "UMASS(coherence)":0.571910263,
    "TFIDF(informativeness)":1.478595308,
    "polarity":0,
    "normalized_text_entropy":4.125011263,
    "normalized_concept_entropy":3.864224733,
    "normalized_UMASS":0.571910263,
    "normalized_TFIDF":1.478595308,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"You can use a temporary variable: Depending on your function, you can also exit/return from the inner loop:"
  },
  {
    "postid":1554,
    "postdate":1328421840,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.302074196,
    "concept_entropy":4.552425979,
    "UMASS(coherence)":0.431437843,
    "TFIDF(informativeness)":2.004752214,
    "polarity":-1,
    "normalized_text_entropy":4.302074196,
    "normalized_concept_entropy":4.552425979,
    "normalized_UMASS":0.431437843,
    "normalized_TFIDF":2.004752214,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"I needed to do a similar thing, but I chose not to use the enhanced for loop to do it."
  },
  {
    "postid":1555,
    "postdate":1378937640,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.220479277,
    "concept_entropy":4.365336764,
    "UMASS(coherence)":0.39270906,
    "TFIDF(informativeness)":1.514445472,
    "polarity":1,
    "normalized_text_entropy":4.220479277,
    "normalized_concept_entropy":4.365336764,
    "normalized_UMASS":0.39270906,
    "normalized_TFIDF":1.514445472,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1556,
    "postdate":1387666560,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.354902836,
    "concept_entropy":0,
    "UMASS(coherence)":0.520629887,
    "TFIDF(informativeness)":1.215144765,
    "polarity":1,
    "normalized_text_entropy":4.354902836,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.520629887,
    "normalized_TFIDF":1.215144765,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"If you don't likes ands, you can use a \"traditional\" for loop instead the for-in, with an extra abort condition:"
  },
  {
    "postid":1557,
    "postdate":1350474600,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.354902836,
    "concept_entropy":0,
    "UMASS(coherence)":0.520629887,
    "TFIDF(informativeness)":1.215144765,
    "polarity":1,
    "normalized_text_entropy":4.354902836,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.520629887,
    "normalized_TFIDF":1.215144765,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"You just use label for breaking inner loops"
  },
  {
    "postid":1558,
    "postdate":1367125680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.471489446,
    "concept_entropy":0,
    "UMASS(coherence)":0.547969835,
    "TFIDF(informativeness)":2.660198802,
    "polarity":-4,
    "normalized_text_entropy":4.471489446,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.547969835,
    "normalized_TFIDF":2.660198802,
    "normalized_polarity":-4,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1559,
    "postdate":1367953020,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.098784427,
    "concept_entropy":0,
    "UMASS(coherence)":0.383886813,
    "TFIDF(informativeness)":1.460649977,
    "polarity":0,
    "normalized_text_entropy":4.098784427,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.383886813,
    "normalized_TFIDF":1.460649977,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Check if the inner loop is exited with an if statement, by checking the inner loop's variable. You could also create another variable such as a boolean to check if the inner loop is exited.In this example it uses the inner loop's variable to check if it has been exited:"
  },
  {
    "postid":1560,
    "postdate":1400682780,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.313362583,
    "concept_entropy":0,
    "UMASS(coherence)":0.361399087,
    "TFIDF(informativeness)":1.764462731,
    "polarity":1,
    "normalized_text_entropy":4.313362583,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.361399087,
    "normalized_TFIDF":1.764462731,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"You can break from all loops without using any label: and flags. It's just tricky solution. Here condition1 is the condition which is used to break from loop K and J.And condition2 is the condition which is used to break from loop K , J and I. For example: public class BreakTesting { public static void main(String[] args) { }}"
  },
  {
    "postid":1561,
    "postdate":1401626460,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.287159879,
    "concept_entropy":0,
    "UMASS(coherence)":0.610528641,
    "TFIDF(informativeness)":3.616451967,
    "polarity":1,
    "normalized_text_entropy":4.287159879,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.610528641,
    "normalized_TFIDF":3.616451967,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Use Labels. Refer this article"
  },
  {
    "postid":1562,
    "postdate":1405097160,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.124067291,
    "concept_entropy":0,
    "UMASS(coherence)":0.399509038,
    "TFIDF(informativeness)":2.099915655,
    "polarity":1,
    "normalized_text_entropy":4.124067291,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.399509038,
    "normalized_TFIDF":2.099915655,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Use condition as a flag for when you are done processing. Then the inner loop only continues on while the condition has not been met. Either way the outer loop will keep on chuggin'. "
  },
  {
    "postid":1563,
    "postdate":1285855620,
    "tag":"0",
    "TFMvalue":0.7,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.982471803,
    "concept_entropy":0,
    "UMASS(coherence)":0.420064284,
    "TFIDF(informativeness)":1.891868702,
    "polarity":2,
    "normalized_text_entropy":3.982471803,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.420064284,
    "normalized_TFIDF":1.891868702,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"I'm a teacher, and yesterday a student wrote the following code: We know he should have writen just or, but on it should first attribute x to itself, and later increment x. Why does x continue with 0 as value? Here's the bytecode: I'll read about the to try to understand..."
  },
  {
    "postid":1564,
    "postdate":1285859340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":4.305059049,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.552907261,
    "TFIDF(informativeness)":1.501676323,
    "polarity":2,
    "normalized_text_entropy":4.305059049,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.552907261,
    "normalized_TFIDF":1.501676323,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":": Originally I posted C# code in this answer for purposes of illustration, since C# allows you to pass parameters by reference with the keyword. I've decided to update it with actual legal Java code using the first class I found on Google to sort of approximate what does in C#. I can't really tell if that helps or hurts the answer. I will say that I personally haven't done all that much Java development; so for all I know there could be much more idiomatic ways to illustrate this point. Perhaps if we write out a method to do the equivalent of what does it will make this clearer. Right? Increment the value passed and return the original value: that's the definition of the postincrement operator. Now, let's see how this behavior plays out in your example code:does what? Increments, yes. And then. This return value then gets assigned to. So the order of values assigned to is 0, then 1, then 0. This might be clearer still if we re-write the above: Your fixation on the fact that when you replace on the left side of the above assignment with, \"you can see that it first increments x, and later attributes it to y\" strikes me as confused. It is not that is being assigned to; it is. Really, injecting makes things no different from the scenario above; we've simply got: So it's clear: effectively does not change the value of x. It always causes x to have the values x , then x+ 1, and then xagain. : Incidentally, lest you doubt that ever gets assigned to 1 \"between\" the increment operation and the assignment in the example above, I've thrown together a quick demo to illustrate that this intermediate value does indeed \"exist,\" though it will never be \"seen\" on the executing thread. The demo calls in a loop while a separate thread continuously prints the value of to the console. Below is an excerpt of the above program's output. Notice the irregular occurrence of both 1s and 0s."
  },
  {
    "postid":1565,
    "postdate":1285855980,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.292917397,
    "concept_entropy":4.533493783,
    "UMASS(coherence)":0.569174496,
    "TFIDF(informativeness)":2.804135604,
    "polarity":7,
    "normalized_text_entropy":4.292917397,
    "normalized_concept_entropy":4.533493783,
    "normalized_UMASS":0.569174496,
    "normalized_TFIDF":2.804135604,
    "normalized_polarity":7,
    "tagtext":"loops",
    "posttext":" works in the following way: So, the sequence of events looks like follows (it's an actual decompiled bytecode, as produced by, with my comments): For comparison,:"
  },
  {
    "postid":1566,
    "postdate":1285856100,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.476371146,
    "concept_entropy":4.50812831,
    "UMASS(coherence)":0.525599632,
    "TFIDF(informativeness)":1.530465262,
    "polarity":0,
    "normalized_text_entropy":4.476371146,
    "normalized_concept_entropy":4.50812831,
    "normalized_UMASS":0.525599632,
    "normalized_TFIDF":1.530465262,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"This happens because the value of doesn't get incremented at all. is equivalent to Explanation: Let's look at the byte code for this operation. Consider a sample class: Now running the class disassembler on this we get: Now the is stack based which means for each operation, the data will be pushed onto the stack and from stack the data will popped out to perform the operation. There is also another data structure, typically an array to store the local variables. The local variables are given ids which are just the indexes to the array. Let us look at the in method: Hence the value of does not change resulting in the infinite loop."
  },
  {
    "postid":1567,
    "postdate":1285856820,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.615817595,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.276076304,
    "TFIDF(informativeness)":1.311482845,
    "polarity":0,
    "normalized_text_entropy":3.615817595,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.276076304,
    "normalized_TFIDF":1.311482845,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"However \" \" has a lower operator precedence than \" \". So should evaluate as follows"
  },
  {
    "postid":1568,
    "postdate":1285857420,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.340496418,
    "concept_entropy":4.629636044,
    "UMASS(coherence)":0.682101547,
    "TFIDF(informativeness)":1.530598392,
    "polarity":1,
    "normalized_text_entropy":4.340496418,
    "normalized_concept_entropy":4.629636044,
    "normalized_UMASS":0.682101547,
    "normalized_TFIDF":1.530598392,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"None of the answers where quite spot on, so here goes: When you're writing, you're not assigning to be itself at the new value, you're assigning to be the return value of the expression. Which happens to be the original value of, as hinted in . For fun, test the following code: The result will beThe return value of the expression is the initial value of, which is zero. But later on, when reading the value of, we receive the updated value , that is one."
  },
  {
    "postid":1569,
    "postdate":1285860780,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.30117099,
    "concept_entropy":4.50812831,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.484725311,
    "polarity":-1,
    "normalized_text_entropy":4.30117099,
    "normalized_concept_entropy":4.50812831,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.484725311,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"It has been already explained well by other. I just include the links to the relevant Java specification sections. x = x++ is an expression. Java will follow the.It will first evaluate the expression x++, which.Then it will to the variable x. At the end, x is back at its previous value."
  },
  {
    "postid":1570,
    "postdate":1285855800,
    "tag":"0",
    "TFMvalue":0.894736842,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.267862645,
    "concept_entropy":3.984054407,
    "UMASS(coherence)":0.53337933,
    "TFIDF(informativeness)":2.178284194,
    "polarity":1,
    "normalized_text_entropy":4.267862645,
    "normalized_concept_entropy":3.984054407,
    "normalized_UMASS":0.53337933,
    "normalized_TFIDF":2.178284194,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"This statement: evaluates like this: So the value is unchanged. Compare that to: which evaluates as: What you want is:"
  },
  {
    "postid":1571,
    "postdate":1285856820,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.157488676,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.442868969,
    "TFIDF(informativeness)":2.303530031,
    "polarity":4,
    "normalized_text_entropy":4.157488676,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.442868969,
    "normalized_TFIDF":2.303530031,
    "normalized_polarity":4,
    "tagtext":"loops",
    "posttext":"FromTo illustrate, try the following: Which will print 1 and 0."
  },
  {
    "postid":1572,
    "postdate":1285856160,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.311577222,
    "concept_entropy":0,
    "UMASS(coherence)":0.486133248,
    "TFIDF(informativeness)":1.651224977,
    "polarity":-2,
    "normalized_text_entropy":4.311577222,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.486133248,
    "normalized_TFIDF":1.651224977,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"You're effectively getting the following behavior. The idea being that the post-increment operator (x++) increments that variable in question AFTER returning its value for use in the equation it's used in. Edit: Adding a slight bit because of the comment. Consider it like the following."
  },
  {
    "postid":1573,
    "postdate":1285855860,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.093803873,
    "concept_entropy":0,
    "UMASS(coherence)":0.493376177,
    "TFIDF(informativeness)":1.57717746,
    "polarity":-1,
    "normalized_text_entropy":4.093803873,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.493376177,
    "normalized_TFIDF":1.57717746,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"This is because it never gets incremented in this case. will use the value of it first before incrementing like on this case it will be like: But if you do this will increase."
  },
  {
    "postid":1574,
    "postdate":1285906200,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.231778574,
    "concept_entropy":0,
    "UMASS(coherence)":0.527575011,
    "TFIDF(informativeness)":1.458681486,
    "polarity":1,
    "normalized_text_entropy":4.231778574,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.527575011,
    "normalized_TFIDF":1.458681486,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"You don't really need the machine code to understand what's happending. According the definitions: It is pretty simple."
  },
  {
    "postid":1575,
    "postdate":1285971480,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.007844828,
    "concept_entropy":4.120300687,
    "UMASS(coherence)":0.265794444,
    "TFIDF(informativeness)":1.990446974,
    "polarity":0,
    "normalized_text_entropy":4.007844828,
    "normalized_concept_entropy":4.120300687,
    "normalized_UMASS":0.265794444,
    "normalized_TFIDF":1.990446974,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"The answer is pretty straightforward. It has to do with the order things are evaluated. returns the value then increments. Consequently, the value of the expression is. So you are assigning each time in the loop. Certainly increments this value, but that happens before the assignment."
  },
  {
    "postid":1576,
    "postdate":1285856100,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.221648936,
    "concept_entropy":0,
    "UMASS(coherence)":0.575411004,
    "TFIDF(informativeness)":1.430601693,
    "polarity":0,
    "normalized_text_entropy":4.221648936,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.575411004,
    "normalized_TFIDF":1.430601693,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"The value stays at 0 because the value of is 0. In this case it doesn't matter if the value of is increased or not, the assignment is executed. This will overwrite the temporary incremented value of (which was 1 for a \"very short time\")."
  },
  {
    "postid":1577,
    "postdate":1285857540,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.117906611,
    "concept_entropy":0,
    "UMASS(coherence)":0.421686181,
    "TFIDF(informativeness)":1.429352745,
    "polarity":0,
    "normalized_text_entropy":4.117906611,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.421686181,
    "normalized_TFIDF":1.429352745,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"This works how you expect the other one to.It's the difference between prefix and postfix."
  },
  {
    "postid":1578,
    "postdate":1285856160,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":2.321928095,
    "concept_entropy":0,
    "UMASS(coherence)":0.464472346,
    "TFIDF(informativeness)":1.620731563,
    "polarity":0,
    "normalized_text_entropy":2.321928095,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.464472346,
    "normalized_TFIDF":1.620731563,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Think of x++ as a function call that \"returns\" what X was the increment (that's why it's called a post-increment). So the operation order is: 1: cache the value of x before incrementing 2: increment x 3: return the cached value (x before it was incremented) 4: return value is assigned to x"
  },
  {
    "postid":1579,
    "postdate":1285888500,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.20259841,
    "concept_entropy":0,
    "UMASS(coherence)":0.476975145,
    "TFIDF(informativeness)":1.557695926,
    "polarity":2,
    "normalized_text_entropy":4.20259841,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.476975145,
    "normalized_TFIDF":1.557695926,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"When the ++ is on the rhs, the result is returned before the number is incremented.Change to ++x and it would have been fine.Java would have optimised this to perform a single operation (the assignment of x to x) rather than the increment."
  },
  {
    "postid":1580,
    "postdate":1322305680,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.318938339,
    "concept_entropy":0,
    "UMASS(coherence)":0.434005772,
    "TFIDF(informativeness)":2.059267175,
    "polarity":5,
    "normalized_text_entropy":4.318938339,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.434005772,
    "normalized_TFIDF":2.059267175,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"So: Whereas So: Of course the end result is the same as just or on a line by itself."
  },
  {
    "postid":1581,
    "postdate":1285867800,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.271881571,
    "concept_entropy":4.273080943,
    "UMASS(coherence)":0.509471376,
    "TFIDF(informativeness)":4.402442103,
    "polarity":3,
    "normalized_text_entropy":4.271881571,
    "normalized_concept_entropy":4.273080943,
    "normalized_UMASS":0.509471376,
    "normalized_TFIDF":4.402442103,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"because of above statement x never reaches 3;"
  },
  {
    "postid":1582,
    "postdate":1285876500,
    "tag":"0",
    "TFMvalue":0.928571429,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.429599881,
    "concept_entropy":4.384038364,
    "UMASS(coherence)":0.509768255,
    "TFIDF(informativeness)":1.167580935,
    "polarity":1,
    "normalized_text_entropy":4.429599881,
    "normalized_concept_entropy":4.384038364,
    "normalized_UMASS":0.509768255,
    "normalized_TFIDF":1.167580935,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I wonder if there's anything in the Java spec that precisely defines the behavior of this. (The obviously implication of that statement being that I'm too lazy to check.) Note from Tom's bytecode, the key lines are 7, 8 and 11. Line 7 loads x into the computation stack. Line 8 increments x. Line 11 stores the value from the stack back to x. In normal cases where you are not assigning values back to themselves, I don't think there would be any reason why you couldn't load, store, then increment. You would get the same result. Like, suppose you had a more normal case where you wrote something like:z=(x++)+(y++); Whether it said (pseudocode to skip technicalities) or should be irrelevant. Either implementation should be valid, I would think. I'd be extremely cautious about writing code that depends on this behavior. It looks very implementation-dependent, between-the-cracks-in-the-specs to me. The only time it would make a difference is if you did something crazy, like the example here, or if you had two threads running and were dependent on the order of evaluation within the expression."
  },
  {
    "postid":1583,
    "postdate":1285916400,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.339938537,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.274257959,
    "polarity":1,
    "normalized_text_entropy":4.339938537,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.274257959,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I think because in Java ++ has a higher precedence than = (assignment)...Does it?Look at... The same way if you write x=x+1...+ has a higher precedence than = (assignment)"
  },
  {
    "postid":1584,
    "postdate":1285951080,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.36426306,
    "concept_entropy":4.098652005,
    "UMASS(coherence)":0.569623609,
    "TFIDF(informativeness)":2.454623064,
    "polarity":-1,
    "normalized_text_entropy":4.36426306,
    "normalized_concept_entropy":4.098652005,
    "normalized_UMASS":0.569623609,
    "normalized_TFIDF":2.454623064,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"The expression evaluates to. The part affect the value after the, not after the. so is effectively translated into"
  },
  {
    "postid":1585,
    "postdate":1285982160,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.498585067,
    "concept_entropy":4.074643374,
    "UMASS(coherence)":0.513163463,
    "TFIDF(informativeness)":1.456954921,
    "polarity":1,
    "normalized_text_entropy":4.498585067,
    "normalized_concept_entropy":4.074643374,
    "normalized_UMASS":0.513163463,
    "normalized_TFIDF":1.456954921,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Well as far as I can see, the error occurs, due to the assignment overriding the incremented value, with the value prior to incrementation, i.e. it undoes the increment. Specifically, the \"x++\" expression, has the value of 'x' prior to increment as opposed to \"++x\" which has the value of 'x' after incrementation. If you are interested in investigating the bytecode, we will take a look at the three lines in question: 7: iload_1 # Will put the value of the 2nd local variable on the stack8: iinc 1,1 # will increment the 2nd local variable with 1, note that it leaves the stack untouched! 9: istore_1 # Will pop the top of stack and save the value of this element to the 2nd local variable (You can read the effects of each JVM instruction) This is why the above code will loop indefinitely, whereas the version with ++x will not.The bytecode for ++x should look quite different, as far as I remember from the 1.3 Java compiler I wrote a little over a year ago, the bytecode should go something like this: So just swapping the two first lines, changes the semantics so that the value left on the top of stack, after the increment (i.e. the 'value' of the expression) is the value after the increment."
  },
  {
    "postid":1586,
    "postdate":1291980540,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.200435296,
    "concept_entropy":0,
    "UMASS(coherence)":0.496861613,
    "TFIDF(informativeness)":1.230389883,
    "polarity":-1,
    "normalized_text_entropy":4.200435296,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.496861613,
    "normalized_TFIDF":1.230389883,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"The increment operator is applied to the same variable as you are assigning to. That's asking for trouble. I am sure that you can see the value of your x variable while running this program.... that's should make it clear why the loop never ends."
  },
  {
    "postid":1587,
    "postdate":1285919940,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.081567722,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.090181757,
    "polarity":1,
    "normalized_text_entropy":4.081567722,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.090181757,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Before incrementing the value by one, the value is assigned to the variable."
  },
  {
    "postid":1588,
    "postdate":1285953780,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.126570633,
    "concept_entropy":0,
    "UMASS(coherence)":0.468949197,
    "TFIDF(informativeness)":1.501873978,
    "polarity":0,
    "normalized_text_entropy":4.126570633,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.468949197,
    "normalized_TFIDF":1.501873978,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It's happening because it's post incremented. It means that the variable is incremented after the expression is evaluated. x is now 10, but y is 9, the value of x before it was incremented. See more in."
  },
  {
    "postid":1589,
    "postdate":1232881500,
    "tag":"0",
    "TFMvalue":0.826086957,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.207995138,
    "concept_entropy":0,
    "UMASS(coherence)":0.428382015,
    "TFIDF(informativeness)":1.794648632,
    "polarity":3,
    "normalized_text_entropy":4.207995138,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.428382015,
    "normalized_TFIDF":1.794648632,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"Is there a way in Java's for-each loop to find out how often the loop has already been processed? Aside from using using the old and well-known-loop, is the construct the only way to have such a counter available in a for-each loop?"
  },
  {
    "postid":1590,
    "postdate":1232883360,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.397693512,
    "concept_entropy":0,
    "UMASS(coherence)":0.499185172,
    "TFIDF(informativeness)":1.362257144,
    "polarity":0,
    "normalized_text_entropy":4.397693512,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.499185172,
    "normalized_TFIDF":1.362257144,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Yes, you'll have to provide your own counter. The reason for this is that the for-each loop internally does not a counter; it is based on the interface, i.e. it uses an to loop through the \"collection\" - which may not be a collection at all, and may in fact be something not at all based on indexes (such as a linked list)."
  },
  {
    "postid":1591,
    "postdate":1313511060,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.166713009,
    "concept_entropy":0,
    "UMASS(coherence)":0.546357709,
    "TFIDF(informativeness)":1.665472611,
    "polarity":1,
    "normalized_text_entropy":4.166713009,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.546357709,
    "normalized_TFIDF":1.665472611,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Looking through some old company code, I came across a for loop that looks like this: I tried Google but couldn't find any answers. Did I fall asleep in a programming class or is this an unusual loop?"
  },
  {
    "postid":1592,
    "postdate":1313511840,
    "tag":"0",
    "TFMvalue":0.866666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.19095262,
    "concept_entropy":3.787301737,
    "UMASS(coherence)":0.467402266,
    "TFIDF(informativeness)":2.374275734,
    "polarity":2,
    "normalized_text_entropy":4.19095262,
    "normalized_concept_entropy":3.787301737,
    "normalized_UMASS":0.467402266,
    "normalized_TFIDF":2.374275734,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"A loop in java has the following structure -As you can see, there are four statements here -Basically this is how the execution follows - first, when the loop is entered for the first time, the initialization statement is executed once. Then the conditional check is executed to see if it evaluated to true. If it is, then the the loop body is executed, otherwise the loop execution is finished. After that, the Increment statement is executed. Next, the conditional check is executed again, and if it evaluates to true, then again the loop body is executed, then incremental statement is executed, then again the conditional check....you get the picture. Now about your syntax. It has no initialization statement, so nothing will be executed. It's conditional check statement is also empty, so which means it evaluates to true. After that the loop body is executed. Next, since the incremental statement is empty, nothing is executed. Then the conditional check is performed again which will again evaluates to true and then this whole process will again repeat. So you see, this is basically an infinite loop which has no initialization statement, whose conditional check will always evaluates to true, and which has no incremental statement. This is equivalent to -which is another popular loop construct in java. When you use an infinite loop like this, it's important pay attention to the breaking condition as in most cases you can't let a loop to run indefinitely. To break out of these kinds of loops, you can use the statement. The structure is as follows -or"
  },
  {
    "postid":1593,
    "postdate":1313511180,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.979816105,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.370088719,
    "TFIDF(informativeness)":0.988458534,
    "polarity":0,
    "normalized_text_entropy":3.979816105,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.370088719,
    "normalized_TFIDF":0.988458534,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"This is the same as: Basically, an alternate syntax for an infinite loop."
  },
  {
    "postid":1594,
    "postdate":1313513400,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.043937189,
    "concept_entropy":0,
    "UMASS(coherence)":0.428011286,
    "TFIDF(informativeness)":1.395795179,
    "polarity":2,
    "normalized_text_entropy":4.043937189,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.428011286,
    "normalized_TFIDF":1.395795179,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"These are all infinite loops"
  },
  {
    "postid":1595,
    "postdate":1313511240,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.117271257,
    "concept_entropy":0,
    "UMASS(coherence)":0.421742517,
    "TFIDF(informativeness)":1.844496819,
    "polarity":1,
    "normalized_text_entropy":4.117271257,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.421742517,
    "normalized_TFIDF":1.844496819,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"This loop has no guard and acts as a while(true) loop. It will loop infinitely until a break."
  },
  {
    "postid":1596,
    "postdate":1313511360,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.081421098,
    "concept_entropy":0,
    "UMASS(coherence)":0.573796703,
    "TFIDF(informativeness)":1.737041874,
    "polarity":2,
    "normalized_text_entropy":4.081421098,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.573796703,
    "normalized_TFIDF":1.737041874,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"It's an infinite loop. The initialization, condition, and increment statements are all optional, so without any of them, this will always loop again (unless a break is hit or some other construct interacts with it). Although I'm unsure about Java, explains how in .Net your empty and a will be compiled to exactly the same thing. I would not be surprised if Java does as well."
  },
  {
    "postid":1597,
    "postdate":1313511660,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.26040655,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.492017184,
    "TFIDF(informativeness)":1.082145555,
    "polarity":0,
    "normalized_text_entropy":4.26040655,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.492017184,
    "normalized_TFIDF":1.082145555,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It's an infinite loop.Not exactly good coding because it isn't intuitive that is would actually compile or not throw a runtime error.Rewriting as would be much more readable to indicate a infinite loop. "
  },
  {
    "postid":1598,
    "postdate":1359407460,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.373666542,
    "concept_entropy":0,
    "UMASS(coherence)":0.809978677,
    "TFIDF(informativeness)":2.076369325,
    "polarity":-1,
    "normalized_text_entropy":4.373666542,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.809978677,
    "normalized_TFIDF":2.076369325,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"I'm doing some research about Java and find this very confusing: This is never ending loop! Anybody has good explanation why such thing happens?"
  },
  {
    "postid":1599,
    "postdate":1359407520,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.268037259,
    "concept_entropy":0,
    "UMASS(coherence)":0.4476631,
    "TFIDF(informativeness)":2.465896766,
    "polarity":1,
    "normalized_text_entropy":4.268037259,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.4476631,
    "normalized_TFIDF":2.465896766,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"The above loop is essentially the same as: - the 3part of your statement -, is evaluated as: - You need to remove the assignment from there, to make it work: - (On OP request from Comments) As far as your issue as specified in the comment is concerned, the result of the following expression: - is obtained as follows: - Let's mark different parts of the second statement: - Now, first the RHS part will be evaluated, and then the final result will be assignmed to. So, let's move ahead. First is evaluated: - Now, since the assignment of to is not done here, the 3rd step is not performed. Now, move to evaluation: - Now, to get the value of, we need to do the last assignment that we left in the evaluation of and, because now is the value being assigned in. For that, we need to replace: - So,, becomes: - Wonder why the replacement is done as and not, as in case of. Take a deep look at part, specially the last assignment: - if you consider to be here, then the above assignment can be broken into these steps: - Now, for the current problem, it is same as: - I hope that makes it clear."
  },
  {
    "postid":1600,
    "postdate":1359407520,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.185311071,
    "concept_entropy":4.182791186,
    "UMASS(coherence)":0.398169728,
    "TFIDF(informativeness)":1.521853669,
    "polarity":0,
    "normalized_text_entropy":4.185311071,
    "normalized_concept_entropy":4.182791186,
    "normalized_UMASS":0.398169728,
    "normalized_TFIDF":1.521853669,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"You're using post-increment:, it means something like this: because: That is why you have the old value. For-loop done right:"
  },
  {
    "postid":1601,
    "postdate":1359407520,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.250809729,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.777204863,
    "polarity":1,
    "normalized_text_entropy":4.250809729,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.777204863,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"because of i=i++"
  },
  {
    "postid":1602,
    "postdate":1359407520,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.094615583,
    "concept_entropy":0,
    "UMASS(coherence)":0.528369474,
    "TFIDF(informativeness)":1.999625962,
    "polarity":2,
    "normalized_text_entropy":4.094615583,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.528369474,
    "normalized_TFIDF":1.999625962,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"i++ will report the value of i, and THEN increment. This also means that you don't need to set i equal to i++, just change to"
  },
  {
    "postid":1603,
    "postdate":1377284400,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.346723183,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.481709613,
    "TFIDF(informativeness)":2.315170815,
    "polarity":1,
    "normalized_text_entropy":4.346723183,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.481709613,
    "normalized_TFIDF":2.315170815,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Being somewhat new to the Java language I'm trying to familiarize myself with all the ways (or at least the non-pathological ones) that one might iterate through a list (or perhaps other collections) and the advantages or disadvantages of each.Given a object, I know of the following ways to loop through all elements:Added ListIteratorAdded \"functional-style\" solution (thanks Dave Newton) What other ways are there, if any? I feel like this has got to be a duplicate, but I haven't been able to find what I'm looking for, so I apologize for this question potentially being redundant.(BTW, my interest does not stem at all from a desire to; I just want to know what forms are available to me as a developer.)Moved ListIterationExample.java to a suggested answer"
  },
  {
    "postid":1604,
    "postdate":1377286140,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.328924699,
    "concept_entropy":0,
    "UMASS(coherence)":1,
    "TFIDF(informativeness)":3.446520942,
    "polarity":-8,
    "normalized_text_entropy":4.328924699,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":3.446520942,
    "normalized_polarity":-8,
    "tagtext":"loops",
    "posttext":"The three forms of looping are nearly identical. The enhanced loop: is, according to the, in effect to the explicit use of an iterator with a traditional loop. In the third case, you can only modify the list contents by removing the current element, and then only if you do it through the method of the iterator itself. With index-based iteration, you are free to modify the list in any way. However, adding or removing elements that come before the current index risks having your loop skipping elements or processing the same element multiple times; you need to adjust the loop index properly when you make such changes. In all cases, is a reference to the actual list element. None of the iteration methods makes a copy of anything in the list. Changes to the internal state of will always be seen in the internal state of the corresponding element on the list. Essentially, there only two ways to iterate over a list: by using an index or by using an iterator. The enhanced for loop is just a syntactic shortcut introduced in Java 5 to avoid the tedium of explicitly defining an iterator. For both styles, you can come up with essentially trivial variations using, or blocks, but they all boil down to the same thing (or, rather, two things). EDIT: As @iX3 points out in a comment, you can use a to set the current element of a list as you are iterating. You would need to use instead of to initialize the loop variable (which, obviously, would have to be declared a rather than an)."
  },
  {
    "postid":1605,
    "postdate":1377285720,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.219434308,
    "concept_entropy":4.28241503,
    "UMASS(coherence)":0.627511094,
    "TFIDF(informativeness)":1.761984825,
    "polarity":0,
    "normalized_text_entropy":4.219434308,
    "normalized_concept_entropy":4.28241503,
    "normalized_UMASS":0.627511094,
    "normalized_TFIDF":1.761984825,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Example of each kind listed in the question:"
  },
  {
    "postid":1606,
    "postdate":1377285480,
    "tag":"0",
    "TFMvalue":0.928571429,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.165639881,
    "concept_entropy":4.199084272,
    "UMASS(coherence)":0.564694503,
    "TFIDF(informativeness)":1.968383493,
    "polarity":0,
    "normalized_text_entropy":4.165639881,
    "normalized_concept_entropy":4.199084272,
    "normalized_UMASS":0.564694503,
    "normalized_TFIDF":1.968383493,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I don't know what you consider pathological, but let me provide some alternatives you could have not seen before: Or its recursive version: Also, a recursive version of the classical : I mention them because you are \"somewhat new to Java\" and this could be interesting."
  },
  {
    "postid":1607,
    "postdate":1396803660,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.260613099,
    "concept_entropy":0,
    "UMASS(coherence)":0.385926412,
    "TFIDF(informativeness)":0.96621078,
    "polarity":0,
    "normalized_text_entropy":4.260613099,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.385926412,
    "normalized_TFIDF":0.96621078,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"A JDK8-style iteration:"
  },
  {
    "postid":1608,
    "postdate":1377284820,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.39200781,
    "concept_entropy":4.182633367,
    "UMASS(coherence)":0.527879634,
    "TFIDF(informativeness)":1.633283661,
    "polarity":3,
    "normalized_text_entropy":4.39200781,
    "normalized_concept_entropy":4.182633367,
    "normalized_UMASS":0.527879634,
    "normalized_TFIDF":1.633283661,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"You could always switch out the first and third examples with a while loop and a little more code. This gives you the advantage of being able to use the do-while: Of course, this kind of thing might cause a NullPointerException if the list.size() returns 0, becuase it always gets executed at least once. This can be fixed by testing if element is null before using its attributes / methods tho. Still, it's a lot simpler and easier to use the for loop"
  },
  {
    "postid":1609,
    "postdate":1291769820,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.253660007,
    "concept_entropy":0,
    "UMASS(coherence)":0.578512304,
    "TFIDF(informativeness)":0.767107115,
    "polarity":0,
    "normalized_text_entropy":4.253660007,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.578512304,
    "normalized_TFIDF":0.767107115,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It seems like the cool way of looping in C# and Java is to use foreach instead of C style for loops.Is there a reason why I should prefer this style over the C style? I'm particularly interested in these two cases, but please address as many cases as you need to explain your points."
  },
  {
    "postid":1610,
    "postdate":1291770120,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.409360799,
    "concept_entropy":0,
    "UMASS(coherence)":0.559477245,
    "TFIDF(informativeness)":0.816495429,
    "polarity":-2,
    "normalized_text_entropy":4.409360799,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.559477245,
    "normalized_TFIDF":0.816495429,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"Two major reasons I can think of are: 1) It abstracts away from the underlying container type. This means, for example, that you don't have to change the code that loops over all the items in the container when you change the container -- you're specifying the of \"do this for every item in the container\", not the. 2) It eliminates the possibility of off-by-one errors. In terms of performing an operation on each item in a list, it's intuitive to just say: It perfectly expresses the intent to the reader, as opposed to manually doing stuff with iterators. Ditto for searching for items."
  },
  {
    "postid":1611,
    "postdate":1291770780,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":17,
    "Normalized_count":0.283333333,
    "text_entropy":4.282301308,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.485234536,
    "TFIDF(informativeness)":1.27715543,
    "polarity":0,
    "normalized_text_entropy":4.282301308,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.485234536,
    "normalized_TFIDF":1.27715543,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Imagine that you're the head chef for a restaurant, and you're all preparing a huge omelette for a buffet. You hand a carton of a dozen eggs to each of two of the kitchen staff, and tell them to get cracking, literally. The first one sets up a bowl, opens the crate, grabs each egg in turn - from left to right across the top row, then the bottom row - breaking it against the side of the bowl and then emptying it into the bowl. Eventually he runs out of eggs. A job well done. The second one sets up a bowl, opens the crate, and then dashes off to get a piece of paper and a pen. He writes the numbers 0 through 11 next to the compartments of the egg carton, and the number 0 on the paper. He looks at the number on the paper, finds the compartment labelled 0, removes the egg and cracks it into the bowl. He looks at the 0 on the paper again, thinks \"0 + 1 = 1\", crosses out the 0 and writes 1 on the paper. He grabs the egg from compartment 1 and cracks it. And so on, until the number 12 is on the paper and he knows (without looking!) that there are no more eggs. A job well done. You'd think the second guy was a bit messed in the head, right? The point of working in a high-level language is to avoid having to describe things in a computer's terms, and to be able to describe them in your own terms. The higher-level the language, the more true this is. Incrementing a counter in a loop is a distraction from what you really want to do: process each element. Further to that, linked-list type structures can't be processed efficiently by incrementing a counter and indexing in: \"indexing\" means starting over counting from the beginning. In C, we can process a linked list that we made ourselves by using a pointer for the loop \"counter\" and dereferencing it. We can do this in modern C++ (and to an extent in C# and Java) using \"iterators\", but this still suffers from the indirectness problem. Finally, some languages are high-enough level that the idea of actually to \"perform an operation on each item in a list\" or \"search for an item in a list\" is appalling (in the same way that the head chef shouldn't have to tell the first kitchen staff member how to ensure that all the eggs are cracked). Functions are provided that set up that loop structure, and you tell them - via a higher-order function, or perhaps a comparison value, in the searching case - what to do within the loop. (In fact, you can do these things in C++, although the interfaces are somewhat clumsy.)"
  },
  {
    "postid":1612,
    "postdate":1291770060,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.426174071,
    "concept_entropy":4.430063563,
    "UMASS(coherence)":0.719534015,
    "TFIDF(informativeness)":1.302286698,
    "polarity":0,
    "normalized_text_entropy":4.426174071,
    "normalized_concept_entropy":4.430063563,
    "normalized_UMASS":0.719534015,
    "normalized_TFIDF":1.302286698,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1613,
    "postdate":1291770120,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.213146423,
    "concept_entropy":0,
    "UMASS(coherence)":0.436466564,
    "TFIDF(informativeness)":1.264447631,
    "polarity":0,
    "normalized_text_entropy":4.213146423,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.436466564,
    "normalized_TFIDF":1.264447631,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"One benefit for me is that it's less easy to make mistakes such as UPDATE:This is one way the bug happens. I make a sum and then decide to aggregate it more. So I wrap the loop in another. Compile fails, of course, so we hand edit There are now at least TWO mistakes in the code (and more if we've muddled maxi and maxj ) which will only be detected by runtime errors. And if you don't write tests... and it's a rare piece of code - this will bite someone ELSE - badly. That is why it's a good idea to extract the inner loop into a method: and it's more readable."
  },
  {
    "postid":1614,
    "postdate":1291770300,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.25343695,
    "concept_entropy":0,
    "UMASS(coherence)":0.485912801,
    "TFIDF(informativeness)":1.395179735,
    "polarity":2,
    "normalized_text_entropy":4.25343695,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.485912801,
    "normalized_TFIDF":1.395179735,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":" will perform identically to a in all scenarios[1], including straightforward ones such as you describe. However, has certain non-performance-related advantages over: So as we see, is \"better\" to use in situations. That said, if you need the value of for other purposes, or if you are handling a data structure that you know is an array (and there is an actual specific reason for it being an array), the increased functionality that the more down-to-the-metal offers will be the way to go. [1] \"In all scenarios\" really means \"all scenarios where the collection is friendly to being iterated\", which would actually be \"most scenarios\" (see comments below). I really think that an iteration scenario involving an iteration-unfriendly collection would have to be engineered, however."
  },
  {
    "postid":1615,
    "postdate":1291786200,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":18,
    "Normalized_count":0.3,
    "text_entropy":4.152474976,
    "concept_entropy":3.985064131,
    "UMASS(coherence)":0.400034877,
    "TFIDF(informativeness)":2.235936368,
    "polarity":3,
    "normalized_text_entropy":4.152474976,
    "normalized_concept_entropy":3.985064131,
    "normalized_UMASS":0.400034877,
    "normalized_TFIDF":2.235936368,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"You should probably consider also LINQ if you are targeting C# as a language, since this is another logical way to do loops. By do you mean modify it in place in the list, or simply do something with the item (e.g. print it, accumulate it, modify it, etc.)? I suspect it is the latter, since in C# won't allow you to modify the collection you are looping over, or at least not in a convenient way... Here are two simple constructs, first using and then using, which visit all strings in a list and turn them into uppercase strings: (note that using the end condition instead of with some precomputer constant is considered a good practice in .NET, since the compiler would anyway have to check for the upper bound when is invoked in the loop; if my understanding is correct, the compiler is able in some circumstances to optimize away the upper bound check it would normally have done). Here is the equivalent: Note: basically, the construct can iterate over any or in C#, not just over arrays or lists. The number of elements in the collection might therefore not be known beforehand, or might even be infinite (in which case you certainly would have to include some termination condition in your loop, or it won't exit). Here are a few equivalent solutions I can think of, expressed using C# LINQ (and which introduces the concept of a, basically an inline function taking an and returning in the following examples): Or with the list populated by its constructor: Or the same using the function: Or still the same with type inference: or if you don't mind getting the result as an (an enumerable collection of strings), you could drop the: Or maybe another one with the C# SQL-like and keywords, which is fully equivalent: LINQ is very expressive and very often, I feel that the code is more readable than a plain loop. Your second question, can also be very conveniently be implemented using LINQ. Here is an example of a loop: Here is the straightforward LINQ equivalent: or with the query syntax: The enumeration is only executed, which means that effectively, the list will only be iterated until the condition is met, when invoking the method on it. I hope this brings some more context to the or debate, at least in the .NET world."
  },
  {
    "postid":1616,
    "postdate":1291770720,
    "tag":"0",
    "TFMvalue":0.733333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.203057975,
    "concept_entropy":0,
    "UMASS(coherence)":0.446784595,
    "TFIDF(informativeness)":2.175920968,
    "polarity":0,
    "normalized_text_entropy":4.203057975,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.446784595,
    "normalized_TFIDF":2.175920968,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"As Stuart Golodetz answered, it's an abstraction.If you're only using as an index, as opposed to using the value of for some other purpose likethen there's no need to know the current value of, and being able to just leads to the possibility of errors: As Andrew Koenig says, \"Abstraction is selective ignorance\"; if you don't need to know the details of how you iterate some collection, then find a way to ignore those details, and you'll write more robust code."
  },
  {
    "postid":1617,
    "postdate":1291770300,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.272574865,
    "concept_entropy":0,
    "UMASS(coherence)":0.469545344,
    "TFIDF(informativeness)":1.417370733,
    "polarity":0,
    "normalized_text_entropy":4.272574865,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.469545344,
    "normalized_TFIDF":1.417370733,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Reasons to use foreach: Reasons to use: The two cases you list in your question are effectively identical when using either loop -- in the first, you just iterate all the way to the end of the list, and in the second you once you have found the item you are looking for. Just to explain further, this loop: is syntactic sugar for:"
  },
  {
    "postid":1618,
    "postdate":1291770180,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.211359594,
    "concept_entropy":0,
    "UMASS(coherence)":0.467202701,
    "TFIDF(informativeness)":2.54052443,
    "polarity":3,
    "normalized_text_entropy":4.211359594,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.467202701,
    "normalized_TFIDF":2.54052443,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"If you are iterating over a collection that implements IEnumerable, it is more natural to use because the next member in the iteration is assigned at the same time that the test for reaching the end is done.E.g., is more straightforward than You can also use a loop in your class's own implementation of IEnumerable.Simply have your GetEnumerator() implementation use the C# keyword in the body of your loop:"
  },
  {
    "postid":1619,
    "postdate":1291770360,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.169416445,
    "concept_entropy":0,
    "UMASS(coherence)":0.426158796,
    "TFIDF(informativeness)":1.303853408,
    "polarity":-1,
    "normalized_text_entropy":4.169416445,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.426158796,
    "normalized_TFIDF":1.303853408,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":" has both of the loop types you have pointed to. You can use either of the for loop variants depending on your need. Your need can be like this In the first case you should use the classic (c style) for loop. but in the second case you should use the loop.The loop can be used in the first case also. but in that case you need to maintain your own index."
  },
  {
    "postid":1620,
    "postdate":1291770720,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.524151772,
    "concept_entropy":0,
    "UMASS(coherence)":0.541099446,
    "TFIDF(informativeness)":1.323269261,
    "polarity":1,
    "normalized_text_entropy":4.524151772,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.541099446,
    "normalized_TFIDF":1.323269261,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"If you can do what you need with then use it; if not -- for example, if you need the index variable itself for some reason -- then use. Simple! (And your two scenarios are equally possible with either or.)"
  },
  {
    "postid":1621,
    "postdate":1291781220,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.231780239,
    "concept_entropy":0,
    "UMASS(coherence)":0.476482573,
    "TFIDF(informativeness)":1.349897855,
    "polarity":2,
    "normalized_text_entropy":4.231780239,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.476482573,
    "normalized_TFIDF":1.349897855,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"one reason not to use foreach at least in java is that it will create an iterator objectwhich will eventually be garbage collected. Thus if you are trying to write code that avoids garbage collection it is better to avoid foreach. However, I believe it is ok for pure arrays because it doesn't create an iterator."
  },
  {
    "postid":1622,
    "postdate":1291780680,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.219556982,
    "concept_entropy":0,
    "UMASS(coherence)":0.522513334,
    "TFIDF(informativeness)":1.674796405,
    "polarity":0,
    "normalized_text_entropy":4.219556982,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.522513334,
    "normalized_TFIDF":1.674796405,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I could think of several reasons Note that if you are searching for an item in the list with for each, you most likely are doing it wrongly. Consider using or to skip the searching all together. Assuming that programmer want's to use as using iterators, there exists a common bug of skipping elements. So in that scene it is more safer."
  },
  {
    "postid":1623,
    "postdate":1291794780,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.169416445,
    "concept_entropy":0,
    "UMASS(coherence)":0.426158796,
    "TFIDF(informativeness)":1.303853408,
    "polarity":-1,
    "normalized_text_entropy":4.169416445,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.426158796,
    "normalized_TFIDF":1.303853408,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Talking about clean code, a foreach statement is much quicker to read than a for statement! Linq (in C#) can do much the same, but novice developers tend to have a hard time reading them! "
  },
  {
    "postid":1624,
    "postdate":1291772700,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.230874911,
    "concept_entropy":0,
    "UMASS(coherence)":0.458326313,
    "TFIDF(informativeness)":2.464924599,
    "polarity":0,
    "normalized_text_entropy":4.230874911,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.458326313,
    "normalized_TFIDF":2.464924599,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It looks like most items are covered... the following are some extra notes that I do not see mentioned regarding your specific questions. These are hard rules as opposed to style preferences one way or the other: In a loop, you can not change the value of the iteration variable, so if you are looking to change the value of a specific item in your list you have to use. It is also worth noting that the \"cool\" way is now to use LINQ; there are plenty of resources you can search for if you are interested."
  },
  {
    "postid":1625,
    "postdate":1295512020,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.054841886,
    "concept_entropy":0,
    "UMASS(coherence)":0.410302779,
    "TFIDF(informativeness)":0.992832247,
    "polarity":1,
    "normalized_text_entropy":4.054841886,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.410302779,
    "normalized_TFIDF":0.992832247,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"foreach is order of magnitude slower for implementation heavy collection.I have proof. These are my findings I used the following simple profiler to test their performance And I got the following results"
  },
  {
    "postid":1626,
    "postdate":1291777920,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.008230625,
    "concept_entropy":0,
    "UMASS(coherence)":0.441552439,
    "TFIDF(informativeness)":1.279729775,
    "polarity":1,
    "normalized_text_entropy":4.008230625,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.441552439,
    "normalized_TFIDF":1.279729775,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"A also notifies you if the collection you're enumerating through changes (i.e. you HAD 7 items in your collection...until another operation on a separate thread removed one and now you only have 6 @_@)"
  },
  {
    "postid":1627,
    "postdate":1291803000,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.195992085,
    "concept_entropy":4.4457533,
    "UMASS(coherence)":0.525111419,
    "TFIDF(informativeness)":3.485499127,
    "polarity":0,
    "normalized_text_entropy":4.195992085,
    "normalized_concept_entropy":4.4457533,
    "normalized_UMASS":0.525111419,
    "normalized_TFIDF":3.485499127,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Just wanted to add that whoever thinks that foreach gets translated into for and therefore has no performance difference is dead wrong. There are many things that happen under the hood, i.e. the enumeration of the object type which is NOT in a simple for loop. It looks more like an iterator loop: which is significantly different than a simple for loop. If you dont understand why, then lookup vtables. Furthermore, who knows whats in the hasNext function? For all we know it could be: Exageration aside, there are function of unknown implementation and efficiency being called. Since compilers dont optimize accross function boundaries, there is NO optimization happening here, just your simple vtable lookup and function call. This is not just theory, in practice, i have seen significant speedups by switching from foreach to for on the standard C# ArrayList. To be fair, it was an arraylist with about 30,000 items, but still."
  },
  {
    "postid":1628,
    "postdate":1220639520,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.376179536,
    "concept_entropy":4.457705701,
    "UMASS(coherence)":0.518904456,
    "TFIDF(informativeness)":3.263721679,
    "polarity":5,
    "normalized_text_entropy":4.376179536,
    "normalized_concept_entropy":4.457705701,
    "normalized_UMASS":0.518904456,
    "normalized_TFIDF":3.263721679,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"Today I had a coworker suggest I refactor my code to use a label statement to control flow through 2 nested for loops I had created. I've never used them before because personally I think they decrease the readability of a program. I am willing to change my mind about using them if the argument is solid enough however. What are people's opinions on label statements?"
  },
  {
    "postid":1629,
    "postdate":1220641380,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.212691047,
    "concept_entropy":0,
    "UMASS(coherence)":0.547713092,
    "TFIDF(informativeness)":1.759872418,
    "polarity":0,
    "normalized_text_entropy":4.212691047,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.547713092,
    "normalized_TFIDF":1.759872418,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Many algorithms are expressed more easily if you can jump across two loops (or a loop containing a switch statement). Don't feel bad about it. On the other hand, it may indicate an overly complex solution. So stand back and look at the problem. Some people prefer a \"single entry, single exit\" approach to all loops. That is to say avoiding break (and continue) and early return for loops altogether. This may result in some duplicate code. What I would strongly avoid doing is introducing auxilary variables. Hiding control-flow within state adds to confusion. Splitting labeled loops into two methods may well be difficult. Exceptions are probably too heavyweight. Try a single entry, single exit approach."
  },
  {
    "postid":1630,
    "postdate":1220641380,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.272227868,
    "concept_entropy":0,
    "UMASS(coherence)":0.596437675,
    "TFIDF(informativeness)":4.20315609,
    "polarity":4,
    "normalized_text_entropy":4.272227868,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.596437675,
    "normalized_TFIDF":4.20315609,
    "normalized_polarity":4,
    "tagtext":"loops",
    "posttext":"Further to labels being like goto's: Use them sparingly, and only when they make your code more understandable faster,e.g., If you are in big loops six levels deep and you encounter a condition that makes the rest of the loop pointless to complete, there's no sense in having 6 extra trap doors in your condition statements to exit out the loop early. goto's aren't evil, it's just that sometimes people use them in bad ways. The same could be said for labels."
  },
  {
    "postid":1631,
    "postdate":1233006420,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.12021371,
    "concept_entropy":0,
    "UMASS(coherence)":0.443888981,
    "TFIDF(informativeness)":1.439248451,
    "polarity":2,
    "normalized_text_entropy":4.12021371,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.443888981,
    "normalized_TFIDF":1.439248451,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"There are few occasions when you need labels and they can be confusing because they are rarely used. However if you need to use one then use one. BTW: this compiles and runs."
  },
  {
    "postid":1632,
    "postdate":1220639880,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.954966799,
    "concept_entropy":4.280201146,
    "UMASS(coherence)":0.329376615,
    "TFIDF(informativeness)":1.029692711,
    "polarity":0,
    "normalized_text_entropy":3.954966799,
    "normalized_concept_entropy":4.280201146,
    "normalized_UMASS":0.329376615,
    "normalized_TFIDF":1.029692711,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I'm curious to hear what your alternative to labels is.I think this is pretty much going to boil down to the argument of \"return as early as possible\" vs. \"use a variable to hold the return value, and only return at the end.\" Labels are pretty standard when you have nested loops.The only way they really decrease readability is when another developer has never seen them before and doesn't understand what they mean."
  },
  {
    "postid":1633,
    "postdate":1220649420,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.214272927,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.516223734,
    "TFIDF(informativeness)":2.211395986,
    "polarity":6,
    "normalized_text_entropy":4.214272927,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.516223734,
    "normalized_TFIDF":2.211395986,
    "normalized_polarity":6,
    "tagtext":"loops",
    "posttext":"I've never seen labels used \"in the wild\" in Java code. If you really want to break across nested loops, see if you can refactor your method so that an early return statement does what you want. Technically, I guess there's not much difference between an early return and a label. Practically, though, almost every Java developer has seen an early return and knows what it does. I'd guess many developers would at least be surprised by a label, and probably be confused. I was taught the single entry / single exit orthodoxy in school, but I've since come to appreciate early return statements and breaking out of loops as a way to simplify code and make it clearer."
  },
  {
    "postid":1634,
    "postdate":1222296240,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.884600663,
    "concept_entropy":0,
    "UMASS(coherence)":0.396184004,
    "TFIDF(informativeness)":1.276621575,
    "polarity":-2,
    "normalized_text_entropy":3.884600663,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.396184004,
    "normalized_TFIDF":1.276621575,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"I think with the new for-each loop, the label can be really clear. For example: I think that looks really clear by having your label the same as your variable in the new for-each.In fact, maybe Java should evil and add implicit labels for-each variables heh"
  },
  {
    "postid":1635,
    "postdate":1271778060,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.316967297,
    "concept_entropy":4.520920784,
    "UMASS(coherence)":0.388726939,
    "TFIDF(informativeness)":1.619273895,
    "polarity":-1,
    "normalized_text_entropy":4.316967297,
    "normalized_concept_entropy":4.520920784,
    "normalized_UMASS":0.388726939,
    "normalized_TFIDF":1.619273895,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"I have use a Java labeled loop for an implementation of a Sieve method to find prime numbers (done for one of the project Euler math problems) which made it 10x faster compared to nested loops. Eg if(certain condition) go back to outer loop. I asked a C++ programmer how bad labeled loops are, he said he would use them sparingly, but they can occasionally come in handy. For example, if you have 3 nested loops and for certain conditions you want to go back to the outermost loop. So they have their uses, it depends on the problem you were trying to solve. "
  },
  {
    "postid":1636,
    "postdate":1220640180,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.257197335,
    "concept_entropy":0,
    "UMASS(coherence)":0.47166937,
    "TFIDF(informativeness)":2.301781918,
    "polarity":-2,
    "normalized_text_entropy":4.257197335,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.47166937,
    "normalized_TFIDF":2.301781918,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"I never use labels in my code. I prefer to create a guard and initialize it to or other unusual value. This guard is often a result object. I haven't seen any of my coworkers using labels, nor found any in our repository. It really depends on your style of coding. In my opinion using labels would decrease the readability as it's not a common construct and usually it's not used in Java. "
  },
  {
    "postid":1637,
    "postdate":1232972760,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.120992707,
    "concept_entropy":0,
    "UMASS(coherence)":0.60938743,
    "TFIDF(informativeness)":1.079574087,
    "polarity":0,
    "normalized_text_entropy":4.120992707,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.60938743,
    "normalized_TFIDF":1.079574087,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I'd argue in favour of them in some locations, I found them particularly useful in this example:"
  },
  {
    "postid":1638,
    "postdate":1289802420,
    "tag":"0",
    "TFMvalue":0.9375,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.510685788,
    "TFIDF(informativeness)":1.554394662,
    "polarity":5,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.510685788,
    "normalized_TFIDF":1.554394662,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"All, While going through some of the files in Java API, I noticed many instances where the looping counter is being decremented rather than increment. i.e. in and loops in class. Though this might be trivial, is there any significance for decrementing the counter rather than increment?"
  },
  {
    "postid":1639,
    "postdate":1289804820,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":3.972422551,
    "concept_entropy":0,
    "UMASS(coherence)":0.61502148,
    "TFIDF(informativeness)":1.207150668,
    "polarity":0,
    "normalized_text_entropy":3.972422551,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.61502148,
    "normalized_TFIDF":1.207150668,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I've compiled two simple loops with eclipse 3.6 (java 6) and looked at the byte code whether we have some differences. Here's the code: And this is the bytecode: The increment/decrement operation should make no difference, it's either or. The main difference in this typical(!) example is that in the first example we ( ), in the second we ( ). And the comaprision is done in each iteration. So there is any (slight) performance gain, I think it's because it's less costly to compare with 0 then to compare with other values. So I guess it's not incrementing/decrementing that makes the difference but the. So if you're to do some micro-optimization on source code level, try to write your loops in a way that you compare with zero, otherwise keep it as readable as possible (and incrementing is to understand): Yesterday I did a very basic test - just created a 2000x2000 array and populated the cells based on calculations with the cell indices, once counting from for both rows and cells, another time backwards from. I wasn't surprised that both scenarios had a similiar performance (185..210 ms on my machine).So, there is a difference on byte code level (eclipse 3.6) but, hey, we're in 2010 now, it doesn't seem to make a significant difference nowadays. So again, and using Stephens words, \"don't waste your time\" with this kind of optimization. Keep the code readable and understandable."
  },
  {
    "postid":1640,
    "postdate":1289804040,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.227650541,
    "concept_entropy":0,
    "UMASS(coherence)":0.486213239,
    "TFIDF(informativeness)":1.437358286,
    "polarity":2,
    "normalized_text_entropy":4.227650541,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.486213239,
    "normalized_TFIDF":1.437358286,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"When in doubt, benchmark. With the following JVM: Has the following output (ran it multiple times to make sure the JVM was loaded and to make sure the numbers settled down a little). These all come extremely close to one another and I have a feeling that any discrepancy is a fault of the JVM loading some code at some points and not others, or a background task happening, or simply falling over and getting rounded down on a millisecond boundary. While at one point (early days of Java) there might have been some performance voodoo to be had, it seems to me that that is no longer the case. Feel free to try running/modifying the code to see for yourself."
  },
  {
    "postid":1641,
    "postdate":1289804760,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.250872038,
    "concept_entropy":4.474425946,
    "UMASS(coherence)":0.523956042,
    "TFIDF(informativeness)":2.087741146,
    "polarity":2,
    "normalized_text_entropy":4.250872038,
    "normalized_concept_entropy":4.474425946,
    "normalized_UMASS":0.523956042,
    "normalized_TFIDF":2.087741146,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"It is possible that this is a result of Sun engineers doing a whole lot of profiling and micro-optimization, and those examples that you found are the result of that.It is also possible that they are the result of Sun engineers \"optimizing\" based on deep knowledge of the JIT compilers ... or based on shallow / incorrect knowledge / voodoo thinking.It is possible that these sequences: Either way,, unless thorough profiling with the latest JVMs demonstrates that: And even then, you find that your carefully hand optimized code is less than optimal on other platforms ... and that you need to repeat the process all over again. These days, it is generally recognized that the best first strategy is to write simple code and leave optimization to the JIT compiler.Writing complicated code (such as loops that run in reverse) may actually foil the JIT compiler's attempts to optimize."
  },
  {
    "postid":1642,
    "postdate":1342978920,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.520277402,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.394407233,
    "TFIDF(informativeness)":1.687377635,
    "polarity":2,
    "normalized_text_entropy":4.520277402,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.394407233,
    "normalized_TFIDF":1.687377635,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"The code in the following snippet works just fine. It counts the number of objects created using a static field of type which is. It displays the following output. The only question is that when I remove the pair of curly braces from the above loop (see the commented loop), a compile-time error is issued indicatingWhy in this particular situation, a pair of braces is even though the loop contains only?"
  },
  {
    "postid":1643,
    "postdate":1342979040,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.271501586,
    "concept_entropy":0,
    "UMASS(coherence)":0.437117123,
    "TFIDF(informativeness)":1.551251128,
    "polarity":1,
    "normalized_text_entropy":4.271501586,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.437117123,
    "normalized_TFIDF":1.551251128,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"When you declare a variable (in this case): it doesn't count as a statement, even if it has side-effects. For it to be a proper statement, you should just do So why is allowed? is a block of code, and count as a statement. In this case the variable be used after the declaration, but before the closing brace. Some compilers ignore the fact that it's indeed not used, other compilers emit warnings regarding this."
  },
  {
    "postid":1644,
    "postdate":1342979760,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.405858868,
    "concept_entropy":4.365336764,
    "UMASS(coherence)":0.64551763,
    "TFIDF(informativeness)":1.31335438,
    "polarity":1,
    "normalized_text_entropy":4.405858868,
    "normalized_concept_entropy":4.365336764,
    "normalized_UMASS":0.64551763,
    "normalized_TFIDF":1.31335438,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"It can make sense to create a one-line block with a new statement. What doesn't make sense is to save a reference to a just created object inside a one-line block, because you can't accessvariable main from outside the for scope. Perhaps (just my guess) the compiler forces you to type the brackets explicitly because holding a reference doesn't make sense in that case, with the hope you become aware of the useless reference."
  },
  {
    "postid":1645,
    "postdate":1343070300,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.27980307,
    "concept_entropy":4.579559879,
    "UMASS(coherence)":0.482246404,
    "TFIDF(informativeness)":1.323812464,
    "polarity":2,
    "normalized_text_entropy":4.27980307,
    "normalized_concept_entropy":4.579559879,
    "normalized_UMASS":0.482246404,
    "normalized_TFIDF":1.323812464,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":" is defined as follows.are defined as follows.are defined as follows. According to the specification, (look at the block section) is invalid, if it's not declared within a block. Therefore, the following loop reports a compile-time error \" \" as you mentioned in your question unless you use a pair of braces."
  },
  {
    "postid":1646,
    "postdate":1317990720,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.270885111,
    "concept_entropy":4.128052303,
    "UMASS(coherence)":0.533820195,
    "TFIDF(informativeness)":1.186389819,
    "polarity":0,
    "normalized_text_entropy":4.270885111,
    "normalized_concept_entropy":4.128052303,
    "normalized_UMASS":0.533820195,
    "normalized_TFIDF":1.186389819,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I need to create an array with 100 numbers (1-100) and then calculate how much it all will be (1+2+3+4..+100=sum). I don't want to enter these numbers into the arrays manually, 100 spots would take a while and cost more code. I'm thinking something like using variable++ till 100 and then calculate the sum of it all. Not sure how exactly it would be written. But it's in important that it's in arrays so I can also say later, \"How much is array 55\" and I can could easily see it. Thanks a lot in advance,Michael."
  },
  {
    "postid":1647,
    "postdate":1317990900,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.312972776,
    "concept_entropy":4.042433004,
    "UMASS(coherence)":0.721527977,
    "TFIDF(informativeness)":1.844093894,
    "polarity":-1,
    "normalized_text_entropy":4.312972776,
    "normalized_concept_entropy":4.042433004,
    "normalized_UMASS":0.721527977,
    "normalized_TFIDF":1.844093894,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Here's how:"
  },
  {
    "postid":1648,
    "postdate":1317990900,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.444947452,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.798917996,
    "TFIDF(informativeness)":0.632873513,
    "polarity":1,
    "normalized_text_entropy":4.444947452,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.798917996,
    "normalized_TFIDF":0.632873513,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"if all you want to do is calculate sum of 1,2,3... n then you could use"
  },
  {
    "postid":1649,
    "postdate":1317990900,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.222385949,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.709266882,
    "polarity":0,
    "normalized_text_entropy":4.222385949,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.709266882,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1650,
    "postdate":1317991020,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.26941385,
    "concept_entropy":4.214331881,
    "UMASS(coherence)":0.579176414,
    "TFIDF(informativeness)":1.133459037,
    "polarity":-3,
    "normalized_text_entropy":4.26941385,
    "normalized_concept_entropy":4.214331881,
    "normalized_UMASS":0.579176414,
    "normalized_TFIDF":1.133459037,
    "normalized_polarity":-3,
    "tagtext":"loops",
    "posttext":"I'm not sure what structure you want your resulting array in, but the following code will do what I you're asking for: Gives you an array of the sum at each point in the loop "
  },
  {
    "postid":1651,
    "postdate":1317990900,
    "tag":"0",
    "TFMvalue":0.785714286,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.539040281,
    "concept_entropy":4.471783346,
    "UMASS(coherence)":0.440965789,
    "TFIDF(informativeness)":1.146661877,
    "polarity":1,
    "normalized_text_entropy":4.539040281,
    "normalized_concept_entropy":4.471783346,
    "normalized_UMASS":0.440965789,
    "normalized_TFIDF":1.146661877,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"To populate the array: and then to sum it: or in short, if you want the sum from 1 to: ( ( +1) ) / 2"
  },
  {
    "postid":1652,
    "postdate":1317991020,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.603256309,
    "concept_entropy":0,
    "UMASS(coherence)":0.350007501,
    "TFIDF(informativeness)":2.605402499,
    "polarity":4,
    "normalized_text_entropy":4.603256309,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.350007501,
    "normalized_TFIDF":2.605402499,
    "normalized_polarity":4,
    "tagtext":"loops",
    "posttext":"If your array of numbers always is starting with 1 and ending with X then you could use the following formula:sum = x * (x+1) / 2 from 1 till 100 the sum would be 100 * 101 / 2 = 5050"
  },
  {
    "postid":1653,
    "postdate":1345906680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.577819531,
    "concept_entropy":0,
    "UMASS(coherence)":0,
    "TFIDF(informativeness)":1.098612289,
    "polarity":0,
    "normalized_text_entropy":3.577819531,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0,
    "normalized_TFIDF":1.098612289,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"this is actually the summation of an arithmatic progression with common difference as 1. So this is a special case of sum of natural numbers. Its easy can be done with a single line of code."
  },
  {
    "postid":1654,
    "postdate":1317993780,
    "tag":"0",
    "TFMvalue":0.928571429,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.273146306,
    "concept_entropy":0,
    "UMASS(coherence)":0.645978585,
    "TFIDF(informativeness)":0.768403254,
    "polarity":0,
    "normalized_text_entropy":4.273146306,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.645978585,
    "normalized_TFIDF":0.768403254,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"int[] nums = new int[100]; int sum = 0; // Fill it with numbers using a for-loopfor (int i = 0; i < nums.length; i++) System.out.println(sum);"
  },
  {
    "postid":1655,
    "postdate":1309823100,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.395773989,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.904033671,
    "TFIDF(informativeness)":2.354551659,
    "polarity":5,
    "normalized_text_entropy":4.395773989,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.904033671,
    "normalized_TFIDF":2.354551659,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"I have the following code to method loop throug the sectors of a polar plot, but the method is being called several times, as if it was in a loop. I want to create a series on each sectors of the plot, the sector being defines by the axis tick unit and the angle tick unit. When I comment out the and the for loop for this new series, the problem disappears, making me believe there might be something up with this. This is a continuation of a question postedCan someone please explain to me why it keeps looping? And why the number of series created is not equivalent to the number of sectors on the chart? So, I edited trachGod's example to get implement the. I also made a global variable and added the following code in the chartprogess method: But more series than required are still added. Any help is always much appreciated. The complete code:"
  },
  {
    "postid":1656,
    "postdate":1309883340,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.051462154,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.983087759,
    "polarity":0,
    "normalized_text_entropy":4.051462154,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.983087759,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It looks like you were adding all six spirals on iteration. Here's my variation on your."
  },
  {
    "postid":1657,
    "postdate":1297975560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.191791089,
    "concept_entropy":4.254933984,
    "UMASS(coherence)":0.540273913,
    "TFIDF(informativeness)":1.790852645,
    "polarity":1,
    "normalized_text_entropy":4.191791089,
    "normalized_concept_entropy":4.254933984,
    "normalized_UMASS":0.540273913,
    "normalized_TFIDF":1.790852645,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"The following code will print 2 I would like to know how to get all the indexes of \"n\" (\"guess\") in the string \"bannanas\" The expected result would be: "
  },
  {
    "postid":1658,
    "postdate":1297976400,
    "tag":"0",
    "TFMvalue":0.625,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.158253987,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.770603834,
    "polarity":1,
    "normalized_text_entropy":4.158253987,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.770603834,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"This should print the list of positions without the at the end that Peter Lawrey's solution has. It can also be done as a loop:"
  },
  {
    "postid":1659,
    "postdate":1297975680,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.27737253,
    "concept_entropy":0,
    "UMASS(coherence)":0.61502148,
    "TFIDF(informativeness)":1.012239431,
    "polarity":0,
    "normalized_text_entropy":4.27737253,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.61502148,
    "normalized_TFIDF":1.012239431,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Try the following (Which does not print -1 at the end now!)"
  },
  {
    "postid":1660,
    "postdate":1297975620,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.1122131,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.22279951,
    "polarity":2,
    "normalized_text_entropy":4.1122131,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.22279951,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Result would be used like this : Or as a array :"
  },
  {
    "postid":1661,
    "postdate":1297975860,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.300566207,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.943025859,
    "polarity":0,
    "normalized_text_entropy":4.300566207,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.943025859,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1662,
    "postdate":1314884340,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.263561064,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.690987731,
    "polarity":-3,
    "normalized_text_entropy":4.263561064,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":2.690987731,
    "normalized_polarity":-3,
    "tagtext":"loops",
    "posttext":"I am trying to test the speed of autoboxing and unboxing in Java, but when I try to compare it against an empty loop on a primitive, I noticed one curious thing. This snippet: Every time I run this, it returns the same result: Why does the first two loops always take some time, then the rest just seem to be skipped by the system?it is said that Just-In-Time compilation will be able to optimize this away. But if so, why the first two loops still took some time?"
  },
  {
    "postid":1663,
    "postdate":1314884460,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":16,
    "Normalized_count":0.266666667,
    "text_entropy":4.303190731,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.497477852,
    "TFIDF(informativeness)":1.057761089,
    "polarity":1,
    "normalized_text_entropy":4.303190731,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.497477852,
    "normalized_TFIDF":1.057761089,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"JIT triggers AFTER a certain piece of code has been executed many times.The HotSpot JVM will try to identify \"hot spots\" in your code. Hot spots are pieces of your code that are executed many many times. To do this, the JVM will \"count\" the executions of various instructions, and when it determines a certain piece is executed frequently, it will trigger the JIT. (this is an approximation, but it's easy to understand explained this way). The JIT (Just-In-Time) takes that piece of code, and tries to make it faster. The techniques used by the JIT to make your code run faster are a lot, but the one that most commonly creates confusion are : So, the proper answer to your question is that an empty loop, after being JITed, takes no time to execute .. most probably is not there anymore. Again, there are many other optimizations, but in my experience these are among those that have created most headaches. Moreover, JIT is being improved in any new version of Java, and sometimes it is even a bit different depending on the platform (since it is to some extent platform specific). Optimizations done by the JIT are difficult to understand, because you cannot usually find them using javap and inspecting bytecode, even if in recent versions of Java some of these optimizations have been moved to the compiler directly (for example, since Java 6 the compiler is able to detect and warn about unused local variables and private methods). If you are writing some loops to test something, it is usually good practice to have the loop inside a method, call the method a few times BEFORE timing it, to give it a \"speed up\" round, and then perform the timed loop.This usually triggers the JIT in a simple program like yours, even if there is no guarantee that it will actually trigger (or that it even exists on a certain platform). If you want to get paranoid about JIT or non JIT timing (I did): make a first round, timing each execution of the loop, and wait until the timing stabilize (for example, difference from the average less than 10%), then start with your \"real\" timing."
  },
  {
    "postid":1664,
    "postdate":1314884460,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.249935278,
    "concept_entropy":0,
    "UMASS(coherence)":0.610093372,
    "TFIDF(informativeness)":1.864144213,
    "polarity":0,
    "normalized_text_entropy":4.249935278,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.610093372,
    "normalized_TFIDF":1.864144213,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"The JIT doesn't kick in on a chunk of code until it determines that there is some benefit to doing so. That means the first few passes through some code won't be JITed."
  },
  {
    "postid":1665,
    "postdate":1296239340,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.967861758,
    "concept_entropy":0,
    "UMASS(coherence)":0.522513334,
    "TFIDF(informativeness)":1.493913382,
    "polarity":0,
    "normalized_text_entropy":3.967861758,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.522513334,
    "normalized_TFIDF":1.493913382,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"In java I usually make a for-loop like following: But recently a colleague typed it so: He said the latter would be faster. Is that true?"
  },
  {
    "postid":1666,
    "postdate":1296239460,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.250736051,
    "concept_entropy":4.683242193,
    "UMASS(coherence)":0.478074422,
    "TFIDF(informativeness)":2.903524882,
    "polarity":-5,
    "normalized_text_entropy":4.250736051,
    "normalized_concept_entropy":4.683242193,
    "normalized_UMASS":0.478074422,
    "normalized_TFIDF":2.903524882,
    "normalized_polarity":-5,
    "tagtext":"loops",
    "posttext":"No, it's not true. You could measure the performance by timing each loop for a large number of iterations, but I'm fairly certain they will be the same. The myth came from C where was regarded as faster than because the former can be implemented by incremeting i then returning it. The latter might be implemented by copying the value of i to a temporary variable, incrementing i, then returning the temporary. The first version doesn't need to make the temporary copy and so many people assume that it is faster. However if the expression is used as a statement modern C compilers can optimize the temporary copy away so that there will be no difference in practice."
  },
  {
    "postid":1667,
    "postdate":1296239460,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.29594952,
    "concept_entropy":0,
    "UMASS(coherence)":0.526392512,
    "TFIDF(informativeness)":1.623049572,
    "polarity":3,
    "normalized_text_entropy":4.29594952,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.526392512,
    "normalized_TFIDF":1.623049572,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"For any reasonably capable optimizer, they will be exactly the same.If you aren't sure, look at the output bytecode or profile it."
  },
  {
    "postid":1668,
    "postdate":1380564480,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.270860493,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.619395782,
    "TFIDF(informativeness)":1.09834894,
    "polarity":4,
    "normalized_text_entropy":4.270860493,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.619395782,
    "normalized_TFIDF":1.09834894,
    "normalized_polarity":4,
    "tagtext":"loops",
    "posttext":"This question needed some Java byte code. Consider the following code: Now compile it and disassemble it:and have the same byte code."
  },
  {
    "postid":1669,
    "postdate":1296239460,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.326428808,
    "concept_entropy":4.55279393,
    "UMASS(coherence)":0.464579974,
    "TFIDF(informativeness)":2.110177748,
    "polarity":9,
    "normalized_text_entropy":4.326428808,
    "normalized_concept_entropy":4.55279393,
    "normalized_UMASS":0.464579974,
    "normalized_TFIDF":2.110177748,
    "normalized_polarity":9,
    "tagtext":"loops",
    "posttext":"Even if it is, which I very much doubt, your colleague should really have better things to spend his time learning than how to optimise a loop expression."
  },
  {
    "postid":1670,
    "postdate":1296239520,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.007446372,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.557172807,
    "TFIDF(informativeness)":0.566859045,
    "polarity":0,
    "normalized_text_entropy":4.007446372,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.557172807,
    "normalized_TFIDF":0.566859045,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It will not be any faster. The compiler and JVM with the JIT will make mincemeat of such insignificant differences. You can use the usual loop optimization techniques to get speed benefits, like unrolling, if applicable."
  },
  {
    "postid":1671,
    "postdate":1296244680,
    "tag":"0",
    "TFMvalue":0.818181818,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.88926223,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.434168511,
    "TFIDF(informativeness)":0.691550992,
    "polarity":0,
    "normalized_text_entropy":3.88926223,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.434168511,
    "normalized_TFIDF":0.691550992,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"In Java there should be no difference - any modern compilershould generate the same byte code (just an) in both cases since the result of the increment expression is not being used. There is a third option, still the same byte code :"
  },
  {
    "postid":1672,
    "postdate":1296480120,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.18576047,
    "concept_entropy":4.486115645,
    "UMASS(coherence)":0.667611347,
    "TFIDF(informativeness)":2.469860691,
    "polarity":1,
    "normalized_text_entropy":4.18576047,
    "normalized_concept_entropy":4.486115645,
    "normalized_UMASS":0.667611347,
    "normalized_TFIDF":2.469860691,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"No there will be no difference at all. This came from C++ but even there there would be no difference at all in this case.Where there is a difference is where i is an object. i++ would have to make an additional copy of the object as it has to return the original unchanged value of the item whereas ++i can return the changed object so saves a copy. In c++ with user defined object the cost of a copy can be significant so it's definatly worth remembering. And because of this people tend to use it for int variables too, as it's just as good anyway..."
  },
  {
    "postid":1673,
    "postdate":1365173220,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.055279105,
    "concept_entropy":0,
    "UMASS(coherence)":0.484464654,
    "TFIDF(informativeness)":1.895058436,
    "polarity":0,
    "normalized_text_entropy":4.055279105,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.484464654,
    "normalized_TFIDF":1.895058436,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Decompile with \"javap -c YourClassName\" and see the result and decide from that. This way you see what the compiler actually does at each case, not what you think it does. This way you also see WHY one way is faster than the other."
  },
  {
    "postid":1674,
    "postdate":1296239580,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.301741481,
    "concept_entropy":4.337440972,
    "UMASS(coherence)":0.574028677,
    "TFIDF(informativeness)":1.362440073,
    "polarity":-1,
    "normalized_text_entropy":4.301741481,
    "normalized_concept_entropy":4.337440972,
    "normalized_UMASS":0.574028677,
    "normalized_TFIDF":1.362440073,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Even it one would be faster, in the days of HotSpot. The first thing the JIT does is to optimizations that javac made. After that, everything is left to the JIT to make it fast."
  },
  {
    "postid":1675,
    "postdate":1341909780,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.235867034,
    "concept_entropy":0,
    "UMASS(coherence)":0.527572167,
    "TFIDF(informativeness)":0.961859054,
    "polarity":0,
    "normalized_text_entropy":4.235867034,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.527572167,
    "normalized_TFIDF":0.961859054,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I don't seem to be able to find the answer to this-I need to draw a simple triangle using for loops. I can make a half triangle, but I don't know how to add to my current loop to form a full triangle.Thanks-"
  },
  {
    "postid":1676,
    "postdate":1341910320,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.111399597,
    "concept_entropy":0,
    "UMASS(coherence)":0.517780848,
    "TFIDF(informativeness)":1.351391992,
    "polarity":1,
    "normalized_text_entropy":4.111399597,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.517780848,
    "normalized_TFIDF":1.351391992,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"First of all, you need to make sure you're producing the correct number of symbols. We need to produce 1, 3, 5 et cetera instead of 1, 2, 3. This can be fixed by modifying the counter variables: As you can see, this causes to start at and increase by at each step as long is it is smaller than (i.e.,,,,,). This gives us the correct number of symbols. We then need to fix the indentation level per line. This can be done as follows: Before printing the symbols we print some spaces and the number of spaces varies depending on the line that we are on. That is what the for loop with the variable is for. We can see that iterates over the values,,, and when is, ,, and. This is what we want because the higher in the triangle we are, the more spaces we need to place. The further we get down the triangle, we less spaces we need and the last line of the triangle does not even need spaces at all. "
  },
  {
    "postid":1677,
    "postdate":1341912000,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.867858308,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.518672881,
    "polarity":0,
    "normalized_text_entropy":3.867858308,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.518672881,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"A fun, simple solution:"
  },
  {
    "postid":1678,
    "postdate":1341910260,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.302566683,
    "concept_entropy":0,
    "UMASS(coherence)":0.434029166,
    "TFIDF(informativeness)":2.414451409,
    "polarity":2,
    "normalized_text_entropy":4.302566683,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.434029166,
    "normalized_TFIDF":2.414451409,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Homework question?Well you can modify your original 'right triangle' code to generate an inverted 'right triangle' with spacesSo that'll be like"
  },
  {
    "postid":1679,
    "postdate":1345552980,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.251557422,
    "concept_entropy":0,
    "UMASS(coherence)":0.548529247,
    "TFIDF(informativeness)":1.260021674,
    "polarity":0,
    "normalized_text_entropy":4.251557422,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.548529247,
    "normalized_TFIDF":1.260021674,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I appreciate the OP is new to Java, so methods might be considered \"advanced\", however I think it's worth using this problem to show how you can attack a problem by breaking it into pieces. Let's think about writing a method to print a single line, telling the method which number line it is: We have to print some number of spaces, then some number of stars. Looking at the example, I can see that (if the first row is 0) it's (5-rowNumber) spaces and (2*rowNumber + 1) stars. Let's invent a method that prints the rows of characters for us, and use it: That won't compile until we actually write printSequence(), so let's do that: Now you can printSequence on its own, and you can printTriangleLine on its own. For now you can just try it out by calling those methods directly in... run it and verify (with your eyes) that it outputs: When you get further into programming, you'll want to use a like jUnit. Instead of printing, you'd more likely write things like printTriangleLine to return a String (which you'd print from higher up in your program), and you would automate your testing with commands like: Now we have the pieces we need to draw a triangle. The code we have written is a bit longer than the answers other people have given. But we have been able to test each step, and we have methods that we can use again in other problems. In real life, we have to find the right balance between breaking a problem into too many methods, or too few. I tend to prefer lots of really short methods. For extra credit:"
  },
  {
    "postid":1680,
    "postdate":1373537940,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.408683664,
    "concept_entropy":0,
    "UMASS(coherence)":0.603568624,
    "TFIDF(informativeness)":1.436521251,
    "polarity":0,
    "normalized_text_entropy":4.408683664,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.603568624,
    "normalized_TFIDF":1.436521251,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Try this one in Java"
  },
  {
    "postid":1681,
    "postdate":1384683240,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.425524951,
    "TFIDF(informativeness)":0.820887177,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.425524951,
    "normalized_TFIDF":0.820887177,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"This will answer to your question. uncomment the commented code to display only outer line :) public class TrianglePattern { }"
  },
  {
    "postid":1682,
    "postdate":1341910260,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.248521192,
    "concept_entropy":0,
    "UMASS(coherence)":0.647837371,
    "TFIDF(informativeness)":1.832149432,
    "polarity":-2,
    "normalized_text_entropy":4.248521192,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.647837371,
    "normalized_TFIDF":1.832149432,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1683,
    "postdate":1280139900,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.282332539,
    "concept_entropy":0,
    "UMASS(coherence)":0.552517228,
    "TFIDF(informativeness)":1.797034567,
    "polarity":0,
    "normalized_text_entropy":4.282332539,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.552517228,
    "normalized_TFIDF":1.797034567,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"How can I loop over a class attributes in java dynamically. For eg : is this possible in Java?"
  },
  {
    "postid":1684,
    "postdate":1280140080,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.359248928,
    "concept_entropy":0,
    "UMASS(coherence)":0.714957789,
    "TFIDF(informativeness)":0.742657693,
    "polarity":-1,
    "normalized_text_entropy":4.359248928,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.714957789,
    "normalized_TFIDF":0.742657693,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"There is no linguistic support to do what you're asking for. You can reflectively access the members of a type at run-time using reflection (e.g. with to get an array of), but depending on what you're trying to do, this may not be the best solution. Here's a simple example to show only some of what reflection is capable of doing. The above snippet uses reflection to inspect all the declared fields of; it produces the following output: These are excerpts from the book:"
  },
  {
    "postid":1685,
    "postdate":1280142180,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.235179062,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.46209812,
    "polarity":1,
    "normalized_text_entropy":4.235179062,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.46209812,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Accessing the fields directly is not really good style in java. I would suggest creating getter and setter methods for the fields of your bean and then using then Introspector and BeanInfo classes from the java.beans package."
  },
  {
    "postid":1686,
    "postdate":1280139960,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.495314725,
    "concept_entropy":0,
    "UMASS(coherence)":0.661579661,
    "TFIDF(informativeness)":3.57578697,
    "polarity":6,
    "normalized_text_entropy":4.495314725,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.661579661,
    "normalized_TFIDF":3.57578697,
    "normalized_polarity":6,
    "tagtext":"loops",
    "posttext":"Java has Reflection (java.reflection.*), but I would suggest looking into a library like Apache Beanutils, it will make the process much less hairy than using reflection directly."
  },
  {
    "postid":1687,
    "postdate":1280143680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.045279507,
    "concept_entropy":0,
    "UMASS(coherence)":0.51291869,
    "TFIDF(informativeness)":1.315154334,
    "polarity":0,
    "normalized_text_entropy":4.045279507,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.51291869,
    "normalized_TFIDF":1.315154334,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"While I agree with, there is a more elegant possibility if you use spring. Spring has a class named that offers some very powerful functionality, including, a visitor-style method that lets you iterate over a classes fields using a callback object like this: But here's a warning: the class is labeled as \"for internal use only\", which is a pity if you ask me"
  },
  {
    "postid":1688,
    "postdate":1357073520,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.499091768,
    "concept_entropy":0,
    "UMASS(coherence)":0.492017184,
    "TFIDF(informativeness)":2.200863701,
    "polarity":6,
    "normalized_text_entropy":4.499091768,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.492017184,
    "normalized_TFIDF":2.200863701,
    "normalized_polarity":6,
    "tagtext":"loops",
    "posttext":"Simple way to iterate over class fields and obtain values from object:"
  },
  {
    "postid":1689,
    "postdate":1402443240,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.813119416,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.499576684,
    "polarity":0,
    "normalized_text_entropy":3.813119416,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.499576684,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Here is a solution which sorts the properties alphabetically and prints them all together with their values:"
  },
  {
    "postid":1690,
    "postdate":1246439340,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.330442356,
    "concept_entropy":0,
    "UMASS(coherence)":0.628370455,
    "TFIDF(informativeness)":1.933482938,
    "polarity":0,
    "normalized_text_entropy":4.330442356,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.628370455,
    "normalized_TFIDF":1.933482938,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I want to do something different with the last loop iteration when performing 'foreach' on an object. I'm using Ruby but the same goes for C#, Java etc. The output desired is equivalent to: The obvious workaround is to migrate the code to a for loop using, but the for each solution feels more graceful. What is the most graceful way to code a special case during a loop? Can it be done with foreach?"
  },
  {
    "postid":1691,
    "postdate":1246440360,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":4.216949153,
    "concept_entropy":0,
    "UMASS(coherence)":0.697732686,
    "TFIDF(informativeness)":1.647644281,
    "polarity":-1,
    "normalized_text_entropy":4.216949153,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.697732686,
    "normalized_TFIDF":1.647644281,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"How about obtaining a to the first and then use it for comparison inside the foreach loop?. And sorry I don't know Ruby so the following sample is in C#! Hope u dont mind :-) I revised the following code to compare by reference not value (can only use reference types not value types). the following code should support multiple objects containing same string (but not same string object) since MattChurcy's example did not specify that the strings must be distinct and I used LINQ Last method instead of calculating the index. Limitations of the above code. (1) It can only work for strings or reference types not value types. (2) Same object can only appear once in the list. You can have different objects containing the same content. Literal strings cannot be used repeatedly since C# does not create a unique object for strings that have the same content. And i no stupid. I know an index based loop is the one to use. I already said so when i first posted the initial answer. I provided the best answer I can in the of the question. I am too tired to keep explaining this so can you all just vote to delete my answer. I'll be so happy if this one goes away. thanks "
  },
  {
    "postid":1692,
    "postdate":1246440060,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.686136685,
    "concept_entropy":0,
    "UMASS(coherence)":0.735324755,
    "TFIDF(informativeness)":2.570279123,
    "polarity":5,
    "normalized_text_entropy":4.686136685,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.735324755,
    "normalized_TFIDF":2.570279123,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"The foreach construct (in Java definitely, probably also in other languages) is intended to represent the most general kind if iteration, which includes iteration over collections that have no meaningful iteration order. For example, a hash-based set does not have an ordering, and therefore there \"last element\". The last iteration may yield a different element each time you iterate. Basically: no, the foreach construct is not meant to be used that way."
  },
  {
    "postid":1693,
    "postdate":1246439880,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.013584285,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.471986339,
    "polarity":0,
    "normalized_text_entropy":4.013584285,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.471986339,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Is this elegant enough? It assumes a non-empty list."
  },
  {
    "postid":1694,
    "postdate":1351155840,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.989106963,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.29053024,
    "polarity":-1,
    "normalized_text_entropy":3.989106963,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.29053024,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"I see a lot of complex, hardly readable code here... why not keep it simple: It's only one extra statement! Another common situation is that you want to do something extra or less with the last item, like putting a separator between the items:"
  },
  {
    "postid":1695,
    "postdate":1246448100,
    "tag":"0",
    "TFMvalue":0.7,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.286547576,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.620764515,
    "polarity":0,
    "normalized_text_entropy":4.286547576,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.620764515,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"In Ruby I'd use in this situation"
  },
  {
    "postid":1696,
    "postdate":1246442100,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.482611185,
    "concept_entropy":0,
    "UMASS(coherence)":0.440965789,
    "TFIDF(informativeness)":1.117803291,
    "polarity":0,
    "normalized_text_entropy":4.482611185,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.440965789,
    "normalized_TFIDF":1.117803291,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"You can define an method in your class to do the same as on all elements but the last, but something else for the last: Then you could call it like this (being an instance of or a subclass thereof):Following molf's suggestion:"
  },
  {
    "postid":1697,
    "postdate":1246439880,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.258066804,
    "concept_entropy":0,
    "UMASS(coherence)":0.411128599,
    "TFIDF(informativeness)":1.709873581,
    "polarity":0,
    "normalized_text_entropy":4.258066804,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.411128599,
    "normalized_TFIDF":1.709873581,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"You should use only if you handle one same. Use index based interation instead. Else you must add a different structure around the items, which you can use to differentiate the normal from last one in the foreach call (look at good Papers about the map reduced from google for the background:, map == foreach, reduced == e.g. sum or filter). Map has no knowledge about the structure (esp. which position a item is), it only transforms one item by item (no knowledge from one item can be used to transform an other!), but reduce can use a memory to for example count the position and handle the last item. A common trick is to reverse the list and handle the first (which has now a known index = 0), and later apply reverse again. (Which is elegant but not fast ;) )"
  },
  {
    "postid":1698,
    "postdate":1246449540,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.223870089,
    "concept_entropy":0,
    "UMASS(coherence)":0.517780848,
    "TFIDF(informativeness)":1.303712311,
    "polarity":0,
    "normalized_text_entropy":4.223870089,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.517780848,
    "normalized_TFIDF":1.303712311,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Firstly, I would write an extension method: Then using the new is very simple:"
  },
  {
    "postid":1699,
    "postdate":1246439820,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":3.816180883,
    "concept_entropy":4.464546567,
    "UMASS(coherence)":0.269704764,
    "TFIDF(informativeness)":1.07568103,
    "polarity":0,
    "normalized_text_entropy":3.816180883,
    "normalized_concept_entropy":4.464546567,
    "normalized_UMASS":0.269704764,
    "normalized_TFIDF":1.07568103,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Foreach is elegant in that it has no concern for the number of items in a list and treats each element equally, I think your only solution will be using a for loop that either stops at itemcount-1 and then you present your last item outside of the loop or a conditional within the loop that handles that specific condition, i.e. if (i==itemcount) { ... } else { ... }"
  },
  {
    "postid":1700,
    "postdate":1246441320,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.453784737,
    "concept_entropy":0,
    "UMASS(coherence)":0.477827686,
    "TFIDF(informativeness)":1.984292218,
    "polarity":-3,
    "normalized_text_entropy":4.453784737,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.477827686,
    "normalized_TFIDF":1.984292218,
    "normalized_polarity":-3,
    "tagtext":"loops",
    "posttext":"You could do something like that (C#) :"
  },
  {
    "postid":1701,
    "postdate":1246443540,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.273219048,
    "concept_entropy":4.679934548,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.690148441,
    "polarity":0,
    "normalized_text_entropy":4.273219048,
    "normalized_concept_entropy":4.679934548,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.690148441,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Ruby also has each_index method: EDIT: Or using each (corrected TomatoGG and Kirschstein solution): Or"
  },
  {
    "postid":1702,
    "postdate":1246453740,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.053831151,
    "concept_entropy":4.105926699,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.82841644,
    "polarity":-2,
    "normalized_text_entropy":4.053831151,
    "normalized_concept_entropy":4.105926699,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.82841644,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"What you are trying to do seems just a little too advanced for the foreach-loop. However, you can uses explicitly. For example, in Java, I would write this:"
  },
  {
    "postid":1703,
    "postdate":1246444200,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.986720447,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.119480617,
    "polarity":1,
    "normalized_text_entropy":3.986720447,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.119480617,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"If you're using a collection that exposes a property - - then you can do something like this using C# and LINQ: If we additionally assume that the items in the collection can be accessed directly by index - - then a plain loop will be more elegant/readable than a: If the collection doesn't expose a property and can't be accessed by index then there isn't really any elegant way to do this, at least not in C#. A bug-fixed variation of is probably as close as you'll get. Here's the bug-fixed version of: And here's how I would do it in C# if the collection doesn't expose a property and the items aren't directly accessible by index. (Notice that there's no and the code isn't particularly succinct, but it will give decent performance over pretty much any enumerable collection.)"
  },
  {
    "postid":1704,
    "postdate":1246439820,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.56349236,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.438875737,
    "polarity":-2,
    "normalized_text_entropy":4.56349236,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.438875737,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"At least in C# that's not possible without a regular for loop. The enumerator of the collection decides whether a next elements exists (MoveNext method), the loop doesn't know about this."
  },
  {
    "postid":1705,
    "postdate":1246444020,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.967637687,
    "concept_entropy":0,
    "UMASS(coherence)":0.531615723,
    "TFIDF(informativeness)":0.663701422,
    "polarity":1,
    "normalized_text_entropy":3.967637687,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.531615723,
    "normalized_TFIDF":0.663701422,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I think I prefer's solution, however you could always do something like this;"
  },
  {
    "postid":1706,
    "postdate":1246454640,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.255751623,
    "concept_entropy":0,
    "UMASS(coherence)":0.534548975,
    "TFIDF(informativeness)":1.071712857,
    "polarity":0,
    "normalized_text_entropy":4.255751623,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.534548975,
    "normalized_TFIDF":1.071712857,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"How about this one? just learnt a little Ruby. hehehe"
  },
  {
    "postid":1707,
    "postdate":1246469160,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.160410938,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.389361339,
    "TFIDF(informativeness)":4.160286788,
    "polarity":3,
    "normalized_text_entropy":4.160410938,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.389361339,
    "normalized_TFIDF":4.160286788,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"I notice a number of suggestions assume that you can find the last item in the list before beginning the loop, and then compare every item to this item. If you can do this efficiently, then the underlying data structure is likely a simple array. If that's the case, why bother with the foreach at all? Just write: If you cannot retrieve an item from an arbitrary position efficiently -- like it the underlying structure is a linked list -- then getting the last item probably involved a sequential search of the entire list. Depending on the size of the list, that may be a performance issue. If this is a frequently-executed function, you might want to consider using an array or ArrayList or comparable structure so you can do it this way. Sounds to me like you're asking, \"What's the best way to put a screw in using a hammer?\", when of course the better question to ask is, \"What's the correct tool to use to put in a screw?\""
  },
  {
    "postid":1708,
    "postdate":1246513500,
    "tag":"0",
    "TFMvalue":0.6875,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.118890212,
    "concept_entropy":0,
    "UMASS(coherence)":0.643402209,
    "TFIDF(informativeness)":1.371773165,
    "polarity":0,
    "normalized_text_entropy":4.118890212,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.643402209,
    "normalized_TFIDF":1.371773165,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Would it be a viable solution for your case to just take the first/last elements out of your array before doing the \"general\" each run? Like this:"
  },
  {
    "postid":1709,
    "postdate":1246515960,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.94632254,
    "concept_entropy":0,
    "UMASS(coherence)":0.268779801,
    "TFIDF(informativeness)":1.009512257,
    "polarity":0,
    "normalized_text_entropy":3.94632254,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.268779801,
    "normalized_TFIDF":1.009512257,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"This problem can be solved in an elegant way using pattern matching in a functional programming language such as F#:"
  },
  {
    "postid":1710,
    "postdate":1265970180,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.287374362,
    "concept_entropy":0,
    "UMASS(coherence)":0.477881284,
    "TFIDF(informativeness)":2.269407757,
    "polarity":2,
    "normalized_text_entropy":4.287374362,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.477881284,
    "normalized_TFIDF":2.269407757,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"I don't know how for-each loops works in other languages but java.In java for-each uses the Iterable interface that is used by the for-each to get an Iterator and loop with it. Iterator has a method hasNext that you could use if you could see the iterator within the loop.You can actually do the trick by enclosing an already obtained Iterator in an Iterable object so the for loop got what it needs and you can get a hasNext method inside the loop. You can create a class that wraps all this iterable and iterator stuff so the code looks like this:"
  },
  {
    "postid":1711,
    "postdate":1246446720,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.330727648,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.845235405,
    "TFIDF(informativeness)":2.281131636,
    "polarity":2,
    "normalized_text_entropy":4.330727648,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.845235405,
    "normalized_TFIDF":2.281131636,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Similar to kgiannakakis's answer:"
  },
  {
    "postid":1712,
    "postdate":1393358880,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.351953074,
    "concept_entropy":0,
    "UMASS(coherence)":0.67942185,
    "TFIDF(informativeness)":1.414333843,
    "polarity":0,
    "normalized_text_entropy":3.351953074,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.67942185,
    "normalized_TFIDF":1.414333843,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Remove the last one from the list and retain its avlue."
  },
  {
    "postid":1713,
    "postdate":1351183320,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.214796031,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.444581236,
    "polarity":3,
    "normalized_text_entropy":4.214796031,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.444581236,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"If I have loop in a loop and once if statement is satisfied I want to break main loop, how am I supposed to do that?This is my code: "
  },
  {
    "postid":1714,
    "postdate":1351183440,
    "tag":"0",
    "TFMvalue":0.555555556,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.330092473,
    "concept_entropy":0,
    "UMASS(coherence)":0.825881044,
    "TFIDF(informativeness)":1.842698798,
    "polarity":-1,
    "normalized_text_entropy":4.330092473,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.825881044,
    "normalized_TFIDF":1.842698798,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"using labeled break"
  },
  {
    "postid":1715,
    "postdate":1351183440,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.18232877,
    "concept_entropy":0,
    "UMASS(coherence)":0.323780299,
    "TFIDF(informativeness)":1.445183048,
    "polarity":-1,
    "normalized_text_entropy":4.18232877,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.323780299,
    "normalized_TFIDF":1.445183048,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"You can add labels to your loop, and use that to break out of appropriate loop: - See these links for more information: -"
  },
  {
    "postid":1716,
    "postdate":1351183500,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.338222186,
    "concept_entropy":0,
    "UMASS(coherence)":0.532878772,
    "TFIDF(informativeness)":2.405105688,
    "polarity":1,
    "normalized_text_entropy":4.338222186,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.532878772,
    "normalized_TFIDF":2.405105688,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"You can just the control from that function. Or use the ugly approach :)If there is another code parts after your for statement, you can refactor the loops in a function. IMO the use of breaks and continue should be discouraged in OOP, since they affect the readability and the maintenance. Sure, there are cases where they are handy, but in general I think that we should avoid them, since they will encourage the use of goto style programing.Apparently variations to this questions are posted a lot, Peter provided some good and odd uses using labels. "
  },
  {
    "postid":1717,
    "postdate":1351184040,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.209212246,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.361460357,
    "TFIDF(informativeness)":1.738541217,
    "polarity":0,
    "normalized_text_entropy":4.209212246,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.361460357,
    "normalized_TFIDF":1.738541217,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"just for fun comment on : it's a forward goto, it can break any statement and jump to the next:"
  },
  {
    "postid":1718,
    "postdate":1351198500,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.408717649,
    "concept_entropy":3.949090377,
    "UMASS(coherence)":0.540414196,
    "TFIDF(informativeness)":2.234319462,
    "polarity":1,
    "normalized_text_entropy":4.408717649,
    "normalized_concept_entropy":3.949090377,
    "normalized_UMASS":0.540414196,
    "normalized_TFIDF":2.234319462,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Looks like for Java a labeled break appears to be the way to go (based on the consensus of the other answers). But for many (most?) other languages, or if you want to avoid any like control flow, you need to set a flag:"
  },
  {
    "postid":1719,
    "postdate":1270010460,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.378255813,
    "concept_entropy":4.265069337,
    "UMASS(coherence)":0.415831014,
    "TFIDF(informativeness)":6.747460602,
    "polarity":-2,
    "normalized_text_entropy":4.378255813,
    "normalized_concept_entropy":4.265069337,
    "normalized_UMASS":0.415831014,
    "normalized_TFIDF":6.747460602,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"Is there a way I can do a for loop for a certain amount of time easily? (without measuring the time ourselves using System.currentTimeMillis() ?) I.e. I want to do something like this in Java: Thanks"
  },
  {
    "postid":1720,
    "postdate":1270015320,
    "tag":"0",
    "TFMvalue":0.769230769,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.037149627,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.705872975,
    "polarity":0,
    "normalized_text_entropy":4.037149627,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.705872975,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"No, there isn't a built-in construct which does that. I want to point out that you should not use System.currentTimeMillis() for performing, or delaying, a task for a specified time period. Instead use System.nanoTime(). The former method is inaccurate in Windows, while the latter method is accurate regardless of OS. You can use TimeUnit enum to easily go between time in milliseconds, or any other time unit, to time in nanoseconds."
  },
  {
    "postid":1721,
    "postdate":1270018560,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.223503131,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.528633171,
    "TFIDF(informativeness)":1.746235307,
    "polarity":0,
    "normalized_text_entropy":4.223503131,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.528633171,
    "normalized_TFIDF":1.746235307,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I think that this is what you want: This avoids doing repeated syscalls to get the system clock value (which can be rather expensive) and polls the current thread's flag instead (much cheaper). There is actually no alternative to polling the clock or polling a flag.In theory, you could modify the above fragment to call the method instead of.(I do recommend using and friends.They are flawed, and dangerous to use.I'm just posing this as a alternative.) Just to point out that using has the advantages over setting a shared flag: Just to add that is not guaranteed to wake the sleeping thread up after exactly milliseconds.But under normal circumstances, it will be reasonably close."
  },
  {
    "postid":1722,
    "postdate":1305020940,
    "tag":"0",
    "TFMvalue":0.777777778,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.238608501,
    "concept_entropy":4.337558509,
    "UMASS(coherence)":0.317961493,
    "TFIDF(informativeness)":2.013893793,
    "polarity":1,
    "normalized_text_entropy":4.238608501,
    "normalized_concept_entropy":4.337558509,
    "normalized_UMASS":0.317961493,
    "normalized_TFIDF":2.013893793,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I made a simple, but sucky, implementation for this problem. I wanted to avoid Timer and TimeTask and ended up with this quickfix solution. The main idea is that I simply wanted to create an independed countdown timer which I could just start and call isFinished() to check if the countdown is finished."
  },
  {
    "postid":1723,
    "postdate":1270039920,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.215792857,
    "concept_entropy":3.738904981,
    "UMASS(coherence)":0.36288479,
    "TFIDF(informativeness)":1.620428189,
    "polarity":0,
    "normalized_text_entropy":4.215792857,
    "normalized_concept_entropy":3.738904981,
    "normalized_UMASS":0.36288479,
    "normalized_TFIDF":1.620428189,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Here is another suggestion:  The method executes the method of the provided repeatedly until the timer expires. Considerations: "
  },
  {
    "postid":1724,
    "postdate":1270010700,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.857072824,
    "concept_entropy":0,
    "UMASS(coherence)":0.382254712,
    "TFIDF(informativeness)":2.52943698,
    "polarity":-1,
    "normalized_text_entropy":3.857072824,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.382254712,
    "normalized_TFIDF":2.52943698,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"I don't think there is a way to loop for a certain period of time without checking to see if you've looped for a certain period of time."
  },
  {
    "postid":1725,
    "postdate":1270010700,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.38693919,
    "concept_entropy":0,
    "UMASS(coherence)":0.543343713,
    "TFIDF(informativeness)":2.230607708,
    "polarity":-1,
    "normalized_text_entropy":4.38693919,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.543343713,
    "normalized_TFIDF":2.230607708,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Depending on your use case either of the two sleep() methods in class fit the bill, but it sounds like you have to fuss with System.currentTimeMillis(), which seems strange."
  },
  {
    "postid":1726,
    "postdate":1270012800,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.418295834,
    "concept_entropy":0,
    "UMASS(coherence)":0.408611427,
    "TFIDF(informativeness)":2.738691165,
    "polarity":0,
    "normalized_text_entropy":3.418295834,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.408611427,
    "normalized_TFIDF":2.738691165,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Loops iterate over value comparison and not for duration. So without yourself assigning and comparing the system time, you cannot do it.If however you wish it be intuitive, then you can have a function that internally uses milliseconds, but takes Minutes as argument and use it. And No, you cannot use threads or the sleep method in it, because that does not ensure the exact time. If your processor is busy with some other thread after the given time elapses, then your thread will continue to wait."
  },
  {
    "postid":1727,
    "postdate":1270010700,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.34804041,
    "concept_entropy":4.365336764,
    "UMASS(coherence)":0.343274002,
    "TFIDF(informativeness)":1.064933475,
    "polarity":0,
    "normalized_text_entropy":4.34804041,
    "normalized_concept_entropy":4.365336764,
    "normalized_UMASS":0.343274002,
    "normalized_TFIDF":1.064933475,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"No. That is sort of a strange request considering how simple it would be to simply write a function that uses System.currentTimeMillis() (or whichever time function you choose). More context of the situation might be in order."
  },
  {
    "postid":1728,
    "postdate":1231468680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.295309495,
    "concept_entropy":4.115834092,
    "UMASS(coherence)":0.442261184,
    "TFIDF(informativeness)":1.807018536,
    "polarity":3,
    "normalized_text_entropy":4.295309495,
    "normalized_concept_entropy":4.115834092,
    "normalized_UMASS":0.442261184,
    "normalized_TFIDF":1.807018536,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"In other words, can I do something like Except N times? In other words, when the method creating the loops is called, it is given some parameter N, and the method would then create N of these loops nested one in another? Of course, the idea is that there should be an \"easy\" or \"the usual\" way of doing it. I already have an idea for a very complicated one."
  },
  {
    "postid":1729,
    "postdate":1240280700,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.401638036,
    "concept_entropy":0,
    "UMASS(coherence)":0.414966298,
    "TFIDF(informativeness)":2.607785772,
    "polarity":5,
    "normalized_text_entropy":4.401638036,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.414966298,
    "normalized_TFIDF":2.607785772,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"It sounds like you may want to look into "
  },
  {
    "postid":1730,
    "postdate":1231476180,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.048107077,
    "concept_entropy":0,
    "UMASS(coherence)":0.357560032,
    "TFIDF(informativeness)":0.993639606,
    "polarity":1,
    "normalized_text_entropy":4.048107077,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.357560032,
    "normalized_TFIDF":0.993639606,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"jjnguy is right; recursion lets you dynamically create variable-depth nesting. However, you don't get access to data from the outer layers without a little more work. The \"in-line-nested\" case: keeps the variables,, and in scope for the innermost body to use. Here's one quick hack to do that: The interface stipulates the role of a controlled action which takes an array of indices as the argument to its method. In this example, each instance of is configured by the constructor with the iteration limits and the action to be performed by the innermost level. The parameter of the method specifies how deeply to nest. Here's a sample usage: and the (partial) output from its execution:"
  },
  {
    "postid":1731,
    "postdate":1231469340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.299906243,
    "concept_entropy":0,
    "UMASS(coherence)":0.31464443,
    "TFIDF(informativeness)":0.866289594,
    "polarity":0,
    "normalized_text_entropy":4.299906243,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.31464443,
    "normalized_TFIDF":0.866289594,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"You might want to explain what you really want to do. If the outer loops are doing nothing but controlling a count, then your nested loops are simply a more complicated way of iterating by a count that could be handled by a single loop. For example: Is equivalent to:"
  },
  {
    "postid":1732,
    "postdate":1231471440,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.903991374,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.844121133,
    "polarity":0,
    "normalized_text_entropy":3.903991374,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.844121133,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I was actually thinking about this the other day.An example that is probably not perfect but pretty close to what I think is being asked would be printing out a directory tree this way you end up with a stack of for loops nested inside each other, without the hassle of figuring out exactly how they should go together."
  },
  {
    "postid":1733,
    "postdate":1231469040,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.932861065,
    "concept_entropy":0,
    "UMASS(coherence)":0.604150504,
    "TFIDF(informativeness)":1.137722674,
    "polarity":-1,
    "normalized_text_entropy":3.932861065,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.604150504,
    "normalized_TFIDF":1.137722674,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Problem needs more specification.Maybe recursion will help you, but keep in mind that recursion is almost always an alternative to iteration, and vice versa.It may be that a 2-level nested loop can be sufficient for your needs.Just let us know what problem you're trying to solve."
  },
  {
    "postid":1734,
    "postdate":1231476720,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.22366886,
    "concept_entropy":0,
    "UMASS(coherence)":0.588341593,
    "TFIDF(informativeness)":3.050633279,
    "polarity":0,
    "normalized_text_entropy":4.22366886,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.588341593,
    "normalized_TFIDF":3.050633279,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"The essential idea behind nesting loops is. Expanding on Michael Burr's answer, if the outer loops are doing nothing but controlling a count, then your nested loops over counts are simply a more complicated way of iterating over the product of the counts with a single loop. Now, let's extend this idea to Lists. If you're iterating over three lists in nested loops, this is simply a more complicated way of iterating over the product of the lists with a single loop. But how do you express the product of three lists? First, we need a way of expressing the product of types. The product of two types and can be expressed as a generic type like. This is just a value that consists of two values, one of type, the other of type. It looks like this: For a product of three types, we just have, with the obvious third method. A product of three lists, then, is achieved by distributing the List functor over the product type. So the product of,, and is simply. You can then iterate over this list with a single loop. The library has a type that supports multiplying lists together using first-class functions and product types (P2, P3, etc. which are also included in the library). For example: Is equivalent to: Going further with Functional Java, you can make first-class, as follows. Let's say returns a String: Then you can eliminate the for-loop altogether, and collect the results of all the applications of:"
  },
  {
    "postid":1735,
    "postdate":1371041820,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.281512108,
    "concept_entropy":0,
    "UMASS(coherence)":0.576800974,
    "TFIDF(informativeness)":2.112986774,
    "polarity":1,
    "normalized_text_entropy":4.281512108,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.576800974,
    "normalized_TFIDF":2.112986774,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"To demonstrate that recursion is the only way of doing such a thing, here's another pretty simple way.This allows you to simply set a range for each for-loop variable, as well as maintain access to all of them at any level: Output: Obviously, you could do something more interesting than print the indices at each step.If you need to do something after, say, the n-1th for loop, but still in the nth: you can use:"
  },
  {
    "postid":1736,
    "postdate":1314008520,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.093054518,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.487631838,
    "polarity":0,
    "normalized_text_entropy":4.093054518,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.487631838,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Creates a nice nested for-loop skeleton ;-)Not completely serious and i'm aware that a recursive solution would have been more elegant."
  },
  {
    "postid":1737,
    "postdate":1337477220,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.274007788,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.308813622,
    "polarity":0,
    "normalized_text_entropy":4.274007788,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.308813622,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Sample call:"
  },
  {
    "postid":1738,
    "postdate":1361175480,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.26218345,
    "concept_entropy":4.567048536,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.122481634,
    "polarity":-1,
    "normalized_text_entropy":4.26218345,
    "normalized_concept_entropy":4.567048536,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":2.122481634,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"In the interest of conciseness I am putting my code here : Output"
  },
  {
    "postid":1739,
    "postdate":1260508380,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.480014736,
    "concept_entropy":0,
    "UMASS(coherence)":0.683611901,
    "TFIDF(informativeness)":1.509169294,
    "polarity":-1,
    "normalized_text_entropy":4.480014736,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.683611901,
    "normalized_TFIDF":1.509169294,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Is declaring a variable inside a loop is good or declaring on the fly optimal in Java.Also is there any performance cost involved while declaring inside the loop? eg."
  },
  {
    "postid":1740,
    "postdate":1260508620,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.274293454,
    "concept_entropy":4.589975891,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.128039115,
    "polarity":2,
    "normalized_text_entropy":4.274293454,
    "normalized_concept_entropy":4.589975891,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":2.128039115,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"In, Robert C. Martin advises Java coders to declare variables as close as possible to where they are to be used. Variables should not have greater scope than necessary. Having the declaration of a variable close to where it's used helps give the reader type and initialization information. Don't concern yourself too much with performance because the JVM is pretty good at optimizing these things. Instead focus on readability. BTW: If you're using Java 5 or greater, you can significantly trim up your code example using the following new-for-Java-5 features: I've refactored your example to use the aforementioned new features."
  },
  {
    "postid":1741,
    "postdate":1260509700,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.15830026,
    "concept_entropy":0,
    "UMASS(coherence)":0.54606311,
    "TFIDF(informativeness)":1.606176766,
    "polarity":0,
    "normalized_text_entropy":4.15830026,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.54606311,
    "normalized_TFIDF":1.606176766,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It should make no difference which way you implement from a performance perspective. But more importantly, you should not be wasting your time micro-optimizing your code like this ... UNLESS you've profiled your entire application and determined that this fragment is a performance bottleneck.(And if you've done that, you are in a good position to see if there is really any difference between the two versions of the code.But I would be very, surprised if there was ...)"
  },
  {
    "postid":1742,
    "postdate":1260510000,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.406980661,
    "concept_entropy":4.552825457,
    "UMASS(coherence)":0.451827703,
    "TFIDF(informativeness)":1.728261778,
    "polarity":4,
    "normalized_text_entropy":4.406980661,
    "normalized_concept_entropy":4.552825457,
    "normalized_UMASS":0.451827703,
    "normalized_TFIDF":1.728261778,
    "normalized_polarity":4,
    "tagtext":"loops",
    "posttext":"While your example is a hypothetical, most likely not real world application, the simple answer is that you don't need a variable at all in this scenario.There is no reason to allocate the memory.Simply put it's wasted memory that becomes cannon fodder in the JVM.You've already allocated memory to store the value in a List, why duplicate it in another variable? The scope of the variable's use will often dictate where it should be declared.For instance: The other answers do a good job of exposing the other pitfalls of the example you provided.There are better ways to iterate through a list, whether it's with an actual Iterator, or a foreach loop, and generics will help eliminate the need to create a primitive duplicate."
  },
  {
    "postid":1743,
    "postdate":1260508980,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":3.958229184,
    "concept_entropy":0,
    "UMASS(coherence)":0.616113614,
    "TFIDF(informativeness)":0.813610281,
    "polarity":0,
    "normalized_text_entropy":3.958229184,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.616113614,
    "normalized_TFIDF":0.813610281,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Well, if you are worrying about optimizing that code - I'm not sure about how Java evaluates for loops, but having the being called inside the loop declaration maybe less efficient than outide the loop (and setting it to a varable perhaps). I'm pretty sure that method is quicker in JavaScript. The reason it might be more efficient is that having the size function call inside the for loop means it would have to go call the function each time it runs the test to see if the loop is finished, instead of testing against a static value."
  },
  {
    "postid":1744,
    "postdate":1260509040,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.027567157,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.031307697,
    "polarity":0,
    "normalized_text_entropy":4.027567157,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.031307697,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"The most optimal way to traverse a list is to use an."
  },
  {
    "postid":1745,
    "postdate":1260532260,
    "tag":"0",
    "TFMvalue":0.914285714,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.216041911,
    "concept_entropy":4.402646078,
    "UMASS(coherence)":0.405026301,
    "TFIDF(informativeness)":0.768607262,
    "polarity":-1,
    "normalized_text_entropy":4.216041911,
    "normalized_concept_entropy":4.402646078,
    "normalized_UMASS":0.405026301,
    "normalized_TFIDF":0.768607262,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"In simple cases like this, there is most likely no difference and compiler produces exactly the same code (assuming you do not set the initial value when declaring the variable). In more complex cases and longer functions, declaring local variable or other block is likely to be. This shortens the lifetime of the variable thus making it easier for compiler to optimize the code. When a variable does not exist outside the block, the register used to store the variable can be used for other purposes. This, of course, depends on the compiler implementation. I don't know about Java, but at least some C compiler manufacturers have given this recommendation in their documentation. As for readability, my opinion is that in short functions it is better to declare all variables at the beginning where they can be easily found. In very long functions (which should be avoided anyway), it may be better to declare the variable inside a block (which just happens to be more efficient, too)."
  },
  {
    "postid":1746,
    "postdate":1260543420,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.36307811,
    "concept_entropy":4.495096829,
    "UMASS(coherence)":0.685605822,
    "TFIDF(informativeness)":3.363118597,
    "polarity":-14,
    "normalized_text_entropy":4.36307811,
    "normalized_concept_entropy":4.495096829,
    "normalized_UMASS":0.685605822,
    "normalized_TFIDF":3.363118597,
    "normalized_polarity":-14,
    "tagtext":"loops",
    "posttext":"Besides the useful suggestions given by others, please do keep in mind one thing:optimize early. If you really think your code is slow and might need improvement, then use a profiler for your code to spot where the bottlenecks are, and only then do refactor them. Learn where the mistake was. Do not repeat mistake next time.In your case I would say that, depending on the java VM version, your performance (guess what) might vary. Out of experience I'd not declare a variable within a loop; an int will certainly be optimized out by the compiler and re-use the same memory address, and the extra computational cost might be negligible. But. If you were declaring an object inside a loop, then things will be different. What if your object, when created, does an I/O write? A network DNS lookup? You might not know/care. So, best practice is declare it ouside. Also, do not mix up performance with best practice. They might lead you into dangerous territory. "
  },
  {
    "postid":1747,
    "postdate":1260546960,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":14,
    "Normalized_count":0.233333333,
    "text_entropy":4.235135004,
    "concept_entropy":0,
    "UMASS(coherence)":0.520162866,
    "TFIDF(informativeness)":0.907180655,
    "polarity":-1,
    "normalized_text_entropy":4.235135004,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.520162866,
    "normalized_TFIDF":0.907180655,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"The Java compiler determines how many \"slots\" it needs in the stack frame based on how you use local variables. This number is determined based on the maximum number of active locals at any given point in the method. If your code is only or there's only one slot needed on the runtime stack; the same slot can be reused inside the loop regardless of how many times the loop runs. However, if you do something after the loop that requires another slot: orwe'll see a difference - the first version requires two slots, as both variables are active after the loop; in the second example, only one slot is required, as we can reuse the slot from \"value\" for \"anotherValue\" after the loop. Note: the compiler can be smarter about optimizations depending on how the data is actually used, but this simple example is meant to demonstrate that there can be a difference in stack frame allocation."
  },
  {
    "postid":1748,
    "postdate":1379119260,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.341882177,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.831308219,
    "polarity":-1,
    "normalized_text_entropy":4.341882177,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.831308219,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"I have been at this for hours!!!! An update to the assignment states that we need to stop the user input when their values exceed 100. Without rewriting the whole thing, how do I \"loop\" this in? I know the code is method heavy but it was a requirement for the assignment. I think my brain is just java-soup! Any help would be AWESOME :) } if I enter this after counter++ The user gets this message after the 1st input...WHAT AM I DOING WRONG!!!!!!The problem with the break was that the piece of code was causing some out put issues when placed immediately after the break. Now the trouble is that the average for the sum>100 is outputtingthe sum, not average. It works fine for the sum<=100...WTH?!?! :) Heres the code now:"
  },
  {
    "postid":1749,
    "postdate":1379119320,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.362732106,
    "concept_entropy":4.331178241,
    "UMASS(coherence)":0.724886725,
    "TFIDF(informativeness)":3.192738198,
    "polarity":1,
    "normalized_text_entropy":4.362732106,
    "normalized_concept_entropy":4.331178241,
    "normalized_UMASS":0.724886725,
    "normalized_TFIDF":3.192738198,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Use a statement in your loop with a condition to check the  . Hope this much of hint will help you to get the desired behavior. As you need to calculate the average also, so put the break logic post avg:"
  },
  {
    "postid":1750,
    "postdate":1379120100,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.392510444,
    "concept_entropy":0,
    "UMASS(coherence)":0.467302424,
    "TFIDF(informativeness)":1.9674271,
    "polarity":0,
    "normalized_text_entropy":4.392510444,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.467302424,
    "normalized_TFIDF":1.9674271,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Change the loop to You don't need to calculate the average until after the loop stops."
  },
  {
    "postid":1751,
    "postdate":1296148860,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.608739712,
    "concept_entropy":0,
    "UMASS(coherence)":0.517780848,
    "TFIDF(informativeness)":1.526628064,
    "polarity":0,
    "normalized_text_entropy":4.608739712,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.517780848,
    "normalized_TFIDF":1.526628064,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I try with a loop like that But it isn't nice. Can anyone suggest me a better solution?Some useful benchmarks to make better decision: "
  },
  {
    "postid":1752,
    "postdate":1296149040,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.298990645,
    "concept_entropy":0,
    "UMASS(coherence)":0.802809842,
    "TFIDF(informativeness)":1.429630825,
    "polarity":5,
    "normalized_text_entropy":4.298990645,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.802809842,
    "normalized_TFIDF":1.429630825,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"taken from: maybe that will work for you."
  },
  {
    "postid":1753,
    "postdate":1363166640,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.903497669,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.868692587,
    "polarity":0,
    "normalized_text_entropy":3.903497669,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.868692587,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1754,
    "postdate":1296149100,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.383050972,
    "concept_entropy":0,
    "UMASS(coherence)":0.839067664,
    "TFIDF(informativeness)":1.638180004,
    "polarity":3,
    "normalized_text_entropy":4.383050972,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.839067664,
    "normalized_TFIDF":1.638180004,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"Not efficient, but short"
  },
  {
    "postid":1755,
    "postdate":1296148980,
    "tag":"0",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.309687795,
    "concept_entropy":0,
    "UMASS(coherence)":0.675521524,
    "TFIDF(informativeness)":0.385081767,
    "polarity":-2,
    "normalized_text_entropy":4.309687795,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.675521524,
    "normalized_TFIDF":0.385081767,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1756,
    "postdate":1343678040,
    "tag":"0",
    "TFMvalue":0.923076923,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.321609802,
    "concept_entropy":0,
    "UMASS(coherence)":0.447735758,
    "TFIDF(informativeness)":1.517656932,
    "polarity":0,
    "normalized_text_entropy":4.321609802,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.447735758,
    "normalized_TFIDF":1.517656932,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"If you prefer immutable data objects, or if you just dont want to be destructive to the input list, you can use Guava's predicates."
  },
  {
    "postid":1757,
    "postdate":1321348140,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.316990424,
    "concept_entropy":0,
    "UMASS(coherence)":0.641258393,
    "TFIDF(informativeness)":1.821103376,
    "polarity":0,
    "normalized_text_entropy":4.316990424,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.641258393,
    "normalized_TFIDF":1.821103376,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"There is an easy way of removing all the values from.You have to pass a collection containing null as a parameter to method"
  },
  {
    "postid":1758,
    "postdate":1305799200,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.489937667,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.417498386,
    "polarity":2,
    "normalized_text_entropy":4.489937667,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.417498386,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"I played around with this and found out that trimToSize() seems to work. I am working on the Android platform so it might be different."
  },
  {
    "postid":1759,
    "postdate":1392721680,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.456525718,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.522674395,
    "polarity":0,
    "normalized_text_entropy":4.456525718,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":2.522674395,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"This is easy way to remove default null values from arraylist otherwise String value \"null\" remove from arraylist"
  },
  {
    "postid":1760,
    "postdate":1265955900,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.424360818,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.569306159,
    "polarity":1,
    "normalized_text_entropy":4.424360818,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.569306159,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"What is the best way to guard against null in a for loop in Java?This seems ugly : Or There might not be any other way. Should they have put it in the construct itself, if it is null then don't run the loop?"
  },
  {
    "postid":1761,
    "postdate":1265956200,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.194026482,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.323354896,
    "polarity":1,
    "normalized_text_entropy":4.194026482,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.323354896,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"You should better verify where you get that list from.An empty list is all you need, because an empty list won't fail. If you get this list from somewhere else and don't know if it is ok or not you could create a utility method and use it like this: And of course would be:"
  },
  {
    "postid":1762,
    "postdate":1265956200,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.272585749,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.806117346,
    "polarity":-2,
    "normalized_text_entropy":4.272585749,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.806117346,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"You could potentially write a helper method which returned an empty sequence if you passed in null: Then use: I don't think I'd actually do that though - I'd usually use your second form. In particular, the \"or throw ex\" is important - if it really shouldn't be null, you should definitely throw an exception. You know that has gone wrong, but you don't know the extent of the damage. Abort early."
  },
  {
    "postid":1763,
    "postdate":1265956440,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.24597262,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.720616663,
    "polarity":-1,
    "normalized_text_entropy":4.24597262,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.720616663,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"If you are getting that from a method call that you implement, then don't return, return an empty. If you can't change the implementation then you are stuck with the check. If it should't be, then throw an exception. I would not go for the helper method that returns an empty list because it may be useful some times but then you would get used to call it in every loop you make possibly hiding some bugs."
  },
  {
    "postid":1764,
    "postdate":1377742260,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.120116249,
    "concept_entropy":0,
    "UMASS(coherence)":0.383217082,
    "TFIDF(informativeness)":1.290491015,
    "polarity":0,
    "normalized_text_entropy":4.120116249,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.383217082,
    "normalized_TFIDF":1.290491015,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Another way to effectively guard against a null in a for loop is to wrap your collection with Google Guava's as this, one hopes, makes the possibility of an effectively empty collection clear since the client would be expected to check if the collection is present with."
  },
  {
    "postid":1765,
    "postdate":1243197000,
    "tag":"0",
    "TFMvalue":0.941176471,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.266085425,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.055996465,
    "polarity":0,
    "normalized_text_entropy":4.266085425,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.055996465,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I have something like this: So is called once in the? I think it is, but want your opinion. I would like to know if using foreach in this way ( ) has a performance impact or it is equivalent to this:"
  },
  {
    "postid":1766,
    "postdate":1243197240,
    "tag":"0",
    "TFMvalue":0.625,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.308593591,
    "concept_entropy":4.004281011,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.642739913,
    "polarity":3,
    "normalized_text_entropy":4.308593591,
    "normalized_concept_entropy":4.004281011,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":2.642739913,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"If you want to be absolutely certain, then compile it both ways and decompile it and compare.I did this with the following source: and when I decompiled the class file with, I get: So there's your answer.It is called once with either for-loop form."
  },
  {
    "postid":1767,
    "postdate":1243198620,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.445165554,
    "concept_entropy":0,
    "UMASS(coherence)":0.565023249,
    "TFIDF(informativeness)":1.956896025,
    "polarity":5,
    "normalized_text_entropy":4.445165554,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.565023249,
    "normalized_TFIDF":1.956896025,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"It's only called once. In fact it uses an iterator to do the trick. Furthermore, in your case, I think you should use to avoid searching in the map each time."
  },
  {
    "postid":1768,
    "postdate":1243197480,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.409139805,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.299324713,
    "polarity":1,
    "normalized_text_entropy":4.409139805,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.299324713,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":" is called only once. The \"enhanced for loop\" is based on the interface, which it uses to obtain an, which is then used for the loop. It's not even possible to iterate over a in any other way, since there is no index or anything by which you could obtain individual elements. However, what you really should do is abandon this kind of micro-optimization worries entirely - if you ever have real performance problems, the chance is about 99% that it's something you'd never thought about on your own."
  },
  {
    "postid":1769,
    "postdate":1263440340,
    "tag":"0",
    "TFMvalue":0.909090909,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.481076836,
    "concept_entropy":0,
    "UMASS(coherence)":0.770841667,
    "TFIDF(informativeness)":1.724909722,
    "polarity":0,
    "normalized_text_entropy":4.481076836,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.770841667,
    "normalized_TFIDF":1.724909722,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"The answer is in the Java Language Specification, not need to decompile :) This is what we can read about: In your case, returns a subtype of so your enhanced statement is equivalent to the following basic statement: And is thus called only once."
  },
  {
    "postid":1770,
    "postdate":1243197180,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.182100864,
    "concept_entropy":0,
    "UMASS(coherence)":0.446784595,
    "TFIDF(informativeness)":1.871829418,
    "polarity":0,
    "normalized_text_entropy":4.182100864,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.446784595,
    "normalized_TFIDF":1.871829418,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Yes, it's called only once either way"
  },
  {
    "postid":1771,
    "postdate":1243197300,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.584541828,
    "concept_entropy":0,
    "UMASS(coherence)":0.531615723,
    "TFIDF(informativeness)":1.564719106,
    "polarity":-2,
    "normalized_text_entropy":4.584541828,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.531615723,
    "normalized_TFIDF":1.564719106,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"I believe it's compiler optimized to run only once per loop entry."
  },
  {
    "postid":1772,
    "postdate":1311348480,
    "tag":"0",
    "TFMvalue":0.818181818,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.402722869,
    "concept_entropy":0,
    "UMASS(coherence)":0.438298809,
    "TFIDF(informativeness)":3.806325673,
    "polarity":1,
    "normalized_text_entropy":4.402722869,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.438298809,
    "normalized_TFIDF":3.806325673,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I am trying to instrument java byte code. I want to recognize the, but I have found the identification of loops to be quite challenging.I have spent a good few hours looking at and (whom I thought must solve this problem all the time),however, I came up short.The tool I am augmenting / extending, is using ASM, so ideally. However,I would also welcome a recommendation for a good open source de-compiler, as clearly they would have solved the same problem."
  },
  {
    "postid":1773,
    "postdate":1311349620,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":23,
    "Normalized_count":0.383333333,
    "text_entropy":4.182107629,
    "concept_entropy":0,
    "UMASS(coherence)":0.64551763,
    "TFIDF(informativeness)":1.568993911,
    "polarity":2,
    "normalized_text_entropy":4.182107629,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.64551763,
    "normalized_TFIDF":1.568993911,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":": A bit of background/preamble.is a good framework to do this. It has a number of intermediate representations that make bytecode analysis more convenient (e.g. Jimple). You can build a based on your method body, for example an. Once you've decomposed the control flow graph into such a block graph, from the nodes, you should be able to identity the dominators (i.e. blocks that have an arrow coming back to them). This will give you the start of the loop. You may find something similar done in. Following the discussion with @Peter in comments to his answer. Talking the same example: This time, compiled with the Eclipse compiler (no specific option: simply autocompilation from within the IDE). This code hasn't been obfuscated (apart from being bad code, but that's a different matter).Here is the result (from): There is a loop between 3 and 12 (jumped in starting a 10) and another loop, due to the exception occurring from the division by zero at 8 to 22.Unlike the compiler result, where one could make as guess that there was an outer loop between 0 and 22 and an inner loop between 0 and 12, the nesting is less obvious here. To illustrate the kind of problems you may get with a less awkward example. Here is a relatively simple loop: After (normal) compilation within Eclipse, gives this: Before doing anything within the loop, you jump straight from 2 to 15. Block 15 to 17 is the header of the loop (the \"entry point\"). Sometimes, the header block could contain far more instructions, especially if the exit condition involves more evaluation, or if it's a loop.The concept of \"entry\" and \"exit\" of a loop may not always reflect what you'd write sensibly as Java source code (including the fact that you can rewrite loops as loops, for example). Using can also lead to multiple exit points. By the way, by \"block\", I mean a sequence of bytecode into which you can't jump and out of which you can't jump in the middle: they're only entered from the first line (not necessarily from the previous line, possibly from a jump from somewhere else) and exited from the last (not necessarily to the following line, it can jump somewhere else too). It seems that new classes/methods to analyse loops have been added since last time I had looked at Soot, which make it a bit more convenient. Here is a complete example. The class/method to analyse ( ) When compiled by the Eclipse compiler, this produces this bytecode ( ): Here is a program that loads the class (assuming it's on the classpath here) using Soot and displays its blocks and loops: Check the Soot documentation for more details on how to load classes. The is a model for the body of the loop, i.e. all the statements made from the bytecode. This uses the intermediate Jimple representation, which is equivalent to the bytecode, but easier to analyse and process. Here is the output of this program: Body: Blocks: Loops:uses, which uses an to build the list of blocks.The class will give you the entry statement and the exit statements. You should then be able to add extra statements if you wish. Jimple is quite convenient for this (it's close enough to the bytecode, but has a slightly higher level so as not to deal with everything manually). You can then output your modified file if needed. (See the Soot documentation for this.)"
  },
  {
    "postid":1774,
    "postdate":1311349080,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.246169013,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.282429394,
    "TFIDF(informativeness)":1.240318596,
    "polarity":0,
    "normalized_text_entropy":4.246169013,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.282429394,
    "normalized_TFIDF":1.240318596,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"The only way to jump backward in the code is via a loop.So you are looking for a goto,if_icmplt etc which goes to a previous byte code instruction. Once you have found the end of the loop and where it jumps back to is the start of the loop. Here is a complex example, from the document Bruno suggested. The byte-code for this appears in as You can see there is an inner loop between 0 and 12, a try/catch block between 0 and 15 and an outer loop between 0 and 22."
  },
  {
    "postid":1775,
    "postdate":1311349440,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.259919009,
    "concept_entropy":0,
    "UMASS(coherence)":0.468824447,
    "TFIDF(informativeness)":1.900970992,
    "polarity":3,
    "normalized_text_entropy":4.259919009,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.468824447,
    "normalized_TFIDF":1.900970992,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"Are you actually building your class byte by byte? Thats pretty wild! The front page of ASM links to the plugin for Eclipse, which I assume you are using. If you click on the first image on there you will notice the code has a while loop, and you can see at least some of the byte code used to implement that loop. For reference here is that screenshot: Looks like loops are simply implemented as GOTO's with a boundary check. I'm talking about this line: I'm sure the L3 marker has code for checking the index bound and decided wether to JMP. I think this is going to be quite hard for you if you want to instrument loops one byte code at a time. ASM does have the option of using a template class as the basis for you instrumentation, have you tried using it?"
  },
  {
    "postid":1776,
    "postdate":1268704380,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.229537494,
    "concept_entropy":0,
    "UMASS(coherence)":0.532481542,
    "TFIDF(informativeness)":1.989590986,
    "polarity":3,
    "normalized_text_entropy":4.229537494,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.532481542,
    "normalized_TFIDF":1.989590986,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"So I want to iterate for each character in a string. So I thought: but I get a compiler error: How can I do this?"
  },
  {
    "postid":1777,
    "postdate":1268704560,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.458146172,
    "TFIDF(informativeness)":1.90023466,
    "polarity":1,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.458146172,
    "normalized_TFIDF":1.90023466,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"The easiest way to for-each every in a is to use: This gives you the conciseness of for-each construct, but unfortunately (which is immutable) must perform a defensive copy to generate the (which is mutable), so there is some cost penalty. From the: There are more verbose ways of iterating over characters in an array (regular for loop,, etc) but if you're willing to pay the cost for-each is the most concise."
  },
  {
    "postid":1778,
    "postdate":1268704500,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.697845823,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.33072007,
    "polarity":1,
    "normalized_text_entropy":3.697845823,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.33072007,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"ξ"
  },
  {
    "postid":1779,
    "postdate":1268704740,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.405625149,
    "concept_entropy":4.590056655,
    "UMASS(coherence)":0.538938972,
    "TFIDF(informativeness)":3.22436269,
    "polarity":5,
    "normalized_text_entropy":4.405625149,
    "normalized_concept_entropy":4.590056655,
    "normalized_UMASS":0.538938972,
    "normalized_TFIDF":3.22436269,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"You need to convert the String object into an array of char using the() method of the String class:"
  },
  {
    "postid":1780,
    "postdate":1364991000,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.993961444,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.468321012,
    "TFIDF(informativeness)":1.243488535,
    "polarity":-1,
    "normalized_text_entropy":3.993961444,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.468321012,
    "normalized_TFIDF":1.243488535,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"For Travers an String you can also use with the string. like :is method of string handling in java which help to Travers the string for specific character. "
  },
  {
    "postid":1781,
    "postdate":1261665900,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.175699647,
    "concept_entropy":4.256866543,
    "UMASS(coherence)":0.461867294,
    "TFIDF(informativeness)":1.253021448,
    "polarity":0,
    "normalized_text_entropy":4.175699647,
    "normalized_concept_entropy":4.256866543,
    "normalized_UMASS":0.461867294,
    "normalized_TFIDF":1.253021448,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Given the following code sample: This is a valid Java program, although the method doSomething() should return an int but never does. If you run it, it will end in an infinite loop. If you put the argument of the while loop in a separate variable (e.g. boolean bool = true) the compiler will tell you to return an int in this method. So my question is: is this somewhere in the Java specification and are there situation where this behavior might be useful?"
  },
  {
    "postid":1782,
    "postdate":1261689180,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.441891608,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.462803748,
    "TFIDF(informativeness)":1.990156969,
    "polarity":0,
    "normalized_text_entropy":4.441891608,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.462803748,
    "normalized_TFIDF":1.990156969,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I'll just quote the, as it's rather clear on this: ... ... And then apply the above definitions to:"
  },
  {
    "postid":1783,
    "postdate":1261666920,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":2.321928095,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.285607131,
    "TFIDF(informativeness)":1.791759469,
    "polarity":0,
    "normalized_text_entropy":2.321928095,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.285607131,
    "normalized_TFIDF":1.791759469,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Java specification defines a concept called. You are not allowed to have an unreachable statement in your code (it's a compile time error). A statement makes the following statements unreachable by definition. You are not even allowed to have a statement after the statement in Java. Note that while is undecidable in generic case, the definition of Unreachable Statement is more strict than just halting. It's deciding where a program definitely does not halt. The compiler is theoretically not able to detect infinite loops and unreachable statements but it has to detect specific cases defined in the spec."
  },
  {
    "postid":1784,
    "postdate":1261666320,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.288296812,
    "concept_entropy":0,
    "UMASS(coherence)":0.618318003,
    "TFIDF(informativeness)":3.031531113,
    "polarity":2,
    "normalized_text_entropy":4.288296812,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.618318003,
    "normalized_TFIDF":3.031531113,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"If you are asking if infinite loops can be useful, the answer is yes.There are plenty of situations where you want something running forever, though the loop will usually be terminated at some point.As to your question: \"Can java recognized when a loop will be infinite?\"The answer is that it is impossible for a computer to have an algorithm to determine if a program will run forever or not.Read about: Reading a bit more, your question is also asking why the doSomething() function does not complain that it is not returning an int. Interestingly the following source does NOT compile. This indicates to me that, as the wiki page on the halting problem suggests, it is impossible for there to be an algorithm to determine if every problem will terminate, but this does not mean someone hasn't added the simple case: to the java spec.My example above is a little more complicated, so Java can't have it remembered as an infinite loop.Truely, this is a weird edge case, but it's there just to make things compile.Maybe someone will try other combinations. EDIT: not an issue with unreachable code. The above works, so the while(true); isn't being ignored by the compiler as unreachable, otherwise it would throw a compile time error!"
  },
  {
    "postid":1785,
    "postdate":1261666320,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.074260859,
    "concept_entropy":0,
    "UMASS(coherence)":0.51291869,
    "TFIDF(informativeness)":1.345658642,
    "polarity":0,
    "normalized_text_entropy":4.074260859,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.51291869,
    "normalized_TFIDF":1.345658642,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Yes, you can see these 'infinite' loops in some threads, for example server threads that listen on a certain port for incoming messages."
  },
  {
    "postid":1786,
    "postdate":1261666920,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.167760413,
    "concept_entropy":0,
    "UMASS(coherence)":0.571214262,
    "TFIDF(informativeness)":2.22213099,
    "polarity":0,
    "normalized_text_entropy":4.167760413,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.571214262,
    "normalized_TFIDF":2.22213099,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"The program is legal Java according to the specification.The JLS (and Java compiler) recognize that the method cannot return, and therefore no statement is required.Indeed, if you added a statement after the loop, the Java compiler would give you a compilation error because the return statement would be unreachable code. I don't think so, except possibly in obscure unit tests. I occasionally write methods that will never return (normally), but putting the current thread into an uninterruptible infinite busy-loop rarely makes any sense."
  },
  {
    "postid":1787,
    "postdate":1261666800,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.42245644,
    "concept_entropy":0,
    "UMASS(coherence)":0.508930708,
    "TFIDF(informativeness)":2.72889993,
    "polarity":3,
    "normalized_text_entropy":4.42245644,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.508930708,
    "normalized_TFIDF":2.72889993,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"After rereading the question....Java understands while(true); can never actually complete, it does not trace the following code completely. Is this useful? Doubtful."
  },
  {
    "postid":1788,
    "postdate":1261688460,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.159953712,
    "concept_entropy":0,
    "UMASS(coherence)":0.71747053,
    "TFIDF(informativeness)":1.718694295,
    "polarity":2,
    "normalized_text_entropy":4.159953712,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.71747053,
    "normalized_TFIDF":1.718694295,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"You might be implementing a general interface such that, even though the method may exit with a meaningful return value, implementation is a useful infinite loop (for example, a network server) which never has a situation where it should exit, i.e. trigger whatever action returning a value means. Also, regarding code like, this compile given a modifier on. I don't know offhand but I would imagine this is Java's choice of reasonable straightforward constant expression analysis (which needs to be defined straightforwardly since, due to this rejection of programs dependent on it, it is part of the language definition)."
  },
  {
    "postid":1789,
    "postdate":1268228340,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.259003707,
    "concept_entropy":0,
    "UMASS(coherence)":0.514879568,
    "TFIDF(informativeness)":2.546819562,
    "polarity":1,
    "normalized_text_entropy":4.259003707,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.514879568,
    "normalized_TFIDF":2.546819562,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Some notes about unreachable statements: In the description of 'unreachable statement' could be found. Especially interesting the following sentence: So, it is not obviously possible to exit from infinite loop. However, there were two more options: or hack directly into class file or JVM operating memory space."
  },
  {
    "postid":1790,
    "postdate":1372327920,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.292474326,
    "concept_entropy":0,
    "UMASS(coherence)":0.478311489,
    "TFIDF(informativeness)":2.574289356,
    "polarity":3,
    "normalized_text_entropy":4.292474326,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.478311489,
    "normalized_TFIDF":2.574289356,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"I've got an issue with the PMD rule. Here is some example code: PMD gives me the above mentioned rule violation at the marked spot in the code. How am I supposed to create instances of a class without creating them within a loop? I know that some of PMD's rules are controversial (like the rule). But up to now I at least understood the idea behind them. I don't understand the reasoning behind this rule. Can someone help me with that?"
  },
  {
    "postid":1791,
    "postdate":1372887360,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.186669079,
    "concept_entropy":0,
    "UMASS(coherence)":0.455169983,
    "TFIDF(informativeness)":1.454560995,
    "polarity":1,
    "normalized_text_entropy":4.186669079,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.455169983,
    "normalized_TFIDF":1.454560995,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"For your specific use case it makes no sense as you keep the reference to the new Object the loop. So there is no real alternative to your solution. More generally speaking,* (apart from the hidden cost that the GC will run more often). In particular, the allocation is almost free and the time of GC mostly depends on the quantity of reachable objects - dead objects do not increase GC time for typical GC algorithms. The JIT can also perform various optimisations if it detects that unnecessary objects are created. Obviously, creating useless is not a recommended practice, but trying to reuse objects is often counterproductive. As a practical example, you can have a look at which shows that creating a new set within a loop is cheaper than creating one before the loop and clearing it at each iteration."
  },
  {
    "postid":1792,
    "postdate":1376313780,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.217926593,
    "concept_entropy":0,
    "UMASS(coherence)":0.58487159,
    "TFIDF(informativeness)":1.840746922,
    "polarity":0,
    "normalized_text_entropy":4.217926593,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.58487159,
    "normalized_TFIDF":1.840746922,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I was wondering if it was \"bad practice\" to use a break statement to exit a loop instead of fulfilling the loop condition? I don't have enough insight in java and the JVM to know how a loop is handled, so I waswondering if I was overlooking something critical by doing so. The focus of this question: is there a specific preformance overhead?"
  },
  {
    "postid":1793,
    "postdate":1376313900,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.232135808,
    "concept_entropy":0,
    "UMASS(coherence)":0.548529247,
    "TFIDF(informativeness)":1.345246879,
    "polarity":-1,
    "normalized_text_entropy":4.232135808,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.548529247,
    "normalized_TFIDF":1.345246879,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Good lord no. Sometimes there is a possibility that something can occur in the loop that satisfies the overall requirement, without satisfying the logical loop condition. In that case, is used, to stop you cycling around a loop pointlessly. What makes more sense in this example. Continue looping to 10 every time, even after you've found it, or loop until you find the item and stop? Or to put it into real world terms; when you find your keys, do you keep looking? Why not set to to break the loop? It's pointless. We've got! Unless your code is making the assumption that is definitely larger than later on (and it probably shouldn't be) then you're fine just using. There are definitely other ways to simulate. For example, adding extra logic to your termination condition in your loop. Saying that it is either loop pointlessly or use isn't fair. As pointed out, a while loop can often achieve similar functionality. For example, following the above example.. Using simply means you can achieve this functionality with a loop. It also means you don't have to keep adding in conditions into your termination logic, whenever you want the loop to behave differently. For example. Rather than a with a termination condition that looks like this:"
  },
  {
    "postid":1794,
    "postdate":1376313960,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.264128411,
    "concept_entropy":0,
    "UMASS(coherence)":0.573564729,
    "TFIDF(informativeness)":2.300807112,
    "polarity":1,
    "normalized_text_entropy":4.264128411,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.573564729,
    "normalized_TFIDF":2.300807112,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Using be a bad practice, within a specific context, where you are clearly misusing it. But some very important idioms cannot be coded without it, or at least would result in far less readable code. In those cases, is the way to go. In other words, don't listen to any blanket, unqualified advice��ΗΔabout or anything else. It is not once that I've seen code totally emaciated just to satisfy a \"good practice\". Regarding your concern about performance overhead, there is absolutely none. At the bytecode level there are no explicit loop constructs anyway: all flow control is implemented in terms of conditional jumps."
  },
  {
    "postid":1795,
    "postdate":1376313900,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.253657837,
    "concept_entropy":0,
    "UMASS(coherence)":0.644346288,
    "TFIDF(informativeness)":2.704586385,
    "polarity":1,
    "normalized_text_entropy":4.253657837,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.644346288,
    "normalized_TFIDF":2.704586385,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"The JLS specifies a break is an abnormal termination of a loop. However, just because it is considered abnormal does not mean that it is not used in many different code examples, projects, products, space shuttles, etc. The JVM specification does not state either an existence or absence of a performance loss, though it is clear code execution will continue after the loop. However, code readability can suffer with odd breaks. If you're sticking a break in a complex if statement surrounded by side effects and odd cleanup code, with possibly a multilevel break with a label(or worse, with a strange set of exit conditions one after the other), it's not going to be easy to read for anyone. If you want to break your loop by forcing the iteration variable to be outside the iteration range, or by otherwise introducing a not-necessarily-direct way of exiting, it's less readable than.However, looping extra times in an empty manner is always bad practice as it takes extra iterations and may be unclear."
  },
  {
    "postid":1796,
    "postdate":1376313960,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.102478107,
    "concept_entropy":4.450004006,
    "UMASS(coherence)":0.45902791,
    "TFIDF(informativeness)":1.978282606,
    "polarity":1,
    "normalized_text_entropy":4.102478107,
    "normalized_concept_entropy":4.450004006,
    "normalized_UMASS":0.45902791,
    "normalized_TFIDF":1.978282606,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Using break in loops can be perfectly legitimate and it can even be the only way to solve some problems. However, it's bad reputation comes from the fact that new programmers usually abuse it, leading to confusing code, especially by using break to stop the loop in conditions that could have been written in the loop condition statement in the first place. "
  },
  {
    "postid":1797,
    "postdate":1376315700,
    "tag":"0",
    "TFMvalue":0.909090909,
    "comparitive_count":14,
    "Normalized_count":0.233333333,
    "text_entropy":4.376729288,
    "concept_entropy":4.493323281,
    "UMASS(coherence)":0.50277549,
    "TFIDF(informativeness)":1.287327839,
    "polarity":1,
    "normalized_text_entropy":4.376729288,
    "normalized_concept_entropy":4.493323281,
    "normalized_UMASS":0.50277549,
    "normalized_TFIDF":1.287327839,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"In my opinion a loop should be used when a fixed amount of iterations will be done and they won't be stopped before every iteration has been completed. In the other case where you want to quit earlier I prefer to use a loop. Even if you read those two little words it seems more logical. Some examples: When I read this code quickly I will know for sure it will print out 10 lines and then go on. This one is already less clear to me. Why would you first state you will take 10 iterations, but then inside the loop add some extra conditions to stop sooner? I prefer the previous example written in this way (even when it's a little more verbose, but that's only with 1 line more): Everyone who will read this code will see immediatly that there is an extra condition that might terminate the loop earlier. Ofcourse in very small loops you can always discuss that every programmer will notice the break statement. But I can tell from my own experience that in larger loops those breaks can be overseen. (And that brings us to another topic to start splitting up code in smaller chunks)"
  },
  {
    "postid":1798,
    "postdate":1376313960,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.126900726,
    "concept_entropy":4.199084272,
    "UMASS(coherence)":0.64551763,
    "TFIDF(informativeness)":1.219926175,
    "polarity":0,
    "normalized_text_entropy":4.126900726,
    "normalized_concept_entropy":4.199084272,
    "normalized_UMASS":0.64551763,
    "normalized_TFIDF":1.219926175,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"No, it is not a bad practice to break out of a loop when if(like a match is found). Many times, you may want to stop iterations because you have already achieved what you want, and there is no point iterating further. But, be careful to make sure you are not accidentally missing something or breaking out when not required. This can also if you break the loop, instead of iterating over thousands of records even if the purpose of the loop is complete(i.e. may be to match required record is already done). Example : "
  },
  {
    "postid":1799,
    "postdate":1376314680,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.281117469,
    "concept_entropy":4.458873653,
    "UMASS(coherence)":0.455169983,
    "TFIDF(informativeness)":1.046480964,
    "polarity":2,
    "normalized_text_entropy":4.281117469,
    "normalized_concept_entropy":4.458873653,
    "normalized_UMASS":0.455169983,
    "normalized_TFIDF":1.046480964,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"It isn't bad practice, but it can make code less readable. One useful refactoring to work around this is to move the loop to a separate method, and then use a return statement instead of a break, for example this (example lifted from @Chris's answer): can be refactored (using) to this: Which when called from the surrounding code can prove to be more readable."
  },
  {
    "postid":1800,
    "postdate":1376315160,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.297261715,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.400948308,
    "polarity":0,
    "normalized_text_entropy":4.297261715,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.400948308,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"If you start to do something like this, then I would say it starts to get a bit strange and you're better off moving it to a seperate method that a result upon the matchedCondition. To elaborate on how to clean up the above code, you can refactor, moving the code to a function that instead of using. This is in general, better dealing with complex/messy. However for something simple like my below example. By all means use! And changing the conditions, in the above case, and's value, you would just make the code really hard to read. Also there could be a case where the upper limits (10 in the example) are variables so then it would be even harder to guess what value to set it to in order to exit the loop. You could of course just set and to Integer.MAX_VALUE, but I think you can see this starts to get messy very quickly. :)"
  },
  {
    "postid":1801,
    "postdate":1376313840,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.363311424,
    "concept_entropy":4.341271518,
    "UMASS(coherence)":0.854102801,
    "TFIDF(informativeness)":2.095771295,
    "polarity":-1,
    "normalized_text_entropy":4.363311424,
    "normalized_concept_entropy":4.341271518,
    "normalized_UMASS":0.854102801,
    "normalized_TFIDF":2.095771295,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"No, it is not a bad practice. It is the most easiest and efficient way."
  },
  {
    "postid":1802,
    "postdate":1376314020,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.351419331,
    "concept_entropy":4.288957597,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.884528498,
    "polarity":1,
    "normalized_text_entropy":4.351419331,
    "normalized_concept_entropy":4.288957597,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.884528498,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"While its not bad practice to use break and there are many excellent uses for it, it should not be all you rely upon. Almost any use of a break can be written into the loop condition. Code is far more readable when real conditions are used, but in the case of a long-running or infinite loop, breaks make perfect sense. They also make sense when searching for data, as shown above."
  },
  {
    "postid":1803,
    "postdate":1376314140,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.818014034,
    "concept_entropy":4.289231742,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.77095685,
    "polarity":1,
    "normalized_text_entropy":3.818014034,
    "normalized_concept_entropy":4.289231742,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.77095685,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"If you know in advance where the loop will have to stop, it will probably improve code readability to state the condition in the,, or loop. Otherwise, that's the exact use case for."
  },
  {
    "postid":1804,
    "postdate":1376314860,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.193618103,
    "concept_entropy":0,
    "UMASS(coherence)":0.587906848,
    "TFIDF(informativeness)":1.301785724,
    "polarity":1,
    "normalized_text_entropy":4.193618103,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.587906848,
    "normalized_TFIDF":1.301785724,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":" and breaks the readability for the reader, although it's often useful.Not as much as \"goto\" concept, but almost. Besides, if you take some new languages like Scala (inspired by Java and functional programming languages like Ocaml), you will notice that and simply disappeared. Especially in functional programming, this style of code is avoided: To sum up: andare widely used in Java for an imperative style, but for any coders that used to practice functional programming, it might be.. weird."
  },
  {
    "postid":1805,
    "postdate":1376323080,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.354718357,
    "concept_entropy":0,
    "UMASS(coherence)":0.519448303,
    "TFIDF(informativeness)":1.581858931,
    "polarity":-1,
    "normalized_text_entropy":4.354718357,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.519448303,
    "normalized_TFIDF":1.581858931,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"There are a number of common situations for which is the most natural way to express the algorithm.They are called \"loop-and-a-half\" constructs; the paradigm example is If you can't use for this you have to repeat yourself instead: Similarly, for, there is a common pattern that looks like this: This is often more readable than the alternative with chained, particularly when is more than just one function call. Further reading: "
  },
  {
    "postid":1806,
    "postdate":1297336320,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.340075117,
    "concept_entropy":4.434465322,
    "UMASS(coherence)":0.359767,
    "TFIDF(informativeness)":1.606698302,
    "polarity":0,
    "normalized_text_entropy":4.340075117,
    "normalized_concept_entropy":4.434465322,
    "normalized_UMASS":0.359767,
    "normalized_TFIDF":1.606698302,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Does every recursive function have an equivalent for loop? (Both achieve the same result). I have this recursive function: Given that words is a Set[], and where words[i] = a set with words of length i. What am trying to do is:initiate the recursion with a word (say, \"stackoverflow\", no spaces), I am trying to find if this word can be cut into subwords (\"stack\", \"over\", \"flow\") .. minimum length of a subword is 3, and given that the subword of lenght i is in the Set words[i]. I can confirm this code works, but it may have a memory problem, so I want to turn it to a loop.. if possible. Do you need more info?? Thanks."
  },
  {
    "postid":1807,
    "postdate":1297336860,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.233293453,
    "concept_entropy":4.365336764,
    "UMASS(coherence)":0.822811207,
    "TFIDF(informativeness)":1.10521734,
    "polarity":-1,
    "normalized_text_entropy":4.233293453,
    "normalized_concept_entropy":4.365336764,
    "normalized_UMASS":0.822811207,
    "normalized_TFIDF":1.10521734,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Tail recursion can always be unrolled into a loop and your code is tail recursion, so yes. This is now proper tail recursion. Now to turn it into a loop: Note that this code can be further optimised, I just wanted to demonstrate the \"automatic\" method of turning recursion into a loop."
  },
  {
    "postid":1808,
    "postdate":1297336920,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.719739434,
    "concept_entropy":4.567971432,
    "UMASS(coherence)":0.400324732,
    "TFIDF(informativeness)":1.321170656,
    "polarity":0,
    "normalized_text_entropy":3.719739434,
    "normalized_concept_entropy":4.567971432,
    "normalized_UMASS":0.400324732,
    "normalized_TFIDF":1.321170656,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"For the general question: Yes every recursion can be transformed in a loop. You can model the the stack created and used by recursion explicitely and modify it in the loop.For the specific problem: Looking at your code as a function and ignoring side effects I think you could just return false. If you actually need the split words try the following:"
  },
  {
    "postid":1809,
    "postdate":1297336740,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":4.249486893,
    "concept_entropy":4.507641048,
    "UMASS(coherence)":0.557554451,
    "TFIDF(informativeness)":0.659887537,
    "polarity":1,
    "normalized_text_entropy":4.249486893,
    "normalized_concept_entropy":4.507641048,
    "normalized_UMASS":0.557554451,
    "normalized_TFIDF":0.659887537,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"Short answer: in general you can, in this case you can easily, but if you fix the bug in your code's logic you have to worry about maintaining a stack yourself. Long answer: First, the iterative version of your recursive method: This works by replacing the recursive call with assignment to the parameters, and sticking it all in a loop. But like your original code, this contains a bug! (I can't think of actual words that this bug works with, so imagine my made up words are real words.) Suppose your long word is ABCDEFGH, and that ABCD, EFGH, and ABCDE are all words, but FGH isn't. looks for the longest word first, so it will match ABCDE, then discover that FGH isn't a word, and tell you that ABCDEFGH can't be cut into subwords. But it could be split into ABCD and EFGH! It misses the shorter initial match because you don't consider other options once you've found a match. (And if your code started by looking for the shorter match, it still wouldn't work if ABC was a word and DEFGH wasn't.) So: Now, turning this into an iterative method is harder: sometimes you have recursive calls. That means simply assigning to your parameters won't work, because you need the parameters' original values to calculate the parameters for the second call. You have to explicitly manage a stack or a queue with all the different values, because now the language isn't doing it for you."
  },
  {
    "postid":1810,
    "postdate":1297336680,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.299273007,
    "concept_entropy":0,
    "UMASS(coherence)":0.40799711,
    "TFIDF(informativeness)":1.010836362,
    "polarity":1,
    "normalized_text_entropy":4.299273007,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.40799711,
    "normalized_TFIDF":1.010836362,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I answer your first question: Yes, every recursive function has an iterative equivalent.. This also is kind of related to (not exactly because tail calls aren't really supported by popular Java VMs). Converting a tail recursive function (such as the one in the question) should be especially easy."
  },
  {
    "postid":1811,
    "postdate":1297338240,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.219984306,
    "concept_entropy":4.484741989,
    "UMASS(coherence)":0.522949587,
    "TFIDF(informativeness)":1.755231213,
    "polarity":2,
    "normalized_text_entropy":4.219984306,
    "normalized_concept_entropy":4.484741989,
    "normalized_UMASS":0.522949587,
    "normalized_TFIDF":1.755231213,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"@biziclop demonstrates how to refactor the code to be non recursive.I would go further and reduce the code so that. code"
  },
  {
    "postid":1812,
    "postdate":1245832920,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.358426508,
    "concept_entropy":4.424437602,
    "UMASS(coherence)":0.661005584,
    "TFIDF(informativeness)":1.946555603,
    "polarity":1,
    "normalized_text_entropy":4.358426508,
    "normalized_concept_entropy":4.424437602,
    "normalized_UMASS":0.661005584,
    "normalized_TFIDF":1.946555603,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"In order to initialise all JTextfFields on a JPanlel when users click a \"clear button\"I need to loop through the JPanel (instead of setting all individual field to \"\").Can someone please show me how to use a For Each loop in order to iterate thru the JPanel in search of JTextFields. Very much appreciated Dallag. "
  },
  {
    "postid":1813,
    "postdate":1245833100,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.173109528,
    "concept_entropy":0,
    "UMASS(coherence)":0.477557025,
    "TFIDF(informativeness)":2.381325268,
    "polarity":0,
    "normalized_text_entropy":4.173109528,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.477557025,
    "normalized_TFIDF":2.381325268,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"But if you have JTextFields more deeply nested, you could use the following recursive form:A sample for suggestion would be to have list in your frame class: and when you initialize the individual text fields, add them to this list: and when the user clicks on the clear button, just:"
  },
  {
    "postid":1814,
    "postdate":1245841560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.346569083,
    "concept_entropy":0,
    "UMASS(coherence)":0.749302216,
    "TFIDF(informativeness)":1.288823933,
    "polarity":2,
    "normalized_text_entropy":4.346569083,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.749302216,
    "normalized_TFIDF":1.288823933,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Whilst another answer shows a direct way to solve your problem, your question is implying a poor solution. Generally want static dependencies between layers to be one way. You should need to go a pack through. Casting (assuming generics) is an easy way to see that something has gone wrong. So when you create the text fields for a form, add them to the list to be cleared in a clear operation as well as adding them to the panel. Of course in real code there probably other things you want to do to them too. In real code you probably want to be dealing with models (possibly) rather thans."
  },
  {
    "postid":1815,
    "postdate":1363807440,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.194264873,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.618490211,
    "polarity":1,
    "normalized_text_entropy":4.194264873,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.618490211,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I have to read the string and output each letter's frequency using only for loops. The instructor hinted that I'd need to use two loops and gave us the following code to begin:I figured I'd necro this question and post the solution I found a year ago due to the fact that this question has been getting a decent amount of hits."
  },
  {
    "postid":1816,
    "postdate":1382930040,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.886280046,
    "concept_entropy":4.433388958,
    "UMASS(coherence)":0.328836742,
    "TFIDF(informativeness)":2.174096433,
    "polarity":0,
    "normalized_text_entropy":3.886280046,
    "normalized_concept_entropy":4.433388958,
    "normalized_UMASS":0.328836742,
    "normalized_TFIDF":2.174096433,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1817,
    "postdate":1363807620,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.387163918,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.916344038,
    "polarity":3,
    "normalized_text_entropy":4.387163918,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.916344038,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"On the second for loop, just go through each character of string and compare it with the current character of first for loop. (not the solution I would do, just following your instructors hint) Another way is to store values within a map with the chars as key and a counter of occurrences as value."
  },
  {
    "postid":1818,
    "postdate":1363808220,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.33675149,
    "concept_entropy":0,
    "UMASS(coherence)":0.764984446,
    "TFIDF(informativeness)":1.863397793,
    "polarity":3,
    "normalized_text_entropy":4.33675149,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.764984446,
    "normalized_TFIDF":1.863397793,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"I would use a simple array. Simply convert each letter to an index and increment the array at that index."
  },
  {
    "postid":1819,
    "postdate":1363808460,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.515724536,
    "concept_entropy":0,
    "UMASS(coherence)":0.664681044,
    "TFIDF(informativeness)":1.948320214,
    "polarity":0,
    "normalized_text_entropy":4.515724536,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.664681044,
    "normalized_TFIDF":1.948320214,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"To build off of sdasdadas's comment and Jean'srespective answer: The outer for loop would rotate through each character in the alphabet, maintaining a count (which needs to be reset each time the outer loop executes.) The inner loop cycles through the \"hello world\" string, incrementing the counter if the character serving as the current argument of the outer for loop is found. I can't comment below Andre's answer, but I can provide some pseudocode to address what I think you meant in your comment regarding the counter. Also, see."
  },
  {
    "postid":1820,
    "postdate":1334926560,
    "tag":"0",
    "TFMvalue":0.769230769,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.265974225,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.874928928,
    "polarity":1,
    "normalized_text_entropy":4.265974225,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.874928928,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I currently have the following code and the data is displayed fine.But now I need to make the \"quantity\" part modifiable. The user should be able to update that field, press submit and when its sent to the server, \"myList\" should automatically update with the new quantities. I've tried searching for help on this but all I keep finding is examples on how to display data only, not modify it. Any help would be appreciated."
  },
  {
    "postid":1821,
    "postdate":1334927820,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.332826011,
    "concept_entropy":4.30792879,
    "UMASS(coherence)":0.478866155,
    "TFIDF(informativeness)":1.380877195,
    "polarity":5,
    "normalized_text_entropy":4.332826011,
    "normalized_concept_entropy":4.30792879,
    "normalized_UMASS":0.478866155,
    "normalized_TFIDF":1.380877195,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"So this is tricky, because there are many things to get done in order for it to work. First, declare your tags inside the iterator with the html tags, with attribute INDEXED=TRUE and an ID DIFFERENT THAN THE NAME, i also took out the \"indexId\" attribute to use the simple \"index\" word for the index:after that, in order for struts to be able to get and set the attributes of your beans, you need to declare EXTRA get and set methods inside your collection object, using the name you wrote in the id of the iterate tag. In this case, you would write 2 extra get and set methods for the \"myListI\" :"
  },
  {
    "postid":1822,
    "postdate":1334927400,
    "tag":"0",
    "TFMvalue":0.846153846,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.285998884,
    "concept_entropy":4.440391482,
    "UMASS(coherence)":0.544364894,
    "TFIDF(informativeness)":3.398670122,
    "polarity":-7,
    "normalized_text_entropy":4.285998884,
    "normalized_concept_entropy":4.440391482,
    "normalized_UMASS":0.544364894,
    "normalized_TFIDF":3.398670122,
    "normalized_polarity":-7,
    "tagtext":"loops",
    "posttext":"Theoretically, the could be used for this: But, there is no corresponding attribute on the tag, which limits its usefulness. Also, the required combination of, and attributes can be rather confusing. I found it easier to use jsp scriptlets to generate the property name including the iteration index. The following code requires that your form has a string array property \"quantity\"."
  },
  {
    "postid":1823,
    "postdate":1349624100,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.323503694,
    "concept_entropy":4.443675076,
    "UMASS(coherence)":0.72283683,
    "TFIDF(informativeness)":1.605819165,
    "polarity":1,
    "normalized_text_entropy":4.323503694,
    "normalized_concept_entropy":4.443675076,
    "normalized_UMASS":0.72283683,
    "normalized_TFIDF":1.605819165,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I think Th0rndikes answer is mostly correct.My implementation is slightly different, so it might be worth trying this as well. Form JSP In summary, I didn't use Type in the iterate tag, using the property tag instead.In the bean adding a getter with matched the name of the iterate ID in the JSP (param) with an index as a method parameter did the trick."
  },
  {
    "postid":1824,
    "postdate":1277405700,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.172973804,
    "concept_entropy":0,
    "UMASS(coherence)":0.708039443,
    "TFIDF(informativeness)":1.339216879,
    "polarity":0,
    "normalized_text_entropy":4.172973804,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.708039443,
    "normalized_TFIDF":1.339216879,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I have several fields, each one is like this: Using a loop with a counter, I want to be able to say fieldx.Where x is the value of the counter in that loop.This means if I have 6 entries in my array, fields1 - field6 will be given values. Is fieldx possible?"
  },
  {
    "postid":1825,
    "postdate":1277405820,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.171833098,
    "concept_entropy":4.459083122,
    "UMASS(coherence)":0.603568624,
    "TFIDF(informativeness)":0.804350268,
    "polarity":1,
    "normalized_text_entropy":4.171833098,
    "normalized_concept_entropy":4.459083122,
    "normalized_UMASS":0.603568624,
    "normalized_TFIDF":0.804350268,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"You can do it with, but in general it is better if you can declare your fields in an array. Instead of: You can do this: Then you can loop over the array setting the values:"
  },
  {
    "postid":1826,
    "postdate":1401900660,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.271064886,
    "concept_entropy":0,
    "UMASS(coherence)":0.679803494,
    "TFIDF(informativeness)":1.261165617,
    "polarity":0,
    "normalized_text_entropy":4.271064886,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.679803494,
    "normalized_TFIDF":1.261165617,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I try to do app which show elements. Each element should start showing when the before element was hidden. Each element is showing 2 seconds.Code: All elements are being shown in the same time. And I try add But this stoped the action in window. I try add this after code: But loop wasn't stay. I try do it with and, but it also don't work. Don't suggest me to do do next action in because this must be repeat a lot.Anybody have another idea?EDIT I also use Handler but it don't work"
  },
  {
    "postid":1827,
    "postdate":1401901320,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.202651661,
    "concept_entropy":4.526217462,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.78496173,
    "polarity":1,
    "normalized_text_entropy":4.202651661,
    "normalized_concept_entropy":4.526217462,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.78496173,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I would recommend you not to implement this code in the main thread. Create an async task, which hides a button and on postExequte calls itself."
  },
  {
    "postid":1828,
    "postdate":1296008460,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.321185936,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.843081914,
    "polarity":1,
    "normalized_text_entropy":4.321185936,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.843081914,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"This is bothering me, my code works and runs but when I went to run it, it seems to be looping my for loops twice, can anyone help me with my logic? Thanks... "
  },
  {
    "postid":1829,
    "postdate":1296010020,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.151530685,
    "concept_entropy":0,
    "UMASS(coherence)":0.414430233,
    "TFIDF(informativeness)":1.227851268,
    "polarity":2,
    "normalized_text_entropy":4.151530685,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.414430233,
    "normalized_TFIDF":1.227851268,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Calling and will cause to be called twice because the display needs to be redrawn for each call. Try removing and move set size to the bottom, like this:- This should work properly now."
  },
  {
    "postid":1830,
    "postdate":1245783480,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.293474909,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.17426463,
    "polarity":2,
    "normalized_text_entropy":4.293474909,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.17426463,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"How can i iterate bits in a byte array?"
  },
  {
    "postid":1831,
    "postdate":1245783720,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.201460151,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.743486444,
    "TFIDF(informativeness)":1.556925921,
    "polarity":-1,
    "normalized_text_entropy":4.201460151,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.743486444,
    "normalized_TFIDF":1.556925921,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"You'd have to write your own implementation of which took an array of bytes, and then created values which remembered the current index into the byte array the current index within the current byte. Then a utility method like this would come in handy: (where ranges from 0 to 7). Each time was called you'd have to increment your bit index within the current byte, and increment the byte index within byte array if you reached \"the 9th bit\". It's not really - but a bit of a pain. Let me know if you'd like a sample implementation..."
  },
  {
    "postid":1832,
    "postdate":1245787920,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.296763672,
    "concept_entropy":0,
    "UMASS(coherence)":0.630923847,
    "TFIDF(informativeness)":1.38862519,
    "polarity":-1,
    "normalized_text_entropy":4.296763672,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.630923847,
    "normalized_TFIDF":1.38862519,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1833,
    "postdate":1245783840,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.202324668,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.520162866,
    "TFIDF(informativeness)":1.413238881,
    "polarity":-4,
    "normalized_text_entropy":4.202324668,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.520162866,
    "normalized_TFIDF":1.413238881,
    "normalized_polarity":-4,
    "tagtext":"loops",
    "posttext":"Original: Or using Java idioms"
  },
  {
    "postid":1834,
    "postdate":1245784740,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.124866894,
    "concept_entropy":0,
    "UMASS(coherence)":0.640785144,
    "TFIDF(informativeness)":1.283564898,
    "polarity":1,
    "normalized_text_entropy":4.124866894,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.640785144,
    "normalized_TFIDF":1.283564898,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"An alternative would be to use a BitInputStream like the one you can find and write code like this: (Note: Code doesn't contain EOFException or IOException handling for brevity.) But I'd go with Jon Skeets variant and do it on my own."
  },
  {
    "postid":1835,
    "postdate":1245785100,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.319953433,
    "concept_entropy":0,
    "UMASS(coherence)":0.663278209,
    "TFIDF(informativeness)":1.229345727,
    "polarity":1,
    "normalized_text_entropy":4.319953433,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.663278209,
    "normalized_TFIDF":1.229345727,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I know, probably not the \"coolest\" way to do it, but you can extract each bit with the following code. 10011100 Bit number 1 = 1 Bit number 2 = 0 Bit number 3 = 0 Bit number 4 = 1 Bit number 5 = 1 Bit number 6 = 1 Bit number 7 = 0 Bit number 8 = 0"
  },
  {
    "postid":1836,
    "postdate":1245783720,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.234922849,
    "concept_entropy":0,
    "UMASS(coherence)":0.611285391,
    "TFIDF(informativeness)":1.356928988,
    "polarity":2,
    "normalized_text_entropy":4.234922849,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.611285391,
    "normalized_TFIDF":1.356928988,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"You can iterate through the byte array, and for each byte use the bitwise operators to iterate though its bits."
  },
  {
    "postid":1837,
    "postdate":1245784440,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.216534865,
    "concept_entropy":0,
    "UMASS(coherence)":0.501027124,
    "TFIDF(informativeness)":1.305821701,
    "polarity":1,
    "normalized_text_entropy":4.216534865,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.501027124,
    "normalized_TFIDF":1.305821701,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I needed some bit streaming in my application. you can find my BitArray implementation. It is not a real iterator pattern but you can ask for 1-32 bits from the array in a streaming way. There is also an alternate implementation called BitReader later in the file."
  },
  {
    "postid":1838,
    "postdate":1329519960,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.424989993,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.308577651,
    "polarity":0,
    "normalized_text_entropy":4.424989993,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.308577651,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I've been told at school thatit's a bad practice to modify the index variable of a: Example : The argument was that and not recalculate the index and bound at each loop. I 've made some test in and it seems that by default index and bound are recalculate each time. For example to optimize this kind of loop : without having to write: It's just an example I'm curious to try and see the improvments. According to Peter Lawrey answer :In the output \"test\" is print 10 times. I think it could be nice to optimize this kind of execution. Seems I made a misunderstood... I have remove the and indeed the profiler tell me that the method is not even call once in this case."
  },
  {
    "postid":1839,
    "postdate":1329523260,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.325706153,
    "concept_entropy":0,
    "UMASS(coherence)":0.500675374,
    "TFIDF(informativeness)":1.104338107,
    "polarity":0,
    "normalized_text_entropy":4.325706153,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.500675374,
    "normalized_TFIDF":1.104338107,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"According to the Java Language Specification, this: means that is called on each loop iteration.Java compilers are only to move the call out of the loop if they can effectively that it does not alter the observable behaviour.(For instance, if simply returned the same value from the same variable each time, then there is a good chance the the JIT compiler can inline the call and deduce that it can do the hoisting optimization.But if involves getting the length of a concurrent or synchronized collection, the chances are slim that the optimization will be permitted ... because of potential actions by other threads.) So that's what a compiler is to do. The simple answer is No. You seem to be suggesting a compiler switch that tells / allows the compiler to ignore the JLS rules.There is no such switch.Such a switch would be a.It would be liable to cause correct/valid/working programs to break.Consider this: If the compiler was permitted to move the call out of the loop, it would change the number of times that the method was called, and therefore change the value returned by the method. By the way, a reason that you shouldn't change the loop variable in the loop body is that it makes your code harder to understand."
  },
  {
    "postid":1840,
    "postdate":1329520380,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.273487753,
    "concept_entropy":0,
    "UMASS(coherence)":0.531615723,
    "TFIDF(informativeness)":0.878034558,
    "polarity":0,
    "normalized_text_entropy":4.273487753,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.531615723,
    "normalized_TFIDF":0.878034558,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It dependson what foo.getLength() does.If it can be inlined, it can be effectively the same thing.If it cannot be inlined, the JVM cannot determine whether the result is the same. BTW you can write for a one liner. EDIT: It is worth nothing that;"
  },
  {
    "postid":1841,
    "postdate":1329520740,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.330793592,
    "concept_entropy":4.135203067,
    "UMASS(coherence)":0.704049462,
    "TFIDF(informativeness)":1.171918944,
    "polarity":-1,
    "normalized_text_entropy":4.330793592,
    "normalized_concept_entropy":4.135203067,
    "normalized_UMASS":0.704049462,
    "normalized_TFIDF":1.171918944,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"The main reason not to do that is that it makes it much harder to understand and maintain the code.Whatever the JVM optimizes, it won't compromise the correctness of the program. If it can't do an optimization because the index is modified inside the loop, then it won't optimize it. I fail to see how a Java test could show if there is or not such an optimization. Anyway, Hotspot will optimize a whole lot of things for you. And your second example is a kind of explicit optimization that Hotspot will happily do for you."
  },
  {
    "postid":1842,
    "postdate":1329527100,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":14,
    "Normalized_count":0.233333333,
    "text_entropy":4.001776787,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.539114474,
    "polarity":0,
    "normalized_text_entropy":4.001776787,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":0.539114474,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Before we go into more reasoning the field access isn't inlined. Maybe we should show that yes, if you know what you're looking for (which really is non-trivial in Java) the field access is inlined just fine.First we need a basic understanding of how the JIT works - and I really can't do that in one answer. Suffice to say that the JIT only works after a function has been called often enough (>10k usually) So we use the following code for actual testing stuff: Now we compile this code and run it with Which results in a unholy long output, but the interesting part is: which is the inner loop we're actually executing. Note that the following loads the length value in a register - the stuff above it is for the System.out call (I'd have removed it since it makes it more complicated, but since more than one person thought this would hinder inlining I left it in there). Even if you aren't that fit in x86 assembly you can clearly see: No call instruction anywhere except for the native write call."
  },
  {
    "postid":1843,
    "postdate":1269914880,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.404355406,
    "concept_entropy":0,
    "UMASS(coherence)":0.71747053,
    "TFIDF(informativeness)":1.637520955,
    "polarity":2,
    "normalized_text_entropy":4.404355406,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.71747053,
    "normalized_TFIDF":1.637520955,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"I want to concatenate the values of currentItem.myVar and output it at the end of the loop, problem is I can't figure out how to do this... (Preferably not using Java)"
  },
  {
    "postid":1844,
    "postdate":1269916680,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.307387475,
    "concept_entropy":0,
    "UMASS(coherence)":0.601336422,
    "TFIDF(informativeness)":2.291628156,
    "polarity":5,
    "normalized_text_entropy":4.307387475,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.601336422,
    "normalized_TFIDF":2.291628156,
    "normalized_polarity":5,
    "tagtext":"loops",
    "posttext":"Perhaps this will work?"
  },
  {
    "postid":1845,
    "postdate":1269916680,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.376263761,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.831326714,
    "polarity":2,
    "normalized_text_entropy":4.376263761,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.831326714,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"You're using JSTL 2.0 right?You don't need to put around all variables. Have you tried something like this? Edit: Beaten by the above"
  },
  {
    "postid":1846,
    "postdate":1335134940,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.159398241,
    "concept_entropy":0,
    "UMASS(coherence)":0.548529247,
    "TFIDF(informativeness)":0.987120212,
    "polarity":0,
    "normalized_text_entropy":4.159398241,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.548529247,
    "normalized_TFIDF":0.987120212,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"I'm not certain if this question is language independent or not so I'm going to just ask this as a Java question.If you have a loop like Is new space in memory being created through every iteration of the loop?If so, is the old space being disposed of?If not, is it more efficient to do something like this Edit: Updated code to better exemplify the question"
  },
  {
    "postid":1847,
    "postdate":1335135120,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.113464148,
    "concept_entropy":0,
    "UMASS(coherence)":0.404118587,
    "TFIDF(informativeness)":1.226195669,
    "polarity":2,
    "normalized_text_entropy":4.113464148,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.404118587,
    "normalized_TFIDF":1.226195669,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Short answer: just ignore such things while developing in Java, even because most of these problems are black boxed and managed by the JVM itself. The garbage collector will know what to do and it will try to do the best thing according to the situation. In addition your specific examples don't make much sense to me.. could you elaborate it further?"
  },
  {
    "postid":1848,
    "postdate":1335135840,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.326381453,
    "concept_entropy":0,
    "UMASS(coherence)":0.558123891,
    "TFIDF(informativeness)":2.076800768,
    "polarity":2,
    "normalized_text_entropy":4.326381453,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.558123891,
    "normalized_TFIDF":2.076800768,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"The basic answer of \"let the garbage collector figure it out\" is correct, but you should also understand that the effect of these 2 statements: is to (1) create a new (empty) String, and assign it to \"object\", followed by (2) assign the value of to \"object\". The assignment in (2) overwrites what you did in (1), so the first String you created is never used. The garbage collector will eventually reclaim the storage, so you don't have to worry about it being lost, but it's still a needless allocation; you could just start out withAlso note thats are immutable in Java, so once you allocate a object you can't change its value -- you can make a variable refer to a new object, but you can't modify an existing one."
  },
  {
    "postid":1849,
    "postdate":1335135660,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.32365112,
    "concept_entropy":0,
    "UMASS(coherence)":0.424258424,
    "TFIDF(informativeness)":1.340872654,
    "polarity":-1,
    "normalized_text_entropy":4.32365112,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.424258424,
    "normalized_TFIDF":1.340872654,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"Why don't you run some tests and watch the results? It's true that garbage collector works, but you can't know it works for the best. Working with huge portions of data, this kind of thing may effect your efficiency. I think would help to trace what you need."
  },
  {
    "postid":1850,
    "postdate":1367601840,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":4.290288129,
    "concept_entropy":0,
    "UMASS(coherence)":0.581150468,
    "TFIDF(informativeness)":1.414616162,
    "polarity":1,
    "normalized_text_entropy":4.290288129,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.581150468,
    "normalized_TFIDF":1.414616162,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I've been working on a generic 2d tile style game. Currently In my main thread I have a loop that just goes as fast as it possibly can and calls the repaint method of a JPanel that is in another class which handles the game stuff. It looks like this: getCanvas() just returns the JPanel. Currently this has done what I've wanted, now that I've started adding movement for a player and obviously I don't want to move him across the screen as fast as I possibly can. So I have an input map and action map in my Island class and that detects the key presses and releases and tells my player class which keys are being held. I then move my player about inside the player class with a swing timer that calls every 10ms. So I guess this is like my game tick, my game will make frames as fast as it possibly can and then the game does all its logic stuff 100 times a second, I will be adding more to the gamelogic of course, not just movement. After doing some research it would appear a swing timer isn't the best way of doing this as it is designed for doing small tasks and for swing tasks. So I guess my question is, is it sensible to make my frames the way I am in my main method, and what would be a good way of getting my game to tick reliably every 10ms or whatever? I've had a few ideas, like maybe I should make a new thread that handles the game logic and use the System.getnanotime or whatever its called to measure the time taken to do a tick and then do a wee thread.sleep for however long it is until we reach 10ms and then repeat. I am happy to post more code if you want :), and thanks in advance."
  },
  {
    "postid":1851,
    "postdate":1367602500,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.387579691,
    "concept_entropy":4.5617429,
    "UMASS(coherence)":0.671125677,
    "TFIDF(informativeness)":1.008336112,
    "polarity":-2,
    "normalized_text_entropy":4.387579691,
    "normalized_concept_entropy":4.5617429,
    "normalized_UMASS":0.671125677,
    "normalized_TFIDF":1.008336112,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"A standard way of doing this is in a Thread. Heres a standard game barebones game thread Note you will need to call gameThead.start() to start your game!"
  },
  {
    "postid":1852,
    "postdate":1367611680,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.347941906,
    "concept_entropy":0,
    "UMASS(coherence)":0.557953994,
    "TFIDF(informativeness)":0.835575809,
    "polarity":-2,
    "normalized_text_entropy":4.347941906,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.557953994,
    "normalized_TFIDF":0.835575809,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"Creating a good (windowed app) gameloop without eating CPU 100% is actually a very tricky task. Sidescroll animating a sprite with constant speed easily introduces jerkiness if there is one to be seen.After running several ideas this is what found best, sidescrolling is most of the time butter smooth. VSYNCing is something what may work good in a windowed mode or not, I've found varying results on different machines and OSses. Test app is not using SwingUI because most games don't need it anyway. Gameloop is an active update-render loop without external threads making things easier to program. Use keyPressed callback to update flag variables and use values in a loop. c:> java -cp ./classes GameLoop2 \"fullscreen=false\" \"fps=60\" \"vsync=true\" Gameloop logic may look crazy but believe me this works suprisingly well. Give it a run.Running TaskManager at the same time creates jerkiness in a smooth animation I guess updating instrumentation statistics gives a heavy hit."
  },
  {
    "postid":1853,
    "postdate":1263930720,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.364551241,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.645981245,
    "TFIDF(informativeness)":1.499464117,
    "polarity":-1,
    "normalized_text_entropy":4.364551241,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.645981245,
    "normalized_TFIDF":1.499464117,
    "normalized_polarity":-1,
    "tagtext":"loops",
    "posttext":"I am making a program that shows cellular growth through an array. I have gotten it so when I press the start button, the array updates every 10 seconds in a while(true){} loop. The problem with that is I want to be able to stop the loop by pressing the pause button, but while in the loop, it wont let me use any of the controls. I need something other than a infinite loop in orer to refresh the frames.I am a bit of a newbie, but I am in a java class at the moment. so I have some grasp of the language."
  },
  {
    "postid":1854,
    "postdate":1263935220,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.388321841,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.656824491,
    "TFIDF(informativeness)":0.80883984,
    "polarity":1,
    "normalized_text_entropy":4.388321841,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.656824491,
    "normalized_TFIDF":0.80883984,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"What you need is use a which changes the state of your component ( in this case the cellular growth )and then callThis timer can be to make the pause and then to restart it, you just create a new one: So you could define the following two methods: And then in your \"Pause/Resume\" button invoke this \"pause/startPaiting\" methods: Here's the complete source code to see it running: "
  },
  {
    "postid":1855,
    "postdate":1263930960,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.475597871,
    "concept_entropy":0,
    "UMASS(coherence)":0.618725578,
    "TFIDF(informativeness)":2.078936958,
    "polarity":12,
    "normalized_text_entropy":4.475597871,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.618725578,
    "normalized_TFIDF":2.078936958,
    "normalized_polarity":12,
    "tagtext":"loops",
    "posttext":"I would suggest using a seperate thread to handle the array. Make sure you are using thread safe object (check Java Docs) and simply call .start() on your thread object when you want to start. Keep a pointer to it so you can pause it via setPaused(true)Something like this.... "
  },
  {
    "postid":1856,
    "postdate":1263931560,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.378655627,
    "concept_entropy":0,
    "UMASS(coherence)":0.549079885,
    "TFIDF(informativeness)":1.738484358,
    "polarity":9,
    "normalized_text_entropy":4.378655627,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.549079885,
    "normalized_TFIDF":1.738484358,
    "normalized_polarity":9,
    "tagtext":"loops",
    "posttext":"If those \"buttons\" are Swing buttons, then the way to do this is: have the Start button create a new javax.swing.Timer object which does the update every 10 seconds. Then have the Pause button stop that timer."
  },
  {
    "postid":1857,
    "postdate":1263930900,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.306415746,
    "concept_entropy":0,
    "UMASS(coherence)":0.580434917,
    "TFIDF(informativeness)":1.151373638,
    "polarity":2,
    "normalized_text_entropy":4.306415746,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.580434917,
    "normalized_TFIDF":1.151373638,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"You want to run your simulation in a Thread ( Look for Runnable Interface ).Then you can pass messages to this Thread to pause, continue and stop."
  },
  {
    "postid":1858,
    "postdate":1263932700,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.305981263,
    "concept_entropy":4.382153488,
    "UMASS(coherence)":0.634064773,
    "TFIDF(informativeness)":1.74422053,
    "polarity":4,
    "normalized_text_entropy":4.305981263,
    "normalized_concept_entropy":4.382153488,
    "normalized_UMASS":0.634064773,
    "normalized_TFIDF":1.74422053,
    "normalized_polarity":4,
    "tagtext":"loops",
    "posttext":"I personally prefer using rather than or.The timer class handles both running the code periodically and canceling it. Your code would look like:"
  },
  {
    "postid":1859,
    "postdate":1263930960,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.350525441,
    "concept_entropy":4.478130781,
    "UMASS(coherence)":0.689175508,
    "TFIDF(informativeness)":1.651090278,
    "polarity":0,
    "normalized_text_entropy":4.350525441,
    "normalized_concept_entropy":4.478130781,
    "normalized_UMASS":0.689175508,
    "normalized_TFIDF":1.651090278,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"Yep.Sounds like you're doing your drawing on the event dispatcher thread.Events (button presses) never have a chance to get called because you've never returned control from the last time it was called..."
  },
  {
    "postid":1860,
    "postdate":1263931020,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.305001396,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.750924032,
    "polarity":0,
    "normalized_text_entropy":4.305001396,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.750924032,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"What you're looking for is multi-threading. Take the data processing and put it in a second thread, run it asynchronously, and use the main thread to check for user input. Of course this might also entail using a semaphore to communicate between the two threads. What level class are you in - have you covered both of these topics already?"
  },
  {
    "postid":1861,
    "postdate":1263931080,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.275545009,
    "concept_entropy":0,
    "UMASS(coherence)":0.731875693,
    "TFIDF(informativeness)":3.890936818,
    "polarity":4,
    "normalized_text_entropy":4.275545009,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.731875693,
    "normalized_TFIDF":3.890936818,
    "normalized_polarity":4,
    "tagtext":"loops",
    "posttext":"Take a look at the wait() / notify() machinery. Briefly, a thread can wait for 10 seconds, but still be notified that an external event has occurred,"
  },
  {
    "postid":1862,
    "postdate":1324450800,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.28045787,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.258144946,
    "polarity":0,
    "normalized_text_entropy":4.28045787,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.258144946,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"How do I delay a while loop to 1 second intervals without slowing down the entire code / computer it's running on to the one second delay (just the one little loop). Thanks :D"
  },
  {
    "postid":1863,
    "postdate":1324451100,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.521236837,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.578462672,
    "polarity":2,
    "normalized_text_entropy":4.521236837,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.578462672,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1864,
    "postdate":1324450980,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.300041745,
    "concept_entropy":4.637830639,
    "UMASS(coherence)":0.616117815,
    "TFIDF(informativeness)":2.238763206,
    "polarity":-2,
    "normalized_text_entropy":4.300041745,
    "normalized_concept_entropy":4.637830639,
    "normalized_UMASS":0.616117815,
    "normalized_TFIDF":2.238763206,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"It seems your loop runs on Main thread and if you do on that thread it will pause the app (since there is only one thread which has been paused), to overcome this you can put this code in new that runs parallely"
  },
  {
    "postid":1865,
    "postdate":1324452180,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.549223883,
    "concept_entropy":4.577994718,
    "UMASS(coherence)":0.64875163,
    "TFIDF(informativeness)":3.638575195,
    "polarity":-2,
    "normalized_text_entropy":4.549223883,
    "normalized_concept_entropy":4.577994718,
    "normalized_UMASS":0.64875163,
    "normalized_TFIDF":3.638575195,
    "normalized_polarity":-2,
    "tagtext":"loops",
    "posttext":"As Jigar has indicated you can use another Thread to do work which can operate, sleep etc independently of other Threads.The class might help you as well since it can perform periodic tasks for you without you having to get into multithreaded programming."
  },
  {
    "postid":1866,
    "postdate":1384244940,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.409090233,
    "concept_entropy":0,
    "UMASS(coherence)":0.640785144,
    "TFIDF(informativeness)":1.544535751,
    "polarity":1,
    "normalized_text_entropy":4.409090233,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.640785144,
    "normalized_TFIDF":1.544535751,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I have a string: and I want to interate over all li-tags (in order to add some text between the tags):"
  },
  {
    "postid":1867,
    "postdate":1384245420,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.339065635,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.879424799,
    "polarity":3,
    "normalized_text_entropy":4.339065635,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.879424799,
    "normalized_polarity":3,
    "tagtext":"loops",
    "posttext":"If you don't want to use a parser, you can use regular expressions for this as follows:is a capturing group that takes characters from or any whitespace, where the indicates that there must be at least one character.Use a instead if there could be no characters in between.simply extracts what is between and, where the cooresponds to the first capturing group. You can replace what's inside the capturing group with whatever you consider to be valid.Here's a tutorial on.Good luck!"
  },
  {
    "postid":1868,
    "postdate":1384245420,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.481018732,
    "concept_entropy":4.167494912,
    "UMASS(coherence)":0.703439213,
    "TFIDF(informativeness)":2.534780351,
    "polarity":2,
    "normalized_text_entropy":4.481018732,
    "normalized_concept_entropy":4.167494912,
    "normalized_UMASS":0.703439213,
    "normalized_TFIDF":2.534780351,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Try this"
  },
  {
    "postid":1869,
    "postdate":1384245420,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.398442478,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.888554547,
    "polarity":-3,
    "normalized_text_entropy":4.398442478,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.888554547,
    "normalized_polarity":-3,
    "tagtext":"loops",
    "posttext":"Try:"
  },
  {
    "postid":1870,
    "postdate":1384245420,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.238083104,
    "concept_entropy":0,
    "UMASS(coherence)":0.675521524,
    "TFIDF(informativeness)":2.738564756,
    "polarity":0,
    "normalized_text_entropy":4.238083104,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.675521524,
    "normalized_TFIDF":2.738564756,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"it shows that you are parsing some html elements,jsoup is one the great java html parsers,"
  },
  {
    "postid":1871,
    "postdate":1384245300,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.350452483,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.081381452,
    "polarity":2,
    "normalized_text_entropy":4.350452483,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.081381452,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Use for parsing HTML text or to parser the XML string. Then you can pass the parsed value to the for-each loop."
  },
  {
    "postid":1872,
    "postdate":1384245780,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.472460061,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.769685587,
    "TFIDF(informativeness)":2.287114585,
    "polarity":6,
    "normalized_text_entropy":4.472460061,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.769685587,
    "normalized_TFIDF":2.287114585,
    "normalized_polarity":6,
    "tagtext":"loops",
    "posttext":"As the OP is wanting to I suggest that he use jquery instead of a server side solution."
  },
  {
    "postid":1873,
    "postdate":1384245780,
    "tag":"0",
    "TFMvalue":0.909090909,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.221529833,
    "concept_entropy":0,
    "UMASS(coherence)":0.85395911,
    "TFIDF(informativeness)":1.946022138,
    "polarity":2,
    "normalized_text_entropy":4.221529833,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.85395911,
    "normalized_TFIDF":1.946022138,
    "normalized_polarity":2,
    "tagtext":"loops",
    "posttext":"Have a try with the following code: Output in Console is as follows:"
  },
  {
    "postid":1874,
    "postdate":1384247520,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.419215265,
    "concept_entropy":0,
    "UMASS(coherence)":0.567629136,
    "TFIDF(informativeness)":1.414045362,
    "polarity":0,
    "normalized_text_entropy":4.419215265,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.567629136,
    "normalized_TFIDF":1.414045362,
    "normalized_polarity":0,
    "tagtext":"loops",
    "posttext":"It can all be done on one line:"
  },
  {
    "postid":1875,
    "postdate":1301198040,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.31636891,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.922760721,
    "polarity":1,
    "normalized_text_entropy":4.31636891,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1.1,
    "normalized_TFIDF":1.922760721,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"I have two hashmap each hashmap has different key and values. I am trying to iterate over both hashmapat the same time and multiply each value ofWhat is the easiest and fasted way to do it? I have thousands values in both hashmap. Thanks"
  },
  {
    "postid":1876,
    "postdate":1301216820,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.325371534,
    "concept_entropy":0,
    "UMASS(coherence)":0.563970085,
    "TFIDF(informativeness)":1.501460071,
    "polarity":1,
    "normalized_text_entropy":4.325371534,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.563970085,
    "normalized_TFIDF":1.501460071,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"You are probably doing it wrong... First, a HashMap can't store ints, it needs proper objects - like Integer ��ΗΖ An array is an object, although it's hidden behind some syntactic sugar. Here's how to loop over both maps, if they happens to have the same size, which is what I think you mean. But You should probably go back and rethink how you store your data ��ΗΖ why are you using maps, and whats the key? Wouldn't it be better to create an object that represents the combination of monthly expenses and number of people, for instance?"
  },
  {
    "postid":1877,
    "postdate":1301200500,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.094745286,
    "concept_entropy":0,
    "UMASS(coherence)":0.579513741,
    "TFIDF(informativeness)":1.852835733,
    "polarity":1,
    "normalized_text_entropy":4.094745286,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.579513741,
    "normalized_TFIDF":1.852835733,
    "normalized_polarity":1,
    "tagtext":"loops",
    "posttext":"AFAIK, a LinkedHashMap has iteration ordering. So, something like this may work: "
  },
  {
    "postid":1878,
    "postdate":1339390800,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.284551605,
    "concept_entropy":0,
    "UMASS(coherence)":null,
    "TFIDF(informativeness)":null,
    "polarity":null,
    "normalized_text_entropy":4.284551605,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0,
    "normalized_TFIDF":0,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"So, my JFrame becomes unresponsive when I run this code. I managed to trace it back to the while loop under gameLoop(). Regardless of using delay(1000/FRAMERATE) which calls Thread.sleep() within it, it will not allow the Key or Mouse Listeners to do their job. Full code below, problem exists in gameLoop() If it matters the program begins here and goes to the Game class Probably irrelevant, but here's a plug to the github repo "
  },
  {
    "postid":1879,
    "postdate":1339391400,
    "tag":"0",
    "TFMvalue":0.625,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":1,
    "concept_entropy":0,
    "UMASS(coherence)":0.23351111,
    "TFIDF(informativeness)":2.310490602,
    "polarity":0,
    "normalized_text_entropy":1,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.212282827,
    "normalized_TFIDF":0.127866703,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You are performing in your main thread which in this case is the EDT (Event Dispatcher Thread). This thread is responsible for painting your graphics and listening to events. By doing you are essentially pausing it, thus not allowing it to do it's job. It seems that you want to refresh your GUI at intervals (at least that is what I am guessing). If this is the case, you will need to move your logic to a new separate thread and then, call what ever update methods you will need from the thread you will have spawned off. To make changes visible, you will need to call the event dispatcher thread again by using the method."
  },
  {
    "postid":1880,
    "postdate":1300850580,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.995756385,
    "concept_entropy":0,
    "UMASS(coherence)":0.448779173,
    "TFIDF(informativeness)":1.512321121,
    "polarity":0,
    "normalized_text_entropy":3.995756385,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.407981066,
    "normalized_TFIDF":0.083694569,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I tried to loop from 0.1 to 2.0 and then print the output to the console.. But I got strange output like these: Source code: Why it doesn't this print the exact numbers instead of having point like?Also is ther any difference using instead of, since I dont know how to make 0.1 increment?"
  },
  {
    "postid":1881,
    "postdate":1300850880,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.236390682,
    "concept_entropy":0,
    "UMASS(coherence)":0.488955756,
    "TFIDF(informativeness)":1.483431275,
    "polarity":1,
    "normalized_text_entropy":4.236390682,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.444505233,
    "normalized_TFIDF":0.082095753,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"This is normal.It's inherent in floating point; numbers like 0.3 can't be stored as exact values in binary, so you get slowly accumulating errors.References: ,,."
  },
  {
    "postid":1882,
    "postdate":1318218960,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.355929564,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.520992529,
    "TFIDF(informativeness)":0.972585529,
    "polarity":0,
    "normalized_text_entropy":4.355929564,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.473629572,
    "normalized_TFIDF":0.053824631,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"That's a bug (on your side). Do not use floating point numbers until you learn what they are and how they work."
  },
  {
    "postid":1883,
    "postdate":1288707120,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.1650716,
    "TFIDF(informativeness)":1.313480488,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.150065091,
    "normalized_TFIDF":0.072690371,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I've got a map containing some keys (Strings) and values (POJOs) I want to iterate through this map and alter some of the data in the POJO. The current code I've inherited removes the given entry, and adds it back in after making some changes to the POJO. This doesn't work well, since you shouldn't be modifying a map whilst your iterating through it (method is synchronised, but ConcurrentModificationException still appears) , if I need to iterate over a map and change values, what are the best practices/methods I can use for doing so? To create a separate map and build that up as I go, then return the copy?"
  },
  {
    "postid":1884,
    "postdate":1288707660,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.407233525,
    "concept_entropy":0,
    "UMASS(coherence)":0.615290105,
    "TFIDF(informativeness)":1.407604144,
    "polarity":0,
    "normalized_text_entropy":4.407233525,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.559354641,
    "normalized_TFIDF":0.077899343,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Are you changing the to the POJO? E.g., so the entry points to something else entirely? Because if not, there's no need to remove it from the map at all, you can just change it. If you need to actually change the reference to the POJO (e.g., the value of the entry), you can still do that in place by iterating over the instances from. You can use on the entry, which doesn't modify what you're iterating over. Example: The output (in no particular order) is: ...without any modification exception. You will probably want to synchronize this in case something else is also looking at / mucking with that entry."
  },
  {
    "postid":1885,
    "postdate":1288707660,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.417065073,
    "concept_entropy":0,
    "UMASS(coherence)":0.502152977,
    "TFIDF(informativeness)":4.926601913,
    "polarity":0,
    "normalized_text_entropy":4.417065073,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.456502706,
    "normalized_TFIDF":0.272647005,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Iterating over a and adding entries at the same time will result in a for most classes.And for the classes that don't (e.g.) there is no guarantee that an iteration will visit all entries. Depending on exactly what it is you are doing, you may be able to do the following while iterating: For other types of change, you may need to: And finally, the Google Collections and Apache Commons Collections libraries have utility classes for \"transforming\" maps."
  },
  {
    "postid":1886,
    "postdate":1288707900,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.012086421,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.533778094,
    "TFIDF(informativeness)":0.879294404,
    "polarity":0,
    "normalized_text_entropy":4.012086421,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.485252813,
    "normalized_TFIDF":0.048661733,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"For such purposes you should use the collection views a map exposes: Example: convert the values of all keys that contain an upperscore to uppercase Actually, if you just want to edit the value objects, do it using the values collection. I assume your map is of type:"
  },
  {
    "postid":1887,
    "postdate":1288707720,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.352722361,
    "concept_entropy":0,
    "UMASS(coherence)":0.692952134,
    "TFIDF(informativeness)":1.622222046,
    "polarity":-3,
    "normalized_text_entropy":4.352722361,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.629956485,
    "normalized_TFIDF":0.089776684,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"Create a new map (mapNew). Then iterate over the existing map (mapOld), and add all changed and transformed entries into mapNew. After the iteration is complete, put all values from mapNew to mapOld. This might not be good enough if the amount of data is large though. Or just use - they have and."
  },
  {
    "postid":1888,
    "postdate":1288708140,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.484943608,
    "concept_entropy":0,
    "UMASS(coherence)":0.356447581,
    "TFIDF(informativeness)":0.594126155,
    "polarity":0,
    "normalized_text_entropy":4.484943608,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.324043255,
    "normalized_TFIDF":0.032880009,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"In order to provide a proper answer, you should explain a bit more, what you are trying to achieve. Still, some (possibly useful) advice: Which approach is best depends heavily on your application, it is difficult to give you any \"best practice\". As always, with realistic data."
  },
  {
    "postid":1889,
    "postdate":1288707900,
    "tag":"0",
    "TFMvalue":0.909090909,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.204672021,
    "concept_entropy":4.564931376,
    "UMASS(coherence)":0.358971105,
    "TFIDF(informativeness)":0.684762336,
    "polarity":0,
    "normalized_text_entropy":4.204672021,
    "normalized_concept_entropy":4.564931376,
    "normalized_UMASS":0.326337368,
    "normalized_TFIDF":0.037895978,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Try using. From JavaDoc, For ConcurrentModificationException to occur, generally:"
  },
  {
    "postid":1890,
    "postdate":1288708080,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.135642226,
    "concept_entropy":3.905704802,
    "UMASS(coherence)":0.643197612,
    "TFIDF(informativeness)":1.881113831,
    "polarity":0,
    "normalized_text_entropy":4.135642226,
    "normalized_concept_entropy":3.905704802,
    "normalized_UMASS":0.584725102,
    "normalized_TFIDF":0.104104221,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Another approach, somewhat tortured, is to use as your map's value type. In your case, that would mean declaring your map of type You certainly don't need the nature of the reference, but it's a cheap way to make the value slots rebindable without having to replace the entire via. Still, having read some of the other responses here, I too recommend use of, which I had never needed nor noticed until today."
  },
  {
    "postid":1891,
    "postdate":1358922300,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.217748756,
    "concept_entropy":4.563218434,
    "UMASS(coherence)":0.401333088,
    "TFIDF(informativeness)":2.41336138,
    "polarity":0,
    "normalized_text_entropy":4.217748756,
    "normalized_concept_entropy":4.563218434,
    "normalized_UMASS":0.364848262,
    "normalized_TFIDF":0.133559757,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"What would the Big O notation be for the following nested loops? My thoughts are:each loop is so is it as simple as multiply"
  },
  {
    "postid":1892,
    "postdate":1358922540,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.279100839,
    "concept_entropy":4.4457533,
    "UMASS(coherence)":0.510136703,
    "TFIDF(informativeness)":2.273707326,
    "polarity":1,
    "normalized_text_entropy":4.279100839,
    "normalized_concept_entropy":4.4457533,
    "normalized_UMASS":0.463760639,
    "normalized_TFIDF":0.12583105,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Yes, that is correct. One way to figure out the big-O complexity of nested loops whose bounds do not immediately depend on one another is to work from the inside out.The innermost loop does O(log n) work.The second loop runs O(log n) times and does O(log n) work each time, so it does O(logn) work.Finally, the outmost loop runs O(log n) times and does O(logn) work on each iteration, so the total work done is O(logn). Hope this helps!"
  },
  {
    "postid":1893,
    "postdate":1358923080,
    "tag":"0",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.105320189,
    "concept_entropy":4.120300687,
    "UMASS(coherence)":0.782666107,
    "TFIDF(informativeness)":1.56187441,
    "polarity":1,
    "normalized_text_entropy":4.105320189,
    "normalized_concept_entropy":4.120300687,
    "normalized_UMASS":0.711514643,
    "normalized_TFIDF":0.086436937,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Yes you are right. Easy way to calculate -This example of simple nested loop. Here Big-O of each loop O(n) and it is nested so typically O(n * n) which is O(n^2) actual Big-O. And in your case -Which is in nested loop where each loop Big-O is so all together complexity would be "
  },
  {
    "postid":1894,
    "postdate":1396658940,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.278548448,
    "concept_entropy":0,
    "UMASS(coherence)":0.592304954,
    "TFIDF(informativeness)":1.190568644,
    "polarity":0,
    "normalized_text_entropy":4.278548448,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.538459049,
    "normalized_TFIDF":0.065888209,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Indeed, your assumption is correct. You can show it methodically like the following:"
  },
  {
    "postid":1895,
    "postdate":1320858780,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.389228176,
    "concept_entropy":4.441269647,
    "UMASS(coherence)":0.54457777,
    "TFIDF(informativeness)":3.656279385,
    "polarity":2,
    "normalized_text_entropy":4.389228176,
    "normalized_concept_entropy":4.441269647,
    "normalized_UMASS":0.4950707,
    "normalized_TFIDF":0.202345073,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"In Java, the body of a loop and the loop condition do not belong to the same scope. So the following code won't compile: But this code does make sense to me. Also, I cannot find any pitfalls if the body and the condition are in the same scope; since the body will always get executed, and Java does not have, I don't know how a variable declaration in the outermost body scope could be skipped. Even if it is possible, the compiler could always detect such possibility and then produce compile time errors. Is there any reason for this behavior (aside from keeping the loop in the same format as)? I am really curious. Thanks for any inputs!"
  },
  {
    "postid":1896,
    "postdate":1320859140,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.417830718,
    "concept_entropy":0,
    "UMASS(coherence)":0.637172483,
    "TFIDF(informativeness)":2.414710864,
    "polarity":4,
    "normalized_text_entropy":4.417830718,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.579247712,
    "normalized_TFIDF":0.13363444,
    "normalized_polarity":0.333333333,
    "tagtext":"loops",
    "posttext":"Because that's how scope is defined in Java; inside is a new scope. IMO it wouldn't make much sense to special-case a single construct."
  },
  {
    "postid":1897,
    "postdate":1320859200,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.277434443,
    "concept_entropy":0,
    "UMASS(coherence)":0.590581607,
    "TFIDF(informativeness)":2.177128172,
    "polarity":1,
    "normalized_text_entropy":4.277434443,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.53689237,
    "normalized_TFIDF":0.120486186,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Following your logic here is the case when would not be defined prior to first usage: Note that very often flags are a code small, try to avoid them rather than fight with them."
  },
  {
    "postid":1898,
    "postdate":1320859080,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.31748057,
    "concept_entropy":0,
    "UMASS(coherence)":0.601133582,
    "TFIDF(informativeness)":1.815591984,
    "polarity":-1,
    "normalized_text_entropy":4.31748057,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.546485075,
    "normalized_TFIDF":0.100478124,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"In your example, the boolean variable is scoped to the body of the loop.Since the conditional check is executed outside the body, the variable is out of scope.The correct construct would be:"
  },
  {
    "postid":1899,
    "postdate":1320859320,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.26247851,
    "concept_entropy":0,
    "UMASS(coherence)":0.554112627,
    "TFIDF(informativeness)":1.240315172,
    "polarity":2,
    "normalized_text_entropy":4.26247851,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.503738752,
    "normalized_TFIDF":0.068641271,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Because the boolean variable is a local variable having scope only within a. From the:"
  },
  {
    "postid":1900,
    "postdate":1320859560,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.939798378,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.108461377,
    "polarity":0,
    "normalized_text_entropy":3.939798378,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.061344245,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You can write something like this if you want exit do-while block while boolean defined inside of do-while block."
  },
  {
    "postid":1901,
    "postdate":1320859140,
    "tag":"0",
    "TFMvalue":0.928571429,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.297392197,
    "concept_entropy":0,
    "UMASS(coherence)":0.540089971,
    "TFIDF(informativeness)":1.5727535,
    "polarity":1,
    "normalized_text_entropy":4.297392197,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.490990883,
    "normalized_TFIDF":0.087039006,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"It is basic scope rules. Variables declared inside a set of curly braces {} go out of scope at the end of the braces. It defeats the standard scope rules and it would be extra work for the compiler to detect such a case. "
  },
  {
    "postid":1902,
    "postdate":1320859560,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.172284968,
    "concept_entropy":4.330225538,
    "UMASS(coherence)":0.444791552,
    "TFIDF(informativeness)":1.37683145,
    "polarity":0,
    "normalized_text_entropy":4.172284968,
    "normalized_concept_entropy":4.330225538,
    "normalized_UMASS":0.404355956,
    "normalized_TFIDF":0.076196327,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":" outside your statement block, which is why the compiler complains.The difference between the and is that the is guaranteed to execute at least once and that is a more simpler way to write according to theRegarding scope of a variable, it has to be visible, according to or else you get a compile time error."
  },
  {
    "postid":1903,
    "postdate":1352733780,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.376747698,
    "concept_entropy":0,
    "UMASS(coherence)":0.496164481,
    "TFIDF(informativeness)":1.522669986,
    "polarity":1,
    "normalized_text_entropy":4.376747698,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.451058619,
    "normalized_TFIDF":0.084267294,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I have this method that calculates some statistics: Now i am very proud that i have created a recursive method but i know that this could have been solved with a loop. My question is: is it better to solve these kind of problems recursive or with a loop? please if you have time explain your answer :)"
  },
  {
    "postid":1904,
    "postdate":1352733960,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.297482185,
    "concept_entropy":0,
    "UMASS(coherence)":0.516601057,
    "TFIDF(informativeness)":1.779507617,
    "polarity":1,
    "normalized_text_entropy":4.297482185,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.469637325,
    "normalized_TFIDF":0.09848115,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"In general, a recursion would be more expensive, because the stack has to be modified with copies of variables for each time the function recurses.A set of addresses & states need to be saved, so that the recursive procedure can after that particular run. Iteration would be better if possible. Recursion, when iteration just won't cut it, or will result in. From a maintenance perspective, debugging iterative code is a lot easier than recursive procedures as it is to understand what the state is at any particular iteration, as compared to thinking about a particular recursion. The procedure calls itself, but each run has nothing to do with the results of the previous run., is usually the biggest give-away, that recursion there. In my opinion, should be moved outside the function, as it would also be clearer to someone reading your code. that each call is independent."
  },
  {
    "postid":1905,
    "postdate":1352734140,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.161782776,
    "concept_entropy":0,
    "UMASS(coherence)":0.702809376,
    "TFIDF(informativeness)":1.867112216,
    "polarity":1,
    "normalized_text_entropy":4.161782776,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.638917615,
    "normalized_TFIDF":0.103329346,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"In Java, C, and Python, compared to iteration (in general) because it requires the. In some C compilers, one can use a compiler flag to eliminate this overhead, which transforms certain types of recursion (actually, certain types of tail calls) into jumps instead of function calls. ( )"
  },
  {
    "postid":1906,
    "postdate":1352734020,
    "tag":"0",
    "TFMvalue":0.555555556,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.97668968,
    "concept_entropy":0,
    "UMASS(coherence)":0.565878835,
    "TFIDF(informativeness)":1.506671767,
    "polarity":0,
    "normalized_text_entropy":3.97668968,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.514435305,
    "normalized_TFIDF":0.083381924,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"For this particular problem there isn't too much of a runtime difference.I personally would rather use iteration,I think it would be more simple and easier to understand, but to each his own I suppose. now some recursive functions(like recursive Fibonacci numbers for example) should be done by iteration instead, simply because they can have exponential growth. generally, I don't use recursion unless It would make my problem actually easier to understand."
  },
  {
    "postid":1907,
    "postdate":1352734020,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.321689155,
    "concept_entropy":4.042433004,
    "UMASS(coherence)":0.749994864,
    "TFIDF(informativeness)":1.968611102,
    "polarity":2,
    "normalized_text_entropy":4.321689155,
    "normalized_concept_entropy":4.042433004,
    "normalized_UMASS":0.681813513,
    "normalized_TFIDF":0.108946477,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"You should investigate the perimeter circumstances. For big recursions stack might get overflow, thats +1 for loops. I'm not sure which one runs faster but that is relatively easy to measure, taking JIT and other stuff into considerations. Code maintenance aspect: it is much easier for the most of us to understand and fix loops than recursion. Developers time is usually more important than minor performance differences."
  },
  {
    "postid":1908,
    "postdate":1352734080,
    "tag":"0",
    "TFMvalue":0.555555556,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.354495193,
    "concept_entropy":4.329143689,
    "UMASS(coherence)":0.772814642,
    "TFIDF(informativeness)":2.14334603,
    "polarity":1,
    "normalized_text_entropy":4.354495193,
    "normalized_concept_entropy":4.329143689,
    "normalized_UMASS":0.702558765,
    "normalized_TFIDF":0.118616622,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"It. For example if I have a tree of objects (in SWT) and you wish to traverse them the easiest way is to use recursion like this: otherwise if performance is important be advised that recursive calls are slower in most cases than simple loops because of the function/method call overhead. So the main thing is that if you need to iterate through objects where recursion is a natural solution and you don't risk a go ahead and use recursion. Otherwise you'll probably better off with a loop. One more thing: recursive methods are sometimes tend to be harder to read, understand and debug."
  },
  {
    "postid":1909,
    "postdate":1321991940,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.980084932,
    "concept_entropy":0,
    "UMASS(coherence)":0.448779173,
    "TFIDF(informativeness)":1.659644374,
    "polarity":0,
    "normalized_text_entropy":3.980084932,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.407981066,
    "normalized_TFIDF":0.091847703,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"My code seems to repeat the for loop twice, before giving me the opportunity to answer. I've been staring at this all day, and I'm pretty sure I'm blind to whatever error I've made. Some help would be much appreciated. I'm sorry for the Norwegian stuck in there, but it's not relevant to the problem."
  },
  {
    "postid":1910,
    "postdate":1321992420,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":3.321928095,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.735126457,
    "polarity":0,
    "normalized_text_entropy":3.321928095,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.096025017,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Your problem is likely from your use of the Scanner object and how it handles the End Of Line (EOL) token. Note that only handles this token while,, and the like do not. Often if you have the users enter a number, it is worthwhile calling nextLine() immediately after getting the numeric input. e.g., Consider changing this: to this and this: to this: and so-forth for your other uses of Scanner."
  },
  {
    "postid":1911,
    "postdate":1286454840,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.531910545,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.753618476,
    "polarity":2,
    "normalized_text_entropy":4.531910545,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.097048399,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"I want to know if the condition evaluation is executed in and loops in Java every time the loop cycle finishes. Example: Will the be execute every time the loop cycle finishes? Assumption and experience tells me yes. I know that in this example the is a constant, so there won't be a performance impact. But lets assume that the condition operation takes long in a different case.I know the logical thing to do then is to assign the to a variable. Still I want to be sure that its evaluated every time."
  },
  {
    "postid":1912,
    "postdate":1286455020,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.445051687,
    "concept_entropy":4.042433004,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.972144221,
    "polarity":1,
    "normalized_text_entropy":4.445051687,
    "normalized_concept_entropy":4.042433004,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.109142006,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Yes, it will logically evaluate the whole of the middle operand on every iteration of the loop. In cases where the JIT knows better, of course, it can do clever things (even potentially removing the array bounds check within the loop, based on the loop conditions). Note that for types that the JIT doesn't know about, it may not be able to optimize specifically like this - but may still inline things like fetching the of an. Finally, I generally prefer the enhanced for loop for readability: Of course, that's assuming you don't need the index for other reasons."
  },
  {
    "postid":1913,
    "postdate":1286455020,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.166548691,
    "concept_entropy":0,
    "UMASS(coherence)":0.39391056,
    "TFIDF(informativeness)":1.825428454,
    "polarity":0,
    "normalized_text_entropy":4.166548691,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.358100509,
    "normalized_TFIDF":0.101022492,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Yes, the expression must be evaluated for each iteration of the loop to determine whether to stay inside the loop or continue program execution. Remember, you can do things like this: In that case, both sides of the expression will change and must be evaluated for each iteration. And you're right, if you have calculations in the for loop condition that can be moved out to a separate variable, you should do that: Could easily be:"
  },
  {
    "postid":1914,
    "postdate":1286455140,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.154768981,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.799455551,
    "polarity":-1,
    "normalized_text_entropy":4.154768981,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.099585105,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Yes. Specifically, the condition part is executed each loop body. So it's entirely possible that you never enter the body of the loop at all. So taking your example: This is the logical (not literal) equivalent:"
  },
  {
    "postid":1915,
    "postdate":1286457360,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.294828533,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.427295498,
    "TFIDF(informativeness)":1.502166394,
    "polarity":2,
    "normalized_text_entropy":4.294828533,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.388450453,
    "normalized_TFIDF":0.083132588,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"If the conditional expression is a and you are running in JIT mode, loop optimizations such as can be done. But when run in the interpreted mode, I there is not much optimization to do."
  },
  {
    "postid":1916,
    "postdate":1286458920,
    "tag":"0",
    "TFMvalue":0.7,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.226011589,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.017375285,
    "polarity":1,
    "normalized_text_entropy":4.226011589,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.111645174,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Here are several bytecode. As far as I know, the condition will be evaluated every time. Regards."
  },
  {
    "postid":1917,
    "postdate":1286474040,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.256075831,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.366470531,
    "TFIDF(informativeness)":1.355935037,
    "polarity":0,
    "normalized_text_entropy":4.256075831,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.333155028,
    "normalized_TFIDF":0.075039882,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":" will be execute before every time the loop cycle starts. It will print just before cycles starts. And one more time before loop finishes."
  },
  {
    "postid":1918,
    "postdate":1286455140,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.385825795,
    "concept_entropy":0,
    "UMASS(coherence)":0.504223131,
    "TFIDF(informativeness)":1.194608459,
    "polarity":0,
    "normalized_text_entropy":4.385825795,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.458384665,
    "normalized_TFIDF":0.066111779,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Do you ask wether the compiler caches the tenBig.length value since he knows it won't change during the loop? Or you ask wether the compiler automatically knows that the whole expression index < tenBig.length does not need to be evaluated for the next 9 times?"
  },
  {
    "postid":1919,
    "postdate":1286455200,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.156879728,
    "concept_entropy":4.33639682,
    "UMASS(coherence)":0.369343407,
    "TFIDF(informativeness)":1.815436891,
    "polarity":0,
    "normalized_text_entropy":4.156879728,
    "normalized_concept_entropy":4.33639682,
    "normalized_UMASS":0.335766734,
    "normalized_TFIDF":0.100469541,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"It's going to be executed everytime the loop is entered, including the last evaluation which will yield index < length = false . Aside from this, even though the length of tenBig is const, the loop will always access this property so it would be ideal to assign it to a variable (even though it's not a reasonable speed gain in your example)."
  },
  {
    "postid":1920,
    "postdate":1371776580,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.272317214,
    "concept_entropy":4.242917468,
    "UMASS(coherence)":0.582367001,
    "TFIDF(informativeness)":1.502605453,
    "polarity":0,
    "normalized_text_entropy":4.272317214,
    "normalized_concept_entropy":4.242917468,
    "normalized_UMASS":0.529424546,
    "normalized_TFIDF":0.083156887,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"There's a HashMap: I want to fill an excel sheet in this pattern: The \"hashKeys\" are \"Categories\", and every key has its own ArrayList. Every string-element of the ArrayLists shall be drawn under its correspondent key. Here's the actual code: It works beautifully, except for the fact that the result goes in this pattern: I think it is working exactly how I want, but the cells get erased at each loop because of the new row that is created at each loop. This is a very challenging problem. I had huge difficulty to come to this, and now I'm absolutely stuck. Nothing works. The cells ALWAYS get erased. Well, I hope this is a not too prolix topic. I really thank you all for any help."
  },
  {
    "postid":1921,
    "postdate":1371778200,
    "tag":"0",
    "TFMvalue":0.909090909,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.415948159,
    "concept_entropy":4.316995205,
    "UMASS(coherence)":0.481223948,
    "TFIDF(informativeness)":4.529401088,
    "polarity":8,
    "normalized_text_entropy":4.415948159,
    "normalized_concept_entropy":4.316995205,
    "normalized_UMASS":0.437476316,
    "normalized_TFIDF":0.250665198,
    "normalized_polarity":0.407407407,
    "tagtext":"loops",
    "posttext":"In the inner for loop, keyCell never changes value.This means you are writing to the same cell value each time.(I'm surprised the code works at all due to this problem.) So first, I'd fix this problems and use keyCell++.If that doesn't work, add debugging showing the row and keyCell number each time you call createCell().This will show if the indexes are following the correct pattern or not.You want the pattern:"
  },
  {
    "postid":1922,
    "postdate":1298715840,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.213901202,
    "concept_entropy":0,
    "UMASS(coherence)":0.361669663,
    "TFIDF(informativeness)":0.583702889,
    "polarity":0,
    "normalized_text_entropy":4.213901202,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.328790603,
    "normalized_TFIDF":0.032303167,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I'm just curious: Is there a difference on speed and performance between this two loops implementation? Assume that method returns the length of the array,collection, or object that handles a group of elements (actually it's from api). Implementation 1: Implementation 2:"
  },
  {
    "postid":1923,
    "postdate":1298716860,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.164949985,
    "concept_entropy":0,
    "UMASS(coherence)":0.392163622,
    "TFIDF(informativeness)":1.257567028,
    "polarity":1,
    "normalized_text_entropy":4.164949985,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.356512384,
    "normalized_TFIDF":0.06959602,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"From a performance point of view, there is little difference.This is because a loop can be optimized so that the size() lookup is inlined, resulting in very little performance difference. The main difference is if the size changes while looping. The first case will try to iterate a fixed number of times. In the second case, the number of iterations will depend on the final size()."
  },
  {
    "postid":1924,
    "postdate":1298716080,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.055774643,
    "concept_entropy":0,
    "UMASS(coherence)":0.400190266,
    "TFIDF(informativeness)":1.559483176,
    "polarity":0,
    "normalized_text_entropy":4.055774643,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.363809333,
    "normalized_TFIDF":0.086304602,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The 1st snippet is bound to execute faster since it calls once only. The 2nd snippet calls N times. Depending on the impl. it might pose significant penalty, esp. if the compiler finds hard to inline the method and/or the method doesn't just return non-volatile variable, etc. I'd have rewritten it likeNote: arrays don't have method."
  },
  {
    "postid":1925,
    "postdate":1298716320,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.030036532,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.554112627,
    "TFIDF(informativeness)":1.280463596,
    "polarity":0,
    "normalized_text_entropy":4.030036532,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.503738752,
    "normalized_TFIDF":0.070863157,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Yes, there is a difference. In the first loop, the size() method is only called once. In the second one, it's called at each iteration.If the iteration modifies the size of the collection (which is very very uncommon), the second one is needed. In most cases, you should prefer the first one, but limit the scope of the size variable : But most of the time, you should prefer the foreach syntax anyway : which will iterate over the array or collection efficiently, even for a LinkedList for example, where indexed access is not optimal."
  },
  {
    "postid":1926,
    "postdate":1298721060,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.322460985,
    "concept_entropy":4.629576003,
    "UMASS(coherence)":0.692706619,
    "TFIDF(informativeness)":2.455859663,
    "polarity":1,
    "normalized_text_entropy":4.322460985,
    "normalized_concept_entropy":4.629576003,
    "normalized_UMASS":0.62973329,
    "normalized_TFIDF":0.135911688,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Don't worry about it, JVM optimization is very aggressive these days. Use the 2nd form, for it's more readable, and most likely as fast. Premature optimization yada yada. And when you do need to improve speed, always profile first, don't guess. It is extremely unlikely that caching size() in a local variable could benefit your app noticeably. If it does, you must be doing simpleoperations over a huge dataset. You shouldn't use ArrayList at all in that case."
  },
  {
    "postid":1927,
    "postdate":1298724300,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.952819531,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.196527661,
    "polarity":0,
    "normalized_text_entropy":3.952819531,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.066217991,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Maybe it is worth to note that this construct: invokes only once and then operates on iterator behind the scenes. So it is safe to perform lengthy operations or change some state inside."
  },
  {
    "postid":1928,
    "postdate":1291209660,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.222374424,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.426335864,
    "polarity":0,
    "normalized_text_entropy":4.222374424,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.078935991,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I have the following code: I have two outputs (one in the while loop another one in the for loop). The first output shows me that I do add different arrays to the list. While when i do a double check in the second loop I see that all elements of the list are the same (they are equal to the first element of the list). Does anybody know what I am doing wrong here?"
  },
  {
    "postid":1929,
    "postdate":1291210260,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.137551017,
    "concept_entropy":0,
    "UMASS(coherence)":0.363631286,
    "TFIDF(informativeness)":0.788753688,
    "polarity":1,
    "normalized_text_entropy":4.137551017,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.330573896,
    "normalized_TFIDF":0.043651047,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"As unwind's answer states, you're adding a reference to the same array in every iteration of the loop. You need to create a array each time: Alternatively, if you're just cloning the array:"
  },
  {
    "postid":1930,
    "postdate":1291209780,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.736286231,
    "concept_entropy":0,
    "UMASS(coherence)":0.376210246,
    "TFIDF(informativeness)":0.519860385,
    "polarity":1,
    "normalized_text_entropy":3.736286231,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.342009315,
    "normalized_TFIDF":0.028770008,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"What is the type of? If it's a reference to an object, the the problem is probably exactly that; you just add the same reference to a mutable object, which is then modified and added again. Since the first loop prints the object before it (presumably) is modified, it prints the proper (different) values."
  },
  {
    "postid":1931,
    "postdate":1395334620,
    "tag":"0",
    "TFMvalue":0.777777778,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.308370412,
    "concept_entropy":0,
    "UMASS(coherence)":0.639988682,
    "TFIDF(informativeness)":0.919332034,
    "polarity":1,
    "normalized_text_entropy":4.308370412,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.581807893,
    "normalized_TFIDF":0.050877487,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I don't like the idea of having to call and, and seeing how I would need a loop to call those anyways, I don't really see much point in using the iterators given to us in Lists and Maps. Is it only if you need to pull one this from the list? Or, if you're taking one item from the list, and having to do that for an unmeasured amount of time? I couldn't find this on Google or Stack, please help me out. I'm not talking about an enhanced for-loop specifically (for-each loop). I also understand that foreach loops excel in performance, but this is more of a 'why does it exist' question EDIT: Realized I was talking about collections alone and not arrays aswel. loops don't have limitations in this situation."
  },
  {
    "postid":1932,
    "postdate":1395334980,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.35392947,
    "concept_entropy":0,
    "UMASS(coherence)":0.733121615,
    "TFIDF(informativeness)":1.195327827,
    "polarity":2,
    "normalized_text_entropy":4.35392947,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.666474195,
    "normalized_TFIDF":0.066151591,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"A is equivalent to an iterator--it's syntactic sugar for the same thing. So you should always choose over iterator whenever you can, simply because it's convenient and results in more concise code. I've written about this in another answer:As stated by @RonnyShapiro, there are situations where you need to use an iterator, but in many cases a should suffice. Note that a is a normal loop. The normal loop is needed when access to the index is required. Although you could manually create a separate index int-variable with it is not ideal, from a point of view. Here's some more information:When accessing collections, a is than the basic loop's array access. When accessing arrays, however--at least with primitive and wrapper-arrays--access via indexes is faster. See below. Indexes are 23-percent faster than iterators when accessing or arrays. Here is the output from the below testing class, which sums the numbers in a 100-element primitive-int array (A is iterator, B is index): The full testing class: I also ran this for an array, and indexes are still the clear winner, but only between 18 and 25 percent faster. For a of, however, iterators are faster. Just change the int-array in the above code to and make the necssary changes to the test-function (to, to, etc) In one test they're almost equivalent, but still, iterator wins."
  },
  {
    "postid":1933,
    "postdate":1395335040,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.279761142,
    "concept_entropy":4.428567763,
    "UMASS(coherence)":0.579164651,
    "TFIDF(informativeness)":1.5136987,
    "polarity":3,
    "normalized_text_entropy":4.279761142,
    "normalized_concept_entropy":4.428567763,
    "normalized_UMASS":0.526513319,
    "normalized_TFIDF":0.083770807,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"For each was added at Java 5 for easier iteration over collections. However, it does not replace iterators as only with iterators you can modify the collection while iterating over it (via the iterator interface). Attempting to addemove object from a collection within a for each will cause a ConcurrentModificationException. If you're just reading values, foreach is probably better."
  },
  {
    "postid":1934,
    "postdate":1395335820,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.267144262,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.983185242,
    "polarity":-2,
    "normalized_text_entropy":4.267144262,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.054411239,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"Well, Java Language Spec 8( ),14.14.2: The enhanced for statement is equivalent to a basic for statement of the form: So, for compiler that's the same.Earlier versions of this standard contain the same description of 'foreach' statement"
  },
  {
    "postid":1935,
    "postdate":1395335340,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.392403464,
    "concept_entropy":0,
    "UMASS(coherence)":0.322557585,
    "TFIDF(informativeness)":1.618527778,
    "polarity":0,
    "normalized_text_entropy":4.392403464,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.293234168,
    "normalized_TFIDF":0.089572236,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Part of this has to do with the history of how java has developed over time.Iterators were a language feature as a way to deal with collections of objects since Java 1.2.Java 1.5 added the iterable interface and for-each loops. Unless you need to do something specific with the iterator during your loop I would always use a for-each block ( which uses iterators in the implementation)"
  },
  {
    "postid":1936,
    "postdate":1302394260,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.277490006,
    "concept_entropy":4.407808725,
    "UMASS(coherence)":0.307387673,
    "TFIDF(informativeness)":1.91909565,
    "polarity":0,
    "normalized_text_entropy":4.277490006,
    "normalized_concept_entropy":4.407808725,
    "normalized_UMASS":0.279443339,
    "normalized_TFIDF":0.106206203,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"First of all, apologies for not being able to supply any sourcecode. My project is pretty big and linking everything would be impractical, and I have not been able to scale down the problem which is exceedingly annoying. I will do my best to explain it here. I am dynamically creating new instances of a class on each loop in my code. This instance is dynamically given a couple of properties while in the loop, 'name' for example. At the end of each loop, the newly generated instance is added to an ArrayList held in a another, 3rd, class.The problem however is that when a new element is added, for whatever reason, all previous elements change to match exactly the latest. My guess is that the ArrayList is creating a reference to the dynamically created element so that whenever it changes, they all change, but I do not know how to fix this. I would be grateful for any advice and apologies again for the quality of this explanation. I will post any specific piece of the code you may wish to see As Requested - XmlHandler.java -ParsedDataSet.java =Content.java =Just to cut down on your comprehension time - The project is an epub reader. The XMLHandler is being called from a SAX parser in another class not shown. The XMLHandler is used 3 different times for 3 different XML sets so there is some clutter there.The problem lies with the 'toc' ArrayList. The 'toc', or TableOfContents, holds the Contents instances to be referenced later (not shown). I am trying to pass data each new instance of 'Content' and then pass that into the static ArrayList"
  },
  {
    "postid":1937,
    "postdate":1302394980,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":3.780874239,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.374173204,
    "TFIDF(informativeness)":1.856260277,
    "polarity":-1,
    "normalized_text_entropy":3.780874239,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.340157458,
    "normalized_TFIDF":0.10272878,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"I've seen folks report this kind of problem many times, and it always comes down to this: you're actually creating a new instance, but instead using the same one for each iteration of the loop. It's an easy mistake to make, especially if you're coming from a language with different copy semantics. There are a number of different ways you can make this mistake; if you edit your question to show the loop code, I'm sure I'll be able to explain what's happening. OK, now that you've added the code: the problem is that in \"Content\", all the data member are marked \"static\". In Java, that means that there's one variable shared by all objects -- i.e., the variable has the same value for every object. SO in fact you creating many Content objects to put in the ArrayList, but they all look identical! Remove those \"static\" attributes from Content's data members, and you'll be all set."
  },
  {
    "postid":1938,
    "postdate":1302398340,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.082026605,
    "concept_entropy":0,
    "UMASS(coherence)":0.297578435,
    "TFIDF(informativeness)":0.885001574,
    "polarity":0,
    "normalized_text_entropy":4.082026605,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.27052585,
    "normalized_TFIDF":0.048977578,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The ArrayList just stores reference of elements.Ensure your code looks like: Wrong code:"
  },
  {
    "postid":1939,
    "postdate":1297578600,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.265804107,
    "concept_entropy":0,
    "UMASS(coherence)":0.338255835,
    "TFIDF(informativeness)":1.353706134,
    "polarity":0,
    "normalized_text_entropy":4.265804107,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.307505305,
    "normalized_TFIDF":0.074916531,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Ok so I'm at another impasse with my program. I need it to repeat, yet I do not understand what I'm reading in the text on how to do it. It only covers repeating values, like a gradebook program. Anyway, I need the program to keep repeating until the user inputs \"stop\" as the employee name.This is my code so far: package payroll_program_2;import java.util.Scanner; }"
  },
  {
    "postid":1940,
    "postdate":1297579020,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.210767664,
    "concept_entropy":0,
    "UMASS(coherence)":0.387404701,
    "TFIDF(informativeness)":1.129325208,
    "polarity":0,
    "normalized_text_entropy":4.210767664,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.352186092,
    "normalized_TFIDF":0.062498887,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1941,
    "postdate":1297578960,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.444687398,
    "concept_entropy":4.250360177,
    "UMASS(coherence)":0.531106001,
    "TFIDF(informativeness)":1.408585935,
    "polarity":0,
    "normalized_text_entropy":4.444687398,
    "normalized_concept_entropy":4.250360177,
    "normalized_UMASS":0.482823637,
    "normalized_TFIDF":0.077953678,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You need to add a loop or loop, as in:"
  },
  {
    "postid":1942,
    "postdate":1297578960,
    "tag":"0",
    "TFMvalue":0.928571429,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.313310103,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.693682502,
    "TFIDF(informativeness)":0.916235709,
    "polarity":0,
    "normalized_text_entropy":4.313310103,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.630620456,
    "normalized_TFIDF":0.050706131,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You could simply include: while(true){ } around your code, and for each input say. if (\"stop\".equals(input))break;"
  },
  {
    "postid":1943,
    "postdate":1297579320,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.208396989,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.847340044,
    "TFIDF(informativeness)":1.162594993,
    "polarity":7,
    "normalized_text_entropy":4.208396989,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.770309131,
    "normalized_TFIDF":0.064340097,
    "normalized_polarity":0.388888889,
    "tagtext":"loops",
    "posttext":"The break idea will work fine, but another way to do it would be to wrap the entire thing in aand everything after the name input in a similar if statementso that it will not execute.Breaking out of the loop is probably easier all around, but I know that there are some people out there who frown on using break statements."
  },
  {
    "postid":1944,
    "postdate":1297579440,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.188564663,
    "concept_entropy":0,
    "UMASS(coherence)":0.560759027,
    "TFIDF(informativeness)":0.895287842,
    "polarity":1,
    "normalized_text_entropy":4.188564663,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.509780934,
    "normalized_TFIDF":0.049546838,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"you should have the following while statementmethod checks anymore line needs to be read from stdin."
  },
  {
    "postid":1945,
    "postdate":1404035160,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.323998415,
    "concept_entropy":0,
    "UMASS(coherence)":0.690219791,
    "TFIDF(informativeness)":1.097600067,
    "polarity":1,
    "normalized_text_entropy":4.323998415,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.627472537,
    "normalized_TFIDF":0.060743161,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I have a problem with my java application when i compile my codes it says that it cannot find symbol.what the application supposed to do is prompt the user to input a room name then if it is \"quit\" then it has to close the program. otherwise it will prompt for the length, width and height of the room. if any of these dimensions is zero or lesser, it will reprompt for the dimensions again. And here's my main method. Thanks in advance! ;) There's another question almost similar to this question except it supposed to loop back to the first prompt allowing the user to input another room's name and its dimensions. Cheers!"
  },
  {
    "postid":1946,
    "postdate":1404035820,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.330284664,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.017142619,
    "polarity":1,
    "normalized_text_entropy":4.330284664,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.056290501,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You're trying to access variables outside the scope they're declared in. You have to declare the variables outside the so you can access them in the: But I see now that is also declared with the wrong scope. You have to declare it before the loop if you want to access it afterwards. So a simpler solution might be: Incidentally, it doesn't seem right that you're looping until all dimensions are 0. I suspect you mean to check."
  },
  {
    "postid":1947,
    "postdate":1404035580,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.140292203,
    "concept_entropy":0,
    "UMASS(coherence)":0.568757124,
    "TFIDF(informativeness)":0.723027188,
    "polarity":-1,
    "normalized_text_entropy":4.140292203,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.517051931,
    "normalized_TFIDF":0.040013624,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"You have to declare the variables, and in front of the loop. Like this: The problem is the scope of your variables., and are only visible inside the-block. But the statements inside the are outside of the-block. Thats why the variables could not be found."
  },
  {
    "postid":1948,
    "postdate":1382037180,
    "tag":"0",
    "TFMvalue":0.769230769,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.516054082,
    "concept_entropy":0,
    "UMASS(coherence)":0.974737583,
    "TFIDF(informativeness)":2.715567307,
    "polarity":-3,
    "normalized_text_entropy":4.516054082,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.886125075,
    "normalized_TFIDF":0.150284376,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"I'm trying to write a class which reads 5 integers from the user and returns the highest and lowest value back. This must be done using loops and without using arrays and Integer.MIN.Value/Integer.MAX.Value. I've already succeeded writing code that gets 5 integers from the user and returns the highest value but I just can't get both the highest and the lowest value returned in the same class. Here is the code I mentioned above:"
  },
  {
    "postid":1949,
    "postdate":1382037420,
    "tag":"0",
    "TFMvalue":0.909090909,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.275022292,
    "concept_entropy":4.376227849,
    "UMASS(coherence)":0.495257491,
    "TFIDF(informativeness)":1.242495088,
    "polarity":0,
    "normalized_text_entropy":4.275022292,
    "normalized_concept_entropy":4.376227849,
    "normalized_UMASS":0.450234083,
    "normalized_TFIDF":0.068761911,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"here you go :)"
  },
  {
    "postid":1950,
    "postdate":1382038020,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.120484901,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.772228117,
    "polarity":0,
    "normalized_text_entropy":4.120484901,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.042736492,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Why not just repeat your max logic for min? Note that max and min are initially set to the first number that the user enters, so there will be no false 0's and no need to or. This in turn makes the loop run once less so terminate at instead of 5."
  },
  {
    "postid":1951,
    "postdate":1354573680,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.208854467,
    "concept_entropy":0,
    "UMASS(coherence)":0.579424554,
    "TFIDF(informativeness)":1.386150134,
    "polarity":1,
    "normalized_text_entropy":4.208854467,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.526749595,
    "normalized_TFIDF":0.07671204,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I'm making a game and I need to make a method which checks if the specified cell is part of a horizontal consecutive sequence of cells containing the same character. The sequence of cells needs to be of length l. It is true if the cell is part of a horizontal sequence of length at least l, and false otherwise. So far I have it that it detects if there are at least 5 consecutive cells with the same character anywhere in the row of the character specified. Can anyone help?"
  },
  {
    "postid":1952,
    "postdate":1354574220,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.281300314,
    "concept_entropy":0,
    "UMASS(coherence)":0.787410038,
    "TFIDF(informativeness)":1.302187348,
    "polarity":-3,
    "normalized_text_entropy":4.281300314,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.715827307,
    "normalized_TFIDF":0.072065388,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"You can simply search for both sides using two loops (one per side) and check if the sum of consecutive cells is indeed. Something along the lines of:"
  },
  {
    "postid":1953,
    "postdate":1354574820,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.430282399,
    "concept_entropy":0,
    "UMASS(coherence)":0.666822994,
    "TFIDF(informativeness)":1.099958121,
    "polarity":1,
    "normalized_text_entropy":4.430282399,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.606202722,
    "normalized_TFIDF":0.06087366,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Suppose the column you want to include is -. And length of sequence is. Now, here are the possibilities of the occurence of your sequence in that row: - So, the range you are interested in is: -. In this range, every sequence of length will include your column. So, simply run the loop between these range. Now, the problem will be when those range goes out of range. So, you can do that check before.A better way would be to use, and. So, you can use this: -"
  },
  {
    "postid":1954,
    "postdate":1353558660,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.468899841,
    "concept_entropy":4.578543043,
    "UMASS(coherence)":1,
    "TFIDF(informativeness)":1.793799175,
    "polarity":2,
    "normalized_text_entropy":4.468899841,
    "normalized_concept_entropy":4.578543043,
    "normalized_UMASS":0.909090909,
    "normalized_TFIDF":0.099272071,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"I have one layout with 100 blank EditTexts, all named based on their row / column IDs (e.g. box0101, box0102 etc.). I then have another layout with 100 TextViews in exactly the same layout with one letter in each, named using the same convention (answerbox0101, answerbox0102 etc.) I want to write a loop that checks box0101 against answerbox0101, and so on until either one of the boxes does not match up, or it gets to 100 and all the boxes match. I am fine with writing the logic of the loop, my issue is that i need the looping parameter to be part of the name of the EditText! How can I overcome this?"
  },
  {
    "postid":1955,
    "postdate":1353559620,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.161885083,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.731365805,
    "polarity":1,
    "normalized_text_entropy":4.161885083,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.040475098,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"}"
  },
  {
    "postid":1956,
    "postdate":1353559500,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.195708392,
    "concept_entropy":4.302391219,
    "UMASS(coherence)":0.617736216,
    "TFIDF(informativeness)":1.053583714,
    "polarity":1,
    "normalized_text_entropy":4.195708392,
    "normalized_concept_entropy":4.302391219,
    "normalized_UMASS":0.561578378,
    "normalized_TFIDF":0.058307217,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You can use Tag Property of View to set String Property, like if you are creating 100 editTexts, you can set tags of edit texts, like editText0101, editText0102, ... and same in answer editTexts answerbox0101, answerbox0102.... by this method you can get direct references of editText by tag name, by method."
  },
  {
    "postid":1957,
    "postdate":1295899980,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.006238929,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.415888308,
    "polarity":0,
    "normalized_text_entropy":3.006238929,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.023016007,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I am using a class that I cobbled together myself based on a sound playing method and then some custom code. The only problem is that I'm not 100% sure how the while loop that copies to the output stream in the playSoundFile() method works. I would be extremely grateful for a quick explanation of it, as well as any suggestions on how to set it up to loop (preferably without setting up a timer to repeatedly call it at the length of the sound file) 'My' Code:"
  },
  {
    "postid":1958,
    "postdate":1295901300,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.321680519,
    "concept_entropy":4.242489295,
    "UMASS(coherence)":0.564759649,
    "TFIDF(informativeness)":3.315473406,
    "polarity":2,
    "normalized_text_entropy":4.321680519,
    "normalized_concept_entropy":4.242489295,
    "normalized_UMASS":0.513417863,
    "normalized_TFIDF":0.183484258,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"You should restart music's playing after previous ends. How you can define when music stop playing? The esyest way will be restart it by putting in that block smt like . But this code smells. You should think about refactoring;) Also, I think, you can try put this block in infinitive loop But, it isn't best solution too."
  },
  {
    "postid":1959,
    "postdate":1295908260,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.480337797,
    "concept_entropy":3.522711956,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.636917893,
    "polarity":0,
    "normalized_text_entropy":3.480337797,
    "normalized_concept_entropy":3.522711956,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.090589978,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"For looping simple (short) sounds, I would avoid all the more complex javax.sound classes and use Clip.Some."
  },
  {
    "postid":1960,
    "postdate":1375450560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.901878096,
    "concept_entropy":4.134578988,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.597039698,
    "polarity":0,
    "normalized_text_entropy":3.901878096,
    "normalized_concept_entropy":4.134578988,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.088383048,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The problem is the buffer size. so you need to let \"finish\" the playing thread before \"reseting it\" otherwise you would have overlaping sound with really small audio (exactly or smaller than buffer size e.g. 0:01) so in your playing thread "
  },
  {
    "postid":1961,
    "postdate":1393651200,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.176361466,
    "concept_entropy":0,
    "UMASS(coherence)":0.779855686,
    "TFIDF(informativeness)":2.624059264,
    "polarity":1,
    "normalized_text_entropy":4.176361466,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.708959715,
    "normalized_TFIDF":0.145220156,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I can't understand the use and syntax used in for-each loop in Java. What is the difference between for loop and the for-each loop?"
  },
  {
    "postid":1962,
    "postdate":1393651440,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.360691982,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.800081277,
    "polarity":-4,
    "normalized_text_entropy":4.360691982,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.154961531,
    "normalized_polarity":0.185185185,
    "tagtext":"loops",
    "posttext":"The only practical difference between for and for-each is that you do not have access to the index number, in the case of indexable objects. When you the index, you have to use a for loop, and not a foreach. An example of needing the index: When you don't need the index at all, don't use the normal for. Use foreach: As mentioned by @Uncle Iroh, there are performance advantages of using the iterator (which is what foreach uses in the background). So again, when you don't need the index at all, use foreach. (You keep track of the index manually, but I don't think it's worth it. It's not as understandable, it's not ideal as far as variable-scoping, and--although this is just a guess--it makes hardly any difference in performance: )"
  },
  {
    "postid":1963,
    "postdate":1277327760,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.126871231,
    "concept_entropy":4.134578988,
    "UMASS(coherence)":0.700450268,
    "TFIDF(informativeness)":1.909791272,
    "polarity":1,
    "normalized_text_entropy":4.126871231,
    "normalized_concept_entropy":4.134578988,
    "normalized_UMASS":0.636772971,
    "normalized_TFIDF":0.105691282,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I run into this case a lot of times when doing simple text processing and print statements where I am looping over a collection and I want to special case the last element (for example every normal element will be comma separated except for the last case). Is there some best practice idiom or elegant form that doesn't require duplicating code or shoving in an if, else in the loop. For example I have a list of strings that I want to print in a comma separated list. (the do while solution already assumes the list has 2 or more elements otherwise it'd be just as bad as the more correct for loop with conditional). e.g. List = (\"dog\", \"cat\", \"bat\") I want to print \"[dog, cat, bat]\" I present 2 methods the In the Java AbstractCollection class it has the following implementation (a little verbose because it contains all edge case error checking, but not bad)."
  },
  {
    "postid":1964,
    "postdate":1277503860,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.009394042,
    "concept_entropy":4.179584931,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.66539513,
    "polarity":0,
    "normalized_text_entropy":4.009394042,
    "normalized_concept_entropy":4.179584931,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.09216596,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"There are a lot of for loops in these answers, but I find that an Iterator and while loop reads much more easily.E.g.: This is the approach taken by in Google collections and I find it very readable."
  },
  {
    "postid":1965,
    "postdate":1277331780,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.014201813,
    "concept_entropy":4.518166157,
    "UMASS(coherence)":0.708349674,
    "TFIDF(informativeness)":1.657072086,
    "polarity":0,
    "normalized_text_entropy":4.014201813,
    "normalized_concept_entropy":4.518166157,
    "normalized_UMASS":0.643954249,
    "normalized_TFIDF":0.091705348,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I usually write it like this:"
  },
  {
    "postid":1966,
    "postdate":1277329980,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.297874155,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.945598222,
    "polarity":-1,
    "normalized_text_entropy":4.297874155,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.107672903,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1967,
    "postdate":1277330400,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.963227415,
    "concept_entropy":4.134578988,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.00059062,
    "polarity":0,
    "normalized_text_entropy":3.963227415,
    "normalized_concept_entropy":4.134578988,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.055374483,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"My usual take is to test if the index variable is zero, e.g.: But of course, that's only if we talk about languages that don't have some Array.join(\", \") method. ;-)"
  },
  {
    "postid":1968,
    "postdate":1277328480,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.10970488,
    "concept_entropy":4.515994314,
    "UMASS(coherence)":0.410104613,
    "TFIDF(informativeness)":1.64701559,
    "polarity":-1,
    "normalized_text_entropy":4.10970488,
    "normalized_concept_entropy":4.515994314,
    "normalized_UMASS":0.372822375,
    "normalized_TFIDF":0.091148803,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"I think it is easier to think of the first element as the special case because it is much easier to know if an iteration is the first rather than the last.It does not take any complex or expensive logic to know if something is being done for the first time."
  },
  {
    "postid":1969,
    "postdate":1277328240,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.257499735,
    "concept_entropy":4.602566131,
    "UMASS(coherence)":0.316814753,
    "TFIDF(informativeness)":1.882716719,
    "polarity":0,
    "normalized_text_entropy":4.257499735,
    "normalized_concept_entropy":4.602566131,
    "normalized_UMASS":0.288013412,
    "normalized_TFIDF":0.104192927,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I like to use a flag for the first item."
  },
  {
    "postid":1970,
    "postdate":1277328120,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.148360604,
    "concept_entropy":4.515994314,
    "UMASS(coherence)":0.420524799,
    "TFIDF(informativeness)":1.532460999,
    "polarity":1,
    "normalized_text_entropy":4.148360604,
    "normalized_concept_entropy":4.515994314,
    "normalized_UMASS":0.382295272,
    "normalized_TFIDF":0.084809146,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"... or so is quite readable. You can put the conditional in a separate clause, of course. What it makes idiomatic (I think so, at least) is that it uses a foreach loop and does not use a complicated loop header.Also, no logic is duplicated (i.e. there is only one place where an item from is actually appended to the output string - in a real world application this be a more complicated and lengthy formatting operation, so I wouldn't want to repeat the code)."
  },
  {
    "postid":1971,
    "postdate":1277329560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.101259305,
    "concept_entropy":4.140387581,
    "UMASS(coherence)":0.307122269,
    "TFIDF(informativeness)":1.420160612,
    "polarity":0,
    "normalized_text_entropy":4.101259305,
    "normalized_concept_entropy":4.140387581,
    "normalized_UMASS":0.279202063,
    "normalized_TFIDF":0.078594241,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Since your case is simply processing text, you don't need the conditional inside the loop.A C example: Instead of adding a conditional to avoid generating the trailing comma, go ahead and generate it (to keep your loop simple and conditional-free) and simply overwrite it at the end.Many times, I find it clearer to generate the special case just like any other loop iteration and then manually replace it at the end (although if the \"replace it\" code is more than a couple of lines, this method can actually become harder to read)."
  },
  {
    "postid":1972,
    "postdate":1277328900,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.159125735,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.417789924,
    "TFIDF(informativeness)":1.347984208,
    "polarity":0,
    "normalized_text_entropy":4.159125735,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.379809022,
    "normalized_TFIDF":0.074599869,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"In this case, you are essentially concatenating a list of strings using some separator string.You can maybe write something yourself which does this. Then you will get something like: with If you have a instead of a you can also use iterators and the method to check if this is the last or not."
  },
  {
    "postid":1973,
    "postdate":1277328420,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.239698202,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.458823084,
    "TFIDF(informativeness)":2.389806001,
    "polarity":1,
    "normalized_text_entropy":4.239698202,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.417111895,
    "normalized_TFIDF":0.13225616,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"If you are building a string dynamically like that, you shouldn't be using the += operator.The class works much better for repeated dynamic string concatenation. Then call is like this"
  },
  {
    "postid":1974,
    "postdate":1277363280,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.628320484,
    "concept_entropy":0,
    "UMASS(coherence)":0.475968757,
    "TFIDF(informativeness)":1.466992466,
    "polarity":2,
    "normalized_text_entropy":4.628320484,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.43269887,
    "normalized_TFIDF":0.081186,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"I'd go with your second example, ie. handle the special case outside of the loop, just write it a bit more straightforward:"
  },
  {
    "postid":1975,
    "postdate":1277799900,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":4.19000211,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.752181916,
    "TFIDF(informativeness)":2.108215527,
    "polarity":1,
    "normalized_text_entropy":4.19000211,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.683801742,
    "normalized_TFIDF":0.116672437,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I think there are two answers to this question: the best idiom for this problem in any language, and the best idiom for this problem in java. I also think the intent of this problem wasn't the tasks of joining strings together, but the pattern in general, so it doesn't really help to show library functions that can do that. Firstly though the actions of surrounding a string with [] and creating a string separated by commas are two separate actions, and ideally would be two separate functions. For any language, I think the combination of recursion and pattern matching works best. For example, in haskell I would do this: The benefit of writing it like this is it clearly enumerates the different situations that the function will face, and how it will handle it.Another very nice way to do this is with an accumulator type function. Eg: This can be done in other languages as well, eg c#: Not very efficient in this situation, but can be useful in other cases (or efficiency may not matter). Unfortunately, java can't use either of those methods. So in this case I think the best way is to have checks at the top of the function for the exception cases (0 or 1 elements), and then use a for loop to handle the case with more than 1 element: This function clearly shows what happens in the two edge cases (0 or 1 elements). It then uses a loop for all but the last elements, and finally adds the last element on without a comma. The inverse way of handling the non-comma element at the start is also easy to do. Note that the line isn't actually necessary, however I think it makes what the function does more easier to determine at a glance. (Note that if anyone wants more explanation on the haskell/c# functions ask and I'll add it in) "
  },
  {
    "postid":1976,
    "postdate":1277328480,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.337721138,
    "concept_entropy":4.466080714,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.062405235,
    "polarity":1,
    "normalized_text_entropy":4.337721138,
    "normalized_concept_entropy":4.466080714,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.114137213,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I usually write a for loop like this:"
  },
  {
    "postid":1977,
    "postdate":1277496480,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.2141932,
    "concept_entropy":3.617809684,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.860511679,
    "polarity":1,
    "normalized_text_entropy":4.2141932,
    "normalized_concept_entropy":3.617809684,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.10296406,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"If you are just looking for a comma seperated list of like this: \"[The, Cat, in, the, Hat]\", don't even waste time writing your own method. Just use List.toString: Provided the generic type of the List has a toString with the value you want to display, just call List.toString: Then you can do: And you'll get:[Frank, Hal]"
  },
  {
    "postid":1978,
    "postdate":1277497380,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.278661131,
    "concept_entropy":4.471783346,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.654676906,
    "polarity":0,
    "normalized_text_entropy":4.278661131,
    "normalized_concept_entropy":4.471783346,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.091572794,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Generally, my favourite is the multi-level exit.Change to It eliminates any duplicate code or redundant checks. Your example: It works for some things better than others.I'm not a huge fan of this for this specific example. Of course, it gets really tricky for scenarios where the exit condition depends on what happens in and not just.Using an is such a case.from the prof that shamelessly promoted it to his students :-).Read section 5 for exactly what you're talking about."
  },
  {
    "postid":1979,
    "postdate":1277328300,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.275505805,
    "concept_entropy":3.984348239,
    "UMASS(coherence)":0.677808319,
    "TFIDF(informativeness)":1.739989532,
    "polarity":1,
    "normalized_text_entropy":4.275505805,
    "normalized_concept_entropy":3.984348239,
    "normalized_UMASS":0.616189381,
    "normalized_TFIDF":0.096294148,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"A third alternative is the following But the best is to use a join()-like method. For Java there's a in third party libraries, that way your code becomes: FWIW, the (line 3232 onwards) in Apache Commons does use an if within a loop though: "
  },
  {
    "postid":1980,
    "postdate":1235447640,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.300544676,
    "concept_entropy":4.680211736,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.912300515,
    "polarity":0,
    "normalized_text_entropy":4.300544676,
    "normalized_concept_entropy":4.680211736,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.105830148,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Okay, I tested this on an empty program, and just having a while(true){} running gave me >50% on my CPU. I have a game I'm working on that uses a while loop as it's main loop, and it's CPU is at 100 all the time.How can I get Java to repeat something over and over without eating up >50% of my CPU just to do the repeating?"
  },
  {
    "postid":1981,
    "postdate":1235447820,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.286783049,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.904983366,
    "polarity":0,
    "normalized_text_entropy":4.286783049,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.105425204,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Add a sleep to put the thread into idle for some interval: Without having a sleep, the while loop will consume all the computing resources that is available. (For example, theoretically, 100% in a single core system, or 50% in a dual core, and so on.) For example, the following will cycle once through a loop approximately every 50 milliseconds: This should bring down the CPU utilization quite a bit. With a sleep in the loop, the operating system will also give enough system time for other threads and processes to do their things, so the system will be responsive as well. Back in the days of single core systems and operating systems with not-so-good schedulers, loops like this could have made the system very unresponsive. Since the topic of use of loops for a game came up, if the game is going to involve a GUI, the game loop must be in a separate thread or else the GUI itself will become unresponsive. If the program is going to be a console-based game, then threading is not going to be an issue, but with graphical user interfaces which are event-driven, having a long-living loop in the code will make the GUI unresponsive. Threading and such are pretty tricky areas of programming, especially when getting started, so I suggest that another question be raised when it becomes necessary. The following is an example of a Swing application based in a which updates a that will contain the returned value from. The updating process takes place in a separate thread, and a \"Stop\" button will stop the update thread. Few concepts the example will illustrate: Please excuse me for the long example: Some resources about threading and using Swing:"
  },
  {
    "postid":1982,
    "postdate":1235452860,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.254801181,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.59175427,
    "TFIDF(informativeness)":1.563088249,
    "polarity":1,
    "normalized_text_entropy":4.254801181,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.537958427,
    "normalized_TFIDF":0.086504113,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Thread.Sleep may not be the whole answer.For most games, there's way too much CPU for the amount of work needed.Simply sleeping for a set amount of time isn't all that efficient, since you will likely either still burn too many resources, or not enough.You typically want to time your work in some way. If you think about it, the screen only updates at a certain rate, typically less than 100 times per second.I'm not familiar with the Java api's for this sort of thing, but what you want is to find out the refresh speed of the monitor and then update only a single time between each refresh. Further, you don't need a loop like that for your main loop, you can use timers to call your update code at a regular interval.This is even more efficient."
  },
  {
    "postid":1983,
    "postdate":1235462280,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.320258077,
    "concept_entropy":4.5592935,
    "UMASS(coherence)":0.843083244,
    "TFIDF(informativeness)":1.881654934,
    "polarity":2,
    "normalized_text_entropy":4.320258077,
    "normalized_concept_entropy":4.5592935,
    "normalized_UMASS":0.766439313,
    "normalized_TFIDF":0.104134166,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"You are indeed busy-waiting, meaning you are grinding your CPU constantly on checking one or more conditions until they are true.the solution. Using and methods allows you to do just what you are trying, but much more efficiently. Basically, this mechanism allows a thread to sleep on an object until the object decides something has happened and wants to wake all the threads sleeping on it. Code exmaples can be found and should be your solution, and not hiding your busy-wait with a timer."
  },
  {
    "postid":1984,
    "postdate":1235447880,
    "tag":"0",
    "TFMvalue":0.642857143,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.195371663,
    "concept_entropy":4.587928311,
    "UMASS(coherence)":0.634029721,
    "TFIDF(informativeness)":7.065776045,
    "polarity":2,
    "normalized_text_entropy":4.195371663,
    "normalized_concept_entropy":4.587928311,
    "normalized_UMASS":0.576390655,
    "normalized_TFIDF":0.391032747,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Usually in a game loop you will pause for a bit... for example: "
  },
  {
    "postid":1985,
    "postdate":1235508600,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.303363957,
    "concept_entropy":0,
    "UMASS(coherence)":0.573401361,
    "TFIDF(informativeness)":1.637677315,
    "polarity":0,
    "normalized_text_entropy":4.303363957,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.521273965,
    "normalized_TFIDF":0.090632006,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"While yes, you could do alike the accepted answer suggest, you could also callThis will tell the processor to do a context switch. Other threads waiting to be executed (like the GUI drawing thread) will then be executed and the machine will stop feeling slow. The sleep(0) way will also maximise the time given by the OS to you application because the thread will immediatly go back in the processor's queue (instead of waiting 50ms before doing so) so if no other thread where waiting, you thread will continue being executed."
  },
  {
    "postid":1986,
    "postdate":1235447940,
    "tag":"0",
    "TFMvalue":0.555555556,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.388216916,
    "concept_entropy":4.462893665,
    "UMASS(coherence)":0.691467216,
    "TFIDF(informativeness)":2.424224059,
    "polarity":0,
    "normalized_text_entropy":4.388216916,
    "normalized_concept_entropy":4.462893665,
    "normalized_UMASS":0.62860656,
    "normalized_TFIDF":0.134160917,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"It seems like your thread is busywaiting.That is to say, it is trapped in a loop in which it does nothing.In such a situation, it will chew up a lot of cpu cycles to no effect. As mentioned by others, Thread.sleep is the answer."
  },
  {
    "postid":1987,
    "postdate":1235461800,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.286894327,
    "concept_entropy":0,
    "UMASS(coherence)":0.591100897,
    "TFIDF(informativeness)":1.801860423,
    "polarity":2,
    "normalized_text_entropy":4.286894327,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.537364452,
    "normalized_TFIDF":0.099718195,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":", but the idea stays the same: try to use Observer pattern instead of."
  },
  {
    "postid":1988,
    "postdate":1235473860,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.227543317,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.262116758,
    "polarity":0,
    "normalized_text_entropy":4.227543317,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.06984781,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"How about a Quartz-Spring based scheduler that keeps doing the work over and over again in repeated intervals."
  },
  {
    "postid":1989,
    "postdate":1235850240,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.032717443,
    "concept_entropy":0,
    "UMASS(coherence)":0.483917368,
    "TFIDF(informativeness)":1.538255693,
    "polarity":0,
    "normalized_text_entropy":4.032717443,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.43992488,
    "normalized_TFIDF":0.085129835,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"If there is an interrupt it is probably for a reason. A better way to handle this is However this loop doesn't do anything, so I suggest you just delete it. It is fairly rare that you want to busy wait for a condition (In which case the Condition class is a better choice) usually you can transform the same behaviour not to need a loop at all."
  },
  {
    "postid":1990,
    "postdate":1272076260,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.32358159,
    "concept_entropy":0,
    "UMASS(coherence)":0.554112627,
    "TFIDF(informativeness)":1.964445665,
    "polarity":1,
    "normalized_text_entropy":4.32358159,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.503738752,
    "normalized_TFIDF":0.108715954,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I want to write a loop in Java that firs starts up and goes like this: I want to do this so that it does not use up system resources.What is actually going on in the code is that it goes to a website and checks to see if something is done, if it is not done, it should wait another minute until it checks again, and when its done it just moves on.Is their anyway to do this in java?"
  },
  {
    "postid":1991,
    "postdate":1272076560,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.281361061,
    "concept_entropy":4.588163218,
    "UMASS(coherence)":null,
    "TFIDF(informativeness)":null,
    "polarity":null,
    "normalized_text_entropy":4.281361061,
    "normalized_concept_entropy":4.588163218,
    "normalized_UMASS":0,
    "normalized_TFIDF":0,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Use. One minute would be milliseconds. For example, this loop will print the current time once every 5 seconds: If your sleep period becomes too large for, explicitly compute in (e.g.)."
  },
  {
    "postid":1992,
    "postdate":1272076920,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.209577511,
    "concept_entropy":0,
    "UMASS(coherence)":0.385752592,
    "TFIDF(informativeness)":2.563164087,
    "polarity":-10,
    "normalized_text_entropy":4.209577511,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.350684175,
    "normalized_TFIDF":0.141850108,
    "normalized_polarity":0.074074074,
    "tagtext":"loops",
    "posttext":"You can useWhen the times comes To shut it down."
  },
  {
    "postid":1993,
    "postdate":1272076860,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.281518931,
    "concept_entropy":0,
    "UMASS(coherence)":0.489952996,
    "TFIDF(informativeness)":1.638917902,
    "polarity":1,
    "normalized_text_entropy":4.281518931,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.445411815,
    "normalized_TFIDF":0.090700663,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":1994,
    "postdate":1252031040,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.307946018,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.478088977,
    "TFIDF(informativeness)":0.998575247,
    "polarity":1,
    "normalized_text_entropy":4.307946018,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.434626343,
    "normalized_TFIDF":0.055262949,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Does a java for-each loop guarantee that the elements will be presented in order if invoked on a list? In my tests it does seem to, but I can't seem to find this explicitly mentioned in any documentation"
  },
  {
    "postid":1995,
    "postdate":1252031700,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.230931727,
    "concept_entropy":0,
    "UMASS(coherence)":0.408933711,
    "TFIDF(informativeness)":1.318204029,
    "polarity":1,
    "normalized_text_entropy":4.230931727,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.371757919,
    "normalized_TFIDF":0.07295178,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Yes.The foreach loop will iterate through the list in the order provided by the method.See the. If you look at the you can see that a list is an \"ordered collection\" and that the method returns an iterator that iterates \"in proper sequence\"."
  },
  {
    "postid":1996,
    "postdate":1310256360,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.358608356,
    "concept_entropy":0,
    "UMASS(coherence)":0.691729905,
    "TFIDF(informativeness)":1.008357416,
    "polarity":1,
    "normalized_text_entropy":4.358608356,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.628845368,
    "normalized_TFIDF":0.055804312,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I have been using java for quite some time, yet my education in loops is somewhat lacking.I know how to create every loop that exists in java and break out of the loops as well. However, I've recently thought about this:Here is what I have so far. Is there any way to achieve this?"
  },
  {
    "postid":1997,
    "postdate":1310256540,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.215692321,
    "concept_entropy":0,
    "UMASS(coherence)":0.522037952,
    "TFIDF(informativeness)":2.17504037,
    "polarity":0,
    "normalized_text_entropy":4.215692321,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.474579956,
    "normalized_TFIDF":0.120370644,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"In java you can use a label to specify which loop to break/continue:"
  },
  {
    "postid":1998,
    "postdate":1310256600,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.171671871,
    "concept_entropy":0,
    "UMASS(coherence)":0.652591488,
    "TFIDF(informativeness)":3.081965481,
    "polarity":1,
    "normalized_text_entropy":4.171671871,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.593264989,
    "normalized_TFIDF":0.170561509,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Yes, you can write e.g.:"
  },
  {
    "postid":1999,
    "postdate":1310256600,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.359299541,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.521160484,
    "TFIDF(informativeness)":1.869764841,
    "polarity":-1,
    "normalized_text_entropy":4.359299541,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.473782258,
    "normalized_TFIDF":0.103476147,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"There are many ways to skin this cat. Here's one: : Wow, did not know about breaking with labels. That seems like a better solution."
  },
  {
    "postid":2000,
    "postdate":1310256600,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.099878223,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.879783953,
    "polarity":1,
    "normalized_text_entropy":4.099878223,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.104030623,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You can find the answer here:"
  },
  {
    "postid":2001,
    "postdate":1310257020,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.144185411,
    "concept_entropy":0,
    "UMASS(coherence)":0.584380434,
    "TFIDF(informativeness)":1.907827794,
    "polarity":1,
    "normalized_text_entropy":4.144185411,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.53125494,
    "normalized_TFIDF":0.105582619,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Elementary, dear Watson ... or"
  },
  {
    "postid":2002,
    "postdate":1288205820,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.976564317,
    "concept_entropy":4.46898539,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.134512081,
    "polarity":0,
    "normalized_text_entropy":3.976564317,
    "normalized_concept_entropy":4.46898539,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.173469533,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I want to print all prime numbers that are 2-digits long. Here is my code: The problem is that it prints numbers like 35 or 49 which are not prime numbers."
  },
  {
    "postid":2003,
    "postdate":1288206780,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.185404286,
    "concept_entropy":4.326635338,
    "UMASS(coherence)":0.403610218,
    "TFIDF(informativeness)":2.346928509,
    "polarity":0,
    "normalized_text_entropy":4.185404286,
    "normalized_concept_entropy":4.326635338,
    "normalized_UMASS":0.36691838,
    "normalized_TFIDF":0.129883242,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"This works. You can see the output."
  },
  {
    "postid":2004,
    "postdate":1288206060,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.209661573,
    "concept_entropy":0,
    "UMASS(coherence)":0.541275141,
    "TFIDF(informativeness)":1.987685161,
    "polarity":2,
    "normalized_text_entropy":4.209661573,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.49206831,
    "normalized_TFIDF":0.11000207,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Your test for primeness is incorrect. You stop testing a number ( ) as soon as you find a divisor which the is not divisible by. That's not the definition of prime - you need to test that the number is not divisible by divisors less than it - in other words you need to test all values of before you can declare a number as prime. You can break out of the loop that checks when an is divisible by, but not when it is not divisible - you need to keep on checking when this condition is true!"
  },
  {
    "postid":2005,
    "postdate":1288206900,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.663451171,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.147400175,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I always love questions where the shortest and most obvious answer is to just hardcode the output:"
  },
  {
    "postid":2006,
    "postdate":1288206000,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.202218983,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.207431198,
    "polarity":1,
    "normalized_text_entropy":4.202218983,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.066821413,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Wikipedia gives a good algorithm for finding prime numbers. It also lists those up to 100.If you are looking for debugging help, I would simply step through your code until you see which of your tests are not correct. This is a quick simple program and shouldn't take you long."
  },
  {
    "postid":2007,
    "postdate":1288207020,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.253810175,
    "concept_entropy":0,
    "UMASS(coherence)":0.361915945,
    "TFIDF(informativeness)":1.922755322,
    "polarity":-2,
    "normalized_text_entropy":4.253810175,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.329014495,
    "normalized_TFIDF":0.106408736,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"The problem is in this block: It will print 'input' if it is not divisible by current value of 'x', but it may be divisible by next values of 'x'. In that case 'input' is not prime, but it is printed. Correct code:"
  },
  {
    "postid":2008,
    "postdate":1288207080,
    "tag":"0",
    "TFMvalue":0.928571429,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.009219765,
    "concept_entropy":0,
    "UMASS(coherence)":0.389732582,
    "TFIDF(informativeness)":1.691709562,
    "polarity":2,
    "normalized_text_entropy":4.009219765,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.354302347,
    "normalized_TFIDF":0.093622248,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"To find a prime, you don't need to test numbers below it up to it's square root; you simply need to test every other prime below it. Here's a demo : ** ** A yet more flexible and reusable implementation in a static method (not optimized for listing large prime numbers) : Method usage :"
  },
  {
    "postid":2009,
    "postdate":1288206060,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.373892924,
    "concept_entropy":4.414452063,
    "UMASS(coherence)":0.428663845,
    "TFIDF(informativeness)":1.381108957,
    "polarity":1,
    "normalized_text_entropy":4.373892924,
    "normalized_concept_entropy":4.414452063,
    "normalized_UMASS":0.389694405,
    "normalized_TFIDF":0.076433052,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You are printing all the odd numbers. You always break out of the loop so never exceeds 2. Also think carefully about the definition of a prime number: You should only break out of the loop if you found a divisor. If you haven't found one yet you need to keep going until you have tested all the possibilities. And you shouldn't print anything until you've finished the loop and know the result."
  },
  {
    "postid":2010,
    "postdate":1288206000,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.428786513,
    "concept_entropy":0,
    "UMASS(coherence)":0.555009241,
    "TFIDF(informativeness)":2.970894289,
    "polarity":0,
    "normalized_text_entropy":4.428786513,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.504553855,
    "normalized_TFIDF":0.16441463,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"this should do the work"
  },
  {
    "postid":2011,
    "postdate":1288206180,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.803408667,
    "concept_entropy":0,
    "UMASS(coherence)":0.549651908,
    "TFIDF(informativeness)":1.32877662,
    "polarity":-1,
    "normalized_text_entropy":3.803408667,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.499683553,
    "normalized_TFIDF":0.073536887,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Yes because it is printing out all cases where a non-factor is found.You need to ONLY print out cases where no factors can be found."
  },
  {
    "postid":2012,
    "postdate":1354637940,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.146997297,
    "concept_entropy":4.435809519,
    "UMASS(coherence)":0.674499537,
    "TFIDF(informativeness)":1.346636821,
    "polarity":0,
    "normalized_text_entropy":4.146997297,
    "normalized_concept_entropy":4.435809519,
    "normalized_UMASS":0.613181397,
    "normalized_TFIDF":0.074525302,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I have been trying to write an array to a file. I know how to write integers or String to a file but to bring an array confuses me. I am using this right now:"
  },
  {
    "postid":2013,
    "postdate":1354639140,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.270701098,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.420811932,
    "TFIDF(informativeness)":0.845793111,
    "polarity":0,
    "normalized_text_entropy":4.270701098,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.382556302,
    "normalized_TFIDF":0.046807711,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Like others said, you can just loop over the array and print out the elements one by one. To make the output show up as numbers instead of \"letters and symbols\" you were seeing, you need to convert each element to a string. So your code becomes something like this: If you just want to print out the array like, you can replace the loop with this one liner:"
  },
  {
    "postid":2014,
    "postdate":1354638300,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.38956998,
    "concept_entropy":0,
    "UMASS(coherence)":0.555370901,
    "TFIDF(informativeness)":1.09408137,
    "polarity":1,
    "normalized_text_entropy":4.38956998,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.504882637,
    "normalized_TFIDF":0.06054843,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Just loop over the elements in your array. Ex:"
  },
  {
    "postid":2015,
    "postdate":1354638480,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.907771492,
    "concept_entropy":0,
    "UMASS(coherence)":0.501565229,
    "TFIDF(informativeness)":0.880650232,
    "polarity":0,
    "normalized_text_entropy":3.907771492,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.45596839,
    "normalized_TFIDF":0.048736767,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"If you're okay with Apache commons lib"
  },
  {
    "postid":2016,
    "postdate":1354638060,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.456224231,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.369282411,
    "TFIDF(informativeness)":1.395075276,
    "polarity":0,
    "normalized_text_entropy":4.456224231,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.335711283,
    "normalized_TFIDF":0.077205973,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You can use the class to write objects to an underlying stream. And read the back like -"
  },
  {
    "postid":2017,
    "postdate":1354638600,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.394293998,
    "concept_entropy":3.427333494,
    "UMASS(coherence)":0.536486071,
    "TFIDF(informativeness)":1.671619158,
    "polarity":5,
    "normalized_text_entropy":4.394293998,
    "normalized_concept_entropy":3.427333494,
    "normalized_UMASS":0.48771461,
    "normalized_TFIDF":0.092510409,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"If the result is for humans to read and the elements of the array have a proper defined..."
  },
  {
    "postid":2018,
    "postdate":1272580680,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.25001244,
    "concept_entropy":4.453965799,
    "UMASS(coherence)":0.490270918,
    "TFIDF(informativeness)":2.135299011,
    "polarity":2,
    "normalized_text_entropy":4.25001244,
    "normalized_concept_entropy":4.453965799,
    "normalized_UMASS":0.445700835,
    "normalized_TFIDF":0.118171285,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"My problem is as follows. I have an arraylist of integers. The arraylist contains 5 ints e.g[5,5,3,3,9] or perhaps [2,2,2,2,7]. Many of the arraylists have duplicate values and i'm unsure how to count how many of each of the values exist. The problem is how to find the duplicate values in the arraylist and count how many of that particular duplicate there are. In the first example [5,5,3,3,9] there are 2 5's and 2 3's. The second example of [2,2,2,2,7] would be only 4 2's. The resulting information i wish to find is if there are any duplicates how many of them there are and what specific integer has been duplicated. I'm not too sure how to do this in java. Any help would be much appreciated. Thanks."
  },
  {
    "postid":2019,
    "postdate":1272587640,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.358607225,
    "concept_entropy":4.535891923,
    "UMASS(coherence)":0.511691083,
    "TFIDF(informativeness)":2.336100755,
    "polarity":2,
    "normalized_text_entropy":4.358607225,
    "normalized_concept_entropy":4.535891923,
    "normalized_UMASS":0.465173712,
    "normalized_TFIDF":0.129284015,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"To me, the most straightforward answer, would be using the method. Something along the lines of this: If you want to, you could map each with its number of occurrences:"
  },
  {
    "postid":2020,
    "postdate":1272580740,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.266918516,
    "concept_entropy":0,
    "UMASS(coherence)":0.701754271,
    "TFIDF(informativeness)":1.264876592,
    "polarity":5,
    "normalized_text_entropy":4.266918516,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.637958428,
    "normalized_TFIDF":0.070000544,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"Two algorithms spring to mind. Sort it ( ). Then iterate through easily finding dupes. Iterate through keeping count in a (or for a mutable count). A bit ugly this way. Either way, coding it should be an instructive exercise. I suggest doing both, and comparing."
  },
  {
    "postid":2021,
    "postdate":1272582600,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.33754114,
    "concept_entropy":4.449740903,
    "UMASS(coherence)":0.54671455,
    "TFIDF(informativeness)":2.076008492,
    "polarity":0,
    "normalized_text_entropy":4.33754114,
    "normalized_concept_entropy":4.449740903,
    "normalized_UMASS":0.497013227,
    "normalized_TFIDF":0.114890042,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Here is a concrete implementation, with test, of what I described in comments to @Tom's answer:"
  },
  {
    "postid":2022,
    "postdate":1272580860,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.35317569,
    "concept_entropy":0,
    "UMASS(coherence)":0.676559236,
    "TFIDF(informativeness)":1.353451948,
    "polarity":3,
    "normalized_text_entropy":4.35317569,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.615053851,
    "normalized_TFIDF":0.074902464,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"Use a Hashmap collection in addition to the array list whereWalk your array list collecting these values into the hashmap adding a new item when a previous key does not exist and incrementing by 1 the values of keys that do already exist. Then iterate over the Hashmap and print out any keys where the value is > 1."
  },
  {
    "postid":2023,
    "postdate":1272581040,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.364836151,
    "concept_entropy":4.35546916,
    "UMASS(coherence)":0.487587777,
    "TFIDF(informativeness)":0.947015901,
    "polarity":5,
    "normalized_text_entropy":4.364836151,
    "normalized_concept_entropy":4.35546916,
    "normalized_UMASS":0.443261615,
    "normalized_TFIDF":0.052409562,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"You can go through the and put them in a with the count. Then it is easy figure out which one is duplicated."
  },
  {
    "postid":2024,
    "postdate":1272582060,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.393347833,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.534375775,
    "TFIDF(informativeness)":0.665665574,
    "polarity":-3,
    "normalized_text_entropy":4.393347833,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.485796159,
    "normalized_TFIDF":0.036839129,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"For a cleaner abstraction of what you're doing, you could use the data structure from/ . You may even find you'd rather use it than a, depending on what you're doing with it (if you don't need the deterministic ordering of a list). You'd use it like this: In terms of what the above is doing under the covers, it's almost exactly equivalent to the suggestion of building a based on your list."
  },
  {
    "postid":2025,
    "postdate":1271660100,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.321784401,
    "concept_entropy":4.50355829,
    "UMASS(coherence)":0.369920186,
    "TFIDF(informativeness)":1.413254345,
    "polarity":0,
    "normalized_text_entropy":4.321784401,
    "normalized_concept_entropy":4.50355829,
    "normalized_UMASS":0.336291078,
    "normalized_TFIDF":0.078212036,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"first time poster, long time reader so be gentle with me :) See the following code which works to generate me timestamps for the beginning and end of every month in a financial year. So far so good, but in order to use these results I need these timestamps to be output to variables named by month (to be used in a prepared statement later in the code. e.g. SeptStart = sometimestamp, SeptEnd = some timestamp etc etc. I don't know if it is possible to declare new variables based on the results of each loop. Any ideas? "
  },
  {
    "postid":2026,
    "postdate":1271660400,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.310633247,
    "concept_entropy":4.632516955,
    "UMASS(coherence)":0.36646528,
    "TFIDF(informativeness)":2.911429618,
    "polarity":0,
    "normalized_text_entropy":4.310633247,
    "normalized_concept_entropy":4.632516955,
    "normalized_UMASS":0.333150255,
    "normalized_TFIDF":0.161123748,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Why not use a? After all you want to have a \"container\" for some value and address it with a specified name. So just make the \"variable name\" your key and \"variable value\" your, ehm, value. Edited because you wanted a Sorted collection: First of all, go for a instead of a Map. Also, to preserve lexicograph order, normalize your month number padding zeroes to the left, and use \"begin\" and \"end\" as delimiters So you will have: which will get printed in the correct order when you visit the treemap."
  },
  {
    "postid":2027,
    "postdate":1271660340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.086081894,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.997542466,
    "polarity":0,
    "normalized_text_entropy":4.086081894,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.055205793,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Instead of generating variable names, use a, where the key is a month name, and the value is the value for that month. Instead of you can doOr better yet, store the values in an array, where the index is the month number: "
  },
  {
    "postid":2028,
    "postdate":1271660340,
    "tag":"0",
    "TFMvalue":0.9,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.350002007,
    "concept_entropy":0,
    "UMASS(coherence)":0.578023601,
    "TFIDF(informativeness)":1.045047427,
    "polarity":6,
    "normalized_text_entropy":4.350002007,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.525476001,
    "normalized_TFIDF":0.057834803,
    "normalized_polarity":0.37037037,
    "tagtext":"loops",
    "posttext":"You can't declare variables dynamically. I'd suggest to declare two arrays of timestamps (one for the beginnings and one for the endings) and fill them. Then either use these arrays instead of named variables or declare the variables by hand and set them manually."
  },
  {
    "postid":2029,
    "postdate":1271660880,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.187038951,
    "concept_entropy":0,
    "UMASS(coherence)":0.487889357,
    "TFIDF(informativeness)":1.056894903,
    "polarity":1,
    "normalized_text_entropy":4.187038951,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.443535779,
    "normalized_TFIDF":0.058490464,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Storing the values in an array would allow you to access them by the Calendar.Month constants"
  },
  {
    "postid":2030,
    "postdate":1271664480,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.341420811,
    "concept_entropy":0,
    "UMASS(coherence)":0.608275529,
    "TFIDF(informativeness)":1.463285976,
    "polarity":2,
    "normalized_text_entropy":4.341420811,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.552977754,
    "normalized_TFIDF":0.080980876,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"A map does indeed seem to be a good solution :) I am new to java / jsp (and most programming in general!) so I was not aware of how simple this is :) The following code: Gives me the following output:I was curious why it was ordered in such a way? It's not important as far as the functionality is concerned, but for debugging purposes is it possible to order the hashmap? Thanks for the great suggestions all round folks :)"
  },
  {
    "postid":2031,
    "postdate":1271764620,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.379967972,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.182790508,
    "polarity":0,
    "normalized_text_entropy":4.379967972,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.065457753,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"For completion, I post the full code. It pulls availability information about our production servers from a database for a management report. It's the most complicated thing I have done in JSP yet :) I am sure lots of things could be done more elegantly, so please feel free to advise :) (obviously db passwords etc are XXX'ed out)"
  },
  {
    "postid":2032,
    "postdate":1321732380,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.029122388,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.768595585,
    "polarity":0,
    "normalized_text_entropy":4.029122388,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.042535461,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"In velocity, I want to do something different in the last loop.What is the correct idiom? : "
  },
  {
    "postid":2033,
    "postdate":1321734540,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.252330396,
    "concept_entropy":0,
    "UMASS(coherence)":0.587965959,
    "TFIDF(informativeness)":1.522794873,
    "polarity":-1,
    "normalized_text_entropy":4.252330396,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.534514508,
    "normalized_TFIDF":0.084274205,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"You can use a test if you are in last iteration::"
  },
  {
    "postid":2034,
    "postdate":1330679040,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.367684678,
    "concept_entropy":0,
    "UMASS(coherence)":0.431283127,
    "TFIDF(informativeness)":1.496270486,
    "polarity":1,
    "normalized_text_entropy":4.367684678,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.39207557,
    "normalized_TFIDF":0.082806298,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"@soulcheck's answer is what you need, but be aware that the variable is only available in velocity 1.7, if you're using an earlier version you can use: However, the variable is deprecated in versions 1.7 and removed in 2.0 in favour of."
  },
  {
    "postid":2035,
    "postdate":1321732800,
    "tag":"0",
    "TFMvalue":0.555555556,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":0,
    "concept_entropy":4.057962313,
    "UMASS(coherence)":0.136651454,
    "TFIDF(informativeness)":0.827033311,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.057962313,
    "normalized_UMASS":0.124228595,
    "normalized_TFIDF":0.04576951,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The idiom I use is to save the optional text to be added if the loop doesn't finish."
  },
  {
    "postid":2036,
    "postdate":1354757580,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.23289931,
    "concept_entropy":0,
    "UMASS(coherence)":0.352539802,
    "TFIDF(informativeness)":2.430375026,
    "polarity":-2,
    "normalized_text_entropy":4.23289931,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.320490729,
    "normalized_TFIDF":0.134501322,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"I searched this question and found answers that used the Map.Entry like, however the getValue() method returned an Object object instead of the type of object in the map. Like in the example below, I need it to return a User object so I can use a method from that class. When I tried using the while loop below however, it never leaves the loop. I was wondering the correct way to do this."
  },
  {
    "postid":2037,
    "postdate":1354758120,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.606099272,
    "concept_entropy":0,
    "UMASS(coherence)":0.341514011,
    "TFIDF(informativeness)":1.718758175,
    "polarity":1,
    "normalized_text_entropy":4.606099272,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.310467283,
    "normalized_TFIDF":0.095119167,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You're misusing the Iterator, and you're omitting the Generics specifications."
  },
  {
    "postid":2038,
    "postdate":1354758060,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.071821131,
    "concept_entropy":0,
    "UMASS(coherence)":0.375694131,
    "TFIDF(informativeness)":0.950906594,
    "polarity":0,
    "normalized_text_entropy":4.071821131,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.341540119,
    "normalized_TFIDF":0.05262488,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You should use the method; you just need to provide type parameters to use with generics:"
  },
  {
    "postid":2039,
    "postdate":1354757640,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.182566467,
    "concept_entropy":0,
    "UMASS(coherence)":0.448283902,
    "TFIDF(informativeness)":1.545434468,
    "polarity":0,
    "normalized_text_entropy":4.182566467,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.40753082,
    "normalized_TFIDF":0.085527121,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Each time you call, it gives you a brand new iterator at the first element. You need to call once and store it in a local variable."
  },
  {
    "postid":2040,
    "postdate":1354758360,
    "tag":"0",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.92720676,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.42442612,
    "polarity":0,
    "normalized_text_entropy":3.92720676,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.078830302,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"change your code for this:"
  },
  {
    "postid":2041,
    "postdate":1403744880,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.156223801,
    "concept_entropy":4.538011871,
    "UMASS(coherence)":0.39845581,
    "TFIDF(informativeness)":1.66444633,
    "polarity":1,
    "normalized_text_entropy":4.156223801,
    "normalized_concept_entropy":4.538011871,
    "normalized_UMASS":0.362232555,
    "normalized_TFIDF":0.092113452,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"The easiest way to iterare is using for. In a LinkedHashMap it would be like this:"
  },
  {
    "postid":2042,
    "postdate":1354761960,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.142383196,
    "concept_entropy":0,
    "UMASS(coherence)":0.511346431,
    "TFIDF(informativeness)":1.515659469,
    "polarity":1,
    "normalized_text_entropy":4.142383196,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.464860392,
    "normalized_TFIDF":0.083879319,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You have to remove \"next\" from the collection after it has been process.with your code, it is stock at \"next\";For example: if your \"users.values()\" returns a collection i.e {{john, 1}, {jen, 2}, {peter, 3}} Your while loops keeps return true and because it keeps returning \"{john,1}\" which is at the fist index.and so it is an infinite \"loop\". This is how Iterator works. hasNext() will return true if it has an element at the first index and next() will return that elementthat hasNext() confirmed it has. For your loop to progress i think you have to add a line of code or 2. see below: hope this helps.. My former code might not be the \"right\" way to do it but did the job and did not SKIP any second element @ EJP. thanks any way for putting me straight.. :)"
  },
  {
    "postid":2043,
    "postdate":1303457580,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.074126646,
    "concept_entropy":4.37343971,
    "UMASS(coherence)":0.414603315,
    "TFIDF(informativeness)":1.537106401,
    "polarity":1,
    "normalized_text_entropy":4.074126646,
    "normalized_concept_entropy":4.37343971,
    "normalized_UMASS":0.376912105,
    "normalized_TFIDF":0.085066231,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Ok, so I've got a genetic algorithm running in netbeans, and its been running for like 5 hours and seems to have entered an infinite loop. Is there any way that I can attach a debugger to it? or at least get some clue as to where it is in the code? I'd rather not sit around for another 5 hours while I wait for it to happen again."
  },
  {
    "postid":2044,
    "postdate":1303457640,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.107353468,
    "concept_entropy":0,
    "UMASS(coherence)":0.375694131,
    "TFIDF(informativeness)":0.72500599,
    "polarity":0,
    "normalized_text_entropy":4.107353468,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.341540119,
    "normalized_TFIDF":0.040123135,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"A simple way to get some basic information from your running program is to run on it, it will print stack traces of all threads in your code. Do that several times and you should have a good idea what is wrong. Use to find out the id of your JVM like and then use with that ID:provides similar information, if you prefer a GUI application."
  },
  {
    "postid":2045,
    "postdate":1288848540,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.016199045,
    "concept_entropy":0,
    "UMASS(coherence)":0.389732582,
    "TFIDF(informativeness)":1.287331651,
    "polarity":0,
    "normalized_text_entropy":4.016199045,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.354302347,
    "normalized_TFIDF":0.071243248,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I'm having a problem counting the number of words in a file. The approach that I am taking is when I see a space or a newLine then I know to count a word. The problem is that if I have multiple lines between paragraphs then I ended up counting them as words also.If you look at the readFile() method you can see what I am doing.Could you help me out and guide me in the right direction on how to fix this? Example input file (including a blank line):"
  },
  {
    "postid":2046,
    "postdate":1288849380,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.349212871,
    "concept_entropy":4.213634139,
    "UMASS(coherence)":0.569208555,
    "TFIDF(informativeness)":1.61486973,
    "polarity":1,
    "normalized_text_entropy":4.349212871,
    "normalized_concept_entropy":4.213634139,
    "normalized_UMASS":0.517462323,
    "normalized_TFIDF":0.089369794,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I would change your approach a bit. First, I would use a to read the file file in line-by-line using. Then split each line on whitespace using and use the size of the resulting array to see how many words are on that line. To get the number of characters you could either look at the size of each line or of each split word (depending of if you want to count whitespace as characters)."
  },
  {
    "postid":2047,
    "postdate":1288849560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.219108283,
    "concept_entropy":4.34012942,
    "UMASS(coherence)":0.578023601,
    "TFIDF(informativeness)":1.282180313,
    "polarity":4,
    "normalized_text_entropy":4.219108283,
    "normalized_concept_entropy":4.34012942,
    "normalized_UMASS":0.525476001,
    "normalized_TFIDF":0.070958163,
    "normalized_polarity":0.333333333,
    "tagtext":"loops",
    "posttext":"You can use a Scanner with a FileInputStream instead of BufferedReader with a FileReader. For example:-"
  },
  {
    "postid":2048,
    "postdate":1288849500,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.283188554,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.249514929,
    "polarity":0,
    "normalized_text_entropy":4.283188554,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.069150402,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You can read the text file into a String var. Then split the String into an array using a single whitespace as the delimiter StringVar.Split(\" \").The Array count would equal the number of \"Words\" in the file. Of course this wouldnt give you a count of line numbers. "
  },
  {
    "postid":2049,
    "postdate":1334944320,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.294142873,
    "concept_entropy":4.362523813,
    "UMASS(coherence)":0.695948583,
    "TFIDF(informativeness)":1.861517201,
    "polarity":-1,
    "normalized_text_entropy":4.294142873,
    "normalized_concept_entropy":4.362523813,
    "normalized_UMASS":0.63268053,
    "normalized_TFIDF":0.103019708,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2050,
    "postdate":1288849200,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.337108487,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.439123102,
    "polarity":0,
    "normalized_text_entropy":4.337108487,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.079643659,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Just keep a boolean flag around that lets you know if the previous character was whitespace or not (pseudocode follows):"
  },
  {
    "postid":2051,
    "postdate":1289241060,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.188086295,
    "concept_entropy":0,
    "UMASS(coherence)":0.509756857,
    "TFIDF(informativeness)":1.619854824,
    "polarity":3,
    "normalized_text_entropy":4.188086295,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.463415325,
    "normalized_TFIDF":0.089645678,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"I think a correct approach would be by means of Regex: Hope it helps. The \"s+\" meaning is in "
  },
  {
    "postid":2052,
    "postdate":1288854000,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":0,
    "concept_entropy":4.522703606,
    "UMASS(coherence)":0.136651454,
    "TFIDF(informativeness)":0.554517744,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.522703606,
    "normalized_UMASS":0.124228595,
    "normalized_TFIDF":0.030688009,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"This is just a thought. There is one very easy way to do it. If you just need number of words and not actual words then just use Apache WordUtils"
  },
  {
    "postid":2053,
    "postdate":1288850100,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.259736834,
    "concept_entropy":0,
    "UMASS(coherence)":0.603339814,
    "TFIDF(informativeness)":0.630133801,
    "polarity":1,
    "normalized_text_entropy":4.259736834,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.54849074,
    "normalized_TFIDF":0.034872737,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"3 steps: Consume all the white spaces, check if is a line, consume all the nonwhitespace.3"
  },
  {
    "postid":2054,
    "postdate":1391627940,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.355349859,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.34331784,
    "TFIDF(informativeness)":0.822104796,
    "polarity":1,
    "normalized_text_entropy":4.355349859,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.312107127,
    "normalized_TFIDF":0.045496757,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"The best way to answer is not to do it at all "
  },
  {
    "postid":2055,
    "postdate":1382427840,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.166335123,
    "concept_entropy":4.047377372,
    "UMASS(coherence)":0.317448092,
    "TFIDF(informativeness)":1.467520224,
    "polarity":0,
    "normalized_text_entropy":4.166335123,
    "normalized_concept_entropy":4.047377372,
    "normalized_UMASS":0.288589175,
    "normalized_TFIDF":0.081215207,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I was working on certain task, but the code executed and provided correct result. I was little surprised and had question in mind how all these for each loop works.Example (sample program), I was curious to know and while searching I found one more post that said we can remove elements from list if we used iterator approach, So I tried, Now I just want to know what is happening behind the every for each loop quoted above."
  },
  {
    "postid":2056,
    "postdate":1382433240,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.354521313,
    "concept_entropy":4.40061362,
    "UMASS(coherence)":0.318306288,
    "TFIDF(informativeness)":1.93858521,
    "polarity":0,
    "normalized_text_entropy":4.354521313,
    "normalized_concept_entropy":4.40061362,
    "normalized_UMASS":0.289369353,
    "normalized_TFIDF":0.10728479,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"This adds each String from array to the list. The statement is governed by the following production: where must be an instance of, or an array. So this loop is equivalent to this: Here will return a new instance of type: So even if you are creating new instances and assigning them to on each iteration, the iterator obtained from the original will still have a reference to the original and will keep iterating through the elements of original. The iterator keeps a reference to the list it was created on. The assignment has no effect on the data that the iterator works on because it changes the variable and not the itself. Below statement explains this behavior. It is copied from doc: The above statement also explains the behavior of this for loop: the can be structurally modified by theiterator's own remove or add methods while iterating through the list."
  },
  {
    "postid":2057,
    "postdate":1382428200,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.739572262,
    "concept_entropy":4.54910859,
    "UMASS(coherence)":0.134460047,
    "TFIDF(informativeness)":1.638479668,
    "polarity":0,
    "normalized_text_entropy":3.739572262,
    "normalized_concept_entropy":4.54910859,
    "normalized_UMASS":0.122236406,
    "normalized_TFIDF":0.09067641,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"A for-each loop is possible for Classes that implement. This also means that you can create Classes yourself which you can use in for-each loops, which can be very comfortable. This interface forces you to implement a method which returns an. Then the for-each loop does nothing but retrieve that iterator and iterate over it using and. Just the same as you would do it yourself. The problem with removing is that when you use a for-each loop and then remove an element from the List, the constructed will not know anything about that change and there will be a. But if you call directly, the Iterator will know about that change and can handle it. A common little trick to avoid Iterators and Exceptions at the same time is to do something like this: So you create a temporary copy of that List, iterate over that, but call remove on the original List."
  },
  {
    "postid":2058,
    "postdate":1382432880,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.144175713,
    "concept_entropy":3.235926351,
    "UMASS(coherence)":0.48381764,
    "TFIDF(informativeness)":1.591342674,
    "polarity":1,
    "normalized_text_entropy":4.144175713,
    "normalized_concept_entropy":3.235926351,
    "normalized_UMASS":0.439834218,
    "normalized_TFIDF":0.088067764,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":" of List will be internally converted to. gets converted toAnd since the the snapshot of list is already taken at below The loop is running until the last element of list i.e. \"how are you\". Whereas, below is not working because of of List. It says, if you are modifying the list while iterating, with anything other than iterator's own remove method, List will throw ConcurrentModificationException and thats the reason the below is working."
  },
  {
    "postid":2059,
    "postdate":1382428200,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.109704656,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.370979565,
    "TFIDF(informativeness)":1.305158093,
    "polarity":0,
    "normalized_text_entropy":4.109704656,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.33725415,
    "normalized_TFIDF":0.072229795,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"That is corrent. You cannot modify value of collection that is beeing iterated over using \"foreach\" loop, and to do that, you have to use collection's iterator."
  },
  {
    "postid":2060,
    "postdate":1382431080,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.067514265,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.384196595,
    "polarity":0,
    "normalized_text_entropy":4.067514265,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.076603928,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"It is of course not a problem to add something to a completely different list than the one you are currently traversing, as you did with the line Even though the variable still has the same name, it will point to an entirely different list. The reason why you cannot add something to a list that is currently being \"walked through\" is, that the internal implementation of that list might not be able to ensure, that you still get the same order of elements and especially not all remaining elements as you would expect.This can be understand best if you imagine that you are using a sorted list: you put in a new element, but whether or not you see that element is undefined, as it depends on where you are and what you insert. As Java doesn't know if you are ok with that, it takes the safe road and throws an Exception. There are however lists that are well capable of being able to be modified during traversal, mostly the concurrent lists in the."
  },
  {
    "postid":2061,
    "postdate":1337223360,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.014367756,
    "concept_entropy":0,
    "UMASS(coherence)":0.431024977,
    "TFIDF(informativeness)":0.885992755,
    "polarity":0,
    "normalized_text_entropy":4.014367756,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.391840888,
    "normalized_TFIDF":0.049032432,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I have this function to read text file with BufferedReader. I want to know if I can called another function and pass the readline/continue to read text file. If it can pass, can it loop the same function?"
  },
  {
    "postid":2062,
    "postdate":1337223660,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.229169137,
    "concept_entropy":0,
    "UMASS(coherence)":0.405101421,
    "TFIDF(informativeness)":2.401378476,
    "polarity":2,
    "normalized_text_entropy":4.229169137,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.368274019,
    "normalized_TFIDF":0.132896601,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"A object is self-contained (thanks to Java's heavy emphasis on), so you are free to pass it between functions and inside loops, and it will retain it's state - including the read line. However, if you are trying to call a method to process the line you have just read, then it would be much more efficient to pass the line itself to the method as a, instead of passing the entire BufferedReader object."
  },
  {
    "postid":2063,
    "postdate":1318089720,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.315742752,
    "concept_entropy":0,
    "UMASS(coherence)":0.458110945,
    "TFIDF(informativeness)":0.95664241,
    "polarity":0,
    "normalized_text_entropy":4.315742752,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.416464495,
    "normalized_TFIDF":0.05294231,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I have a of's which I get from a external API method call: I have to create unique key combinations by concatenating strings from each list in the same order they are in the outer list. Example: If outer list has 2 inner lists, say list1: {\"A\",\"B\"} and list2: {\"C\",\"D\"}. Then possible unique combinations will be AC, AD, BC and BD. But the problem is the size is dynamic, it can contain any number of inner lists. If the inner list numbers are fixed then I can write for loops and create combinations.I am thinking in the direction of using reflections, recursion etc but so far have not been able to solve it.Here has 2 inner lists so I have created 2 for loops explicitly to iterate and concatenate. But in real-time outerListcan have any number of inner lists, how to loop dynamically loop through all the inner loops and concatenate?"
  },
  {
    "postid":2064,
    "postdate":1318090860,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.228205616,
    "concept_entropy":0,
    "UMASS(coherence)":0.436147324,
    "TFIDF(informativeness)":1.223520488,
    "polarity":-2,
    "normalized_text_entropy":4.228205616,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.396497567,
    "normalized_TFIDF":0.067711823,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"This code works for me: Output:"
  },
  {
    "postid":2065,
    "postdate":1318090860,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.078481917,
    "concept_entropy":0,
    "UMASS(coherence)":0.434421208,
    "TFIDF(informativeness)":1.573378801,
    "polarity":0,
    "normalized_text_entropy":4.078481917,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.394928371,
    "normalized_TFIDF":0.087073611,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Sample data with enough variation to demonstrate the problem: Keep an array of counters: Each time around the main loop, I print one item from each inner list. Then I advance the counters, starting with the first. If that doesn't go off the end of the first inner list, we're ready to print again. But if it does, I set that counter to zero and try advancing the second one, and so on. If they all wrap round to zero, it's time to quit. It's really just like counting except that the columns each have a different \"base\" (instead of all being base ten or two or whatever)."
  },
  {
    "postid":2066,
    "postdate":1311670260,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.26122677,
    "concept_entropy":0,
    "UMASS(coherence)":0.344190163,
    "TFIDF(informativeness)":1.421207681,
    "polarity":1,
    "normalized_text_entropy":4.26122677,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.312900148,
    "normalized_TFIDF":0.078652188,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I have read that making something final and then using it in a loop will bring better performance, but is it good for everything? I have lots of places where there isnt a loop but I add final to the local variables. Does it make it slower or is it still good? Also there are some places where I have a global variable final (e.g. android paint), does it mean I don't have to make it a local final when using it in loops?"
  },
  {
    "postid":2067,
    "postdate":1311670500,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.172839409,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.134471468,
    "polarity":0,
    "normalized_text_entropy":4.172839409,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.06278369,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The first thing you should consider is;What is the simplest and clearest way I can write this code.Often this performs well.local variables is unlikely to affect performance much.They can help clarity when you have long methods, but I would suggest breaking up method is a better approach.fields can affect performance to small degree, but a better reason to make it is to make it clear that this field never changes (which also helps the JIT) "
  },
  {
    "postid":2068,
    "postdate":1311670560,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.94958177,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.345765567,
    "polarity":0,
    "normalized_text_entropy":3.94958177,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.129818883,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"From my experience most variables could be declared.However, it looks very ugly. That is my main point against it. And if the part of the program is not performance critical, beware of premature optimization."
  },
  {
    "postid":2069,
    "postdate":1311670620,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.441300448,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.422471452,
    "TFIDF(informativeness)":2.000634528,
    "polarity":0,
    "normalized_text_entropy":4.441300448,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.384064956,
    "normalized_TFIDF":0.110718711,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"It's considered good form to use final where possible (for fields and variables, not classes and methods), if for no other reason than it makes testing easier. Final will never have a negative impact on performance."
  },
  {
    "postid":2070,
    "postdate":1311670740,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.374814122,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.585521009,
    "polarity":-1,
    "normalized_text_entropy":4.374814122,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.087745583,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Don't think about performance. on object member (fields) have significant memory semantics that may improve performance (but more importantly, its often necessary to make the code correctly work at all). You should always put on object members whenever you can. For local variables however,. The general consensus of the Java community is that on every local variables will make the code difficult to read. On the performance front, you can expect no optimization as local variables are easy to analyze for the compiler. In other words, the compiler can figure it out by itself. "
  },
  {
    "postid":2071,
    "postdate":1311670560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.163898158,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.438557996,
    "polarity":0,
    "normalized_text_entropy":4.163898158,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.079612385,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Here are my 2 cents: Use final on attributes to minimize mutability and for documentation purposes, only use final on local variables if they are used in inner/anonymous classes.use it for microoptimizations! Especially don't use them on classes or methods because you think it will improve performance. Make classes and methods final to inheritance or overriding methods."
  },
  {
    "postid":2072,
    "postdate":1311670500,
    "tag":"0",
    "TFMvalue":0.769230769,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.166241747,
    "concept_entropy":0,
    "UMASS(coherence)":0.455150487,
    "TFIDF(informativeness)":1.796160473,
    "polarity":1,
    "normalized_text_entropy":4.166241747,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.41377317,
    "normalized_TFIDF":0.099402749,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Theoretically, if you make a local variable final it can be optimized. I don't think making them final yourself really improves performance though, because the optimizer probably already detects when your locals don't change. That said, it can't hurt to help it a bit. In some situations, it would help to change one variable into two, e.g. from this to Disclaimer: I'm not a JIT expert."
  },
  {
    "postid":2073,
    "postdate":1311670620,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.123338712,
    "concept_entropy":0,
    "UMASS(coherence)":0.491152558,
    "TFIDF(informativeness)":1.61363929,
    "polarity":1,
    "normalized_text_entropy":4.123338712,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.446502325,
    "normalized_TFIDF":0.089301699,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Final variables are constants, therefore the compiler could generate constant value instead of variable referencing instruction. Of course that would improve speed (and commonly size as well). Sorry, do you mean you don't have to: or what? remember that if you declare local variable which has the same name as global one, that would 'shadow' the global one. i.e. it's actually a totally different variable. if you already have the global one, just use that. no need to re-declare."
  },
  {
    "postid":2074,
    "postdate":1311670800,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.292032293,
    "concept_entropy":0,
    "UMASS(coherence)":0.415716449,
    "TFIDF(informativeness)":1.457071552,
    "polarity":0,
    "normalized_text_entropy":4.292032293,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.377924045,
    "normalized_TFIDF":0.080636959,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I don't think this should be your first concern, as mentioned by @perter-lawrey. First, compiler optimization can very much do the trick; second, there are some tools that can analyze your generated class files and do the same thing, for example, "
  },
  {
    "postid":2075,
    "postdate":1311672720,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.273128169,
    "concept_entropy":0,
    "UMASS(coherence)":0.533191548,
    "TFIDF(informativeness)":1.129235053,
    "polarity":1,
    "normalized_text_entropy":4.273128169,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.484719589,
    "normalized_TFIDF":0.062493898,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Final on attributes should not have any impact on performance. Except: in a multi threaded environment where several threads access the same field and \"don't know\" if they have to relaod it. Final on local variables has no impact at all, as nothing except the local scope can access them anyway.Final on methods can have an impact during JIT compiling. If a method is final and small the compiler can inline it in loops, as it is clear that no one will have overwritten it.I usually don't use final on attributes at all, as final attributes can not be loaded from DBs easily etc. Declaring pararameters to methods final lokos ugly (I never assign to them inside my code anyway) but might prevent simple bugs comming from typoes. However if you start using proper names for your variables you unliek make such typoes."
  },
  {
    "postid":2076,
    "postdate":1393582440,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.43210153,
    "concept_entropy":0,
    "UMASS(coherence)":0.557516103,
    "TFIDF(informativeness)":1.976004537,
    "polarity":3,
    "normalized_text_entropy":4.43210153,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.506832821,
    "normalized_TFIDF":0.109355643,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"Hello to all I have a problem about the loops in the JList in the first RadioButton it is correct but in the second sample if I am trying to do another asterisk the loop will get wrong this is my code so far ."
  },
  {
    "postid":2077,
    "postdate":1393584180,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.365913668,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.509103752,
    "TFIDF(informativeness)":1.220399844,
    "polarity":0,
    "normalized_text_entropy":4.365913668,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.462821593,
    "normalized_TFIDF":0.067539121,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Try this for your. You need to concatenate thes. You're currently only setting the text withOutput For this You need two loops, 1 for spaces and the other for stars. Trythis"
  },
  {
    "postid":2078,
    "postdate":1360015680,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.503534064,
    "concept_entropy":0,
    "UMASS(coherence)":0.481522332,
    "TFIDF(informativeness)":0.849312221,
    "polarity":0,
    "normalized_text_entropy":4.503534064,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.437747575,
    "normalized_TFIDF":0.047002465,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I have this loop herewhich loops through the whole array and finds the min and max value. Say I wanted to only loop through the first 20 elements how do I do that? I have tried along the lines of putting a nested loop in under this for loop and seeing if I come across it but I can't."
  },
  {
    "postid":2079,
    "postdate":1360015860,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.336733816,
    "concept_entropy":0,
    "UMASS(coherence)":0.486422542,
    "TFIDF(informativeness)":1.123155859,
    "polarity":4,
    "normalized_text_entropy":4.336733816,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.442202311,
    "normalized_TFIDF":0.062157464,
    "normalized_polarity":0.333333333,
    "tagtext":"loops",
    "posttext":"You could just add the requirement to the loop control condition: This would check the first 20 elements where ther are more than 20 in the array, but the whole array if there are less than 20 items."
  },
  {
    "postid":2080,
    "postdate":1360015920,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.417332709,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.84264665,
    "polarity":0,
    "normalized_text_entropy":4.417332709,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.04663358,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"This will loop through 20 times, i.e. first twenty elements of the array. "
  },
  {
    "postid":2081,
    "postdate":1360015860,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.656535874,
    "concept_entropy":0,
    "UMASS(coherence)":0.443538254,
    "TFIDF(informativeness)":3.101800368,
    "polarity":0,
    "normalized_text_entropy":3.656535874,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.403216595,
    "normalized_TFIDF":0.171659208,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Change your for loop to something like this:"
  },
  {
    "postid":2082,
    "postdate":1360015740,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.221930713,
    "concept_entropy":0,
    "UMASS(coherence)":0.491868038,
    "TFIDF(informativeness)":1.987293609,
    "polarity":0,
    "normalized_text_entropy":4.221930713,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.447152762,
    "normalized_TFIDF":0.1099804,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"If you only want to loop through the first 20 elements, then say so in the header of the for loop, like this. "
  },
  {
    "postid":2083,
    "postdate":1360016460,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.396160049,
    "concept_entropy":0,
    "UMASS(coherence)":1,
    "TFIDF(informativeness)":6.442123692,
    "polarity":6,
    "normalized_text_entropy":4.396160049,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.909090909,
    "normalized_TFIDF":0.356518705,
    "normalized_polarity":0.37037037,
    "tagtext":"loops",
    "posttext":"Replace with, which is the length of the array or 20, whichever is smaller:"
  },
  {
    "postid":2084,
    "postdate":1360021140,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.13570382,
    "concept_entropy":0,
    "UMASS(coherence)":0.445928526,
    "TFIDF(informativeness)":1.301833247,
    "polarity":0,
    "normalized_text_entropy":4.13570382,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.405389569,
    "normalized_TFIDF":0.072045792,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"5 answers and they all have a double comparison in the loop? No wonder, Java programs run so slowly... The correct way to do such a loop is: moving the comparison between length and 20 out of the loop and evaluating the loop-condition therefore twice as fast. (ignoring what the JIT might or might not be doing) Also, you have to initialize largest/smallest with the first element (or you get invalid values, if there is only one element in the array due to the else), and then you can skip the first element in the loop, making it even \"faster\":"
  },
  {
    "postid":2085,
    "postdate":1300638060,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.320218732,
    "concept_entropy":0,
    "UMASS(coherence)":0.643930258,
    "TFIDF(informativeness)":1.827036627,
    "polarity":0,
    "normalized_text_entropy":4.320218732,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.585391144,
    "normalized_TFIDF":0.101111491,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Are these statements completely the same in terms of memory occupation and efficiency in Java? : : :"
  },
  {
    "postid":2086,
    "postdate":1300638240,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.304625316,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.251070181,
    "polarity":1,
    "normalized_text_entropy":4.304625316,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.12457827,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"In terms of memory occupation and efficiency, yes. However, there are differences. In the first, exists (has a scope) beyond the loop; while in the second it does not. In the third case, there is no (direct) way to access the index or to change the array contents at the position of the current object."
  },
  {
    "postid":2087,
    "postdate":1300638180,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.277798265,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.439474049,
    "TFIDF(informativeness)":1.176375237,
    "polarity":0,
    "normalized_text_entropy":4.277798265,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.399521863,
    "normalized_TFIDF":0.06510272,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The first one is not the common idiom; I wouldn't write it that way. There's no memory or efficiency difference.The third is syntactic sugar that was added in a later JVM (I believe it was JDK 6). Your code will be the memory and efficiency bottleneck, not your loop constructs."
  },
  {
    "postid":2088,
    "postdate":1300638720,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.157143127,
    "concept_entropy":4.379729301,
    "UMASS(coherence)":0.338772739,
    "TFIDF(informativeness)":1.679545951,
    "polarity":1,
    "normalized_text_entropy":4.157143127,
    "normalized_concept_entropy":4.379729301,
    "normalized_UMASS":0.307975217,
    "normalized_TFIDF":0.092949092,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"The third version was introduced with Java 5, is designed to simplify your work with generics. It is enhanced because you don't need to determine how many elements are in the array before looping. There is also no need to specify how to increment the current position, providing a cleaner implementation without having to create a counter variable or an Iterator. "
  },
  {
    "postid":2089,
    "postdate":1300644420,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.448209913,
    "concept_entropy":0,
    "UMASS(coherence)":0.3372288,
    "TFIDF(informativeness)":1.821071528,
    "polarity":1,
    "normalized_text_entropy":4.448209913,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.306571636,
    "normalized_TFIDF":0.100781372,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":" And that's easily verifyable and imho not even that surprising. Just decompile the following two functions: and look at the output: I just included the println() so that we see something's done with the variable and to make sure javac doesn't optimize it away. Obviously in the bigger picture the difference won't matter and they're hardly measureable but still, not the same code ;) Though I'm not sure what exactly's going on in the 2nd function, so if someone wants to take the time and dissect the code go on ;-)"
  },
  {
    "postid":2090,
    "postdate":1299548940,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.155444158,
    "concept_entropy":0,
    "UMASS(coherence)":0.458110945,
    "TFIDF(informativeness)":1.169931651,
    "polarity":2,
    "normalized_text_entropy":4.155444158,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.416464495,
    "normalized_TFIDF":0.064746121,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"I'm reviewing for an exam. A question on an old test was to: Using an interface, write a method that applies an arbitrary method to every element of an ArrayList. Both the arraylist and method are the parameters to the method. Would a workable solution be:"
  },
  {
    "postid":2091,
    "postdate":1299549300,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.419923574,
    "concept_entropy":4.445635941,
    "UMASS(coherence)":0.683308856,
    "TFIDF(informativeness)":2.41225844,
    "polarity":1,
    "normalized_text_entropy":4.419923574,
    "normalized_concept_entropy":4.445635941,
    "normalized_UMASS":0.621189869,
    "normalized_TFIDF":0.133498718,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I would've expected something like this: It's ambiguous in the question, but this might mean returning a new ArrayList, so this might be another acceptable answer On a side note, you would then, say, invoke the application like (for example, doubling every number in the list):"
  },
  {
    "postid":2092,
    "postdate":1355789700,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.194861437,
    "concept_entropy":0,
    "UMASS(coherence)":0.591853868,
    "TFIDF(informativeness)":1.856158148,
    "polarity":0,
    "normalized_text_entropy":4.194861437,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.538048971,
    "normalized_TFIDF":0.102723128,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I am practising a string palindrome. Is my code in my for loop right? Thank you and best regards."
  },
  {
    "postid":2093,
    "postdate":1355793420,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.643930258,
    "TFIDF(informativeness)":1.41393592,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.585391144,
    "normalized_TFIDF":0.078249755,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I hope this will help you. If not let me know you need any more help while doing this."
  },
  {
    "postid":2094,
    "postdate":1355790000,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.361180808,
    "concept_entropy":0,
    "UMASS(coherence)":0.685402019,
    "TFIDF(informativeness)":1.340233969,
    "polarity":1,
    "normalized_text_entropy":4.361180808,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.623092745,
    "normalized_TFIDF":0.074170957,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"when you initiate x the value will be the length of word. it should beint x = word.length() -1"
  },
  {
    "postid":2095,
    "postdate":1355790060,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.237958473,
    "concept_entropy":4.631821629,
    "UMASS(coherence)":0.754515502,
    "TFIDF(informativeness)":18.06952513,
    "polarity":-16,
    "normalized_text_entropy":4.237958473,
    "normalized_concept_entropy":4.631821629,
    "normalized_UMASS":0.685923184,
    "normalized_TFIDF":1,
    "normalized_polarity":-0.037037037,
    "tagtext":"loops",
    "posttext":"int x = word.length();Will give you the length of the array of characters ieThen in the array that would be array[7], but you really want 6"
  },
  {
    "postid":2096,
    "postdate":1345698480,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.343803312,
    "concept_entropy":0,
    "UMASS(coherence)":0.84129266,
    "TFIDF(informativeness)":2.151574229,
    "polarity":-3,
    "normalized_text_entropy":4.343803312,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.764811509,
    "normalized_TFIDF":0.250442668,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"I've done some searching but I wasn't able to find a valid solution. I have an arraylist storing Strings such as gum, socks, OJ, dog food... I am having trouble iterating the list to determine the total number of differnt types of items. ie. The list has 4 total items, but only three different kinds of items (Gum, Sucks, Candy). How would I design a method to calculate the 3?"
  },
  {
    "postid":2097,
    "postdate":1345698660,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.228902554,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.594663764,
    "polarity":-2,
    "normalized_text_entropy":4.228902554,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.185618438,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"What, but in code: If what you actually have is and need to go through then I would do"
  },
  {
    "postid":2098,
    "postdate":1345698600,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.459431619,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.187129849,
    "polarity":0,
    "normalized_text_entropy":3.459431619,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.138181599,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Use a ( ) whose size will give you what you are looking for."
  },
  {
    "postid":2099,
    "postdate":1345698960,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.459849182,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.083993258,
    "polarity":-1,
    "normalized_text_entropy":4.459849182,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.126176527,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"This looks like a homework... So, if you do not understand the HashSet solution proposed above (or doning the same with a HashMap), think about doing something like this: Create a new ArrayList Take an element and check to see if it exists in the new ArrayList If it is present in the new ArrayList, do nothing. Else add it. Do this until you have examined the last element of the ArrayList. Then, the size of the new array list should be the number you are looking for."
  },
  {
    "postid":2100,
    "postdate":1360706100,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.047856716,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.398992554,
    "polarity":-1,
    "normalized_text_entropy":4.047856716,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.162842361,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"You can use the method and loop through the arraylist. Tested."
  },
  {
    "postid":2101,
    "postdate":1329527040,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.310536238,
    "concept_entropy":0,
    "UMASS(coherence)":0.59056828,
    "TFIDF(informativeness)":1.390499231,
    "polarity":0,
    "normalized_text_entropy":4.310536238,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.536880255,
    "normalized_TFIDF":0.161853741,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I have a JSON string that resembles the following: I do a JSON parse of this string, and that turns all objects into HashMaps and all arrays into HashMap[]s. My problem is I need a single recursive function to iterate through all nodes of this JSON structure in Java. How can I do this? I was thinking something like:"
  },
  {
    "postid":2102,
    "postdate":1329528000,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.152619593,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.325229402,
    "TFIDF(informativeness)":1.777880961,
    "polarity":1,
    "normalized_text_entropy":4.152619593,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.295663093,
    "normalized_TFIDF":0.206944871,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Assuming you an array can only have Maps inside (and not other arrays): Or you can make it even simpler if you can use 3 functions"
  },
  {
    "postid":2103,
    "postdate":1329463260,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.103431104,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.863930769,
    "polarity":1,
    "normalized_text_entropy":4.103431104,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.100561312,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I have 2 1d arrays and im trying to populate them into a single 2d array in JAVA. For instance: The results should then be: How do I go about this? I currently have something like this: Im sort of stuck from there..."
  },
  {
    "postid":2104,
    "postdate":1329463860,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.127960455,
    "concept_entropy":0,
    "UMASS(coherence)":0.502223853,
    "TFIDF(informativeness)":0.88460171,
    "polarity":0,
    "normalized_text_entropy":4.127960455,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.456567139,
    "normalized_TFIDF":0.102967404,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"2D array is an array of arrays. So why don't you trythis? And to make sure that it is so simple and works, test this:"
  },
  {
    "postid":2105,
    "postdate":1329463500,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.330773483,
    "concept_entropy":0,
    "UMASS(coherence)":0.470509094,
    "TFIDF(informativeness)":0.857622783,
    "polarity":1,
    "normalized_text_entropy":4.330773483,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.42773554,
    "normalized_TFIDF":0.099827064,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You have to revert the row and column indices"
  },
  {
    "postid":2106,
    "postdate":1329463980,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.071392499,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.279191347,
    "TFIDF(informativeness)":0.554517744,
    "polarity":0,
    "normalized_text_entropy":4.071392499,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.253810315,
    "normalized_TFIDF":0.064545718,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Try this:"
  },
  {
    "postid":2107,
    "postdate":1304429640,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.365534181,
    "concept_entropy":3.902174814,
    "UMASS(coherence)":0.599722004,
    "TFIDF(informativeness)":1.795382972,
    "polarity":3,
    "normalized_text_entropy":4.365534181,
    "normalized_concept_entropy":3.902174814,
    "normalized_UMASS":0.545201822,
    "normalized_TFIDF":0.2089821,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"I hava a thread in which I have an infinite loop, doing some network stuff. It appears that I don't get a response every time i'm doing this so the thread hangs for several seconds which causes serious problems to my software. What I need is some kind of \"deadline\" for the loop, if it takes more then (e.g. 100ms) restart again. (this is not the real class... it's just to get an impression of what I mean.) Any Ideas how to handle this? I handeled it with a seperate Thread as suggested. Actually I used a Callable becouse I need a return value. But the problem I face now is, that isn't terminating the hanging Callable task(which is the correct behaviour according to the Documentation). Is there a way to kill an executor task? (I know this is not a clean solution but some of the requests are handled by a library)"
  },
  {
    "postid":2108,
    "postdate":1304430420,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.819548828,
    "concept_entropy":4.278230897,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.596461856,
    "polarity":-1,
    "normalized_text_entropy":3.819548828,
    "normalized_concept_entropy":4.278230897,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.185827735,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"You can put your networking stuff into a separate thread and run it for a couple of seconds for instance:"
  },
  {
    "postid":2109,
    "postdate":1304430480,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.349686048,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.85884384,
    "polarity":3,
    "normalized_text_entropy":4.349686048,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.216368929,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"Google Guava's may do what you need."
  },
  {
    "postid":2110,
    "postdate":1304429820,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.086921176,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.07800013,
    "polarity":0,
    "normalized_text_entropy":4.086921176,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.125478928,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Apologies if this is wrong as I'm not a Java developer, but from a general programming perspective you should have your method that may take time return some form of. You can catch this in your loop and then it will automatically restart. This isn't a problem with the loop, moreso the method(s) you're calling within. An alternative approach would be to run your time-consuming operations on a separate thread, so that nothing hangs. You can then notify the main (UI) thread of completion at any time."
  },
  {
    "postid":2111,
    "postdate":1304430120,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.343047642,
    "concept_entropy":0,
    "UMASS(coherence)":0.529572219,
    "TFIDF(informativeness)":1.495083761,
    "polarity":3,
    "normalized_text_entropy":4.343047642,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.48142929,
    "normalized_TFIDF":0.174027352,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"Your infinite while loop is hogging the CPU. Try adding a delay of 50 ms or so, so that you give a small break for the CPU to attend to other tasks. Better yet, schedule your task using with a certain amount of delay and."
  },
  {
    "postid":2112,
    "postdate":1304430360,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.383204276,
    "concept_entropy":0,
    "UMASS(coherence)":0.68148023,
    "TFIDF(informativeness)":1.625797521,
    "polarity":2,
    "normalized_text_entropy":4.383204276,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.619527482,
    "normalized_TFIDF":0.189242399,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"You should interrupt the thread after timeout. Check out java concurrency."
  },
  {
    "postid":2113,
    "postdate":1283947680,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.448372712,
    "concept_entropy":0,
    "UMASS(coherence)":0.744531091,
    "TFIDF(informativeness)":1.986575472,
    "polarity":0,
    "normalized_text_entropy":4.448372712,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.676846446,
    "normalized_TFIDF":0.231236857,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Do you know of any time efficient way to remove duplicated values from a very big integer array using Java? The size of the array depends on the logged in user, but will always exceed 1500000 unsorted values with some duplicates. Every integer contains a number between 100000 and 9999999. I tried converting it to a List, but the heap on my server doesn't allow this amount of data(my ISP has restricted it). And a regular for loop within a for loop takes over 5 minutes to calculate.The size of the array without the duplicates is the one I will store in my database. Help would be appreciated!"
  },
  {
    "postid":2114,
    "postdate":1283948640,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.539045172,
    "concept_entropy":0,
    "UMASS(coherence)":0.517552596,
    "TFIDF(informativeness)":1.736590847,
    "polarity":5,
    "normalized_text_entropy":4.539045172,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.47050236,
    "normalized_TFIDF":0.202138713,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"You could perhaps use a bit set? I don't know how efficient Java's BitSet is. But 9999999 possible values would only take 9999999/8 = 1250000 bytes = just over 1Mb. As you walk the array of values, set the corresponding bit to true. Then you can walk over the bit set and output the corresponding value whenever you find a bit set to true. 1Mb will fit in a CPU cache, so this could be quite efficient depending on the bit set implementation. This also has the side-effect of sorting the data too. And... this is an O(n) algorithm since it requires a single pass over the input data, the set operations are O(1) (for an array-based set like this), and the output pass is also O(m) where m is the number of unique values and, by definition, must be <= n."
  },
  {
    "postid":2115,
    "postdate":1283947860,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.357031991,
    "concept_entropy":0,
    "UMASS(coherence)":0.582462342,
    "TFIDF(informativeness)":2.717789111,
    "polarity":0,
    "normalized_text_entropy":4.357031991,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.52951122,
    "normalized_TFIDF":0.31634993,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"you will just need an array of instead of."
  },
  {
    "postid":2116,
    "postdate":1283947860,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.126571935,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.003513061,
    "polarity":1,
    "normalized_text_entropy":4.126571935,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.116808653,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I would make a hashset where I store all values contained in the list, before i start adding items to the list. Then just check so that the hashset doesn't contain the value you want to add."
  },
  {
    "postid":2117,
    "postdate":1283947920,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.284210101,
    "concept_entropy":0,
    "UMASS(coherence)":0.735011725,
    "TFIDF(informativeness)":1.461347446,
    "polarity":2,
    "normalized_text_entropy":4.284210101,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.668192477,
    "normalized_TFIDF":0.170100454,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"You can try sorting the array first:"
  },
  {
    "postid":2118,
    "postdate":1283949360,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.301620955,
    "concept_entropy":0,
    "UMASS(coherence)":0.39723814,
    "TFIDF(informativeness)":1.532527431,
    "polarity":1,
    "normalized_text_entropy":4.301620955,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.361125582,
    "normalized_TFIDF":0.178385785,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2119,
    "postdate":1287267180,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.075029169,
    "concept_entropy":0,
    "UMASS(coherence)":0.316038996,
    "TFIDF(informativeness)":1.18652058,
    "polarity":-1,
    "normalized_text_entropy":4.075029169,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.287308178,
    "normalized_TFIDF":0.13811068,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"The truly desperate could write the array to disk and fork off and capture the output.This would be needed if memory was still too tight or the domain space of integers got larger.I don't like this (is he even running unix!) but my point is that there are ways to accomplish the task. Another observation is that the minimum value is 100,000.So we could subtract 100,000 from the maximum value of 9,999,999, reducing the domain space and thus saving some memory.Perhaps 100k/8 bits is peanuts in the scheme of things, but it's essentially free to do it."
  },
  {
    "postid":2120,
    "postdate":1283948520,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.333890068,
    "concept_entropy":0,
    "UMASS(coherence)":0.469501452,
    "TFIDF(informativeness)":1.163222388,
    "polarity":2,
    "normalized_text_entropy":4.333890068,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.426819502,
    "normalized_TFIDF":0.135398777,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Perhaps you could make a handful of passes over the data? For example, if you made ten passes over the data and applied one of the set suggestions above to a smaller subset of the data (say, when value mod pass# == 0). Thus: This way you will trade off time for memory (increase the number of passes for less memory/more time and vice-versa)."
  },
  {
    "postid":2121,
    "postdate":1283948940,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.228643805,
    "concept_entropy":0,
    "UMASS(coherence)":0.427693768,
    "TFIDF(informativeness)":0.922283434,
    "polarity":2,
    "normalized_text_entropy":4.228643805,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.388812516,
    "normalized_TFIDF":0.107353546,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Maybe a hash set that works with instead of objects will do the job? There are free implementations (havn't used them before but maybe it works): Would then look like:"
  },
  {
    "postid":2122,
    "postdate":1283949360,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.28132196,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.376643466,
    "TFIDF(informativeness)":0.736560144,
    "polarity":0,
    "normalized_text_entropy":4.28132196,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.342403151,
    "normalized_TFIDF":0.085735405,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"If you are sure, that integers have resonable small values (e.g. always more than zero and less than 1000 or 10000), you can try a trick like this: Output: [0, 10, 11, 99]"
  },
  {
    "postid":2123,
    "postdate":1253285220,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.427165073,
    "concept_entropy":0,
    "UMASS(coherence)":0.432750559,
    "TFIDF(informativeness)":1.042415381,
    "polarity":-1,
    "normalized_text_entropy":4.427165073,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.393409599,
    "normalized_TFIDF":0.121336873,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"When looking through some code that was handled by another employee, I see a lot of code written in: What advantage (if any) does this provide? Here is more of a skeleton that is happening in the code:"
  },
  {
    "postid":2124,
    "postdate":1253285520,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.333629928,
    "concept_entropy":0,
    "UMASS(coherence)":0.473488328,
    "TFIDF(informativeness)":1.505549422,
    "polarity":3,
    "normalized_text_entropy":4.333629928,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.430443935,
    "normalized_TFIDF":0.175245552,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"Maybe it was done to be able to jump out of the \"loop\" at any time, e.g: But as others have said, I wouldn't do it like this."
  },
  {
    "postid":2125,
    "postdate":1253285340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.14623356,
    "concept_entropy":0,
    "UMASS(coherence)":0.34331784,
    "TFIDF(informativeness)":0.983338704,
    "polarity":1,
    "normalized_text_entropy":4.14623356,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.312107127,
    "normalized_TFIDF":0.114460364,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"No advantage. Don't do it."
  },
  {
    "postid":2126,
    "postdate":1253285640,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.472080021,
    "concept_entropy":0,
    "UMASS(coherence)":0.44967466,
    "TFIDF(informativeness)":1.65777477,
    "polarity":1,
    "normalized_text_entropy":4.472080021,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.408795145,
    "normalized_TFIDF":0.192964542,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"In Java, there is no reason to do this. In C, this is a common idiom when defining macros: Consider: ...but macros in C are evil and should be avoided if at all possible. Does your coworker come from a C background?"
  },
  {
    "postid":2127,
    "postdate":1253285700,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.24610061,
    "concept_entropy":0,
    "UMASS(coherence)":0.490433892,
    "TFIDF(informativeness)":1.472315256,
    "polarity":0,
    "normalized_text_entropy":4.24610061,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.445848993,
    "normalized_TFIDF":0.171377104,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"It is useless, but the coder could have used a multiple break commands to do some weird exception handling. Granted its stupid, but I did find something like in a old c program once"
  },
  {
    "postid":2128,
    "postdate":1253285340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.318983102,
    "concept_entropy":0,
    "UMASS(coherence)":0.444401025,
    "TFIDF(informativeness)":1.66963882,
    "polarity":2,
    "normalized_text_entropy":4.318983102,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.404000932,
    "normalized_TFIDF":0.194345515,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Your intuition is right. That is a completely useless thing to do. It is that whoever coded it originally had something other than as the condition, and simply changed it to rather than removing the entire block not to lose this \"history\" of the code. This is a just clutching at straws however. To be quite frank it's just a plain example of a, which has no place in code."
  },
  {
    "postid":2129,
    "postdate":1253285580,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.290191995,
    "concept_entropy":0,
    "UMASS(coherence)":0.571403696,
    "TFIDF(informativeness)":1.175289299,
    "polarity":2,
    "normalized_text_entropy":4.290191995,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.519457905,
    "normalized_TFIDF":0.136803362,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"This is used in C to define block inside macro. See for example. Example, the following is invalid: but with this definition, it will work:"
  },
  {
    "postid":2130,
    "postdate":1253285520,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.031453646,
    "concept_entropy":0,
    "UMASS(coherence)":0.449368772,
    "TFIDF(informativeness)":1.818976878,
    "polarity":0,
    "normalized_text_entropy":3.031453646,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.408517065,
    "normalized_TFIDF":0.211728425,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"In pretty much every language other than C/C++ this provides no tactical advantage. In C/C++ there is a case with macros where do/while(false) makes it easier to expand a macro safely into multiple statements.This is advantageous when the macro otherwise looks like a normal function call."
  },
  {
    "postid":2131,
    "postdate":1253285640,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.98474713,
    "concept_entropy":4.388778152,
    "UMASS(coherence)":0.31573289,
    "TFIDF(informativeness)":0.603019244,
    "polarity":1,
    "normalized_text_entropy":3.98474713,
    "normalized_concept_entropy":4.388778152,
    "normalized_UMASS":0.2870299,
    "normalized_TFIDF":0.07019128,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Have a look at thisThe OP asks about this exact construct and explains some reasons for using it.The consensus seems to be that it's a bad thing to do."
  },
  {
    "postid":2132,
    "postdate":1253286180,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.180085722,
    "concept_entropy":4.394742036,
    "UMASS(coherence)":0.39452806,
    "TFIDF(informativeness)":2.649070283,
    "polarity":1,
    "normalized_text_entropy":4.180085722,
    "normalized_concept_entropy":4.394742036,
    "normalized_UMASS":0.358661873,
    "normalized_TFIDF":0.308351076,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"As a placeholder for a future when some other condition is put in place of."
  },
  {
    "postid":2133,
    "postdate":1269967140,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.139584195,
    "concept_entropy":0,
    "UMASS(coherence)":0.331783178,
    "TFIDF(informativeness)":1.301712546,
    "polarity":1,
    "normalized_text_entropy":4.139584195,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.301621071,
    "normalized_TFIDF":0.151518994,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"It could be used to skip execution of some code (like a or something) but when I look at it again, there seems to be a loop (where the statements are) in the. Otherwise, I would say that it would be a Java version of a..."
  },
  {
    "postid":2134,
    "postdate":1374091320,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.42263994,
    "concept_entropy":0,
    "UMASS(coherence)":0.564460325,
    "TFIDF(informativeness)":0.499328775,
    "polarity":2,
    "normalized_text_entropy":4.42263994,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.51314575,
    "normalized_TFIDF":0.058121737,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"It can be used to goto the end of a block which can be used to avoid a bunch nested if/then blocks."
  },
  {
    "postid":2135,
    "postdate":1253285400,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.589714403,
    "concept_entropy":0,
    "UMASS(coherence)":0.627720638,
    "TFIDF(informativeness)":1.123376465,
    "polarity":5,
    "normalized_text_entropy":4.589714403,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.570655125,
    "normalized_TFIDF":0.130760722,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"I'm going to guess the author of that didn't trust his code so he used to run it a couple times to see if that made it work more and this is the archeological remains of that."
  },
  {
    "postid":2136,
    "postdate":1253285400,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.458482469,
    "concept_entropy":4.344157894,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.448198086,
    "polarity":2,
    "normalized_text_entropy":4.458482469,
    "normalized_concept_entropy":4.344157894,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.40136934,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"The only reason I can think of is to create a block to make variables declared within the more tightly scoped, but there are better ways of doing this (like creating functions, or just creating blocks - hat tip to Pete Kirkham)."
  },
  {
    "postid":2137,
    "postdate":1268414700,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.393748396,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.125292635,
    "polarity":0,
    "normalized_text_entropy":4.393748396,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.130983763,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"what behaviour can I expect when I run this code: Will it behave like: Or: Or something totally unexpected? I ask this question because I think this is quite ambiguous, and for other people searching on this topic, because I am lazy to test it out."
  },
  {
    "postid":2138,
    "postdate":1268415420,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.663532755,
    "concept_entropy":4.539490721,
    "UMASS(coherence)":0.569644636,
    "TFIDF(informativeness)":1.870938009,
    "polarity":0,
    "normalized_text_entropy":3.663532755,
    "normalized_concept_entropy":4.539490721,
    "normalized_UMASS":0.51785876,
    "normalized_TFIDF":0.217776687,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"It is equivalent to your first block: The relevant parts of the when parsing this are: You can see that the Java compiler will parse this as. That's the only valid way to parse the code that you wrote. Keep in mind that it doesn't have any special rule to parse this construct. It just ends up being confusing for a human to read due to the unusual way the do-while loop is written. In normal usage do-while is always written as with explicit curly braces."
  },
  {
    "postid":2139,
    "postdate":1267741800,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.237150016,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.969803785,
    "polarity":2,
    "normalized_text_entropy":4.237150016,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.112884903,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"This is a stylistic question. I want to loop twice with a variable which is set to false, then to true. Which of these is clearer: A)B)C) something else edit: Murphy's law of unintended interpretations comes into play... the use case I have originally looked something like this instead of doStuffBasedOnABooleanFlag: But I think I like Brendan's answer, I'll just refactor the loop contents into a separate method:"
  },
  {
    "postid":2140,
    "postdate":1267741920,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.337431794,
    "concept_entropy":0,
    "UMASS(coherence)":0.369886909,
    "TFIDF(informativeness)":1.599181953,
    "polarity":4,
    "normalized_text_entropy":4.337431794,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.336260826,
    "normalized_TFIDF":0.186144354,
    "normalized_polarity":0.333333333,
    "tagtext":"loops",
    "posttext":"Since it's two lines, I'd just skip the loop and do: Less code, more obvious, more efficient."
  },
  {
    "postid":2141,
    "postdate":1267742820,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.397131304,
    "concept_entropy":4.544917527,
    "UMASS(coherence)":0.385844673,
    "TFIDF(informativeness)":1.375781303,
    "polarity":5,
    "normalized_text_entropy":4.397131304,
    "normalized_concept_entropy":4.544917527,
    "normalized_UMASS":0.350767885,
    "normalized_TFIDF":0.160140578,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"Another option would be to avoid the boolean and use an enum: You could then either iterate: Or do the calls directly: The advantage of this would be that the API indicates more clearly what's happening."
  },
  {
    "postid":2142,
    "postdate":1267741980,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.319192329,
    "TFIDF(informativeness)":1.433199019,
    "polarity":-1,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.290174845,
    "normalized_TFIDF":0.166823985,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"If you really want to use a loop, I would go with (a).While it's novel, it's also clear and efficient.I might move the boolean array to a private static, to avoid recreating the array every time. But I like Brendan's answer better."
  },
  {
    "postid":2143,
    "postdate":1267778040,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.208123767,
    "concept_entropy":4.648941027,
    "UMASS(coherence)":0.356631815,
    "TFIDF(informativeness)":2.90665828,
    "polarity":-1,
    "normalized_text_entropy":4.208123767,
    "normalized_concept_entropy":4.648941027,
    "normalized_UMASS":0.324210741,
    "normalized_TFIDF":0.338334251,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"It's not just the loop, I'm also really uncomfortable with the use of booleans in this way. What about something like: That still leaves the boolean within the listener, but without knowing what the doStuffLater method does that's as far as we can go."
  },
  {
    "postid":2144,
    "postdate":1375600200,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.144240901,
    "concept_entropy":0,
    "UMASS(coherence)":0.360316748,
    "TFIDF(informativeness)":1.183002815,
    "polarity":0,
    "normalized_text_entropy":4.144240901,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.32756068,
    "normalized_TFIDF":0.137701213,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"This code acts as expected printing \"Average Number of Runs: 0.99864197\" This code that should print the same exact number, but instead it prints a random negative number. Is there some optimization that happens in java for loops? Notes:"
  },
  {
    "postid":2145,
    "postdate":1375602180,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.218309954,
    "concept_entropy":0,
    "UMASS(coherence)":0.436147324,
    "TFIDF(informativeness)":0.713563216,
    "polarity":0,
    "normalized_text_entropy":4.218309954,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.396497567,
    "normalized_TFIDF":0.083058569,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I believe this to be a bug in the JIT handling of very tight loops in some versions of Java 6. It be either or bug. Updating to Java 7 should work, although I appreciate that doesn't help much in your situation. You may find that adding a \"looks like it isn't a no-op, but does something you don't care about\" method call within your loop fixes the problem too. For example, you could sum all the values of, and print that to some diagnostic log afterwards to be ignored."
  },
  {
    "postid":2146,
    "postdate":1375600920,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.171371265,
    "concept_entropy":0,
    "UMASS(coherence)":0.425734653,
    "TFIDF(informativeness)":1.217317197,
    "polarity":1,
    "normalized_text_entropy":4.171371265,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.387031503,
    "normalized_TFIDF":0.141695398,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"It works fine here on.You should update your Java version, or ensure that your problem is actually with the code as stated."
  },
  {
    "postid":2147,
    "postdate":1346005620,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.126169875,
    "concept_entropy":0,
    "UMASS(coherence)":0.53209761,
    "TFIDF(informativeness)":0.89751121,
    "polarity":0,
    "normalized_text_entropy":4.126169875,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.4837251,
    "normalized_TFIDF":0.104470066,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I'm trying to read in an XML using DOM in Java My current solution isAnd the output now is Which quite confuses me. Could you tell me where I'm wrong? The number of food tags is not pre-defined."
  },
  {
    "postid":2148,
    "postdate":1346007300,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.340350584,
    "concept_entropy":4.347761926,
    "UMASS(coherence)":0.307538311,
    "TFIDF(informativeness)":1.506443737,
    "polarity":1,
    "normalized_text_entropy":4.340350584,
    "normalized_concept_entropy":4.347761926,
    "normalized_UMASS":0.279580283,
    "normalized_TFIDF":0.17534965,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Note that, as you can clearly see, dealing with the DOM API in Java is pretty painful. Have you looked at or?"
  },
  {
    "postid":2149,
    "postdate":1349565060,
    "tag":"0",
    "TFMvalue":0.846153846,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.326024405,
    "concept_entropy":0,
    "UMASS(coherence)":0.494698644,
    "TFIDF(informativeness)":0.953682411,
    "polarity":0,
    "normalized_text_entropy":4.326024405,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.44972604,
    "normalized_TFIDF":0.111008379,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"To get the sub elements of an element I've created a class that replace NodeList: Note that the code is public domain."
  },
  {
    "postid":2150,
    "postdate":1377748380,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.222780788,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.308432316,
    "TFIDF(informativeness)":1.072283528,
    "polarity":0,
    "normalized_text_entropy":4.222780788,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.280393015,
    "normalized_TFIDF":0.124813517,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Im making a dog text adventure game for my Java class, and my latest assignment was to add probability and training to the game. Basically I have a random number generated, and if the number associated with the skill \"Shake \" for instance is greater then a set number, then the dog will perform the trick successfully. That part is working 100% for me. Now adding training is where Im running into problems. I have each skill set to an initial value of 1. Each time a skill is performed successfully the value increases by 1. My goal is to have the max value of 3, and if the max valued is reached, then the dog performs the trick every single time its executed! Here is what I have, hopefully someone can explain why its not working"
  },
  {
    "postid":2151,
    "postdate":1377748560,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.143975629,
    "concept_entropy":4.539094176,
    "UMASS(coherence)":0.588743541,
    "TFIDF(informativeness)":1.213588854,
    "polarity":3,
    "normalized_text_entropy":4.143975629,
    "normalized_concept_entropy":4.539094176,
    "normalized_UMASS":0.535221401,
    "normalized_TFIDF":0.14126142,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"I can't tell exactly what you're trying to get help with, but the most obvious issue that I can see is that in the case where, you still call, and so after that iteration, it will be equal to four, causing the else statement to be triggered if the roll is too low."
  },
  {
    "postid":2152,
    "postdate":1377748740,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.282032749,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.96477641,
    "polarity":2,
    "normalized_text_entropy":4.282032749,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.228699451,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"I think you have to stop the increment once you reach 3, otherwise it will increment every time at which pointwould always be false."
  },
  {
    "postid":2153,
    "postdate":1377752100,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.163820868,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.004422792,
    "polarity":3,
    "normalized_text_entropy":4.163820868,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.116914546,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"changetoor "
  },
  {
    "postid":2154,
    "postdate":1340539980,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.188008918,
    "concept_entropy":0,
    "UMASS(coherence)":0.484559468,
    "TFIDF(informativeness)":0.944641861,
    "polarity":0,
    "normalized_text_entropy":4.188008918,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.440508607,
    "normalized_TFIDF":0.109956061,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Say I have a List like: While iterating through this list I want to add an element at the end of the list. But I don't want to iterate through the newly added elements that is I want to iterate up to the initial size of the list. Can anybody suggest me how can I do this?"
  },
  {
    "postid":2155,
    "postdate":1340540460,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.438542201,
    "concept_entropy":4.30559273,
    "UMASS(coherence)":0.663550402,
    "TFIDF(informativeness)":2.18041672,
    "polarity":1,
    "normalized_text_entropy":4.438542201,
    "normalized_concept_entropy":4.30559273,
    "normalized_UMASS":0.603227638,
    "normalized_TFIDF":0.253799926,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You can't use a foreach statement for that. The foreach is using internally an iterator: (From ArrayList javadoc) In the foreach statement you don't have access to the iterator's add method and in any case that's still not the type of add that you want because it does not append at the end. You'll need to traverse the list manually: Note that this is only efficient for Lists that allow random access. You can check for this feature by checking whether the list implements the RandomAccess marker interface. An ArrayList has random access. A linked list does not."
  },
  {
    "postid":2156,
    "postdate":1340540220,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.281135821,
    "concept_entropy":4.352381456,
    "UMASS(coherence)":0.616724601,
    "TFIDF(informativeness)":1.382574478,
    "polarity":1,
    "normalized_text_entropy":4.281135821,
    "normalized_concept_entropy":4.352381456,
    "normalized_UMASS":0.560658728,
    "normalized_TFIDF":0.160931302,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Iterate through a copy of the list and add new elements to the original list.See"
  },
  {
    "postid":2157,
    "postdate":1340540280,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.118520177,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.637708054,
    "polarity":0,
    "normalized_text_entropy":4.118520177,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.190628782,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Just iterate the old-fashion way, because you need explicit index handling:"
  },
  {
    "postid":2158,
    "postdate":1340540160,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.265365312,
    "concept_entropy":4.397409816,
    "UMASS(coherence)":0.721833758,
    "TFIDF(informativeness)":1.695967785,
    "polarity":0,
    "normalized_text_entropy":4.265365312,
    "normalized_concept_entropy":4.397409816,
    "normalized_UMASS":0.656212507,
    "normalized_TFIDF":0.197410199,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You could iterate on a copy (clone) of your original list: Note that it is not even possible to add a new element to a list while iterating on it, because it will result in a."
  },
  {
    "postid":2159,
    "postdate":1340540400,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.048664061,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.310618307,
    "polarity":0,
    "normalized_text_entropy":4.048664061,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.152555622,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I do this by adding the elements to an new, empty tmp List, then adding the tmp list to the original list using.This prevents unnecessarily copying a large source list. Imagine what happens when the OP's original list has a few million items in it; for a while you'll suck down twice the memory. In addition to conserving resources, this technique also prevents us from having to resort to 80s-style for loops and using what are effectively array indexes which could be unattractive in some cases."
  },
  {
    "postid":2160,
    "postdate":1332168180,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.182612984,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.891945365,
    "polarity":0,
    "normalized_text_entropy":4.182612984,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.220221937,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I am having trouble understanding the following code block. My understanding is that the loop runs three times preforming the following This translates to the following as count initially is 0: The output is below, and count is printed as 0. Could someone explain this to me?Thanks"
  },
  {
    "postid":2161,
    "postdate":1332168420,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.223972805,
    "concept_entropy":4.407054779,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.315770588,
    "polarity":0,
    "normalized_text_entropy":4.223972805,
    "normalized_concept_entropy":4.407054779,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.269555081,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"is equivalent to As you can see the has no effect, since the value of is overwritten in the last line, and if is initially 0, then the result will obviously be :-)"
  },
  {
    "postid":2162,
    "postdate":1359734880,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.306366057,
    "concept_entropy":4.438140982,
    "UMASS(coherence)":0.445928526,
    "TFIDF(informativeness)":1.530324944,
    "polarity":1,
    "normalized_text_entropy":4.306366057,
    "normalized_concept_entropy":4.438140982,
    "normalized_UMASS":0.405389569,
    "normalized_TFIDF":0.178129416,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I am practicing past exam papers for a basic java exam, and I am finding it difficult to make a for loop work for testing whether a number is prime. I don't want to complicate it by adding efficiency measures for larger numbers, just something that would at least work for 2 digit numbers. At the moment it always returns false even if n IS a prime number. I think my problem is that I am getting something wrong with the for loop itself and where to put the \"return true;\" and \"return false;\"... I'm sure it's a really basic mistake I'm making... The reason I couldn't find help elsewhere on stackoverflow is because similar questions were asking for a more complicated implementation to have a more efficient way of doing it."
  },
  {
    "postid":2163,
    "postdate":1359735000,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.323231429,
    "concept_entropy":4.589404799,
    "UMASS(coherence)":0.380510621,
    "TFIDF(informativeness)":1.013788402,
    "polarity":0,
    "normalized_text_entropy":3.323231429,
    "normalized_concept_entropy":4.589404799,
    "normalized_UMASS":0.345918746,
    "normalized_TFIDF":0.1180047,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Your for loop has a little problem. It should be: - Of course you don't want to check the remainder when is divided by. It will always give you. In fact, you can even reduce the number of iteration by changing the condition to: -. Since cannot be divided by a number greater than, except when we consider, which we don't have to consider at all. So, you can change your for loop to: -"
  },
  {
    "postid":2164,
    "postdate":1359735480,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":4.365336764,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.469177247,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.365336764,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.054612107,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"BTW You can stop much earlier and skip through the loop faster with."
  },
  {
    "postid":2165,
    "postdate":1359735060,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.286471997,
    "concept_entropy":4.365336764,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.970806945,
    "polarity":2,
    "normalized_text_entropy":4.286471997,
    "normalized_concept_entropy":4.365336764,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.11300167,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"You should write \"i < n\", because the last iteration step will give you true."
  },
  {
    "postid":2166,
    "postdate":1359735120,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.546441103,
    "concept_entropy":0,
    "UMASS(coherence)":0.5266269,
    "TFIDF(informativeness)":1.883642062,
    "polarity":2,
    "normalized_text_entropy":4.546441103,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.478751727,
    "normalized_TFIDF":0.219255435,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Error is i<=n"
  },
  {
    "postid":2167,
    "postdate":1359735060,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.983535252,
    "concept_entropy":0,
    "UMASS(coherence)":0.514684884,
    "TFIDF(informativeness)":1.85819297,
    "polarity":1,
    "normalized_text_entropy":3.983535252,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.467895349,
    "normalized_TFIDF":0.216293167,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You are checking.So when, you will get 0 only and it will return false always.Try.No need to check until."
  },
  {
    "postid":2168,
    "postdate":1359739860,
    "tag":"0",
    "TFMvalue":0.625,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.359368729,
    "concept_entropy":0,
    "UMASS(coherence)":0.441732219,
    "TFIDF(informativeness)":2.02186126,
    "polarity":3,
    "normalized_text_entropy":4.359368729,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.401574745,
    "normalized_TFIDF":0.235344113,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2169,
    "postdate":1351514580,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.075885739,
    "concept_entropy":0,
    "UMASS(coherence)":0.494698644,
    "TFIDF(informativeness)":1.764503238,
    "polarity":0,
    "normalized_text_entropy":4.075885739,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.44972604,
    "normalized_TFIDF":0.205387708,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I am trying to run a line of code every second by using System.currentTimeMillis();.The code: The code which I want to run, runs multiple times because var2 is set to 1.0 multiple times due to the infinite whole loop. I just want to run the code line when var2 is first set to 1.0, and then every time again when var2 becomes 1.0 after 0.0."
  },
  {
    "postid":2170,
    "postdate":1351515180,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.191370766,
    "concept_entropy":0,
    "UMASS(coherence)":0.491152558,
    "TFIDF(informativeness)":1.646720171,
    "polarity":0,
    "normalized_text_entropy":4.191370766,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.446502325,
    "normalized_TFIDF":0.19167779,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"If you want to busy wait for the seconds to change you can use the following. A more efficient approach is to sleep until the next second. An alternative is to use a ScheduledExecutorService The advantage of this approach is that"
  },
  {
    "postid":2171,
    "postdate":1351514940,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.119364413,
    "concept_entropy":3.923260325,
    "UMASS(coherence)":0.547979972,
    "TFIDF(informativeness)":1.212707199,
    "polarity":0,
    "normalized_text_entropy":4.119364413,
    "normalized_concept_entropy":3.923260325,
    "normalized_UMASS":0.498163611,
    "normalized_TFIDF":0.141158795,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I'd use the java libraries. You can create a that takes a runnable and can run for any time period you want. For example Will run the MyRunnable class every 5 seconds. MyRunnable must implement Runnable. The trouble with this is that it will (efficiently) create a new thread each time which may or may not be desirable."
  },
  {
    "postid":2172,
    "postdate":1351514700,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.277188848,
    "concept_entropy":0,
    "UMASS(coherence)":0.629385243,
    "TFIDF(informativeness)":1.357250394,
    "polarity":1,
    "normalized_text_entropy":4.277188848,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.572168403,
    "normalized_TFIDF":0.157983585,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You should have to use and class."
  },
  {
    "postid":2173,
    "postdate":1351514700,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.273652824,
    "concept_entropy":4.511739496,
    "UMASS(coherence)":0.591083745,
    "TFIDF(informativeness)":2.286346066,
    "polarity":0,
    "normalized_text_entropy":4.273652824,
    "normalized_concept_entropy":4.511739496,
    "normalized_UMASS":0.537348859,
    "normalized_TFIDF":0.266130074,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Using would be perfect for your case."
  },
  {
    "postid":2174,
    "postdate":1351515120,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.147624706,
    "concept_entropy":3.954936219,
    "UMASS(coherence)":0.414603315,
    "TFIDF(informativeness)":1.694097919,
    "polarity":2,
    "normalized_text_entropy":4.147624706,
    "normalized_concept_entropy":3.954936219,
    "normalized_UMASS":0.376912105,
    "normalized_TFIDF":0.197192547,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"preferred way: Then pass in Runnables like: I wouldn't use the Timer. Schedulers are built to handle problems that Timers can cause. Also, the Thread.sleep is good for a simple program that you're writing quickly for proof of concept type things but I wouldn't use it in the enterprise world."
  },
  {
    "postid":2175,
    "postdate":1293203640,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.024688108,
    "concept_entropy":0,
    "UMASS(coherence)":0.286623162,
    "TFIDF(informativeness)":0.876629196,
    "polarity":0,
    "normalized_text_entropy":4.024688108,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.260566511,
    "normalized_TFIDF":0.102039405,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Can any one tell me what is the problem in my program?I have thousands of words stored in a. Now I want to check in every file that how many time one word occurred from.Can you point out mistake in my program or give me your idea that how I can do it?"
  },
  {
    "postid":2176,
    "postdate":1293219540,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.997132434,
    "concept_entropy":0,
    "UMASS(coherence)":0.472149396,
    "TFIDF(informativeness)":0.828526979,
    "polarity":0,
    "normalized_text_entropy":3.997132434,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.429226724,
    "normalized_TFIDF":0.09644032,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You could count words while reading your files and store on a Map already..Assuming last word on file is \"-1\" and there's only one word in a line, even if the word is \"happy birthday\", I'd do something like this:"
  },
  {
    "postid":2177,
    "postdate":1293203820,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.215629997,
    "concept_entropy":0,
    "UMASS(coherence)":0.41516948,
    "TFIDF(informativeness)":1.056618302,
    "polarity":0,
    "normalized_text_entropy":4.215629997,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.3774268,
    "normalized_TFIDF":0.122990089,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I think this line is resetting your counters unnecessarily: Try removing it: If you want to keep a separate count for each word in each file then you will need to use two dimensional array. You can then access it using."
  },
  {
    "postid":2178,
    "postdate":1375281600,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.233555729,
    "concept_entropy":0,
    "UMASS(coherence)":0.574747901,
    "TFIDF(informativeness)":2.263462085,
    "polarity":0,
    "normalized_text_entropy":4.233555729,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.522498092,
    "normalized_TFIDF":0.263466385,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Let's say I have a multi-dimensional array as a member of a class and a lot of methods, that loop through every element of the array and then operate on it. The code might look like this: Now, since the code for the loop is always the same, only the operation within the loop changes, is there any way the code for looping could be somehow refactored into a seperate method? It would be so nice to be able to do What would be the nearest substitute for doing something like this, if it is even possible?"
  },
  {
    "postid":2179,
    "postdate":1375281900,
    "tag":"0",
    "TFMvalue":0.916666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.619470571,
    "concept_entropy":0,
    "UMASS(coherence)":0.399827075,
    "TFIDF(informativeness)":1.401167686,
    "polarity":3,
    "normalized_text_entropy":3.619470571,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.363479159,
    "normalized_TFIDF":0.163095546,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"What you are looking for is the pattern: define a single-method interface and implement it for each use case as an anonymous class. You'll pass an instance of this interface to a method which does all the boilerplate and calls your method just for the interesting part: Or, wait for Java 8, which will introduce Lambdas and will give your problem a first-class solution!"
  },
  {
    "postid":2180,
    "postdate":1375281840,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.995319373,
    "concept_entropy":0,
    "UMASS(coherence)":0.445928526,
    "TFIDF(informativeness)":0.831611974,
    "polarity":0,
    "normalized_text_entropy":3.995319373,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.405389569,
    "normalized_TFIDF":0.096799413,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You could sth like this: then implement different performers and pass them to this single method. This approach is called "
  },
  {
    "postid":2181,
    "postdate":1375281900,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.979826932,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.602985206,
    "TFIDF(informativeness)":1.466297114,
    "polarity":1,
    "normalized_text_entropy":3.979826932,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.548168369,
    "normalized_TFIDF":0.170676594,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"If you would like to create something generic you can use, and now you can write something: For now you can generate several classes based on and implement any internal logic."
  },
  {
    "postid":2182,
    "postdate":1372651200,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.395098204,
    "concept_entropy":0,
    "UMASS(coherence)":0.327245346,
    "TFIDF(informativeness)":0.472809004,
    "polarity":1,
    "normalized_text_entropy":4.395098204,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.297495769,
    "normalized_TFIDF":0.055034842,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Is there any way of creating a loop that would do the task every 3 secs without using a sleep functionFor eg:But the problem while using sleep function is that, it just freezes the program."
  },
  {
    "postid":2183,
    "postdate":1372651440,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.288765235,
    "concept_entropy":0,
    "UMASS(coherence)":0.323975927,
    "TFIDF(informativeness)":0.771828752,
    "polarity":2,
    "normalized_text_entropy":4.288765235,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.29452357,
    "normalized_TFIDF":0.089840661,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"UseIf you are using a GUI, you can use the, example: Some info about the difference between and:"
  },
  {
    "postid":2184,
    "postdate":1372651440,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.323381856,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.414603315,
    "TFIDF(informativeness)":2.004524435,
    "polarity":0,
    "normalized_text_entropy":4.323381856,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.376912105,
    "normalized_TFIDF":0.233326111,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You may use one of the implementation of if you are Ok to move logic which you want to execute repeatedly inside a thread. Here is example from the link:"
  },
  {
    "postid":2185,
    "postdate":1372651380,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.258357704,
    "concept_entropy":0,
    "UMASS(coherence)":0.498168464,
    "TFIDF(informativeness)":1.286108286,
    "polarity":-1,
    "normalized_text_entropy":4.258357704,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.452880422,
    "normalized_TFIDF":0.149702662,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Are you using some kind of UI? There are at least two timers available in Java; Which should be capable of achieving what you want There are also 3rd party libraries that might help as well"
  },
  {
    "postid":2186,
    "postdate":1355163840,
    "tag":"0",
    "TFMvalue":0.9,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.176146488,
    "concept_entropy":4.44637013,
    "UMASS(coherence)":0.573569372,
    "TFIDF(informativeness)":2.300729145,
    "polarity":0,
    "normalized_text_entropy":4.176146488,
    "normalized_concept_entropy":4.44637013,
    "normalized_UMASS":0.521426702,
    "normalized_TFIDF":0.267804261,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"First of all this is a homework problem. I finished the program, and it runs fine; but I have a little side problem. The program is supposed to first read a txt file online, and gather all 50 states and their abbreviations. Next, I have to ask the user to enter in a valid state abbreviation. Once they do that, I have to read another txt file online, and return the two senators for their state.The problem I'm having is that I want to loop the scanner asking the user to enter a state. If they enter an incorrect state, then I want to re-ask them. Right now, if I enter in a legit state, the program works fine. If I enter in an incorrect state, the program loops, and re-asks me to enter in another state. If I enter in an incorrect state, and then enter in a correct state, the program asks me to enter in another state, rather than continuing with the program. Any help please?I think the problem is that when the program loops, it doesn't read: Again, making found always = false. "
  },
  {
    "postid":2187,
    "postdate":1355165760,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.211754737,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.241361132,
    "polarity":0,
    "normalized_text_entropy":4.211754737,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.144494106,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You have two and then you try to use a break to get out of it, but you're just getting out of the inner. To get out of boths, you need to change your program logic or use labels (yes, Java can use labels, and to break from an inner loop and of the outter loop at once is one of it's uses)"
  },
  {
    "postid":2188,
    "postdate":1355165940,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.522055209,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.428413506,
    "polarity":0,
    "normalized_text_entropy":3.522055209,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049867218,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I'm not sure, if this will work, but try to break out of both loops. Hopefully that'll help."
  },
  {
    "postid":2189,
    "postdate":1355165940,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.819849,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.530075482,
    "polarity":0,
    "normalized_text_entropy":3.819849,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.178100379,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Another way you can do this isNotice both while loops are encased in a function and there is a return found command after found = true"
  },
  {
    "postid":2190,
    "postdate":1318564260,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.211736413,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.570202232,
    "polarity":-1,
    "normalized_text_entropy":4.211736413,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.182771122,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Okay so for what I am doing i need to increment my variables name, so for example int Taco1 = 23432..... int Taco2 = 234235656.....int Taco3 = 11111....... But instead i need it to be a variable like Trying to get my variable names to auto name themselves incremented by 1 every time, so they don't overwrite themselves. If this is impossible then my apologies. "
  },
  {
    "postid":2191,
    "postdate":1318565160,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.424085634,
    "concept_entropy":4.716464608,
    "UMASS(coherence)":0.74014825,
    "TFIDF(informativeness)":3.413771588,
    "polarity":-3,
    "normalized_text_entropy":4.424085634,
    "normalized_concept_entropy":4.716464608,
    "normalized_UMASS":0.672862045,
    "normalized_TFIDF":0.397362105,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"You can't do this in Java and more importantly, you don't want to do this as this isn't how Java works. In fact variable names aren't nearly as important as you think and hardly even exist in compiled code. What is much more important is that you are able to get a reference to your objects in as easy and reliable a way as possible. This can involve an array, an ArrayList(likely what you want here), a LinkedList, a Map such as a HashMap, a Set, and other types of collections. For example:"
  },
  {
    "postid":2192,
    "postdate":1318564560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.270920563,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.50444043,
    "TFIDF(informativeness)":0.665207092,
    "polarity":0,
    "normalized_text_entropy":4.270920563,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.458582209,
    "normalized_TFIDF":0.077429929,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Indeed it is impossible to generate identifier names based on a variable. Perhaps what you want is an array: Search the web for basic information on what arrays are and how they work."
  },
  {
    "postid":2193,
    "postdate":1318564560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.404143171,
    "concept_entropy":0,
    "UMASS(coherence)":0.696015116,
    "TFIDF(informativeness)":0.754274212,
    "polarity":-1,
    "normalized_text_entropy":4.404143171,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.632741015,
    "normalized_TFIDF":0.087797318,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Use an or a:"
  },
  {
    "postid":2194,
    "postdate":1318564740,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.121190774,
    "concept_entropy":0,
    "UMASS(coherence)":0.451059897,
    "TFIDF(informativeness)":0.777932943,
    "polarity":2,
    "normalized_text_entropy":4.121190774,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.410054452,
    "normalized_TFIDF":0.090551188,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"use array of.say; and you can reference each location as,etc"
  },
  {
    "postid":2195,
    "postdate":1318569300,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.200347807,
    "concept_entropy":0,
    "UMASS(coherence)":0.369481603,
    "TFIDF(informativeness)":2.445166996,
    "polarity":-1,
    "normalized_text_entropy":4.200347807,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.335892366,
    "normalized_TFIDF":0.284616788,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"I TacoX is going to be an integer, I would create an array of X ints. If the max number is 10, we have: Then to modify/read tacoX, you just look at taco[X]"
  },
  {
    "postid":2196,
    "postdate":1313001600,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":3.89810761,
    "concept_entropy":0,
    "UMASS(coherence)":0.324314677,
    "TFIDF(informativeness)":0.786305078,
    "polarity":1,
    "normalized_text_entropy":3.89810761,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.294831525,
    "normalized_TFIDF":0.091525702,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I am new android and I would appreciate some help. I have this code: As you can see, I am getting date and time out of it. What I want tho is that there would be 1 second loop, so after every 1 second, it will update date and time again and again to the newer one to get basically clock. I am pretty newcomer so all help is appreciated how to get this done. If you would bring exact examples I would appreciate as it makes it more easier to understand, not just \"Oh, use that and that and that. Thank you!\". Thanks for your help and time,Elven :) Error for answer 1:"
  },
  {
    "postid":2197,
    "postdate":1313001840,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.243975809,
    "concept_entropy":0,
    "UMASS(coherence)":0.360636245,
    "TFIDF(informativeness)":1.368735942,
    "polarity":0,
    "normalized_text_entropy":4.243975809,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.327851132,
    "normalized_TFIDF":0.1593205,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I just solved this issue in my project (executing code at specific interval) :) Edited to reflect updated answer: // Initialization code in onCreate or similar:"
  },
  {
    "postid":2198,
    "postdate":1299771180,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.770927175,
    "concept_entropy":4.64543148,
    "UMASS(coherence)":0.67731493,
    "TFIDF(informativeness)":2.810643862,
    "polarity":1,
    "normalized_text_entropy":4.770927175,
    "normalized_concept_entropy":4.64543148,
    "normalized_UMASS":0.615740845,
    "normalized_TFIDF":0.327158198,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Is there a way to control the speed of execution of a loop ? I have a simulationthat runs in a loop of 30000 steps. I want to visualise whats happening in that loop and if possible control the speed of execution while its running. Any ideas how i could do that ?"
  },
  {
    "postid":2199,
    "postdate":1299771360,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.457315896,
    "concept_entropy":0,
    "UMASS(coherence)":0.547979972,
    "TFIDF(informativeness)":0.714151641,
    "polarity":0,
    "normalized_text_entropy":4.457315896,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.498163611,
    "normalized_TFIDF":0.083127061,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Put a statement inside the loop. Beware though that you have to handle the exception."
  },
  {
    "postid":2200,
    "postdate":1299771300,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.353115955,
    "concept_entropy":0,
    "UMASS(coherence)":0.578642849,
    "TFIDF(informativeness)":0.685850894,
    "polarity":4,
    "normalized_text_entropy":4.353115955,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.526038954,
    "normalized_TFIDF":0.079832862,
    "normalized_polarity":0.333333333,
    "tagtext":"loops",
    "posttext":"You could add ato the loop to pause each iteration. A better question though, is how are you visualizing this? I'm guessing you're watching the text flash by on the console... if that's the case you might want to consider outputting to files rather than the screen. That way you can read through the output at your leisure and you don't have to add artificial slowdowns to the program. ...but if by \"visualise\" it's an actual GUI thing, then yeah, the sleep might be better."
  },
  {
    "postid":2201,
    "postdate":1299771360,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.222164071,
    "concept_entropy":4.382153488,
    "UMASS(coherence)":0.646959447,
    "TFIDF(informativeness)":0.530788382,
    "polarity":0,
    "normalized_text_entropy":4.222164071,
    "normalized_concept_entropy":4.382153488,
    "normalized_UMASS":0.588144952,
    "normalized_TFIDF":0.061783626,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"you can put inside your loop where latency is in millis."
  },
  {
    "postid":2202,
    "postdate":1299813120,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.490663423,
    "concept_entropy":4.054538857,
    "UMASS(coherence)":0.467008042,
    "TFIDF(informativeness)":0.967320294,
    "polarity":1,
    "normalized_text_entropy":4.490663423,
    "normalized_concept_entropy":4.054538857,
    "normalized_UMASS":0.424552765,
    "normalized_TFIDF":0.112595825,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You can try to use 'Thread.sleep()' as the other guys said. But to \"know\" what happens in the loop I think you'd better it.. I think the worst case is to Print everything on the screen (wouldn't be so bad outside a loop, but considering 50+ loops it becomes impracticable."
  },
  {
    "postid":2203,
    "postdate":1299713700,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.425985868,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.694191756,
    "TFIDF(informativeness)":1.098269632,
    "polarity":1,
    "normalized_text_entropy":4.425985868,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.631083415,
    "normalized_TFIDF":0.127838293,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I'm new to Java and making android applications. How do you make a Java program that rolls a number of dice based on what the user entered? The Java program I created only rolls one dice. How do you get Java to roll randomly from one to six? How do you get Java to make random numbers based on the number of times the user wants? Lastly, how do you get Java to draw a image based on the number the user entered? Here what my application looks like. . Here's my code My xml file:"
  },
  {
    "postid":2204,
    "postdate":1299714300,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.355617815,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.702902339,
    "polarity":0,
    "normalized_text_entropy":4.355617815,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.081817645,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"How about? Usage: In terms of updating an image, have the 6 different images you want to display (all the same size) and use a to select between different."
  },
  {
    "postid":2205,
    "postdate":1299714540,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.276468608,
    "concept_entropy":4.30491692,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.959536158,
    "polarity":4,
    "normalized_text_entropy":4.276468608,
    "normalized_concept_entropy":4.30491692,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.111689754,
    "normalized_polarity":0.333333333,
    "tagtext":"loops",
    "posttext":"Use a object with a seed (is a good one). Then call the method from your object and pass in the die size. (Remember that the range of starts at 0, so you'll want to pass in the die size, then add 1 to the resulting roll).The reason for the seed is to improve the (pseudo)randomness of the number distribution. You should probably declare the die size as a constant, if you haven't already. Javadoc on Random."
  },
  {
    "postid":2206,
    "postdate":1389270840,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.490643332,
    "concept_entropy":3.427333494,
    "UMASS(coherence)":0.693785224,
    "TFIDF(informativeness)":1.032523164,
    "polarity":1,
    "normalized_text_entropy":4.490643332,
    "normalized_concept_entropy":3.427333494,
    "normalized_UMASS":0.63071384,
    "normalized_TFIDF":0.120185422,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Is there any difference between and I mean, does Java waste many resources creating/deleting objects in loop? Thank you."
  },
  {
    "postid":2207,
    "postdate":1389270960,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.204635188,
    "concept_entropy":4.631161598,
    "UMASS(coherence)":0.586355588,
    "TFIDF(informativeness)":3.827807723,
    "polarity":1,
    "normalized_text_entropy":4.204635188,
    "normalized_concept_entropy":4.631161598,
    "normalized_UMASS":0.533050535,
    "normalized_TFIDF":0.445555801,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"The difference is in of variable.if defined inside the loop then it will be re-intialized with every iteration, which means an extra executable statement. If you want to re-intialize it with each iteration then good otherwise move it out to save wasted cpu for that statement."
  },
  {
    "postid":2208,
    "postdate":1389270960,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.321466914,
    "concept_entropy":0,
    "UMASS(coherence)":0.440102901,
    "TFIDF(informativeness)":0.932753613,
    "polarity":0,
    "normalized_text_entropy":4.321466914,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.400093546,
    "normalized_TFIDF":0.108572272,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The only difference is the issue of. With the variable being declared outside the for-block, the variable (object reference) can be accessed outside the for-loop block. If the object reference variable is declared inside the for-loop, then it can only be accessed within the for-loop block."
  },
  {
    "postid":2209,
    "postdate":1389271320,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.164430079,
    "concept_entropy":0,
    "UMASS(coherence)":0.463873715,
    "TFIDF(informativeness)":0.428120317,
    "polarity":0,
    "normalized_text_entropy":4.164430079,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.421703377,
    "normalized_TFIDF":0.049833091,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Java creates as many objects of as many times you are iterating your loop but the reference will be same. So its a bit resource and memory consuming. Use or."
  },
  {
    "postid":2210,
    "postdate":1389271380,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.22773769,
    "concept_entropy":4.610338348,
    "UMASS(coherence)":0.626877188,
    "TFIDF(informativeness)":1.746459073,
    "polarity":3,
    "normalized_text_entropy":4.22773769,
    "normalized_concept_entropy":4.610338348,
    "normalized_UMASS":0.569888353,
    "normalized_TFIDF":0.203287372,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"In this case your temp would be available only forAnd here If you are writing this code inside a method then it would be availablethroughout the method.Local variables are created in Stack and are removed after execution of that method."
  },
  {
    "postid":2211,
    "postdate":1384617720,
    "tag":"0",
    "TFMvalue":0.916666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.356583229,
    "concept_entropy":0,
    "UMASS(coherence)":0.622538596,
    "TFIDF(informativeness)":0.584418211,
    "polarity":0,
    "normalized_text_entropy":4.356583229,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.565944178,
    "normalized_TFIDF":0.068026124,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I'm learning about arrays right now. I made this short little program. It's a loop that tests then prints prime numbers. Specifically the numbers between 1 and 100. I want to know if I can take my loop and store each prime number into an array. Here's my code:"
  },
  {
    "postid":2212,
    "postdate":1384623540,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.139786382,
    "concept_entropy":0,
    "UMASS(coherence)":0.487526779,
    "TFIDF(informativeness)":0.933996242,
    "polarity":1,
    "normalized_text_entropy":4.139786382,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.443206163,
    "normalized_TFIDF":0.108716914,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"If you use this condition:, then it will never consider 2 or 3 prime numbers. Same thing if you changed it to: it won't find 2, 3, 5, or 7 to be prime numbers. I corrected your algorithm and decided to use an to store the list of prime numbers because the size is dynamic. Otherwise, we would first have to find the number of prime numbers in your region to determine the size of the array, and then do another loop of the same thing, except this time adding the numbers to the array. Once you find a prime number. Use. Here is how to do it using a regular array (not recommended, however):"
  },
  {
    "postid":2213,
    "postdate":1383840300,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.155707596,
    "concept_entropy":0,
    "UMASS(coherence)":0.456637506,
    "TFIDF(informativeness)":1.261182851,
    "polarity":0,
    "normalized_text_entropy":4.155707596,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.415125005,
    "normalized_TFIDF":0.146801348,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I've been asked to make this more space efficient, I'm assuming that I need to use loops but I'm not entirely sure how to, some help would be appreciated.(For reference the aim of this piece of code is to display a graph into another program using data which has already been collected in the other program)"
  },
  {
    "postid":2214,
    "postdate":1383840780,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.297907454,
    "concept_entropy":0,
    "UMASS(coherence)":0.450605386,
    "TFIDF(informativeness)":0.955069631,
    "polarity":-1,
    "normalized_text_entropy":4.297907454,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.40964126,
    "normalized_TFIDF":0.111169851,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"You could do something like this:"
  },
  {
    "postid":2215,
    "postdate":1383840600,
    "tag":"0",
    "TFMvalue":0.642857143,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.086159977,
    "concept_entropy":0,
    "UMASS(coherence)":0.483065469,
    "TFIDF(informativeness)":1.207279783,
    "polarity":0,
    "normalized_text_entropy":4.086159977,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.439150426,
    "normalized_TFIDF":0.140527046,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"There are lots of things you can do here: Here you can make an int array:Then you can go through with a for-loop and add: You can do similar changes to the rest of your code using this as inspiration. "
  },
  {
    "postid":2216,
    "postdate":1383840900,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.475392196,
    "concept_entropy":0,
    "UMASS(coherence)":0.472881099,
    "TFIDF(informativeness)":2.979858296,
    "polarity":-1,
    "normalized_text_entropy":4.475392196,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.429891908,
    "normalized_TFIDF":0.346854713,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Right now this code will only work if the elements in moduleMarks is only 6 elements long.If there were 9 elements in that array only the first 6 would be drawn.Sorta makes this code not terribly useful.However, you can write code that will accept an array of any length and respond accordingly. You've been given a hint how to start that process in the code you were given: That will iterate over every member of moduleMark regardless of length.So you need to apply this idea to the rest of your program so that whatever draw is doing will work regardless of moduleMark's size. You'll see there is a lot of code repeated for each element corresponding to a member in moduleMark.Use loops to reduce that repeated code.You'll have to model things with data (ie arrays) in order to rewrite that code using for loops. I'm trying not to give the answer away because this is clearly homework and you should figure it out yourself. "
  },
  {
    "postid":2217,
    "postdate":1375493280,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.196767083,
    "concept_entropy":4.337929521,
    "UMASS(coherence)":0.431596683,
    "TFIDF(informativeness)":0.671353804,
    "polarity":0,
    "normalized_text_entropy":4.196767083,
    "normalized_concept_entropy":4.337929521,
    "normalized_UMASS":0.392360621,
    "normalized_TFIDF":0.078145404,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Suppose having three arrays: If I want to print them like this: I must create three nested loops;Suppose if I have 7 arrays, it will be 7 nested loops. Is there a better way to do that or an API maybe? I know you're probably asking why you do such a thing, It's just the mater of thinking."
  },
  {
    "postid":2218,
    "postdate":1375497120,
    "tag":"0",
    "TFMvalue":0.923076923,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.260584183,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.644481862,
    "TFIDF(informativeness)":0.535298494,
    "polarity":1,
    "normalized_text_entropy":4.260584183,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.585892602,
    "normalized_TFIDF":0.062308602,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"The trick is to use an array of indices.Update them like the odometer in a car: least significant index then if overflow set that to zero and move on to the next...When no overflow, the update is done.Go ahead and print. When there's an overflow of the last index, printing is done."
  },
  {
    "postid":2219,
    "postdate":1375495680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.284331952,
    "concept_entropy":4.415562179,
    "UMASS(coherence)":0.589980106,
    "TFIDF(informativeness)":1.153432168,
    "polarity":2,
    "normalized_text_entropy":4.284331952,
    "normalized_concept_entropy":4.415562179,
    "normalized_UMASS":0.536345551,
    "normalized_TFIDF":0.134259198,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Here's one approach based on maintaining an explicit array of indices (no recursion or nested loops): Output:"
  },
  {
    "postid":2220,
    "postdate":1375496220,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.265899356,
    "concept_entropy":4.187884128,
    "UMASS(coherence)":0.435831684,
    "TFIDF(informativeness)":1.794398033,
    "polarity":2,
    "normalized_text_entropy":4.265899356,
    "normalized_concept_entropy":4.187884128,
    "normalized_UMASS":0.396210622,
    "normalized_TFIDF":0.208867454,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"If you really don't want to create nested loops you can use recursion and varargs. Here is method that will accept your arrays at the end of its arguments usage "
  },
  {
    "postid":2221,
    "postdate":1375543560,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.245534489,
    "concept_entropy":4.329249045,
    "UMASS(coherence)":0.46092076,
    "TFIDF(informativeness)":1.402481569,
    "polarity":3,
    "normalized_text_entropy":4.245534489,
    "normalized_concept_entropy":4.329249045,
    "normalized_UMASS":0.419018873,
    "normalized_TFIDF":0.163248482,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"This is a recursive solution that uses the convenient varargs parameter, thus working for any number of arrays: It's not that efficient, but it is brief. You could call it directly with a blank string to start, but a public wrapper function makes a nicer API: Here's some test code: Output:"
  },
  {
    "postid":2222,
    "postdate":1375495020,
    "tag":"0",
    "TFMvalue":0.625,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.348730847,
    "concept_entropy":4.33639682,
    "UMASS(coherence)":0.516115382,
    "TFIDF(informativeness)":2.108133415,
    "polarity":6,
    "normalized_text_entropy":4.348730847,
    "normalized_concept_entropy":4.33639682,
    "normalized_UMASS":0.469195802,
    "normalized_TFIDF":0.245386169,
    "normalized_polarity":0.37037037,
    "tagtext":"loops",
    "posttext":"first you need to merge all arrays then you can print what you want with 2 like this"
  },
  {
    "postid":2223,
    "postdate":1372333680,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.99015015,
    "concept_entropy":4.348517633,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.706216337,
    "polarity":0,
    "normalized_text_entropy":3.99015015,
    "normalized_concept_entropy":4.348517633,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.082203394,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Im a beginner in Java. I have the following loop structure:This is a basic structure of what im trying to do. So I want to break out of the loop when the loop in the part is satisfied(the do- while loop executes once irrespective of condition mentioned, I dont want to exit the loop then, but I want to exit the loop when the condition is actually satisfied). How do I do that? I tried breaking as shown in code, but it stops after first iteration through loop. Where am I going wrong?I want to print the values in the starting from 10 until 20...and 10 can be anywhere in the list and not the beginning. There are no duplicate elements in the list. So there is only one 10 and one 20 in the list and it is always in the increasing order. "
  },
  {
    "postid":2224,
    "postdate":1372336200,
    "tag":"0",
    "TFMvalue":0.818181818,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.185855886,
    "concept_entropy":3.905003028,
    "UMASS(coherence)":0.324314677,
    "TFIDF(informativeness)":1.286009879,
    "polarity":0,
    "normalized_text_entropy":4.185855886,
    "normalized_concept_entropy":3.905003028,
    "normalized_UMASS":0.294831525,
    "normalized_TFIDF":0.149691208,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2225,
    "postdate":1372336860,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.079638093,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.272032364,
    "TFIDF(informativeness)":1.584959007,
    "polarity":1,
    "normalized_text_entropy":4.079638093,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.247302149,
    "normalized_TFIDF":0.184488807,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"The usual way to do what you want is via a flag: If you insist on using a nested loop, your solution was very very close, you only missed a critical inside the inner loop, and of course its condition was reversed. Also, you are not breaking from an inner loop, you're breaking from an outer loop; so you don't need a label. Also, be wary of corner cases. What happens if 10 appears but 20 doesn't? What happens if 20 appears before 10? What happens if there are multiple 10s or 20s? For example, my 2nd snippet might crash for some of those (because of i++ without checking the array size). Once you know how the corner cases should behave, you should modify those snippets accordingly."
  },
  {
    "postid":2226,
    "postdate":1372334520,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.155221529,
    "concept_entropy":0,
    "UMASS(coherence)":0.308432316,
    "TFIDF(informativeness)":1.830037924,
    "polarity":0,
    "normalized_text_entropy":3.155221529,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.280393015,
    "normalized_TFIDF":0.213015928,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I guess you are putting some wrong logic there. If is not then either the loop will break in first iteration of or you will end up in infinite loop as the value of will never change."
  },
  {
    "postid":2227,
    "postdate":1372335420,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.283159759,
    "concept_entropy":4.072647354,
    "UMASS(coherence)":0.396318819,
    "TFIDF(informativeness)":1.68417865,
    "polarity":-2,
    "normalized_text_entropy":4.283159759,
    "normalized_concept_entropy":4.072647354,
    "normalized_UMASS":0.360289835,
    "normalized_TFIDF":0.196037947,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"According to your statement You can use following code:"
  },
  {
    "postid":2228,
    "postdate":1372335120,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.170784167,
    "concept_entropy":0,
    "UMASS(coherence)":0.394153144,
    "TFIDF(informativeness)":1.306824101,
    "polarity":0,
    "normalized_text_entropy":4.170784167,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.35832104,
    "normalized_TFIDF":0.152113978,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"According to this comment: interpreted such that the arraylist contains 10 somewhere and possibly 20 somewhere further down the list and all numbers between the first 10 and the first 20 should be printed:"
  },
  {
    "postid":2229,
    "postdate":1372432680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.256403088,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.910006029,
    "polarity":1,
    "normalized_text_entropy":4.256403088,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.10592446,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Everyone else has fixed your loop. To answer the question in the title, the easiest way to break out of a complex loop is to put the complex loop in a method, and use the return statement. Using your code as an example,"
  },
  {
    "postid":2230,
    "postdate":1366737720,
    "tag":"0",
    "TFMvalue":0.916666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.208074107,
    "concept_entropy":0,
    "UMASS(coherence)":0.46806461,
    "TFIDF(informativeness)":1.494669701,
    "polarity":0,
    "normalized_text_entropy":4.208074107,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.425513282,
    "normalized_TFIDF":0.173979156,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"How can I remove duplicate strings from a string array without using a HashSet? I try to use loops, but the words not delete."
  },
  {
    "postid":2231,
    "postdate":1366739100,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.261771618,
    "concept_entropy":0,
    "UMASS(coherence)":0.3372288,
    "TFIDF(informativeness)":0.928817222,
    "polarity":0,
    "normalized_text_entropy":4.261771618,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.306571636,
    "normalized_TFIDF":0.108114078,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Try this code to remove dup words:"
  },
  {
    "postid":2232,
    "postdate":1354632180,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.647599578,
    "concept_entropy":3.894739663,
    "UMASS(coherence)":0.368188573,
    "TFIDF(informativeness)":0.474258597,
    "polarity":-1,
    "normalized_text_entropy":3.647599578,
    "normalized_concept_entropy":3.894739663,
    "normalized_UMASS":0.334716885,
    "normalized_TFIDF":0.055203575,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"To clarify I only wanted one or two for loops to help me on my way, preferably in the same style as I had used in the vertical :) I'm making a game using a 2D array, and I need a check that tests if at the current position (indicated by a green square) the character there is part of a diagonal sequence of \"l\" more of the character."
  },
  {
    "postid":2233,
    "postdate":1354636080,
    "tag":"0",
    "TFMvalue":0.916666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.326103638,
    "concept_entropy":4.021239509,
    "UMASS(coherence)":0.807192857,
    "TFIDF(informativeness)":2.544130457,
    "polarity":-10,
    "normalized_text_entropy":4.326103638,
    "normalized_concept_entropy":4.021239509,
    "normalized_UMASS":0.733811688,
    "normalized_TFIDF":0.296136109,
    "normalized_polarity":0.074074074,
    "tagtext":"loops",
    "posttext":"The idea is that we walk in four directions and count the steps. This may not be the most efficient implementation, but at least it looks neat and easy to understand."
  },
  {
    "postid":2234,
    "postdate":1354633740,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.45013515,
    "concept_entropy":4.540937063,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.950941143,
    "polarity":8,
    "normalized_text_entropy":4.45013515,
    "normalized_concept_entropy":4.540937063,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.459888498,
    "normalized_polarity":0.407407407,
    "tagtext":"loops",
    "posttext":"Here's the function, it works. The explanation is in the comments in the code, but if you find anything confusing let me know and I'll explain it."
  },
  {
    "postid":2235,
    "postdate":1332303420,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.291636635,
    "concept_entropy":0,
    "UMASS(coherence)":0.583982043,
    "TFIDF(informativeness)":1.071429332,
    "polarity":0,
    "normalized_text_entropy":4.291636635,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.530892766,
    "normalized_TFIDF":0.124714089,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I have started working with enhanced for loops due to it's best practices and habilities to work with. My code basically gets an ArrayList that contains links to songs and parses this list downloading the songs. One of the exceptions thrown is the TimeoutException, whitch normally happens when the server is overloaded or there's an instability with the internet connection. To clarify: track is an ArrayList whitch is parsed one by one by the songdown.downloadTrack function. When a download fails, a TimeoutException is raised, but I don't know how to treat this exception in order to delete the file I have generated and restart the for statement from the same track, so that the download can happen again."
  },
  {
    "postid":2236,
    "postdate":1332303720,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.360842758,
    "concept_entropy":4.593843292,
    "UMASS(coherence)":0.71065525,
    "TFIDF(informativeness)":4.195700457,
    "polarity":-10,
    "normalized_text_entropy":4.360842758,
    "normalized_concept_entropy":4.593843292,
    "normalized_UMASS":0.646050227,
    "normalized_TFIDF":0.488378417,
    "normalized_polarity":0.074074074,
    "tagtext":"loops",
    "posttext":"While it's an open question how advisable this would be, you'd be better off with an inner loop that retries until successful.Something like this: You'd likely want a max # of retries within each iteration of the for loop or some other additional checks to avoid infinite looping."
  },
  {
    "postid":2237,
    "postdate":1317340920,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.287316358,
    "concept_entropy":0,
    "UMASS(coherence)":0.596021202,
    "TFIDF(informativeness)":1.113916682,
    "polarity":-1,
    "normalized_text_entropy":4.287316358,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.541837456,
    "normalized_TFIDF":0.129659606,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Anyway, I have this extremely simple java program to find out if 2 objects in an array are the same. How ever when I run it when a set of unique objects it always returns 1 error, If I add more objects that are the same it counts as normal.This is the code;"
  },
  {
    "postid":2238,
    "postdate":1317340920,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.195041296,
    "concept_entropy":0,
    "UMASS(coherence)":0.366644634,
    "TFIDF(informativeness)":1.061846913,
    "polarity":0,
    "normalized_text_entropy":4.195041296,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.333313304,
    "normalized_TFIDF":0.123598698,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Anyway, I have this extremely simple java program to find out if 2 objects in an array are the same. How ever when I run it when a set of unique objects it always returns 1 error, If I add more objects that are the same it counts as normal.This is the code;"
  },
  {
    "postid":2239,
    "postdate":1317341040,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.36896148,
    "concept_entropy":0,
    "UMASS(coherence)":0.5266269,
    "TFIDF(informativeness)":0.46209812,
    "polarity":0,
    "normalized_text_entropy":4.36896148,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.478751727,
    "normalized_TFIDF":0.053788098,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The 1 error is because you're comparing with, which is of course equal to itself. If you want to find all pairwise duplicates, you will need to do a double loop: You'll notice a few things from this code: The first is because you're taking turns with each element in your array to compare with every other element.By the time its turn comes around (in the outer loop), it's already been compared to the elements before it, and should not be compared with them again. The second is because you'll end up comparing an element to itself for each outer loop.You don't want to count it as an."
  },
  {
    "postid":2240,
    "postdate":1317341100,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.346417207,
    "concept_entropy":4.577431067,
    "UMASS(coherence)":0.785062418,
    "TFIDF(informativeness)":1.032019136,
    "polarity":-1,
    "normalized_text_entropy":4.346417207,
    "normalized_concept_entropy":4.577431067,
    "normalized_UMASS":0.713693107,
    "normalized_TFIDF":0.120126753,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"You're starting i at 0. Therefore the first test is ;)"
  },
  {
    "postid":2241,
    "postdate":1317341160,
    "tag":"0",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.383578877,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.716600638,
    "TFIDF(informativeness)":1.320038055,
    "polarity":3,
    "normalized_text_entropy":4.383578877,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.651455125,
    "normalized_TFIDF":0.153652079,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"You're always going to get at least one error because will be true on the first iteration, when i = 0."
  },
  {
    "postid":2242,
    "postdate":1317341700,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.336875538,
    "concept_entropy":4.370638728,
    "UMASS(coherence)":0.721833758,
    "TFIDF(informativeness)":1.087494014,
    "polarity":1,
    "normalized_text_entropy":4.336875538,
    "normalized_concept_entropy":4.370638728,
    "normalized_UMASS":0.656212507,
    "normalized_TFIDF":0.126584014,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"In your code at "
  },
  {
    "postid":2243,
    "postdate":1317341460,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.412457015,
    "concept_entropy":4.169766962,
    "UMASS(coherence)":0.597515515,
    "TFIDF(informativeness)":1.366204748,
    "polarity":0,
    "normalized_text_entropy":4.412457015,
    "normalized_concept_entropy":4.169766962,
    "normalized_UMASS":0.543195923,
    "normalized_TFIDF":0.159025869,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Try a doubly nested for loop.Something like this"
  },
  {
    "postid":2244,
    "postdate":1317343020,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.561535889,
    "concept_entropy":3.905704802,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.168644757,
    "polarity":2,
    "normalized_text_entropy":4.561535889,
    "normalized_concept_entropy":3.905704802,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.136029939,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"You also need to \"think Java\". Use Array.equals for the comparison. See the documentationand some examples "
  },
  {
    "postid":2245,
    "postdate":1317362220,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.363123446,
    "concept_entropy":0,
    "UMASS(coherence)":0.608448087,
    "TFIDF(informativeness)":2.109791324,
    "polarity":3,
    "normalized_text_entropy":4.363123446,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.553134625,
    "normalized_TFIDF":0.245579149,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"If you are going to make use of any collection, you can easiy findout the duplicates in the array Example:"
  },
  {
    "postid":2246,
    "postdate":1306316100,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.315836924,
    "concept_entropy":0,
    "UMASS(coherence)":0.759882458,
    "TFIDF(informativeness)":2.493656016,
    "polarity":11,
    "normalized_text_entropy":4.315836924,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.690802235,
    "normalized_TFIDF":0.290260897,
    "normalized_polarity":0.462962963,
    "tagtext":"loops",
    "posttext":"I have a 2D Array and I would like to find an easier way to manipulate my code so that it will find if there is a duplicate in the column and easier way then what I have below: This way has too many loops and I am sure there must be an easier way to find duplicates rather than going through this massive looping process. This is for a square 2D array, ie. an array with rows = columns. If so, how can this new way work - and how can I manipulate it to work to find duplicate values in the rows as well. Thanks for the help."
  },
  {
    "postid":2247,
    "postdate":1306316880,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.410438239,
    "concept_entropy":0,
    "UMASS(coherence)":0.491152558,
    "TFIDF(informativeness)":1.555941673,
    "polarity":1,
    "normalized_text_entropy":4.410438239,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.446502325,
    "normalized_TFIDF":0.181111197,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"you can use to store all already encountered elements. should be something like this: this solution is O(length^2) = O(n) where n is the matrix total size. I think it is ideal in terms of big O, because you need to check all elements."
  },
  {
    "postid":2248,
    "postdate":1306317300,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.296399673,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.733781892,
    "polarity":0,
    "normalized_text_entropy":4.296399673,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.201811751,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The output is as expected:"
  },
  {
    "postid":2249,
    "postdate":1299148620,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.34309057,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.752958204,
    "polarity":1,
    "normalized_text_entropy":4.34309057,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.204043869,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Since I'm not a CS major, I'm having some difficulties translating my programming wishes into an actual program. What it basically boils down to is the following: how can I alternate an image on a label, showing each image for an amount of tim specific for each image. So: say I've images A and B; I'd like the user to see A for 1000ms and B for 200ms. This keeps on looping until a user presses a certain key. Now, I'm able to load an image onto a panel, quite easily even, and I've managed to catch user input using KeyListener and stuff, which all works quite nicely and alot easier then I had expected. I also know how to use looping constructs like while, for and do..while, but this timer business is shady.I see all kinds of stuff using threads and what not, I really don't need that. This is not about efficient programming or good code, it's simply about demonstrating something.Any help would be greatly appreciated!"
  },
  {
    "postid":2250,
    "postdate":1299149400,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.155803123,
    "concept_entropy":0,
    "UMASS(coherence)":0.487526779,
    "TFIDF(informativeness)":1.405191194,
    "polarity":0,
    "normalized_text_entropy":4.155803123,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.443206163,
    "normalized_TFIDF":0.163563881,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Use a. The doInBackground method of the SwingWorker should look like this : The keylistener should simply cancel the SwingWorker."
  },
  {
    "postid":2251,
    "postdate":1299149040,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.312487174,
    "concept_entropy":0,
    "UMASS(coherence)":0.446850722,
    "TFIDF(informativeness)":1.352504639,
    "polarity":0,
    "normalized_text_entropy":4.312487174,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.406227929,
    "normalized_TFIDF":0.15743118,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Here's something that might be a good example: I can try to explain the code if it appears confusing"
  },
  {
    "postid":2252,
    "postdate":1299149340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.395113141,
    "concept_entropy":0,
    "UMASS(coherence)":0.489711712,
    "TFIDF(informativeness)":2.432350987,
    "polarity":3,
    "normalized_text_entropy":4.395113141,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.445192465,
    "normalized_TFIDF":0.283125008,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"There is nothing necessarily inefficient about using threads when threads are the right tool for the job. In this case, it would not be unreasonable to create a new class that implements, which holds a reference to the label you wish to change the image on. This means that the image could be changed without causing waits on the main application that would cause it to hang until it was done. You would want to avoid 'Busy Loops' [basically, a while loop with no Thread.sleep() within it], and look to see if there is any needed thread exit criteria"
  },
  {
    "postid":2253,
    "postdate":1261498980,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":3.966460518,
    "concept_entropy":0,
    "UMASS(coherence)":0.455150487,
    "TFIDF(informativeness)":1.496144702,
    "polarity":1,
    "normalized_text_entropy":3.966460518,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.41377317,
    "normalized_TFIDF":0.174150845,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"in Ant I want to execute a Java task on a fileset. I use the Java task to run rhino which runs a JS beautifier. The later works without any problems, except that it might seem little bit awkward to use rhino+js to acutally have a working JS beautifier/indenter. But all working JS beautifiers I have found are all written in JavaScript. I also want to run jsmin on the files as well, but as part of the distribution task. So the same problem will appear again, e.g running a java task on multiple files. The java/JS implementation of jsmin is preferred since it works on all platforms that run ant.I cannot find a generic \"foreach\" task in ant that processes a fileset or similar structure. I have googled ant found an add-on package that provides \"foreach\" but since its not part of the standard ant core tasks I get the feeling that I'am on the wrong track. The exec task can iterate over a fileset, but I want to run rhino inside the JVM or at least on a forked JVM. But as a last resort it is of course possible to exec java externally, maybee that is the preferred way."
  },
  {
    "postid":2254,
    "postdate":1261499400,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.095123636,
    "concept_entropy":0,
    "UMASS(coherence)":0.558228859,
    "TFIDF(informativeness)":1.970790755,
    "polarity":1,
    "normalized_text_entropy":4.095123636,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.507480781,
    "normalized_TFIDF":0.22939952,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"The answer is. Specifically task"
  },
  {
    "postid":2255,
    "postdate":1331794440,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.482875547,
    "concept_entropy":0,
    "UMASS(coherence)":0.780235758,
    "TFIDF(informativeness)":2.265468555,
    "polarity":6,
    "normalized_text_entropy":4.482875547,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.709305235,
    "normalized_TFIDF":0.263699937,
    "normalized_polarity":0.37037037,
    "tagtext":"loops",
    "posttext":"From my answer atHere is way to do this using javascript and the ant scriptdef task, you don't need ant-contrib for this code to work since scriptdef is a core ant task."
  },
  {
    "postid":2256,
    "postdate":1403456820,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.355870825,
    "concept_entropy":4.548570946,
    "UMASS(coherence)":0.563418353,
    "TFIDF(informativeness)":1.309413181,
    "polarity":3,
    "normalized_text_entropy":4.355870825,
    "normalized_concept_entropy":4.548570946,
    "normalized_UMASS":0.512198503,
    "normalized_TFIDF":0.152415346,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"I'm using Win 7, Java 8, on a multicore Intel workstation.I have something like this : Inside dataDigester.DoRun() it reads in some text data files, parse each line and do some statistics with arrays, vectors and hashmaps and it uses ThreadPoolExecutor to run multiple processes, then save the results to a file. The strange thing is each single run of DoRun() takes only 10 minutes, but inside the loops, it started with 10 min. but gradually slows down to 20, 30 min. for each DoRun(). If I stop the loop when it's taking 30 min., then start over from where I stopped, it again took 10 min. and eventually slows down to 20, 30 min. again. Why ? I even put in the following lines after DoRun(), but it didn't improve speed, still slows down : Inside each loop, DataDigester dataDigester=new DataDigester() creates a new object, it should be recycled after the DoRun(), why it slowed down ? I've also noticed from Windows Task Manager, the memory usage goes up as the loops keep going. It seems Java somehow burdens itself with something and slows down, so in this case how to keep the speed at a constant of 10 min. for each run within the loops ?"
  },
  {
    "postid":2257,
    "postdate":1403457300,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.398710513,
    "concept_entropy":0,
    "UMASS(coherence)":0.600139726,
    "TFIDF(informativeness)":1.262028827,
    "polarity":5,
    "normalized_text_entropy":4.398710513,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.545581569,
    "normalized_TFIDF":0.14689982,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"It's hard to say without knowing what DataDigester is and does, but I can think of a numberof possible reasons:"
  },
  {
    "postid":2258,
    "postdate":1403457180,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.235305487,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.644864751,
    "TFIDF(informativeness)":0.710242262,
    "polarity":0,
    "normalized_text_entropy":4.235305487,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.586240683,
    "normalized_TFIDF":0.08267201,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Declare just one and reuse that for all of your loops instead of creating thousands and thousands of them. That should help with your Garbage Collection issues and the timing too."
  },
  {
    "postid":2259,
    "postdate":1398287100,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.169925001,
    "concept_entropy":0,
    "UMASS(coherence)":0.55325529,
    "TFIDF(informativeness)":1.545642646,
    "polarity":4,
    "normalized_text_entropy":3.169925001,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.502959355,
    "normalized_TFIDF":0.179912393,
    "normalized_polarity":0.333333333,
    "tagtext":"loops",
    "posttext":"I am making a 2d RPG game and i was wanting to get background music working. I wrote a sound class that plays the music on a separate thread but i cannot figure out how to make it loop. My Sound class is as follows:"
  },
  {
    "postid":2260,
    "postdate":1398287280,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.335129384,
    "concept_entropy":0,
    "UMASS(coherence)":0.463489724,
    "TFIDF(informativeness)":3.207563192,
    "polarity":5,
    "normalized_text_entropy":4.335129384,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.421354295,
    "normalized_TFIDF":0.373359502,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"This creates an infinite loop. Adjust accordingly. When you start a thread, it will execute any code that is in the method and then exit. So this is where the loop would go in order to repeatedly play the sound (without blocking your other threads/code). This solution has no way of stopping this thread (and therefore stopping playback) with your current code, but I assume you are writing this in stages. The thread will stop playback and exit when the application does currently."
  },
  {
    "postid":2261,
    "postdate":1398287460,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.390826468,
    "concept_entropy":4.393323297,
    "UMASS(coherence)":0.587370312,
    "TFIDF(informativeness)":2.289963315,
    "polarity":3,
    "normalized_text_entropy":4.390826468,
    "normalized_concept_entropy":4.393323297,
    "normalized_UMASS":0.533973011,
    "normalized_TFIDF":0.266551121,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"Sample code: You can make it more better by moving static part of the method in method. In that case you don't need to read the file again.Hint: pass in method instead of."
  },
  {
    "postid":2262,
    "postdate":1397998380,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.336276014,
    "concept_entropy":0,
    "UMASS(coherence)":0.538096333,
    "TFIDF(informativeness)":1.605827252,
    "polarity":1,
    "normalized_text_entropy":4.336276014,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.489178485,
    "normalized_TFIDF":0.186917865,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I apologies for my poor knowledge of programming and english in advance. So my friends and I are a creating a tower defence game as our 2nd semester project at our university. The semester is about user involvment, so we decided to create a tower defence as we can include user in a lot of things. But we have given our tower defence game a twist, we have included questions inbetween waves, which gives a reward of x amount of gold if answered correct. As it is right now we only have one question for each wave, and we would like to include up to 5 questions for each wave, this is done due to if people want to play it more than once, they cannot just remember the right answer from earlier. We have already made a list of questions in a text file which looks like this, example: Which Chinese leader��Η��s widow was sentenced to death as a member of the Gang of Four? A: Zhou Enlai B: Jiang Zemin C: Mao Zedong D: Sun Yat-Sen 3 Example done, and this is done with up to 50 questions. And our code for reading this txt file so far looks like this: My question is now, how do we create a game with 5 questions saved for eachwave, and one random is selected, I hope you know what I mean. I was thinking about doing some kind of if loop, but I am not sure of how to do this. I hope you can help, thank you for your time!"
  },
  {
    "postid":2263,
    "postdate":1397998800,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.136946501,
    "concept_entropy":4.59371453,
    "UMASS(coherence)":0.524105127,
    "TFIDF(informativeness)":1.596172335,
    "polarity":0,
    "normalized_text_entropy":4.136946501,
    "normalized_concept_entropy":4.59371453,
    "normalized_UMASS":0.476459206,
    "normalized_TFIDF":0.185794035,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Here is some code to get you started. I'll leave it to you as to how and where to place it. Info on can be. This solution does not cover repeating questions. If you would like to never repeat a question you will either need to keep track of the Questions asked or use a such as an and Questions as you use them to make sure they're not in the pool next time around."
  },
  {
    "postid":2264,
    "postdate":1393068960,
    "tag":"0",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.42380927,
    "concept_entropy":4.254357158,
    "UMASS(coherence)":0.519659682,
    "TFIDF(informativeness)":3.261368835,
    "polarity":1,
    "normalized_text_entropy":4.42380927,
    "normalized_concept_entropy":4.254357158,
    "normalized_UMASS":0.472417893,
    "normalized_TFIDF":0.379622465,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I want to read text file using javascript not using imacros loop I tried to read it using java with no luck give me message error \"ReferenceError: java is not defined\" if there is any other way to read text file or fix my code because I have no idea"
  },
  {
    "postid":2265,
    "postdate":1393173420,
    "tag":"0",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.206006549,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.81984752,
    "polarity":-1,
    "normalized_text_entropy":4.206006549,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.211829767,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"using javascript this can work XMLHttpRequest() but XMLHttpRequest() is no longer supported in firefox 15+ You must have to define it: const XMLHttpRequest = Components.Constructor(\"@mozilla.org/xmlextras/xmlhttprequest;1\");var request = XMLHttpRequest();"
  },
  {
    "postid":2266,
    "postdate":1393083360,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.248299506,
    "concept_entropy":0,
    "UMASS(coherence)":0.476901745,
    "TFIDF(informativeness)":1.586548565,
    "polarity":1,
    "normalized_text_entropy":4.248299506,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.433547041,
    "normalized_TFIDF":0.184673831,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Install FireFox 15 and don't update it and that function will work. Java is not supported in FF16+ but in FF15 it works."
  },
  {
    "postid":2267,
    "postdate":1391791380,
    "tag":"0",
    "TFMvalue":0.777777778,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.279478083,
    "concept_entropy":4.57466519,
    "UMASS(coherence)":0.556643849,
    "TFIDF(informativeness)":1.999441951,
    "polarity":1,
    "normalized_text_entropy":4.279478083,
    "normalized_concept_entropy":4.57466519,
    "normalized_UMASS":0.506039863,
    "normalized_TFIDF":0.232734511,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Does a Java loop together with use more or less resources than a blocking loop with and? And do the CPU cores have some special (hardware) implementations to allow? If yes, are there any limitations while working with such non-blocking loops? An example: (Just a note: Without the a core would go radical 100% in a loop...)"
  },
  {
    "postid":2268,
    "postdate":1391791620,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.347055146,
    "concept_entropy":0,
    "UMASS(coherence)":0.572264229,
    "TFIDF(informativeness)":0.777204451,
    "polarity":0,
    "normalized_text_entropy":4.347055146,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.520240208,
    "normalized_TFIDF":0.090466391,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"As to the original question of why takes up more CPU than, consider: a modern CPU can perform billions of instructions per second. With the loop, assuming it is perfect and waits exactly one millisecond each time, you're limiting the CPU to per second. Without it, there's no limit and it can run the tight loop instead. As to the new question of which is more efficient, the approach vs. and beinged...Well let's say you're waiting on a condition. Option one: vs. and elsewhere: Say it takes 10 seconds for condition to be true. In the first approach, you call 10,000 times and check 10,000 times. In the second approach, you call once and once."
  },
  {
    "postid":2269,
    "postdate":1391793420,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.313957982,
    "concept_entropy":4.485909344,
    "UMASS(coherence)":0.325187575,
    "TFIDF(informativeness)":3.977234536,
    "polarity":0,
    "normalized_text_entropy":4.313957982,
    "normalized_concept_entropy":4.485909344,
    "normalized_UMASS":0.295625068,
    "normalized_TFIDF":0.462949042,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Is this a trick question? When you put a \"wait()\" into a loop, it releases the synchronization variable, allowing some other thread to go forward and eventually notify back to this thread that it can continue.The thread won't proceed, and won't use any cpu cycles, until it gets that notify. And that's why wait/notify must be called from within sync'd blocks or methods (not clear if you are doing that here). By contrast, a \"while ... true\" is an infinite loop which is going to use every cpu cycle you give it, until the end condition is met. I recommend a good book on Java threads and synchronization, like "
  },
  {
    "postid":2270,
    "postdate":1391791740,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.469507587,
    "concept_entropy":0,
    "UMASS(coherence)":0.674499537,
    "TFIDF(informativeness)":0.696704374,
    "polarity":3,
    "normalized_text_entropy":4.469507587,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.613181397,
    "normalized_TFIDF":0.081096204,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"It does use more resources, and in general is not a good design. You are far better off waiting properly as even if you don't get better performance in one specific test on one specific hardware you will get better performance in other suggestions. This will become especially important if you have a lot of these threads running as the overhead is per thread."
  },
  {
    "postid":2271,
    "postdate":1391796600,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.336067298,
    "concept_entropy":4.182668008,
    "UMASS(coherence)":0.409385987,
    "TFIDF(informativeness)":1.030860974,
    "polarity":1,
    "normalized_text_entropy":4.336067298,
    "normalized_concept_entropy":4.182668008,
    "normalized_UMASS":0.372169079,
    "normalized_TFIDF":0.119991943,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Basically, Claudiu is right: CPU are very fast indeed. But there is also another factor to consider: Actually is needed in non-blocking threads to allow other threads to continue. Because if there is no wait at all, the OS can't allocate resources to any other thread and they will starvate. On the other side, in reality cause a much longer wait depending how the OS allocates the resources. But that's up to the OS. When programming, there are always 2 factors to consider: Therefore it's all about the (or in general: Bytes/s). You can't only make the right decisions based on the allocated resources as many programmers intend to do. It's even possible be that above non-blocking floop uses a lot less resources than a blocking one, because there is no synchronisation overhead. So never forget the time dimension.Faster, non-blocking programs (can) use less resources."
  },
  {
    "postid":2272,
    "postdate":1375776960,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.266482851,
    "concept_entropy":4.252920237,
    "UMASS(coherence)":0.698910491,
    "TFIDF(informativeness)":1.837053804,
    "polarity":-1,
    "normalized_text_entropy":4.266482851,
    "normalized_concept_entropy":4.252920237,
    "normalized_UMASS":0.635373174,
    "normalized_TFIDF":0.213832574,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"I am trying to make a generator for Spirals being parametrized by the amount of dimensions the answer should have. However now I am trying to generate only 1 result (or batch of results) at once: So how exactly would I need to do it now if I want to use it for an iterator, so using the it should retrieve 'the result' of one call. It would be enough already if there would be some method replacing the bunch of in which I give as input the and an array holding the-value in case of; holding the-value in case of; the-value in case of, etc. I hope my question is clear enough."
  },
  {
    "postid":2273,
    "postdate":1375779600,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.349353341,
    "concept_entropy":4.458996452,
    "UMASS(coherence)":0.470150951,
    "TFIDF(informativeness)":1.103523268,
    "polarity":-5,
    "normalized_text_entropy":4.349353341,
    "normalized_concept_entropy":4.458996452,
    "normalized_UMASS":0.427409955,
    "normalized_TFIDF":0.128449815,
    "normalized_polarity":0.166666667,
    "tagtext":"loops",
    "posttext":"Ok, instead of stalling there is a solution which will work for ints, a general solution is much harder, note: This will \"spiral\" out in boxes. prints"
  },
  {
    "postid":2274,
    "postdate":1369932480,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.193231613,
    "concept_entropy":3.974937501,
    "UMASS(coherence)":0.376411318,
    "TFIDF(informativeness)":0.686603679,
    "polarity":-1,
    "normalized_text_entropy":4.193231613,
    "normalized_concept_entropy":3.974937501,
    "normalized_UMASS":0.342192107,
    "normalized_TFIDF":0.079920486,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"EDIT: I tried using a camparator and it didnt work, I get an error I have to read in a file with the contents this is the code I read it in with How can I sort the 2D Array based off of the first column of the last (or any) column of numbers from the text file?"
  },
  {
    "postid":2275,
    "postdate":1369932900,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.37320231,
    "concept_entropy":4.389681168,
    "UMASS(coherence)":0.367596498,
    "TFIDF(informativeness)":0.867995118,
    "polarity":0,
    "normalized_text_entropy":4.37320231,
    "normalized_concept_entropy":4.389681168,
    "normalized_UMASS":0.334178635,
    "normalized_TFIDF":0.101034401,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"From what I'm understanding, you want to sort the 2D array by arranging the positions of the arrays inside of them.You can use with a custom like this: It may help to use or compare numerical values using.If you want to sort the individual String arrays inside the 2D array, you'll have to sort each array individually. EDIT: see the comments for a suggested compare method."
  },
  {
    "postid":2276,
    "postdate":1369932720,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.298127839,
    "concept_entropy":4.559918101,
    "UMASS(coherence)":0.649399948,
    "TFIDF(informativeness)":0.665964938,
    "polarity":-1,
    "normalized_text_entropy":4.298127839,
    "normalized_concept_entropy":4.559918101,
    "normalized_UMASS":0.590363589,
    "normalized_TFIDF":0.077518142,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"I wouldn't use a 2D array for this purpose. I would create a class and define instance variables for each of the fields in the file format.Then I would create a class that implements (say,) that defines how to compare based on whatever criteria is needed. Then, you can have an array of or a of.Last, you can sort the array withor the list with "
  },
  {
    "postid":2277,
    "postdate":1369932720,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.058172368,
    "concept_entropy":0,
    "UMASS(coherence)":0.586184263,
    "TFIDF(informativeness)":1.101336125,
    "polarity":2,
    "normalized_text_entropy":4.058172368,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.532894785,
    "normalized_TFIDF":0.128195232,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Use to sort your array"
  },
  {
    "postid":2278,
    "postdate":1369932780,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.340747774,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.388031561,
    "polarity":1,
    "normalized_text_entropy":4.340747774,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.060403429,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"You can use with a comparator."
  },
  {
    "postid":2279,
    "postdate":1368337620,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.790118291,
    "concept_entropy":0,
    "UMASS(coherence)":0.472682764,
    "TFIDF(informativeness)":1.057961447,
    "polarity":-1,
    "normalized_text_entropy":3.790118291,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.429711604,
    "normalized_TFIDF":0.046039659,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"I have a text file with thousands of lines of data like the following: I can separate each \"double\" value just fine, but I'm having trouble adding each line to my user-defined class. In my main method, I created a list by: Where Pair is defined as: Now I'm trying to add items to this list. I tried: \"data.add(double, double)\" but that doesn't work. I tried creating a set method within the Pair class but it won't let me since \"first\" and \"second\" are declared as \"final\". I know I could just change them but I do want them to be final values. So how do I add an item to this list?"
  },
  {
    "postid":2280,
    "postdate":1368337740,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.304758659,
    "concept_entropy":0,
    "UMASS(coherence)":0.530980094,
    "TFIDF(informativeness)":1.477710906,
    "polarity":1,
    "normalized_text_entropy":4.304758659,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.482709176,
    "normalized_TFIDF":0.064306035,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"As you have declared the as,you need to add objects to that. You need to create an instance of passing the double values to its constructor and then the instance to the.Like this : Please go through the documentation of, it provides you two methods to add elements to the individually.and."
  },
  {
    "postid":2281,
    "postdate":1368337920,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.226536851,
    "concept_entropy":0,
    "UMASS(coherence)":0.399283378,
    "TFIDF(informativeness)":1.097698778,
    "polarity":1,
    "normalized_text_entropy":4.226536851,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.362984889,
    "normalized_TFIDF":0.047768921,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Adding to what Noob has mentioned. List or any other collection in java does not work on primitives. Collections store objects. So you need to create the object of your class pair, which will hold the details of first and second attribute. You can store multiple line of read file represented by Pair object in your list as:"
  },
  {
    "postid":2282,
    "postdate":1364466360,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.930570027,
    "concept_entropy":0,
    "UMASS(coherence)":0.368568215,
    "TFIDF(informativeness)":0.898066321,
    "polarity":1,
    "normalized_text_entropy":3.930570027,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.335062014,
    "normalized_TFIDF":0.03908145,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Program uses a while loop menu in the main to request for the user command: If none of the commands you pick are actually commands on the menu then this happens: Whenever I add a new person or use any command that requires me to press return to finish entering a value I get the else statement and then the regular command request. So it looks like: When this happens. Not gonna post my full code on here, I'm afraid of it cause it's so much. Have the pastebins of them instead. Anyone know why this is happening?"
  },
  {
    "postid":2283,
    "postdate":1364467560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.135450812,
    "concept_entropy":0,
    "UMASS(coherence)":0.449667056,
    "TFIDF(informativeness)":1.244448968,
    "polarity":0,
    "normalized_text_entropy":4.135450812,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.408788233,
    "normalized_TFIDF":0.054155098,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"The problem is that something like doesn't read the new-line character, so the next returns an empty line. Replacing all occurrences of with should fix it. You can also do a after your last non-next method, but this is a bit messy. Some other things I'd recommend:"
  },
  {
    "postid":2284,
    "postdate":1364467440,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.162518339,
    "concept_entropy":0,
    "UMASS(coherence)":0.332166491,
    "TFIDF(informativeness)":0.646776482,
    "polarity":0,
    "normalized_text_entropy":4.162518339,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.301969537,
    "normalized_TFIDF":0.028145986,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Maybe its leaving in the buffer at the end of the while loop and just before taking input again.MaybeThis can help remove it."
  },
  {
    "postid":2285,
    "postdate":1360558680,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.194815057,
    "concept_entropy":0,
    "UMASS(coherence)":0.446863898,
    "TFIDF(informativeness)":1.548575895,
    "polarity":1,
    "normalized_text_entropy":4.194815057,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.406239907,
    "normalized_TFIDF":0.06738989,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"How would I go about excluding any day from my print outs that was a friday and the 13th day of the month.I'm attempting to write something along the lines of: if (dayofweek != 5 && dayofmonth != 13), then print.How could I implement that into the following code?"
  },
  {
    "postid":2286,
    "postdate":1360559340,
    "tag":"0",
    "TFMvalue":0.888888889,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.349392625,
    "concept_entropy":0,
    "UMASS(coherence)":0.423545349,
    "TFIDF(informativeness)":1.707930045,
    "polarity":1,
    "normalized_text_entropy":4.349392625,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.385041226,
    "normalized_TFIDF":0.074324558,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"try"
  },
  {
    "postid":2287,
    "postdate":1360559520,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.27185757,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.356945017,
    "TFIDF(informativeness)":2.173021542,
    "polarity":0,
    "normalized_text_entropy":4.27185757,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.32449547,
    "normalized_TFIDF":0.094564098,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Using, you would just do:"
  },
  {
    "postid":2288,
    "postdate":1359440340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.324562235,
    "concept_entropy":0,
    "UMASS(coherence)":0.445108208,
    "TFIDF(informativeness)":1.586829729,
    "polarity":2,
    "normalized_text_entropy":4.324562235,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.404643825,
    "normalized_TFIDF":0.069054595,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Hi there i'm creating a small game for school, but when i try to do this to fill out the x and y variables in this array i get a NPE.Could anyone help?"
  },
  {
    "postid":2289,
    "postdate":1359440460,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.161022839,
    "concept_entropy":0,
    "UMASS(coherence)":0.361103931,
    "TFIDF(informativeness)":0.950948091,
    "polarity":1,
    "normalized_text_entropy":4.161022839,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.328276301,
    "normalized_TFIDF":0.041382723,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"does not initialize objects inside the array, it only creates array, so call constructor to creates"
  },
  {
    "postid":2290,
    "postdate":1359440700,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.210654545,
    "concept_entropy":0,
    "UMASS(coherence)":0.363273014,
    "TFIDF(informativeness)":1.403738966,
    "polarity":-3,
    "normalized_text_entropy":4.210654545,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.330248195,
    "normalized_TFIDF":0.061086974,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"The statement will only initialize the array. It won't create objects. Inside the, you still have to call the constructor as Also, read more about. Its a to make."
  },
  {
    "postid":2291,
    "postdate":1359440520,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.28162987,
    "concept_entropy":0,
    "UMASS(coherence)":0.674270681,
    "TFIDF(informativeness)":1.791825764,
    "polarity":-2,
    "normalized_text_entropy":4.28162987,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.612973346,
    "normalized_TFIDF":0.077975475,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"You have initialized but you did not create so there is no Object inside the array and by default null is initialized, so is actually which throws NPE."
  },
  {
    "postid":2292,
    "postdate":1359440520,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.212304136,
    "concept_entropy":4.334108053,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.430407196,
    "polarity":-2,
    "normalized_text_entropy":4.212304136,
    "normalized_concept_entropy":4.334108053,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.062247504,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"You have created a an array of Gra with 10 elements. But each element in that array is currently pointing to null. You need to initialize those individual elements as Java's default value for Object is null. "
  },
  {
    "postid":2293,
    "postdate":1359440580,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.997731022,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.092766204,
    "polarity":0,
    "normalized_text_entropy":3.997731022,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.047554269,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Because you are just creating Array of type BySo by default this is . So first initialize them like Then do "
  },
  {
    "postid":2294,
    "postdate":1354118640,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.112640742,
    "concept_entropy":4.395691717,
    "UMASS(coherence)":0.652066792,
    "TFIDF(informativeness)":1.661180269,
    "polarity":0,
    "normalized_text_entropy":4.112640742,
    "normalized_concept_entropy":4.395691717,
    "normalized_UMASS":0.592787993,
    "normalized_TFIDF":0.072290132,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I have a normal Database call that gathers information from my database. i use these informations to create my objects ( ) these objects are then added to a list and the list is then returned. Suddenly i discovered that my originally code did not work as intended because i created dublicates and so now i am trying to void that any dublicates are being created! But there is a problem! I am unable to loop through my list and check wether or not the object is already created! Here is my code: The execption i get from this is: ive tried to look up the execption atCan anyone help me fix this problem?"
  },
  {
    "postid":2295,
    "postdate":1354119000,
    "tag":"0",
    "TFMvalue":0.875,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.203372893,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.747942695,
    "polarity":0,
    "normalized_text_entropy":4.203372893,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.076065801,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You're doing an add inside of your iteration.As per the spec, you're not allowed to modify the collection you're iterating over. The classic solution is to make a copy of the collection first and iterate over that instead.Another solution is to not use the iterator (the short foreach notation is using it implicitly) but to manually iterate using an index. A better solution would be to use a Set instead of a list (unless the order is important for you).That does mean you would have to implement equals and hashcode properly."
  },
  {
    "postid":2296,
    "postdate":1354119180,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.32245895,
    "concept_entropy":3.955291886,
    "UMASS(coherence)":0.402207161,
    "TFIDF(informativeness)":1.448623346,
    "polarity":2,
    "normalized_text_entropy":4.32245895,
    "normalized_concept_entropy":3.955291886,
    "normalized_UMASS":0.365642874,
    "normalized_TFIDF":0.063040222,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Use set instead of List to avoid this problem. You can iterate on the same list that you want to modify."
  },
  {
    "postid":2297,
    "postdate":1345009440,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.230056487,
    "concept_entropy":4.501191126,
    "UMASS(coherence)":0.36227562,
    "TFIDF(informativeness)":1.441628704,
    "polarity":2,
    "normalized_text_entropy":4.230056487,
    "normalized_concept_entropy":4.501191126,
    "normalized_UMASS":0.329341473,
    "normalized_TFIDF":0.062735834,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Okay so I am using the JavaMail library and I am trying to fetch certain message numbers. I want to do it efficiently and not have to loop twice over something��Η�_ Anyways my question to you is: How can I create an array that starts at index and ends at index without looping?"
  },
  {
    "postid":2298,
    "postdate":1345010280,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.236710558,
    "concept_entropy":0,
    "UMASS(coherence)":0.383885328,
    "TFIDF(informativeness)":1.087355083,
    "polarity":0,
    "normalized_text_entropy":4.236710558,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.348986662,
    "normalized_TFIDF":0.047318791,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"If you want to create and populate an array, you have basically three options: Vanilla Java, without extra libraries and whatnot, doesn't support a map function which would allow you to specify a function that would somehow auto-generate your values. Though, I really don't understand why you don't want to use a loop, especially for something trivial like this."
  },
  {
    "postid":2299,
    "postdate":1345009680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.063285995,
    "concept_entropy":0,
    "UMASS(coherence)":0.42917608,
    "TFIDF(informativeness)":0.969443866,
    "polarity":0,
    "normalized_text_entropy":4.063285995,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.390160073,
    "normalized_TFIDF":0.04218761,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2300,
    "postdate":1338564660,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.375335604,
    "concept_entropy":0,
    "UMASS(coherence)":0.368188573,
    "TFIDF(informativeness)":1.00981454,
    "polarity":1,
    "normalized_text_entropy":4.375335604,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.334716885,
    "normalized_TFIDF":0.043944434,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I have successfully completed, and no problems with the program, everything works just fine, except it does not show the the maximum and minimum price of the book. But, I do not want the program like this.Currently the program consists of pre-defined array that consists of book name, that is, whenever a user enters input for a book, the program shows the book name and price of the book. So, I am thinking of something different, that is without pre-storing the book names and prices in the array.Whatever name the user key-in for the book, that book name will be stored as an array along with the price. And the loop will be three times, that is after 1 input of book name and price, the user will again be prompted to enter book name, and last the the total number books and price will be displayed along with the maximum and minimum prices of the book, the user purchased. Can anyone help me with this?Please see my coding below:"
  },
  {
    "postid":2301,
    "postdate":1338564960,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.291056586,
    "concept_entropy":0,
    "UMASS(coherence)":0.505787462,
    "TFIDF(informativeness)":2.242777744,
    "polarity":3,
    "normalized_text_entropy":4.291056586,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.459806784,
    "normalized_TFIDF":0.097599702,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"That probably does not your question (which I have not really understood) but this is too long for a comment. You could start by replacing all your ifs by:"
  },
  {
    "postid":2302,
    "postdate":1338565260,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.193245964,
    "concept_entropy":0,
    "UMASS(coherence)":0.438648776,
    "TFIDF(informativeness)":1.268867905,
    "polarity":3,
    "normalized_text_entropy":4.193245964,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.398771615,
    "normalized_TFIDF":0.055217745,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"It's entirely possible I've misunderstood what you were asking, in which case, disregard everything below. Currently, you're comparing the currently iterated book to the next book, and incrimenting i twice in the for loop. Try this: You can do something similar for maximums: Of course, this assumes your list of books isn't empty."
  },
  {
    "postid":2303,
    "postdate":1338570720,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.258520889,
    "concept_entropy":4.37804161,
    "UMASS(coherence)":0.539350086,
    "TFIDF(informativeness)":1.650000348,
    "polarity":5,
    "normalized_text_entropy":4.258520889,
    "normalized_concept_entropy":4.37804161,
    "normalized_UMASS":0.49031826,
    "normalized_TFIDF":0.071803612,
    "normalized_polarity":0.351851852,
    "tagtext":"loops",
    "posttext":"Because you're using dynamic inputs, you can end up with any number of books, which is why you should not use arrays anymore. Their size cannot easily be changed so I suggest you change to instead. Furthermore, because your books and prices array are closely related, you may want to create your own Book object to store this information. For example: To make the whole thing dynamic, you essentially require a rewrite of most of your code, which I've done below. I'm not sure if I made a homework assignment here, but if I am, I strongly suggest that you read through the entire code to understand what it does."
  },
  {
    "postid":2304,
    "postdate":1338567120,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.244495847,
    "concept_entropy":0,
    "UMASS(coherence)":0.635361497,
    "TFIDF(informativeness)":1.141840912,
    "polarity":1,
    "normalized_text_entropy":4.244495847,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.577601361,
    "normalized_TFIDF":0.049689869,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"I posted it a little late but here you go. I got rid of all thos if statements and used a switch, sorted your prices array and changed some of your looping. oops! I messed up. You wanted the cheapest book not the cheapest book price which is what I did. }"
  },
  {
    "postid":2305,
    "postdate":1337779080,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.598339576,
    "concept_entropy":4.548481407,
    "UMASS(coherence)":0.711923366,
    "TFIDF(informativeness)":3.024615546,
    "polarity":-2,
    "normalized_text_entropy":4.598339576,
    "normalized_concept_entropy":4.548481407,
    "normalized_UMASS":0.64720306,
    "normalized_TFIDF":0.131623197,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"I made code to draw points (to look like stars) and i made it move but how do i have this animation repeat and not just stop after a few seconds? What's the best way to do this because i don'T want to waste resources on this animation (if it does not erase the points that have lost the screen); now i have this code but the loop is very obvios, does anyone know how i can fix this?"
  },
  {
    "postid":2306,
    "postdate":1337782860,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.437625553,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.757299786,
    "polarity":0,
    "normalized_text_entropy":4.437625553,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.076472997,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I see that you are translating the whole set of stars (the \"points\" array) to give the movement effect. I guess after a while, the set of stars reach to end and your screen goes blank. (all stars are out of screen) I am assuming stars are sliding horizontally and z is your horizontal direction. The most efficient solution that comes to mind is to reset the position of the \"points\" to initial state when it reaches to end of screen. Make the set of stars distributed in an area that fits your screen size. And draw the stars for two times, second one is shifted for one screen width in the horizontal axis, in order to simulate continuity. I wrote a pseudo code below; It is probably faulty but it aims to give you the idea."
  },
  {
    "postid":2307,
    "postdate":1336055340,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.266250248,
    "concept_entropy":4.385030272,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.799945144,
    "polarity":1,
    "normalized_text_entropy":4.266250248,
    "normalized_concept_entropy":4.385030272,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.078328809,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Several times I have come across cases where the for-each loop would cause problems, including exceptions and crashes, while the would work without any issues. This includes modifying the collection (which I know shouldn't happen on for-each, but don't know why) as well as other cases where I clone stuff. Cant recall any specific example atm I just got thinking about it. Isn't the for-each just a shortcut for the second loop type I pointed? Could someone explain exactly whats the difference there? "
  },
  {
    "postid":2308,
    "postdate":1336055640,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.366617543,
    "concept_entropy":4.441417191,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.507439612,
    "polarity":2,
    "normalized_text_entropy":4.366617543,
    "normalized_concept_entropy":4.441417191,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.065599749,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":" is just a syntactic sugar introduced in java 1.5. It uses iterator obtained from behind the scene.The only one reasonable difference you mentioned is collection modification during iteration. Yes, it is impossible. Collections cannot be modified during iteration using. The attempt causes. This is relevant for both cases (explicit and implicit usage of iterator).The only one exception is using (when it is supported). In this case iterator does not throw the exception.The reason is clear. Iterator cannot iterate collection that is being changed during iteration unless it knows about the change and can re-arrange itself. This is what happens when you are using."
  },
  {
    "postid":2309,
    "postdate":1336055460,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.742841546,
    "concept_entropy":0,
    "UMASS(coherence)":0.581541542,
    "TFIDF(informativeness)":3.079357268,
    "polarity":2,
    "normalized_text_entropy":4.742841546,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.528674129,
    "normalized_TFIDF":0.13400541,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"The problem is when in loop you an element. When using an iterator you have a method. When using you don't have a direct access to the underlying iterator and you can't call its method.Otherwise it is the same. Foreach doesn't cause more problems or crashes. You just can't remove an element."
  },
  {
    "postid":2310,
    "postdate":1331059800,
    "tag":"0",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.148741325,
    "concept_entropy":4.110612132,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.126848573,
    "polarity":1,
    "normalized_text_entropy":4.148741325,
    "normalized_concept_entropy":4.110612132,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049037443,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":" that I have to write code to check if a customers name is already in my txt file (Customers.txt). As you can see, I write my customers name ,every fourth line in my txt File.I would like to have the input of a customers name with SimpleInOutDialog en then that inputs needs to be compared with al the customers name in my txt file.How do I need to do this? The code that I already have is below. The changes need to be in be in getCustomer() Thanks!! Hi , Solved my problem , here is the solution:"
  },
  {
    "postid":2311,
    "postdate":1331060580,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.568598595,
    "concept_entropy":4.543446816,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.021565496,
    "polarity":0,
    "normalized_text_entropy":4.568598595,
    "normalized_concept_entropy":4.543446816,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.087973135,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Use a to store all of the names you read and then it's just to call the contains methode to see if the customer already exists. If the names are stored on the forth line the code should look like this"
  },
  {
    "postid":2312,
    "postdate":1331058480,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.260115719,
    "concept_entropy":4.466633441,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.716866016,
    "polarity":1,
    "normalized_text_entropy":4.260115719,
    "normalized_concept_entropy":4.466633441,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.074713427,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":" that I have to arrange, when searching for a customer, arrange the while loop to only examine every fourth line read. This is the code I already have on this problem: Does anybody know what needs to be at the place of \"...\"? Thanks!"
  },
  {
    "postid":2313,
    "postdate":1331058660,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.134634979,
    "concept_entropy":4.542677845,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.947768208,
    "polarity":0,
    "normalized_text_entropy":4.134634979,
    "normalized_concept_entropy":4.542677845,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041244343,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Just call br.readLine() 3 times at the end of the loop, discarding the output:"
  },
  {
    "postid":2314,
    "postdate":1331058660,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.407861388,
    "concept_entropy":4.606305839,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.272911847,
    "polarity":2,
    "normalized_text_entropy":4.407861388,
    "normalized_concept_entropy":4.606305839,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.055393727,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"Something along the lines of"
  },
  {
    "postid":2315,
    "postdate":1331058660,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.158941996,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.231931054,
    "polarity":0,
    "normalized_text_entropy":4.158941996,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.053610352,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2316,
    "postdate":1320619320,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.098399917,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.027893261,
    "polarity":0,
    "normalized_text_entropy":4.098399917,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.044731172,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"I don'thaveany idea how to display the largest and smallest number after the user enter -1. Note:I also have to display the sum of all of this number and the average of this sum.Here's my code so far:"
  },
  {
    "postid":2317,
    "postdate":1320619440,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.351096509,
    "concept_entropy":0,
    "UMASS(coherence)":0.410734212,
    "TFIDF(informativeness)":1.659222484,
    "polarity":-1,
    "normalized_text_entropy":4.351096509,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.373394738,
    "normalized_TFIDF":0.072204935,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"Seems like schoolwork, but what you could do is making a var and checking in your while if the input number is higher or lower then the saved var. And"
  },
  {
    "postid":2318,
    "postdate":1320621480,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.244491779,
    "concept_entropy":4.550797761,
    "UMASS(coherence)":0.534956822,
    "TFIDF(informativeness)":1.956072335,
    "polarity":-2,
    "normalized_text_entropy":4.244491779,
    "normalized_concept_entropy":4.550797761,
    "normalized_UMASS":0.486324384,
    "normalized_TFIDF":0.085123048,
    "normalized_polarity":0.222222222,
    "tagtext":"loops",
    "posttext":"I would make the following changes: Try this: FYI: Math.min/max could be used instead of the ternary statements, but the above is the simplest java that will achieve the result."
  },
  {
    "postid":2319,
    "postdate":1320619440,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.216694465,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.365209761,
    "polarity":0,
    "normalized_text_entropy":4.216694465,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.059410285,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"You need to use an \"if\" statement."
  },
  {
    "postid":2320,
    "postdate":1320619560,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.339822444,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.687749915,
    "TFIDF(informativeness)":1.35813237,
    "polarity":0,
    "normalized_text_entropy":4.339822444,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.625227195,
    "normalized_TFIDF":0.059102296,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Basically you need to check each all numbers with each other.Lets say we have numbers 1,2 and 3 here is the code: etc etc. I think you got idea"
  },
  {
    "postid":2321,
    "postdate":1404040680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.256985073,
    "concept_entropy":0,
    "UMASS(coherence)":0.442507151,
    "TFIDF(informativeness)":1.411769629,
    "polarity":0,
    "normalized_text_entropy":4.256985073,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.402279228,
    "normalized_TFIDF":0.061436447,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"This question is a follow-up from this linkThis is an application asking for a room's name then second prompt to ask for its dimensions to perform some calculations. right after everything has been done, the application should be able to return back to the first prompt asking for the name of room etc. And my main method running the application. Right now the application only returns to the second prompt instead of the first one so could you guys help me on this? Thanks in advance again guys!"
  },
  {
    "postid":2322,
    "postdate":1404041520,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.247249365,
    "concept_entropy":4.670129206,
    "UMASS(coherence)":0.413279485,
    "TFIDF(informativeness)":1.269885241,
    "polarity":-4,
    "normalized_text_entropy":4.247249365,
    "normalized_concept_entropy":4.670129206,
    "normalized_UMASS":0.375708623,
    "normalized_TFIDF":0.055262017,
    "normalized_polarity":0.185185185,
    "tagtext":"loops",
    "posttext":"You don't need to declare two scanners. You obviously had to include the first prompt into the outer while loop as well. \"Fixed\" code:"
  },
  {
    "postid":2323,
    "postdate":1404041640,
    "tag":"0",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.803618359,
    "concept_entropy":0,
    "UMASS(coherence)":0.405038027,
    "TFIDF(informativeness)":0.512376554,
    "polarity":0,
    "normalized_text_entropy":3.803618359,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.368216388,
    "normalized_TFIDF":0.02229726,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Try this:"
  },
  {
    "postid":2324,
    "postdate":1380911340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.180912893,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.355699927,
    "TFIDF(informativeness)":0.969760537,
    "polarity":2,
    "normalized_text_entropy":4.180912893,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.32336357,
    "normalized_TFIDF":0.042201391,
    "normalized_polarity":0.296296296,
    "tagtext":"loops",
    "posttext":"I am trying to add rows to my table using a loop. The code I have is as follows: Using a hard coded table, this method returns a functional table. hard coded looks like: This code gives me no result. I am inserting it into a panel and it is not showing up in the panel I'm not sure why this is not working because all research I have done has pointed me to doing it like this... any help is appreciated, thanks!"
  },
  {
    "postid":2325,
    "postdate":1380913500,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.206845517,
    "concept_entropy":0,
    "UMASS(coherence)":0.427477511,
    "TFIDF(informativeness)":1.333279453,
    "polarity":0,
    "normalized_text_entropy":4.206845517,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.388615919,
    "normalized_TFIDF":0.058020764,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Here you should use Call by value and initialize Row and Column Objects for the table, Try this code"
  },
  {
    "postid":2326,
    "postdate":1327698600,
    "tag":"0",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.19861835,
    "concept_entropy":0,
    "UMASS(coherence)":0.430647052,
    "TFIDF(informativeness)":0.649555698,
    "polarity":1,
    "normalized_text_entropy":4.19861835,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.39149732,
    "normalized_TFIDF":0.02826693,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Im a beginner with java and i am following tutorials by Thenewboston on youtube.I wanted to go to a bit more advanced (in my opinion... but not really) things.So heres the code.I want to make it so that it repeats to the beginning so i can enter another number without restarting the program.I believe i have to use the return command but i am not sure where and how to.Thank you!"
  },
  {
    "postid":2327,
    "postdate":1327699200,
    "tag":"0",
    "TFMvalue":0.769230769,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.20636405,
    "concept_entropy":0,
    "UMASS(coherence)":0.527568292,
    "TFIDF(informativeness)":0.849585144,
    "polarity":0,
    "normalized_text_entropy":4.20636405,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.479607538,
    "normalized_TFIDF":0.036971678,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2328,
    "postdate":1327699020,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.398344774,
    "concept_entropy":0,
    "UMASS(coherence)":0.406731491,
    "TFIDF(informativeness)":0.610125911,
    "polarity":-1,
    "normalized_text_entropy":4.398344774,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.369755901,
    "normalized_TFIDF":0.026551051,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"like in C or C++ you could use a while statement , askin after the execution is the user want go to exit or not also you could use do..while"
  },
  {
    "postid":2329,
    "postdate":1327699260,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.71990258,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.40951344,
    "TFIDF(informativeness)":0.413117305,
    "polarity":-4,
    "normalized_text_entropy":3.71990258,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.372284945,
    "normalized_TFIDF":0.017977763,
    "normalized_polarity":0.185185185,
    "tagtext":"loops",
    "posttext":"Wrap your code around loop and use to come out of loop if your condition is true. "
  },
  {
    "postid":2330,
    "postdate":1327699320,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.335912872,
    "concept_entropy":0,
    "UMASS(coherence)":0.486295211,
    "TFIDF(informativeness)":0.903554607,
    "polarity":-5,
    "normalized_text_entropy":4.335912872,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.442086555,
    "normalized_TFIDF":0.039320285,
    "normalized_polarity":0.166666667,
    "tagtext":"loops",
    "posttext":"Something like this:Note: Assuming all inputs are double, otherwise this program may fail. This is not perfect example too, because even though you don't say continue while loop iterates. It may be good example for break."
  },
  {
    "postid":2331,
    "postdate":1395453420,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.331974831,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.573876394,
    "TFIDF(informativeness)":0.44158025,
    "polarity":-5,
    "normalized_text_entropy":4.331974831,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.521705813,
    "normalized_TFIDF":0.019216394,
    "normalized_polarity":0.166666667,
    "tagtext":"loops",
    "posttext":"I have been trying different variations of for loops and have no clue how to make these patterns: Pattern 1 Pattern 2 Pattern 3 Pattern 4 My code that almost matched pattern 1 is the following but doesn't work like the example above."
  },
  {
    "postid":2332,
    "postdate":1395456060,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.4347029,
    "concept_entropy":4.412591925,
    "UMASS(coherence)":0.5500428,
    "TFIDF(informativeness)":0.947430224,
    "polarity":-3,
    "normalized_text_entropy":4.4347029,
    "normalized_concept_entropy":4.412591925,
    "normalized_UMASS":0.500038909,
    "normalized_TFIDF":0.041229635,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"}"
  },
  {
    "postid":2333,
    "postdate":1395455340,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.322508891,
    "concept_entropy":4.434922677,
    "UMASS(coherence)":0.348884669,
    "TFIDF(informativeness)":1.810782521,
    "polarity":6,
    "normalized_text_entropy":4.322508891,
    "normalized_concept_entropy":4.434922677,
    "normalized_UMASS":0.317167881,
    "normalized_TFIDF":0.078800423,
    "normalized_polarity":0.37037037,
    "tagtext":"loops",
    "posttext":"Your inner for loop will always count down to 1, because it keeps going until j is zero. Also, the number that the current row starts on will depend on the current row, because you used i in your assignment to j. To get pattern 1 both of those things will have to change."
  },
  {
    "postid":2334,
    "postdate":1395455400,
    "tag":"0",
    "TFMvalue":0.583333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.333313988,
    "concept_entropy":4.59316972,
    "UMASS(coherence)":0.340893717,
    "TFIDF(informativeness)":2.846876282,
    "polarity":3,
    "normalized_text_entropy":4.333313988,
    "normalized_concept_entropy":4.59316972,
    "normalized_UMASS":0.309903379,
    "normalized_TFIDF":0.123888458,
    "normalized_polarity":0.314814815,
    "tagtext":"loops",
    "posttext":"Since you posted an attempt for pattern one, I'll tell you a solution for pattern one - Output is pattern 1 in your question,"
  },
  {
    "postid":2335,
    "postdate":1395456660,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.314201313,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.372628601,
    "TFIDF(informativeness)":1.984408474,
    "polarity":1,
    "normalized_text_entropy":4.314201313,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.338753274,
    "normalized_TFIDF":0.086356161,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2336,
    "postdate":1391423820,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.195327469,
    "concept_entropy":4.58219133,
    "UMASS(coherence)":0.311511127,
    "TFIDF(informativeness)":1.579665409,
    "polarity":0,
    "normalized_text_entropy":4.195327469,
    "normalized_concept_entropy":4.58219133,
    "normalized_UMASS":0.283191934,
    "normalized_TFIDF":0.068742823,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Im trying to draw a Chess board in java, and in order to do this I am starting with drawing vertical lines. I have it done, but instead of writing every line out I want to implement a loop. I am a beginner, so some advice would really be helpful! Thank you in advance. "
  },
  {
    "postid":2337,
    "postdate":1391423880,
    "tag":"0",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.061147632,
    "concept_entropy":0,
    "UMASS(coherence)":0.225396153,
    "TFIDF(informativeness)":0.939524017,
    "polarity":0,
    "normalized_text_entropy":4.061147632,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.204905594,
    "normalized_TFIDF":0.040885578,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Replace the variying element with a loop variable, e.g. : Do this when you first get to the loop statement : Check this is true, if it is, execute the loop : Every time the loop executes, execute this afterwards. So, we are setting to 100, executing the loop and adding 100 to.If goes over 800, continue past the loop. This is not a nice way to draw to the UI Have your panel the method and use the graphics object passed in there to do your drawing this means drawing is only done when the panel is drawn.Then just call if you need to refresh it. As well as that if you are messing with the GUI you should probably put it inside the EDT thread so as to avoid multiple threads doing graphic operations (as they can interfere) This hands it off to a dedicated UI change thread queue."
  },
  {
    "postid":2338,
    "postdate":1391423940,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.086035337,
    "concept_entropy":0,
    "UMASS(coherence)":0.451059897,
    "TFIDF(informativeness)":1.084841825,
    "polarity":0,
    "normalized_text_entropy":4.086035337,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.410054452,
    "normalized_TFIDF":0.047209421,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"But you should NOT call - this will sooner or later lead to rendering errors. There are many resources on the web that show how to do this properly, e.g. "
  },
  {
    "postid":2339,
    "postdate":1391424240,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.305871399,
    "concept_entropy":0,
    "UMASS(coherence)":0.583982043,
    "TFIDF(informativeness)":1.522520168,
    "polarity":0,
    "normalized_text_entropy":4.305871399,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.530892766,
    "normalized_TFIDF":0.066256015,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":""
  },
  {
    "postid":2340,
    "postdate":1352485440,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.357216284,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.660062764,
    "TFIDF(informativeness)":1.633126779,
    "polarity":0,
    "normalized_text_entropy":4.357216284,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.600057058,
    "normalized_TFIDF":0.071069319,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"How can to find the number of words in string without using loops in Java?"
  },
  {
    "postid":2341,
    "postdate":1352491320,
    "tag":"0",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.939470571,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.609437912,
    "polarity":0,
    "normalized_text_entropy":3.939470571,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.070038443,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Try this. There are definitely no loops here (assuming does not iterate and does not make a copy), not even behind the scenes, except in the printing of course."
  },
  {
    "postid":2342,
    "postdate":1352485620,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.488262729,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.665019953,
    "TFIDF(informativeness)":1.491831191,
    "polarity":1,
    "normalized_text_entropy":4.488262729,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.604563594,
    "normalized_TFIDF":0.064920512,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"If you want to avoid loops, you'll have to use recursion."
  },
  {
    "postid":2343,
    "postdate":1352485740,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.452847704,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.260252694,
    "polarity":0,
    "normalized_text_entropy":4.452847704,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.054842834,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"Try something like this: Haven't tried if it works, but should."
  },
  {
    "postid":2344,
    "postdate":1352485560,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.33048322,
    "concept_entropy":4.470714374,
    "UMASS(coherence)":0.546809674,
    "TFIDF(informativeness)":3.489980006,
    "polarity":9,
    "normalized_text_entropy":4.33048322,
    "normalized_concept_entropy":4.470714374,
    "normalized_UMASS":0.497099704,
    "normalized_TFIDF":0.151874616,
    "normalized_polarity":0.425925926,
    "tagtext":"loops",
    "posttext":"1)You can use, and then get the length of the resulting array, but this will count anything that is not whitespace (e.g. numbers) as words 2)(you can tweak anything) between whitespace."
  },
  {
    "postid":2345,
    "postdate":1352485680,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.167326711,
    "concept_entropy":0,
    "UMASS(coherence)":0.714907238,
    "TFIDF(informativeness)":2.112389068,
    "polarity":6,
    "normalized_text_entropy":4.167326711,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.649915671,
    "normalized_TFIDF":0.091925535,
    "normalized_polarity":0.37037037,
    "tagtext":"loops",
    "posttext":"At each above step you can get the answer you are looking for deppednign how your requirements wants words(unique or duplciate)"
  },
  {
    "postid":2346,
    "postdate":1361990460,
    "tag":"0",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.423837919,
    "concept_entropy":0,
    "UMASS(coherence)":0.789748967,
    "TFIDF(informativeness)":1.896930055,
    "polarity":-3,
    "normalized_text_entropy":4.423837919,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.717953606,
    "normalized_TFIDF":0.082549334,
    "normalized_polarity":0.203703704,
    "tagtext":"loops",
    "posttext":"How do you add a number to the midpoint to an array (no arraylists) so no numbers are overwriten but the last number will not be in the array. My code:"
  },
  {
    "postid":2347,
    "postdate":1361990700,
    "tag":"0",
    "TFMvalue":0.705882353,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.451753905,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.50614511,
    "polarity":1,
    "normalized_text_entropy":4.451753905,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.065543416,
    "normalized_polarity":0.277777778,
    "tagtext":"loops",
    "posttext":"Shift all the items from the midpoint to the right, and then add the midpoint. If i were you i'd iterate in reverse."
  },
  {
    "postid":2348,
    "postdate":1361990760,
    "tag":"0",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.29276274,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.959058906,
    "polarity":-1,
    "normalized_text_entropy":4.29276274,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.085253015,
    "normalized_polarity":0.240740741,
    "tagtext":"loops",
    "posttext":"You could use to efficiently shift the elements: The problem with your current approach is that you irretrievably modify the elements before moving them into their final positions."
  },
  {
    "postid":2349,
    "postdate":1361990820,
    "tag":"0",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.30334799,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.619845961,
    "polarity":0,
    "normalized_text_entropy":4.30334799,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.070491373,
    "normalized_polarity":0.259259259,
    "tagtext":"loops",
    "posttext":"use "
  },
  {
    "postid":5789,
    "postdate":1272638340,
    "tag":"1",
    "TFMvalue":0.785714286,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.318692322,
    "concept_entropy":0,
    "UMASS(coherence)":0.796695627,
    "TFIDF(informativeness)":2.99522334,
    "polarity":10,
    "normalized_text_entropy":4.318692322,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.724268752,
    "normalized_TFIDF":0.130344126,
    "normalized_polarity":0.444444444,
    "tagtext":"inheritance",
    "posttext":"Consider the below code: So, I want to copy the 'dum' to dumtwo' and I want to change 'dum' without affecting the 'dumtwo'. But the above code is not doing that. When I change something in 'dum', the same change is happening in 'dumtwo' also. I guess, when I say dumtwo = dum, Java copies the reference only. So, is there any way to create a fresh copy of 'dum' and assign it to 'dumtwo' ?"
  },
  {
    "postid":5790,
    "postdate":1272638640,
    "tag":"1",
    "TFMvalue":0.9,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.312266102,
    "concept_entropy":0,
    "UMASS(coherence)":0.843649409,
    "TFIDF(informativeness)":2.1025885,
    "polarity":0,
    "normalized_text_entropy":4.312266102,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.766954008,
    "normalized_TFIDF":0.09149904,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Create a copy constructor: Every object has also a clone method which can be used to copy the object, but don't use it. It's way too easy to create a class and do improper clone method. If you are going to do that, read at least what Joshua Bloch has to say about it in."
  },
  {
    "postid":5791,
    "postdate":1272638640,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.184420688,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.55799671,
    "TFIDF(informativeness)":1.530311739,
    "polarity":0,
    "normalized_text_entropy":4.184420688,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.507269736,
    "normalized_TFIDF":0.066595083,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" Object Copying in Java. Let us Assume an object-, that contains two objects, and.shallow copying creates a new of the same class and copies all the fields to the new instance and returns it. provides a method and provides support for the shallow copying. A deep copy occurs when. Below image shows after a deep copy has been performed on it., but the objects contained within it have been copied as well. We can use to make a deep copy. Unfortunately, this approach has some problems too( ). is tricky to implement correctly. It's better to use,(as @egaga reply) or. For example will have method for Deep clone using serialization( ). If we need to clone Bean then there are couple of utility methods in ( )."
  },
  {
    "postid":5792,
    "postdate":1272638760,
    "tag":"1",
    "TFMvalue":0.9,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.279332401,
    "concept_entropy":0,
    "UMASS(coherence)":0.548972914,
    "TFIDF(informativeness)":1.831122608,
    "polarity":0,
    "normalized_text_entropy":4.279332401,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.499066285,
    "normalized_TFIDF":0.079685569,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Just follow as below: and wherever you want to get another object, simple perform cloning.e.g: "
  },
  {
    "postid":5793,
    "postdate":1272639000,
    "tag":"1",
    "TFMvalue":0.733333333,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.266411832,
    "concept_entropy":4.497869791,
    "UMASS(coherence)":0.895028863,
    "TFIDF(informativeness)":3.706056052,
    "polarity":6,
    "normalized_text_entropy":4.266411832,
    "normalized_concept_entropy":4.497869791,
    "normalized_UMASS":0.813662603,
    "normalized_TFIDF":0.161277669,
    "normalized_polarity":0.37037037,
    "tagtext":"inheritance",
    "posttext":"In the package there is a method: Example:"
  },
  {
    "postid":5794,
    "postdate":1354617780,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.22092328,
    "concept_entropy":0,
    "UMASS(coherence)":0.560116549,
    "TFIDF(informativeness)":1.503303735,
    "polarity":4,
    "normalized_text_entropy":4.22092328,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.509196863,
    "normalized_TFIDF":0.065419767,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"Yes, you are just making a reference to the object. You can clone the object if it implements. Check out this wiki article about copying objects."
  },
  {
    "postid":5795,
    "postdate":1364627640,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.299511844,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.915224443,
    "polarity":-2,
    "normalized_text_entropy":4.299511844,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.083345457,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"Yes. You need to your object."
  },
  {
    "postid":5796,
    "postdate":1280914860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.332155022,
    "concept_entropy":0,
    "UMASS(coherence)":0.488534676,
    "TFIDF(informativeness)":1.98514287,
    "polarity":1,
    "normalized_text_entropy":4.332155022,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.444122433,
    "normalized_TFIDF":0.08638812,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"To do that you have to clone the object in some way. Although Java has a cloning mechanism, don't use it if you don't have to. Create a copy method that does the copy work for you, and then do:is some more advice on different techniques for accomplishing a copy."
  },
  {
    "postid":5797,
    "postdate":1280915460,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":14,
    "Normalized_count":0.233333333,
    "text_entropy":4.321093349,
    "concept_entropy":2.923231429,
    "UMASS(coherence)":0.52526981,
    "TFIDF(informativeness)":1.415006646,
    "polarity":0,
    "normalized_text_entropy":4.321093349,
    "normalized_concept_entropy":2.923231429,
    "normalized_UMASS":0.477518009,
    "normalized_TFIDF":0.061577313,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Other than explicitly copying, another approach is to make the object immutable (no or other mutator methods). In this way the question never arises. Immutability becomes more difficult with larger objects, but that other side of that is that it pushes you in the direction of splitting into coherent small objects and composites."
  },
  {
    "postid":5798,
    "postdate":1280916000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.556694646,
    "concept_entropy":0,
    "UMASS(coherence)":0.567647733,
    "TFIDF(informativeness)":1.432042891,
    "polarity":2,
    "normalized_text_entropy":4.556694646,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.516043394,
    "normalized_TFIDF":0.062318685,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You can deep copy automatically with XStream. Add it to your project (if using maven) ThenWith this you have a copy without the need to implement any cloning interface"
  },
  {
    "postid":5799,
    "postdate":1280915340,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.999789584,
    "concept_entropy":4.199084272,
    "UMASS(coherence)":0.575706362,
    "TFIDF(informativeness)":1.464303317,
    "polarity":0,
    "normalized_text_entropy":3.999789584,
    "normalized_concept_entropy":4.199084272,
    "normalized_UMASS":0.52336942,
    "normalized_TFIDF":0.063722573,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Here's a decent explanation of if you end up needing it..."
  },
  {
    "postid":5800,
    "postdate":1280915040,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.231671433,
    "concept_entropy":0,
    "UMASS(coherence)":0.45602281,
    "TFIDF(informativeness)":1.41459729,
    "polarity":0,
    "normalized_text_entropy":4.231671433,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.414566191,
    "normalized_TFIDF":0.061559499,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Add and below code to your class Use this"
  },
  {
    "postid":5801,
    "postdate":1250626560,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.161938599,
    "concept_entropy":4.634969741,
    "UMASS(coherence)":0.721817035,
    "TFIDF(informativeness)":8.591084923,
    "polarity":-4,
    "normalized_text_entropy":4.161938599,
    "normalized_concept_entropy":4.634969741,
    "normalized_UMASS":0.656197305,
    "normalized_TFIDF":0.373861089,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":5802,
    "postdate":1279209480,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":14,
    "Normalized_count":0.233333333,
    "text_entropy":4.105952036,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.433577873,
    "TFIDF(informativeness)":0.764256128,
    "polarity":0,
    "normalized_text_entropy":4.105952036,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.394161703,
    "normalized_TFIDF":0.033258387,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I use Google's JSON library to serialize it then create a new instance of the serialized object. It does deep copy with a few restrictions: I also use this class to save user preferences, windows and whatnot to be reloaded at runtime. It is very easy to use and effective."
  },
  {
    "postid":5803,
    "postdate":1379095020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.230070173,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.451602494,
    "TFIDF(informativeness)":1.056726718,
    "polarity":1,
    "normalized_text_entropy":4.230070173,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.410547722,
    "normalized_TFIDF":0.045985927,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can try to implement and use the method; however, if you use the clone method you should - by standard - ALWAYS override's method."
  },
  {
    "postid":5804,
    "postdate":1250626740,
    "tag":"1",
    "TFMvalue":0.583333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.487697332,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.506065479,
    "TFIDF(informativeness)":0.693147181,
    "polarity":0,
    "normalized_text_entropy":4.487697332,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.460059526,
    "normalized_TFIDF":0.030163915,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Use a deep cloning utility:This will deep copy any java object, check it out at "
  },
  {
    "postid":5805,
    "postdate":1250630040,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.397103862,
    "concept_entropy":0,
    "UMASS(coherence)":0.596021202,
    "TFIDF(informativeness)":0.388838662,
    "polarity":1,
    "normalized_text_entropy":4.397103862,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.541837456,
    "normalized_TFIDF":0.016921221,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Deep Cloning is the answer, which demands implementing the interface and overriding the method. You will call it like this"
  },
  {
    "postid":5806,
    "postdate":1404482340,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.392769339,
    "concept_entropy":4.230107662,
    "UMASS(coherence)":0.341816988,
    "TFIDF(informativeness)":0.73123219,
    "polarity":0,
    "normalized_text_entropy":4.392769339,
    "normalized_concept_entropy":4.230107662,
    "normalized_UMASS":0.310742716,
    "normalized_TFIDF":0.031821273,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"From my searches for Serialization in Java most of the examples document writing to a file or reading from one. my question is lets say i have a serializable class AppMessage. I would like to transmit it as over sockets to another machine where it is rebuilt from bytes received. how could i achieve this please? thanks for your insight in advance."
  },
  {
    "postid":5807,
    "postdate":1269520800,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.180342973,
    "concept_entropy":4.476089286,
    "UMASS(coherence)":0.389732582,
    "TFIDF(informativeness)":0.49360481,
    "polarity":0,
    "normalized_text_entropy":4.180342973,
    "normalized_concept_entropy":4.476089286,
    "normalized_UMASS":0.354302347,
    "normalized_TFIDF":0.021480364,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Prepare bytes to send: Create object from bytes:"
  },
  {
    "postid":5808,
    "postdate":1269520980,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.143483676,
    "concept_entropy":0,
    "UMASS(coherence)":0.360316748,
    "TFIDF(informativeness)":0.519860385,
    "polarity":0,
    "normalized_text_entropy":4.143483676,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.32756068,
    "normalized_TFIDF":0.022622937,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The best way to do it is to use ApacheUtils: To Serialize: deserialize: Regards,"
  },
  {
    "postid":5809,
    "postdate":1269522240,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.957398256,
    "concept_entropy":4.400594097,
    "UMASS(coherence)":0.461736724,
    "TFIDF(informativeness)":0.788098849,
    "polarity":0,
    "normalized_text_entropy":3.957398256,
    "normalized_concept_entropy":4.400594097,
    "normalized_UMASS":0.419760658,
    "normalized_TFIDF":0.034295959,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The interviewer asked - Can we instantiate an abstract class? I said, No. He told me - Wrong, we can.I argued a bit on this. Then he told me to try this yourself at your home.Here, I'm creating instance of my class and calling method of abstract class. Can anyone please explain this to me? Was I really wrong during my interview?"
  },
  {
    "postid":5810,
    "postdate":1269521400,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.367887439,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.515587413,
    "TFIDF(informativeness)":3.539562416,
    "polarity":-18,
    "normalized_text_entropy":4.367887439,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.46871583,
    "normalized_TFIDF":0.15403231,
    "normalized_polarity":-0.074074074,
    "tagtext":"inheritance",
    "posttext":"No, you are not creating the instance of your abstract class here. Rather you are creating an instance of an of your abstract class. And then you are invoking the method on your reference pointing to. This behaviour is clearly listed in: - Emphasis mine. Also, in, you can read about the. I'll quote one statement from that here: - You can read about the complete procedure on the link I provided. To practically see that the class being instantiated is an, you just need to compile both your classes. Suppose you put those classes in two different files: Now, compile both your source files: Now in the directory where you compiled the source code, you will see the following class files: See that class -. It's the class file created by the compiler corresponding to the anonymous subclass you instantiated using the below code: So, it's clear that there is a different class being instantiated. It's just that, that class is given a name only after compilation by the compiler. In general, all the anonymous subclasses in your class will be named in this fashion: Those numbers denote the order in which those anonymous classes appear in the enclosing class."
  },
  {
    "postid":5811,
    "postdate":1269522000,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.422133096,
    "concept_entropy":0,
    "UMASS(coherence)":0.522348765,
    "TFIDF(informativeness)":1.016388302,
    "polarity":-1,
    "normalized_text_entropy":4.422133096,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.474862514,
    "normalized_TFIDF":0.044230506,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The above instantiates an anonymous inner class which is a subclass of the abstract class. It's not strictly equivalent to instantiating the abstract class itself. OTOH, every subclass instance is an instance of all its superclasses and interfaces, so most abstract classes are indeed instanciated by instantiating one of their concrete subclass. If the interviewer just said \"wrong!\" without explaining, and gave this example as a unique counter-example, I think he doesn't know what he's talking about, though."
  },
  {
    "postid":5812,
    "postdate":1269520920,
    "tag":"1",
    "TFMvalue":0.636363636,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.393465514,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.360316748,
    "TFIDF(informativeness)":0.639988568,
    "polarity":0,
    "normalized_text_entropy":4.393465514,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.32756068,
    "normalized_TFIDF":0.027850595,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" means that there's an anonymous implementation, not simple instantiation of an object, which should have been :. You can never instantiate an abstract class."
  },
  {
    "postid":5813,
    "postdate":1392305340,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.244240914,
    "concept_entropy":0,
    "UMASS(coherence)":0.62349237,
    "TFIDF(informativeness)":1.414309531,
    "polarity":0,
    "normalized_text_entropy":4.244240914,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.566811245,
    "normalized_TFIDF":0.061546976,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Just observations you could make: No, we can't. What we can do is creating an anonymous class (that's the third file) and instantiate it. The abstract superclass is not instantiate by but by java. output is:"
  },
  {
    "postid":5814,
    "postdate":1269520920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.324149957,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.209359397,
    "polarity":2,
    "normalized_text_entropy":4.324149957,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.052628094,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Abstract classes cannot be instantiated, but they can be subclassed.The best example isAlthough, but when you say \"Infactand an instance of this."
  },
  {
    "postid":5815,
    "postdate":1269522480,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.265317732,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.835616743,
    "polarity":2,
    "normalized_text_entropy":4.265317732,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.036363811,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You can simply answers, in just one line But, interviewer still not agree, then you can tell him/her And, according to Anonymous class,So, it might be possible that, interviewer would be interested to check your confidence level and how much you know about the OOPs . "
  },
  {
    "postid":5816,
    "postdate":1324021920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.199835872,
    "concept_entropy":0,
    "UMASS(coherence)":0.552944684,
    "TFIDF(informativeness)":0.905186163,
    "polarity":4,
    "normalized_text_entropy":4.199835872,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.502676985,
    "normalized_TFIDF":0.039391286,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"You can simply answers, in just one line But, interviewer still not agree, then you can tell him/her And, according to Anonymous class,So, it might be possible that, interviewer would be interested to check your confidence level and how much you know about the OOPs . "
  },
  {
    "postid":5817,
    "postdate":1327476300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.240250362,
    "concept_entropy":3.985064131,
    "UMASS(coherence)":0.606531291,
    "TFIDF(informativeness)":1.517412337,
    "polarity":1,
    "normalized_text_entropy":4.240250362,
    "normalized_concept_entropy":3.985064131,
    "normalized_UMASS":0.551392083,
    "normalized_TFIDF":0.066033735,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Abstract classes cannot be instantiated - this is by definition and design. From the JLS, Chapter 8. Classes: From JSE 6 java doc for Classes.newInstance(): You can, of course, instantiate a concrete subclass of an abstract class (including an anonymous subclass) and also carry out a typecast of an object reference to an abstract type. This sort of technical misunderstanding happens frequently in the real world when we deal with complex technologies and legalistic specifications. \"People Skills\" can be more important here than \"Technical Skills\".If competitively and aggressively trying to prove your side of the argument, then you could be theoretically right, but you could also do more damage in having a fight / damaging \"face\" / creating an enemy than it is worth.Be reconciliatory and understanding in resolving your differences.Who knows - maybe you're \"both right\" but working off slightly different meanings for terms?? Who knows - though not likely, it is possible the interviewer deliberately introduced a small conflict/misunderstanding to put you into a challenging situation and see how you behave emotionally and socially.Be gracious and constructive with colleagues, follow advice from seniors, and follow through after the interview to resolve any challenge/misunderstanding - via email or phone call.Shows you're motivated and detail-oriented."
  },
  {
    "postid":5818,
    "postdate":1324022460,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.178274881,
    "concept_entropy":4.087204302,
    "UMASS(coherence)":0.581952577,
    "TFIDF(informativeness)":1.469080217,
    "polarity":1,
    "normalized_text_entropy":4.178274881,
    "normalized_concept_entropy":4.087204302,
    "normalized_UMASS":0.529047797,
    "normalized_TFIDF":0.06393045,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"No, you can't instantite an abstract class.We instantiate only anonymous class.In abstract class we declare abstract methods and define concrete methods only."
  },
  {
    "postid":5819,
    "postdate":1324023600,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.263794615,
    "concept_entropy":4.506965127,
    "UMASS(coherence)":0.497020129,
    "TFIDF(informativeness)":1.956653431,
    "polarity":0,
    "normalized_text_entropy":4.263794615,
    "normalized_concept_entropy":4.506965127,
    "normalized_UMASS":0.451836481,
    "normalized_TFIDF":0.085148336,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It is a well-established fact that can be instantiated as everyone answered. When the program defines anonymous class, the compiler actually creates a new class with different name (has the pattern where is the anonymous class number) So if you decompile this Java class you will find the code as below: my.class poly$1.class (the generated class of the \"anonymous class\") ploly.cass"
  },
  {
    "postid":5820,
    "postdate":1324023060,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.108217189,
    "concept_entropy":0,
    "UMASS(coherence)":0.579897257,
    "TFIDF(informativeness)":1.199451956,
    "polarity":0,
    "normalized_text_entropy":4.108217189,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.527179325,
    "normalized_TFIDF":0.052196948,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It's impossible to instantiate an abstract class. What you realy can do, is implement some common methods in an abstract class and let others unimplemented (declaring them abstract) and let the concrete descenders implement them depending on theyr needs. Then you can make a factory, which returns an instance of this abstract class (actually his implementor). In the factory you then deside, which implementor to choose. This is known as factory design pattern: The concrete implementor only needs to implement the methods declared as abstract but will have acces to the logic implemented in those classes in abstract class, which are not declared absract: public class FileInputGridManager extends AbstractGridManager { } Then finally the factory looks something like this: The receiver of AbstractGridManager would call the methods on him and get the logic, implemented in the concrete descenders (and partually in the abstract class methods) without knowing what is the concrete implementation he got. This is also know like inversion of control or dependency injection "
  },
  {
    "postid":5821,
    "postdate":1353377700,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":3.169925001,
    "concept_entropy":0,
    "UMASS(coherence)":0.463873715,
    "TFIDF(informativeness)":1.329846509,
    "polarity":0,
    "normalized_text_entropy":3.169925001,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.421703377,
    "normalized_TFIDF":0.057871371,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Extending a class doesn't mean that you are instantiating the class.Actually in your case what you are doing is creating an instance of the subclass, I am pretty sure that Abstract classes are made to not allow initiating , SO I say no you can't instantiate a Abstract class. All you can do is to extend it or inherit it.You can't directly instantiate an Abstract class, But It doesn't mean that you can't get an instance of class(not actully an instace oforiginal abstract class) Indirectly , I mean you can not instaintite the orginial abstract class but you can create an Empty class and inherit it from Abstract class then Instantiated the dervied class , so you get access to all the methods and properties in Abstract class via the derived class instance"
  },
  {
    "postid":5822,
    "postdate":1268027640,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.208432166,
    "concept_entropy":0,
    "UMASS(coherence)":0.664777331,
    "TFIDF(informativeness)":1.42511243,
    "polarity":0,
    "normalized_text_entropy":4.208432166,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.604343028,
    "normalized_TFIDF":0.06201709,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"can not create object of a abstract class can create variables (can behave like datatypes) if a child can not overide at least of one abstract method of the parent then child also becomes abstract Abstract classes are useless without child classes."
  },
  {
    "postid":5823,
    "postdate":1268027820,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.176207927,
    "concept_entropy":0,
    "UMASS(coherence)":0.69581469,
    "TFIDF(informativeness)":1.774839726,
    "polarity":1,
    "normalized_text_entropy":4.176207927,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.632558809,
    "normalized_TFIDF":0.077236288,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"What are, and in the context of java? Please illustrate your answer with examples."
  },
  {
    "postid":5824,
    "postdate":1268028120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.083204576,
    "concept_entropy":0,
    "UMASS(coherence)":0.520568392,
    "TFIDF(informativeness)":1.231636846,
    "polarity":0,
    "normalized_text_entropy":4.083204576,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.473243993,
    "normalized_TFIDF":0.053597549,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Java (and any other programming language) is modelled in terms of and.At the theoretical level, a is a representation for some quantum of information, and a is a set of values.When we say value X of type Y, we are simply saying that X is a member of the set of values that is the type Y. So that's what the term instance really means: it describes a relationship not a thing. The type system of the Java programming language supports two kinds of types, primitive types and reference types.The reference types are further divided into the Classes and array types.A Java Object is (according to the JLS) an instance of a reference type; i.e. either an array or an instance of a Class. That's the type theoretic view. In practice, most Java developers treat the words \"instance\" and \"object\" as synonyms.(And that includes me then I'm trying to explain something quickly.)And most developers use \"value\" rather than \"instance\" to refer to an instance of a primitive type."
  },
  {
    "postid":5825,
    "postdate":1277741100,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.24808424,
    "concept_entropy":4.545558646,
    "UMASS(coherence)":0.570152989,
    "TFIDF(informativeness)":0.957600924,
    "polarity":1,
    "normalized_text_entropy":4.24808424,
    "normalized_concept_entropy":4.545558646,
    "normalized_UMASS":0.518320899,
    "normalized_TFIDF":0.041672237,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"A is a blueprint which you use to create. An object is an of a class - it's a concrete 'thing' that you made using a specific class. So, 'object' and 'instance' are the same thing, but the word 'instance' indicates the relationship of an object to its class. This is easy to understand if you look at an example. For example, suppose you have a class. Your own house is an object and is an instance of class. Your sister's house is another object (another instance of class). The class describes the concept of what a house is, and there are specific, concrete houses which are objects and instances of class. Note: This is exactly the same in Java as in all object oriented programming languages."
  },
  {
    "postid":5826,
    "postdate":1268029920,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.118253524,
    "concept_entropy":4.535486979,
    "UMASS(coherence)":0.573569372,
    "TFIDF(informativeness)":0.373233097,
    "polarity":1,
    "normalized_text_entropy":4.118253524,
    "normalized_concept_entropy":4.535486979,
    "normalized_UMASS":0.521426702,
    "normalized_TFIDF":0.016242108,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"A class is basically a definition, and contains the object's code. An object is an instance of a class for example if you saythe class is the String class, which describes the object (instance) word. When a class is declared, no memory is allocated so class is just a template. When the object of the class is declared, memory is allocated."
  },
  {
    "postid":5827,
    "postdate":1277789880,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.345435727,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.402646705,
    "TFIDF(informativeness)":1.965743424,
    "polarity":1,
    "normalized_text_entropy":4.345435727,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.366042459,
    "normalized_TFIDF":0.085543908,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"mustafabar's answer is good, but based on the beginner level of the question (no offence meant, I was a beginner once, too) I'd recommend some reading up.Here is a good place to start."
  },
  {
    "postid":5828,
    "postdate":1375075440,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.289675644,
    "concept_entropy":0,
    "UMASS(coherence)":0.730195236,
    "TFIDF(informativeness)":1.323577633,
    "polarity":0,
    "normalized_text_entropy":4.289675644,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.663813851,
    "normalized_TFIDF":0.057598566,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Class is Data Type,You use this type to create object."
  },
  {
    "postid":5829,
    "postdate":1268027880,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.048498981,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.120249768,
    "polarity":-1,
    "normalized_text_entropy":4.048498981,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.04875028,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I like Jesper's explanation in layman terms By improvising examples from Jesper's answer, myHouse and myCar are objectsmyHouse is an instance of House (relates Object-myHouse to its Class-House) myCar is an instance of Car in short \"myHouse is an of House\" which is same as saying \"myHouse is an of House\" "
  },
  {
    "postid":5830,
    "postdate":1355838120,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.752562864,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.48002122,
    "TFIDF(informativeness)":0.701307738,
    "polarity":0,
    "normalized_text_entropy":3.752562864,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.436382927,
    "normalized_TFIDF":0.030519041,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Any kind of data your computer stores and processes is in its most basic representation a row of bits. The way those bits are interpreted is done through data types. Data types can be primitive or complex. Primitive data types are - for instance - int or double. They have a specific length and a specific way of being interpreted. In the case of an integer, usually the first bit is used for the sign, the others are used for the value. Complex data types can be combinations of primitive and other complex data types and are called \"Class\" in Java. You can define the complex data type PeopleName consisting of two Strings called first and last name. Each String in Java is another complex data type. Strings in return are (probably) implemented using the primitive data type char for which Java knows how many bits they take to store and how to interpret them. When you create an instance of a data type, you get an object and your computers reserves some memory for it and remembers its location and the name of that instance. An instance of PeopleName in memory will take up the space of the two String variables plus a bit more for bookkeeping. An integer takes up 32 bits in Java. Complex data types can have methods assigned to them. Methods can perform actions on their arguments or on the instance of the data type you call this method from. If you have two instances of PeopleName called p1 and p2 and you call a method p1.getFirstName(), it usually returns the first name of the first person but not the second person's."
  },
  {
    "postid":5831,
    "postdate":1395144000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.29883907,
    "concept_entropy":4.23309169,
    "UMASS(coherence)":0.674270681,
    "TFIDF(informativeness)":1.04882765,
    "polarity":1,
    "normalized_text_entropy":4.29883907,
    "normalized_concept_entropy":4.23309169,
    "normalized_UMASS":0.612973346,
    "normalized_TFIDF":0.04564218,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In java, the objects are spawned on heap memory. These require reference to be pointed and used in our application. The reference has the memory location of the object with which we can use the objects in our application. A reference in short is nothing but a name of the variable which stores the address of the object instantiated on a memory location. An is a general term for. FYI, is a class. For Example, For the above code snippet, ref is the reference for an object of class A generated on heap."
  },
  {
    "postid":5832,
    "postdate":1224090420,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.265687045,
    "concept_entropy":0,
    "UMASS(coherence)":0.492010189,
    "TFIDF(informativeness)":1.766957573,
    "polarity":3,
    "normalized_text_entropy":4.265687045,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.44728199,
    "normalized_TFIDF":0.076893278,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"If you have a program that models cars you have a class to represent cars,so in Code you could say: someCar is now an instance of the class Car. If the program is used at a repairshop and the someCar represents your car in their system, then your car is the object. So Car is a class that can represent any real world carsomeCar is an instance of the Car class andsomeCare represents real life object (your car) however instance and object is very often used interchangably when it comes to discussing coding"
  },
  {
    "postid":5833,
    "postdate":1224938220,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.297858686,
    "concept_entropy":4.390350727,
    "UMASS(coherence)":0.764997123,
    "TFIDF(informativeness)":3.224904589,
    "polarity":-1,
    "normalized_text_entropy":4.297858686,
    "normalized_concept_entropy":4.390350727,
    "normalized_UMASS":0.69545193,
    "normalized_TFIDF":0.140339241,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Here is the java package-tree: I read a tutorial on Java which stated that in Java arrays are objects. Where is the array class? How comes we can make arrays like this: and the arrays will inherit methods from Object; for example: What's going on here? As per the answers, I now know it is a class in package. I have now createda package in my Android project and have added a class called Array.java to it. To confirm this is in the way of the original class, Eclipse gave me the error \"... already exists in path/to/android.jar\" If I write out the same class as but change the method... this should work within my application right?"
  },
  {
    "postid":5834,
    "postdate":1328970540,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.309864697,
    "concept_entropy":0,
    "UMASS(coherence)":0.796263383,
    "TFIDF(informativeness)":1.781127815,
    "polarity":-1,
    "normalized_text_entropy":4.309864697,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.723875803,
    "normalized_TFIDF":0.077509929,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Fromwhere the string is the run-time type signature for the class object. And yes array extends Object you can invoke toString() on arrayObejct also see the above example "
  },
  {
    "postid":5835,
    "postdate":1224104820,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.26892962,
    "concept_entropy":4.525714705,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.575490527,
    "polarity":-5,
    "normalized_text_entropy":4.26892962,
    "normalized_concept_entropy":4.525714705,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.155595806,
    "normalized_polarity":0.166666667,
    "tagtext":"inheritance",
    "posttext":"Arrays are a language feature - they have a specific syntax for declaring and accessing. And their class definition is hidden from you. They have a representation in the refleciton API -Btw, the field is not inherited from. The,, etc. methods are inherited."
  },
  {
    "postid":5836,
    "postdate":1224096060,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.252695334,
    "concept_entropy":0,
    "UMASS(coherence)":0.623179078,
    "TFIDF(informativeness)":1.915750379,
    "polarity":2,
    "normalized_text_entropy":4.252695334,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.566526435,
    "normalized_TFIDF":0.083368344,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"It does extend "
  },
  {
    "postid":5837,
    "postdate":1224097440,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.245581747,
    "concept_entropy":4.377498953,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.395220796,
    "polarity":0,
    "normalized_text_entropy":4.245581747,
    "normalized_concept_entropy":4.377498953,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.147750948,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Slight elaboration of the above code segment: Results: As can be seen, \"[I\" is the name of the class which we would call, in English, \"array of int\".The class is a \"full citizenship\" Java class, which responds to all the methods of Object.The only difference is that the syntax is different and it doesn't support the method of Class. (The classes \"[I\", \"[C\", et al, are \"pre-defined\" in the JVM -- there are no .class files corresponding to them.Java also will implicitly create, on the fly, the \"[MyJavaClass;\" class if you have an array of \"MyJavaClass\" in your program.)"
  },
  {
    "postid":5838,
    "postdate":1385035620,
    "tag":"1",
    "TFMvalue":0.615384615,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.023740632,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.027212009,
    "polarity":2,
    "normalized_text_entropy":4.023740632,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.044701525,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Why in Java you're able to add Strings with the + operator, when String is a class?In thecode I did not find any implementation for this operator. Does this concept violate object orientation?"
  },
  {
    "postid":5839,
    "postdate":1224093300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.290740795,
    "concept_entropy":0,
    "UMASS(coherence)":0.718363939,
    "TFIDF(informativeness)":2.058582942,
    "polarity":2,
    "normalized_text_entropy":4.290740795,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.653058126,
    "normalized_TFIDF":0.089584036,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Let's look at the following simple expressions in Java The compiler converts into a internally and uses to \"add\" the integer to the string.The optimized version will not actually do a full wrapped String conversion first. This is a good illustration of an optimized version used by the compiler, albeit without the conversion of a primitive, where you can see the compiler changing things into a StringBuilder in the background: This java code: Generates this - see how the two concatenation styles lead to the very same bytecode: Looking at the example above and how the byte code based on the source code in the given example is generated, you will be able to notice that the compiler has internally transformed the following statement intoIn other words, the operator in string concatenation is effectively a shorthand for the more verbose idiom."
  },
  {
    "postid":5840,
    "postdate":1224096720,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.204199448,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.436205967,
    "polarity":5,
    "normalized_text_entropy":4.204199448,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.062499851,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"It is Java compiler feature which checks the operands of operator. And based on the operands it generates the byte code: :"
  },
  {
    "postid":5841,
    "postdate":1224098940,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.336442022,
    "concept_entropy":0,
    "UMASS(coherence)":0.481115058,
    "TFIDF(informativeness)":2.010566981,
    "polarity":0,
    "normalized_text_entropy":4.336442022,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.437377325,
    "normalized_TFIDF":0.087494509,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It doesn't. The compiler does it. Strictly speaking, the compiler the + operator for String operands."
  },
  {
    "postid":5842,
    "postdate":1304079300,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.277539665,
    "concept_entropy":4.51576994,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.806230881,
    "polarity":-1,
    "normalized_text_entropy":4.277539665,
    "normalized_concept_entropy":4.51576994,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.122119679,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"1) If left hand side operand is String it works as concatenation. 2) If left hand side operand is Integer it works as addition operator"
  },
  {
    "postid":5843,
    "postdate":1248830880,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.199337986,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.890720634,
    "polarity":-1,
    "normalized_text_entropy":4.199337986,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.082279116,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The operator is usually replaced by a at compile time. Check this for more details on that matter."
  },
  {
    "postid":5844,
    "postdate":1248831360,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.337287605,
    "concept_entropy":0,
    "UMASS(coherence)":0.614514424,
    "TFIDF(informativeness)":2.994143858,
    "polarity":5,
    "normalized_text_entropy":4.337287605,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.558649476,
    "normalized_TFIDF":0.13029715,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"The Java language provides special support for the string concatenation operator (+) and for conversion of other objects to strings. String concatenation is implemented through the(or) class and its method."
  },
  {
    "postid":5845,
    "postdate":1361305800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.278844414,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.381804751,
    "polarity":1,
    "normalized_text_entropy":4.278844414,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.060132455,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The meaning of the operator when applied to is defined by the language, as everyone has written already. Since you don't seem to find this sufficiently convincing, consider this: Ints, floats and doubles all have different binary representations, and therefore adding two ints is a different operation, in terms of bit manipulation, than adding two floats: For ints you can add bit by bit, carrying a bit and checking for overflow; for floats you must deal with the mantissas and exponents separately.So, in principle, \"addition\" depends on the nature of the objects being \"added\". Java defines it for Strings as well as ints and floats (longs, doubles, ...)"
  },
  {
    "postid":5846,
    "postdate":1248831300,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.219209272,
    "concept_entropy":3.902174814,
    "UMASS(coherence)":0.487526779,
    "TFIDF(informativeness)":1.223464796,
    "polarity":0,
    "normalized_text_entropy":4.219209272,
    "normalized_concept_entropy":3.902174814,
    "normalized_UMASS":0.443206163,
    "normalized_TFIDF":0.053241923,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If the hashCode() method is not overridden, what will be the result of invoking hashCode() on any object in Java?"
  },
  {
    "postid":5847,
    "postdate":1403845140,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.944972197,
    "concept_entropy":4.49315337,
    "UMASS(coherence)":0.334956362,
    "TFIDF(informativeness)":1.363007257,
    "polarity":0,
    "normalized_text_entropy":3.944972197,
    "normalized_concept_entropy":4.49315337,
    "normalized_UMASS":0.304505784,
    "normalized_TFIDF":0.059314438,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Typically, hashCode() just returns the object's address in memory if you don't overload it. From:"
  },
  {
    "postid":5848,
    "postdate":1248868020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.268613355,
    "concept_entropy":3.787301737,
    "UMASS(coherence)":0.372538214,
    "TFIDF(informativeness)":1.41510529,
    "polarity":2,
    "normalized_text_entropy":4.268613355,
    "normalized_concept_entropy":3.787301737,
    "normalized_UMASS":0.338671104,
    "normalized_TFIDF":0.061581606,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"The implementation of may differ from class to class but the contract for is very specific and stated clearly and explicitly in the:is closely tied to and if you override, you should also override."
  },
  {
    "postid":5849,
    "postdate":1377033420,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.032831085,
    "concept_entropy":0,
    "UMASS(coherence)":0.293122853,
    "TFIDF(informativeness)":0.599578309,
    "polarity":0,
    "normalized_text_entropy":4.032831085,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.266475321,
    "normalized_TFIDF":0.026092048,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If hashcode is not overriden you will call Object's hashcode, here is an excerpt from its javadoc:"
  },
  {
    "postid":5850,
    "postdate":1402267860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.487663115,
    "concept_entropy":4.263791029,
    "UMASS(coherence)":0.452568986,
    "TFIDF(informativeness)":1.950434628,
    "polarity":2,
    "normalized_text_entropy":4.487663115,
    "normalized_concept_entropy":4.263791029,
    "normalized_UMASS":0.411426351,
    "normalized_TFIDF":0.08487771,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"A hashcode is useful for storing an object in a collection, such as a hashset. By allowing an Object to define a Hashcode as something unique it allows the algorithm of the HashSet to work effectively. Object itself uses the Object's address in memory, which is very unique, but may not be very useful if two different objects (for example two identical strings) should be considered the same, even if they are duplicated in memory."
  },
  {
    "postid":5851,
    "postdate":1238065440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.304429599,
    "concept_entropy":3.980963298,
    "UMASS(coherence)":0.346278297,
    "TFIDF(informativeness)":1.496496208,
    "polarity":2,
    "normalized_text_entropy":4.304429599,
    "normalized_concept_entropy":3.980963298,
    "normalized_UMASS":0.314798452,
    "normalized_TFIDF":0.065123521,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"the default hashcode implementation gives the internal address of the object in the jvm, as a 32 bits integer. Thus, two different (in memory) objects will have different hashcodes. This is consistent with the default implementation of equals. If you want to override equals for your objects, you will have to adapt hashCode so that they are consistent. See for a good overview."
  },
  {
    "postid":5852,
    "postdate":1257505800,
    "tag":"1",
    "TFMvalue":0.846153846,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.244737346,
    "concept_entropy":0,
    "UMASS(coherence)":0.602985206,
    "TFIDF(informativeness)":1.695365029,
    "polarity":0,
    "normalized_text_entropy":4.244737346,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.548168369,
    "normalized_TFIDF":0.073777762,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Two objects with different hash code must not be equal with regard to equals()must implyHowever, two objects that are not equal with regard to equals() can have the same hash code. Storing these objects in a set or map will become less efficient if many objects have the same hash code."
  },
  {
    "postid":5853,
    "postdate":1238065740,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.330281962,
    "concept_entropy":0,
    "UMASS(coherence)":0.445928526,
    "TFIDF(informativeness)":1.186632963,
    "polarity":0,
    "normalized_text_entropy":4.330281962,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.405389569,
    "normalized_TFIDF":0.0516391,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"returns 6 digit hex number. This is usually the memory location of the slot where the object is addressed. From an algorithmic per-se, I guess JDK does double hashing (native implementation) which is one of the best hashing functions for open addressing. This double hashing scheme highly reduces the possibility of collisions. The following post will give a supportive idea -"
  },
  {
    "postid":5854,
    "postdate":1310144880,
    "tag":"1",
    "TFMvalue":0.545454545,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.107837954,
    "concept_entropy":0,
    "UMASS(coherence)":0.494698644,
    "TFIDF(informativeness)":1.044845635,
    "polarity":0,
    "normalized_text_entropy":4.107837954,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.44972604,
    "normalized_TFIDF":0.045468894,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You should try to implement the hash code so that different objects will give different results. I don't think there is a standard way of doing this. Read this article for some."
  },
  {
    "postid":5855,
    "postdate":1238066220,
    "tag":"1",
    "TFMvalue":0.615384615,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.356525492,
    "concept_entropy":3.486440502,
    "UMASS(coherence)":0.475846723,
    "TFIDF(informativeness)":2.72833007,
    "polarity":1,
    "normalized_text_entropy":4.356525492,
    "normalized_concept_entropy":3.486440502,
    "normalized_UMASS":0.43258793,
    "normalized_TFIDF":0.118729644,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Not really an answer but adding to my earlier commentI tried to do something like this: But the hashcode indeed doesn't change... can someone tell me how Sun's JDK actually implements Obect.hashcode?"
  },
  {
    "postid":5856,
    "postdate":1373857860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.159988439,
    "concept_entropy":0,
    "UMASS(coherence)":0.520568392,
    "TFIDF(informativeness)":1.313721348,
    "polarity":-1,
    "normalized_text_entropy":4.159988439,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.473243993,
    "normalized_TFIDF":0.057169647,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"When overriding the equals() function of java.lang.Object, the javadocs suggest that,The hashCode() method must return a for each object (this is easy to do when comparing objects based on memory location, simply return the address of the object) How should a hashCode() method be overriden so that it returns a for each object based only on that object's properities?"
  },
  {
    "postid":5857,
    "postdate":1238065800,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.454035161,
    "concept_entropy":3.617809684,
    "UMASS(coherence)":0.426192371,
    "TFIDF(informativeness)":2.583056244,
    "polarity":3,
    "normalized_text_entropy":4.454035161,
    "normalized_concept_entropy":3.617809684,
    "normalized_UMASS":0.38744761,
    "normalized_TFIDF":0.112407714,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"It doesn't say the hashcode for an object has to be completely unique, only that the hashcode for two equal objects returns the same hashcode.It's entirely legal to have two non-equal objects return the same hashcode.However, the more unique a hashcode distribution is over a set of objects, the better performance you'll get out of HashMaps and other operations that use the hashCode. IDEs such as IntelliJ Idea have built-in generators for equals and hashCode that generally do a pretty good job at coming up with \"good enough\" code for most objects (and probably better than some hand-crafted overly-clever hash functions). For example, here's a hashCode function that Idea generates for your People class:"
  },
  {
    "postid":5858,
    "postdate":1397439240,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.207601896,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.476328878,
    "TFIDF(informativeness)":0.87539189,
    "polarity":0,
    "normalized_text_entropy":4.207601896,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.433026253,
    "normalized_TFIDF":0.038094719,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I won't go in to the details of hashCode uniqueness as Marc has already addressed it. For your class, you first need to decide what equality of a person means. Maybe equality is based solely on their name, maybe it's based on name and age. It will be domain specific. Let's say equality is based on name and age. Your overridden would look like Any time you override you must override. Furthermore, can't use any more fields in its computation than did. Most of the time you must add or exclusive-or the hash code of the various fields (hashCode should be fast to compute). So a valid method might look like: Note that the following is as it uses a field that didn't (height). In this case two \"equals\" objects could have a different hash code. Also, it's perfectly valid for two non-equals objects to have the same hash code: In this case Jane age 30 is not equal to Bob age 30, yet both their hash codes are 30. While valid this is undesirable for performance in hash-based collections."
  },
  {
    "postid":5859,
    "postdate":1238066340,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.273232628,
    "concept_entropy":0,
    "UMASS(coherence)":0.355875425,
    "TFIDF(informativeness)":0.738207746,
    "polarity":0,
    "normalized_text_entropy":4.273232628,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.323523114,
    "normalized_TFIDF":0.032124831,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Another question asks if there are some basic low-level things that all programmers should know, and I think hash lookups are one of those. So here goes. A hash table (note that I'm not using an actual classname) is basically an array of linked lists. To find something in the table, you first compute the hashcode of that something, then mod it by the size of the table. This is an index into the array, and you get a linked list at that index. You then traverse the list until you find your object. Since array retrieval is O(1), and linked list traversal is O(n), you want a hash function that creates as random a distribution as possible, so that objects will be hashed to different lists. Every object could return the value 0 as its hashcode, and a hash table would still work, but it would essentially be a long linked-list at element 0 of the array. You also generally want the array to be large, which increases the chances that the object will be in a list of length 1. The Java HashMap, for example, increases the size of the array when the number of entries in the map is > 75% of the size of the array. There's a tradeoff here: you can have a huge array with very few entries and waste memory, or a smaller array where each element in the array is a list with > 1 entries, and waste time traversing. A perfect hash would assign each object to a unique location in the array, with no wasted space. The term \"perfect hash\" is a real term, and in some cases you can create a hash function that provides a unique number for each object. This is only possible when you know the set of all possible values. In the general case, you can't achieve this, and there will be some values that return the same hashcode. This is simple mathematics: if you have a string that's more than 4 bytes long, you can't create a unique 4-byte hashcode. One interesting tidbit: hash arrays are generally sized based on prime numbers, to give the best chance for random allocation when you mod the results, regardless of how random the hashcodes really are. Edit based on comments: 1) A linked list is not the only way to represent the objects that have the same hashcode, although that is the method used by the JDK 1.5 HashMap. Although less memory-efficient than a simple array, it does arguably create less churn when rehashing (because the entries can be unlinked from one bucket and relinked to another). 2) As of JDK 1.4, the HashMap class uses an array sized as a power of 2; prior to that it used 2^N+1, which I believe is prime for N <= 32. This does not speed up array indexing per se, but does allow the array index to be computed with a bitwise AND rather than a division, as noted by Neil Coffey. Personally, I'd question this as premature optimization, but given the list of authors on HashMap, I'll assume there is some real benefit."
  },
  {
    "postid":5860,
    "postdate":1382118780,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.218269292,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.352041067,
    "TFIDF(informativeness)":0.796392365,
    "polarity":0,
    "normalized_text_entropy":4.218269292,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.320037334,
    "normalized_TFIDF":0.03465687,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Joshua Bloch explains it best in of his \"Effective Java\"."
  },
  {
    "postid":5861,
    "postdate":1342527840,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.249189884,
    "concept_entropy":4.346255266,
    "UMASS(coherence)":0.491330837,
    "TFIDF(informativeness)":1.636985709,
    "polarity":-1,
    "normalized_text_entropy":4.249189884,
    "normalized_concept_entropy":4.346255266,
    "normalized_UMASS":0.446664397,
    "normalized_TFIDF":0.071237249,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"In general the hash code cannot be unique, as there are more values than possible hash codes (integers).A good hash code distributes the values well over the integers.A bad one could always give the same value and still be logically correct, it would just lead to unacceptably inefficient hash tables. Equal values must have the same hash value for hash tables to work correctly.Otherwise you could add a key to a hash table, then try to look it up via an equal value with a different hash code and not find it.Or you could put an equal value with a different hash code and have two equal values at different places in the hash table. In practice you usually select a subset of the fields to be taken into account in both the hashCode() and the equals() method."
  },
  {
    "postid":5862,
    "postdate":1335243600,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.223149178,
    "concept_entropy":0,
    "UMASS(coherence)":0.556517004,
    "TFIDF(informativeness)":1.518365281,
    "polarity":-8,
    "normalized_text_entropy":4.223149178,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.505924549,
    "normalized_TFIDF":0.066075205,
    "normalized_polarity":0.111111111,
    "tagtext":"inheritance",
    "posttext":"I think you misunderstood it. The hashcode does not have to be unique to each object (after all, it is a hash code) though you obviously don't want it to be identical for all objects. You do, however, need it to be identical to all objects that are equal, otherwise things like the standard collections would not work (e.g., you'd look up something in the hash set but would not find it). For straightforward attributes, some IDEs have hashcode function builders. If you don't use IDEs, consider using Apahce Commons and the class HashCodeBuilder"
  },
  {
    "postid":5863,
    "postdate":1335244260,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.411121098,
    "concept_entropy":0,
    "UMASS(coherence)":0.773025428,
    "TFIDF(informativeness)":1.306343715,
    "polarity":5,
    "normalized_text_entropy":4.411121098,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.702750389,
    "normalized_TFIDF":0.056848592,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"The only contractual obligation for hashCode is for it to be. The fields used in creating the hashCode value must be the same or a subset of the fields used in the equals method. This means returning 0 for all values is valid, although not efficient. One can check if hashCode is consistent via a unit test.I written an abstract class called, which does a handful of hashCode checks.One simply has to extend the test case and implement two or three factory methods. The test does a very crude job of testing if the hashCode is efficient."
  },
  {
    "postid":5864,
    "postdate":1335244320,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.358871968,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.925976866,
    "polarity":-2,
    "normalized_text_entropy":4.358871968,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.040296042,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"This is what documentation tells us as for hash code method @ javadoc"
  },
  {
    "postid":5865,
    "postdate":1403606340,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.223874893,
    "concept_entropy":4.388839707,
    "UMASS(coherence)":0.39792421,
    "TFIDF(informativeness)":2.31019978,
    "polarity":1,
    "normalized_text_entropy":4.223874893,
    "normalized_concept_entropy":4.388839707,
    "normalized_UMASS":0.361749282,
    "normalized_TFIDF":0.100533729,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"There is a notion of business key, which determines uniqueness of separate instances of the same type. Each specific type (class) that models a separate entity from the target domain (e.g. vehicle in a fleet system) should have a business key, which is represented by one or more class fields. Methods equals() and hasCode() should both be implemented using the fields, which make up a business key. This ensures that both methods consistent with each other."
  },
  {
    "postid":5866,
    "postdate":1406350980,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.298645476,
    "concept_entropy":4.457134084,
    "UMASS(coherence)":0.70394135,
    "TFIDF(informativeness)":3.194420294,
    "polarity":4,
    "normalized_text_entropy":4.298645476,
    "normalized_concept_entropy":4.457134084,
    "normalized_UMASS":0.639946682,
    "normalized_TFIDF":0.139012646,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"This is a simple question (I think) Lets say I have this code (Assuming I have a dog class) How can I get java to recognize name as a String and name the object dog?"
  },
  {
    "postid":5867,
    "postdate":1378655160,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.071928229,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.427190995,
    "polarity":0,
    "normalized_text_entropy":4.071928229,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.062107543,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"While you can do what you're trying in some scripting languages such as PHP (and this question is often asked by many PHP programmers who start Java), this is not how Java works, and in fact variable names are a much less important than you may realize and hardly even exist after code is compiled. What is much more important and what is key are variable -- the ability to gain access to a particular object at a particular point in your program, and you can have Strings refer to objects easily by using a Map as one way. For example Or you can gain references to objects in many other ways such as via arrays, ArrayLists, LinkedLists, or several other collectinos. You state: This is exactly what I meant when I said that the name of the variable is not as important as you think it is. The variable name is the \"object name\" (this really doesn't exist in fact). For example if you create a dog in a variable named Fido, and then assign it to a new variable named spot, both variables, despite having different names will refer to the very same object: If you want to give a variable a \"name\" consider giving the class a name property: Now you can give each Dog object its own (semi) unique name if you wish."
  },
  {
    "postid":5868,
    "postdate":1227727560,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.868453958,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.549051759,
    "polarity":-1,
    "normalized_text_entropy":3.868453958,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.067410599,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I don't suppose you are thinking of?"
  },
  {
    "postid":5869,
    "postdate":1227735180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.296974187,
    "concept_entropy":0,
    "UMASS(coherence)":0.503237166,
    "TFIDF(informativeness)":1.821115954,
    "polarity":2,
    "normalized_text_entropy":4.296974187,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.457488333,
    "normalized_TFIDF":0.079250106,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Say I create one object and add it to my. If I then create another object with exactly the same constructor input, will the method evaluate the two objects to be the same? Assume the constructor doesn't do anything funny with the input, and the variables stored in both objects are identical. Is this how the should be implemented to have return?"
  },
  {
    "postid":5870,
    "postdate":1227728100,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.217316886,
    "concept_entropy":0,
    "UMASS(coherence)":0.494698644,
    "TFIDF(informativeness)":1.258941943,
    "polarity":0,
    "normalized_text_entropy":4.217316886,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.44972604,
    "normalized_TFIDF":0.054785794,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"ArrayList the List Interface. If you look at the at the method you will see that it uses the method to evaluate if two objects are the same."
  },
  {
    "postid":5871,
    "postdate":1227728340,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.137312889,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.526435963,
    "TFIDF(informativeness)":1.468436871,
    "polarity":0,
    "normalized_text_entropy":4.137312889,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.478578148,
    "normalized_TFIDF":0.063902454,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I think that right implementations should be"
  },
  {
    "postid":5872,
    "postdate":1227728820,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.305346032,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.546757308,
    "polarity":0,
    "normalized_text_entropy":4.305346032,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.06731075,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The ArrayList uses the equals method implemented in the class (your case Thing class) to do the equals comparison."
  },
  {
    "postid":5873,
    "postdate":1227727860,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.338084063,
    "concept_entropy":0,
    "UMASS(coherence)":0.707855981,
    "TFIDF(informativeness)":1.698213984,
    "polarity":3,
    "normalized_text_entropy":4.338084063,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.643505437,
    "normalized_TFIDF":0.073901741,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"It uses the equals method on the objects. So unless Thing overrides equals and uses the variables stored in the objects for comparison, it will not return true on the method."
  },
  {
    "postid":5874,
    "postdate":1227728040,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.565823602,
    "concept_entropy":4.23726376,
    "UMASS(coherence)":0.627932585,
    "TFIDF(informativeness)":1.411179266,
    "polarity":3,
    "normalized_text_entropy":4.565823602,
    "normalized_concept_entropy":4.23726376,
    "normalized_UMASS":0.570847805,
    "normalized_TFIDF":0.061410756,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Generally you should also override hashCode() each time you override equals(), even if just for the performance boost. HashCode() decides which 'bucket' your object gets sorted into when doing a comparison, so any two objects which equal() evaluates to true should return the same hashCode value(). I cannot remember the default behavior of hashCode() (if it returns 0 then your code should work but slowly, but if it returns the address then your code will fail). I do remember a bunch of times when my code failed because I forgot to override hashCode() though. :)"
  },
  {
    "postid":5875,
    "postdate":1331889540,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.506607542,
    "concept_entropy":4.294920676,
    "UMASS(coherence)":0.601544657,
    "TFIDF(informativeness)":1.168143247,
    "polarity":8,
    "normalized_text_entropy":4.506607542,
    "normalized_concept_entropy":4.294920676,
    "normalized_UMASS":0.546858779,
    "normalized_TFIDF":0.050834477,
    "normalized_polarity":0.407407407,
    "tagtext":"inheritance",
    "posttext":"You must write: Now it works ;)"
  },
  {
    "postid":5876,
    "postdate":1342123440,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.450985177,
    "concept_entropy":0,
    "UMASS(coherence)":0.47052787,
    "TFIDF(informativeness)":1.040383051,
    "polarity":2,
    "normalized_text_entropy":4.450985177,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.427752609,
    "normalized_TFIDF":0.045274694,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Other posters have addressed the question about how contains() works. An equally important aspect of your question is how to properly implement equals().And the answer to this is really dependent on what constitutes object equality for this particular class.In the example you provided, if you have two different objects that both have x=5, are they equal?It really depends on what you are trying to do. If you are only interested in object equality, then the implementation of .equals() (the one provided by Object) uses identity only (i.e. this == other).If that's what you want, then just don't implement equals() on your class (let it inherit from Object).The code you wrote, while kind of correct if you are going for identity, would never appear in a real class b/c it provides no benefit over using the default Object.equals() implementation. If you are just getting started with this stuff, I strongly recommend the Effective Java book by Joshua Bloch.It's a great read, and covers this sort of thing (plus how to correctly implement equals() when you are trying to do more than identity based comparisons)"
  },
  {
    "postid":5877,
    "postdate":1383169080,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.309231625,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.65073888,
    "TFIDF(informativeness)":0.971548579,
    "polarity":0,
    "normalized_text_entropy":4.309231625,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.5915808,
    "normalized_TFIDF":0.042279201,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Just wanted to note that the following implementation is wrong when is not a primitive type: In that case I propose the following:"
  },
  {
    "postid":5878,
    "postdate":1227731040,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.318454234,
    "concept_entropy":3.991729297,
    "UMASS(coherence)":0.423295165,
    "TFIDF(informativeness)":2.694369905,
    "polarity":0,
    "normalized_text_entropy":4.318454234,
    "normalized_concept_entropy":3.991729297,
    "normalized_UMASS":0.384813786,
    "normalized_TFIDF":0.117251788,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What is the difference between identity and equality in OOP (Object Oriented Programming)?"
  },
  {
    "postid":5879,
    "postdate":1227736740,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.286273704,
    "concept_entropy":0,
    "UMASS(coherence)":0.517552596,
    "TFIDF(informativeness)":1.307765434,
    "polarity":1,
    "normalized_text_entropy":4.286273704,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.47050236,
    "normalized_TFIDF":0.056910462,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"For example:is identical to.is equal but not identical to. Of course, two identical variables are always equal. In Java, equality is defined by the method. Keep in mind, if you implement you must also implement."
  },
  {
    "postid":5880,
    "postdate":1289900760,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.5,
    "concept_entropy":0,
    "UMASS(coherence)":0.302770668,
    "TFIDF(informativeness)":1.010291458,
    "polarity":0,
    "normalized_text_entropy":3.5,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.275246062,
    "normalized_TFIDF":0.043965188,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Identity determines whether two objects share the same memory address. Equality determines if two object contain the same state. If two object are identical then they are also equal but just because two objects are equal dies not mean that they share the same memory address. There is a special case for Strings but that is off topic and you'll need to ask someone else about how that works exactly ;-) "
  },
  {
    "postid":5881,
    "postdate":1256553060,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.950316692,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.313902006,
    "TFIDF(informativeness)":1.197852172,
    "polarity":1,
    "normalized_text_entropy":3.950316692,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.28536546,
    "normalized_TFIDF":0.05212733,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Identity means it is the same object instance while equality means the objects you compare are to different instances of an object but happen to contain the same data. Illustration (in java) So a and b are different instances (different allocations in memory) but on the \"data\" level they are equal."
  },
  {
    "postid":5882,
    "postdate":1256826540,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.34798852,
    "concept_entropy":0,
    "UMASS(coherence)":0.344584324,
    "TFIDF(informativeness)":1.590712786,
    "polarity":2,
    "normalized_text_entropy":4.34798852,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.313258476,
    "normalized_TFIDF":0.069223575,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"In Java and similar languages which 'leak' the abstraction of a reference of an object, you can test whether two references refer to the same object. If they refer to the same object, then the references are identical. In Java, this is the operator.There is also an method which is used to test whether two objects havethe same value, for example when used as keys of a (the hash code of equal objects should also be equal). Equal objects should have the same 'value' and semantics when used by client code. Purer object-oriented languages do not have an identity comparison, as client code generally shouldn't care whether or not two objects have the same memory address. If objects represent the same real-world entity, then that is better modelled using some ID or key value rather than identity, which then becomes part of the equals contract. Not relying on the memory address of the object to represent real-world identity simplifies caching and distributed behaviour, and suppressing would remove a host of bugs in string comparison or some uses of boxing of primitives in Java."
  },
  {
    "postid":5883,
    "postdate":1256751420,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.405396566,
    "concept_entropy":4.413021352,
    "UMASS(coherence)":0.441112036,
    "TFIDF(informativeness)":2.164712224,
    "polarity":4,
    "normalized_text_entropy":4.405396566,
    "normalized_concept_entropy":4.413021352,
    "normalized_UMASS":0.401010942,
    "normalized_TFIDF":0.094202499,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"Think about the words \"identical\" and \"equivalent\". If two things are identical, they have the same identity; they are same thing. If they are equivalent, one can be substituted for the other without affecting the outcome; they have the same behavior and properties."
  },
  {
    "postid":5884,
    "postdate":1256752740,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.363197259,
    "concept_entropy":4.573251742,
    "UMASS(coherence)":0.443467342,
    "TFIDF(informativeness)":1.948370242,
    "polarity":0,
    "normalized_text_entropy":4.363197259,
    "normalized_concept_entropy":4.573251742,
    "normalized_UMASS":0.403152129,
    "normalized_TFIDF":0.084787873,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"For instance, In StackOverFlow:"
  },
  {
    "postid":5885,
    "postdate":1256553660,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.422794951,
    "concept_entropy":0,
    "UMASS(coherence)":0.502010314,
    "TFIDF(informativeness)":1.354799495,
    "polarity":0,
    "normalized_text_entropy":4.422794951,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.456373013,
    "normalized_TFIDF":0.058957258,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Some links:"
  },
  {
    "postid":5886,
    "postdate":1256554260,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.348488413,
    "concept_entropy":0,
    "UMASS(coherence)":0.703686515,
    "TFIDF(informativeness)":1.437452512,
    "polarity":0,
    "normalized_text_entropy":4.348488413,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.639715014,
    "normalized_TFIDF":0.062554097,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"== and !=is equality test == and != is identity test.[ it compares only the reference ]method is used for equality test of Objects [ it can be overridden to compare specific attributes] i found an excellent article on this :D"
  },
  {
    "postid":5887,
    "postdate":1256556000,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.354770765,
    "concept_entropy":0,
    "UMASS(coherence)":0.520568392,
    "TFIDF(informativeness)":1.282832702,
    "polarity":0,
    "normalized_text_entropy":4.354770765,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.473243993,
    "normalized_TFIDF":0.055825456,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Identity concept is quite philosophical, that's why you shouldn't reconduce it just to references. You can say that two identities are the same if a change to the first is reflected on the second and vice-versa. Of course this includes also sharing the same memory address but in general while identity is related to the attributes of the object, equality is used to check whenever two objects are identical, but this doesn't include identity. The viceversa is quite obvious, if two items have the same identity they are also equal (in equality terms of being interchangeable)."
  },
  {
    "postid":5888,
    "postdate":1392913860,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.378647429,
    "concept_entropy":0,
    "UMASS(coherence)":0.543895186,
    "TFIDF(informativeness)":3.165593634,
    "polarity":3,
    "normalized_text_entropy":4.378647429,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.494450169,
    "normalized_TFIDF":0.137758187,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":" is true only if there's the same object referenced by variables and.depends on the implementation of, and is usually less strict that the above, as it compares the content of the object. (In Java, if, it must also be true that) Example:"
  },
  {
    "postid":5889,
    "postdate":1368163260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.306804811,
    "concept_entropy":4.413021352,
    "UMASS(coherence)":0.370475358,
    "TFIDF(informativeness)":1.875275738,
    "polarity":0,
    "normalized_text_entropy":4.306804811,
    "normalized_concept_entropy":4.413021352,
    "normalized_UMASS":0.33679578,
    "normalized_TFIDF":0.081606996,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" Two references to the same object ( ).The method returns. This doesn't necessarily mean that the two objects contain (all) the same data. In theory it's possible to override a method to return even for identical objects. But this would break the specification of:"
  },
  {
    "postid":5890,
    "postdate":1311803040,
    "tag":"1",
    "TFMvalue":0.793103448,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.467682738,
    "concept_entropy":0,
    "UMASS(coherence)":0.506296959,
    "TFIDF(informativeness)":0.601020024,
    "polarity":-1,
    "normalized_text_entropy":4.467682738,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.460269963,
    "normalized_TFIDF":0.026154787,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I want to make a deep copy of an object array using a constructor. However, what I have above for some reason is not working. I have automated tests that I run, and its failing those tests. So theres an error an here that Im not sure what it is."
  },
  {
    "postid":5891,
    "postdate":1311803340,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.440547363,
    "concept_entropy":0,
    "UMASS(coherence)":0.418023966,
    "TFIDF(informativeness)":0.862583158,
    "polarity":0,
    "normalized_text_entropy":4.440547363,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.380021787,
    "normalized_TFIDF":0.037537317,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What you have implemented is a copy.To implement a copy, you mustchange to some thing that assigns a of to.How you do this depends on the class.Possible alternatives are: Notes: In fact the general problem of implementing deep copying in Java is complicated.In the case of the class, one would assume that the attributes are all primitive types (e.g. ints or doubles), and therefore a deep versus shallow copying is moot.But if there are reference attributes, then you have to rely on the copy constructor / factory method / clone method to do the kind of copying that you require.In each case it needs to be programmed in.And in the general case (where you have to deal with cycles) it is difficult and requires each class to implement special methods. All in all, deep copying is best avoided in Java. Finally, to answer your question about the classes copy constructor works, I expect it is something like this: As @Turtle says, there's no magic involved.You implement a constructor (by hand) that initializes its state by copying from an existing instance."
  },
  {
    "postid":5892,
    "postdate":1311803280,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.353369152,
    "concept_entropy":4.504712264,
    "UMASS(coherence)":0.480848423,
    "TFIDF(informativeness)":3.198271335,
    "polarity":4,
    "normalized_text_entropy":4.353369152,
    "normalized_concept_entropy":4.504712264,
    "normalized_UMASS":0.43713493,
    "normalized_TFIDF":0.139180233,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"I wanted to build a small product in which I wanted to give a kind of feature in which user can write a script language kind of javascript. And also from javascript able to build objects and calling methods on them. Is there any framework for this ?"
  },
  {
    "postid":5893,
    "postdate":1311803220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.977224568,
    "concept_entropy":0,
    "UMASS(coherence)":0.497328006,
    "TFIDF(informativeness)":2.454874772,
    "polarity":0,
    "normalized_text_entropy":3.977224568,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.452116369,
    "normalized_TFIDF":0.106829599,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" is what you are looking for. Update:Now, which is more performant JavaScript Engine for Java, is available with jdk8."
  },
  {
    "postid":5894,
    "postdate":1384340640,
    "tag":"1",
    "TFMvalue":0.909090909,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.057409179,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.017085443,
    "polarity":0,
    "normalized_text_entropy":4.057409179,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.044260844,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Java includes a starting with version 6. See the. Here is a small example of how you can expose Java objects to your interpreted script:"
  },
  {
    "postid":5895,
    "postdate":1311803280,
    "tag":"1",
    "TFMvalue":0.956521739,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.343610319,
    "concept_entropy":0,
    "UMASS(coherence)":0.769231963,
    "TFIDF(informativeness)":2.445417353,
    "polarity":5,
    "normalized_text_entropy":4.343610319,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.699301785,
    "normalized_TFIDF":0.106418037,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"You can use, example: "
  },
  {
    "postid":5896,
    "postdate":1311803340,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.98739903,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.168760474,
    "polarity":0,
    "normalized_text_entropy":3.98739903,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.050861337,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Have a look at Rhino: "
  },
  {
    "postid":5897,
    "postdate":1295518320,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.113085631,
    "concept_entropy":4.504712264,
    "UMASS(coherence)":0.456245352,
    "TFIDF(informativeness)":2.088431309,
    "polarity":-1,
    "normalized_text_entropy":4.113085631,
    "normalized_concept_entropy":4.504712264,
    "normalized_UMASS":0.414768502,
    "normalized_TFIDF":0.090882957,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The Rhino JavaScript engine that was included in JDK 6 is being replaced by a new engine called Nashorn for JDK 8. The contains news as well as source code samples."
  },
  {
    "postid":5898,
    "postdate":1295518440,
    "tag":"1",
    "TFMvalue":0.727272727,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.180347403,
    "concept_entropy":4.199084272,
    "UMASS(coherence)":0.7319773,
    "TFIDF(informativeness)":2.031967004,
    "polarity":0,
    "normalized_text_entropy":4.180347403,
    "normalized_concept_entropy":4.199084272,
    "normalized_UMASS":0.665433909,
    "normalized_TFIDF":0.088425781,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" provides interoperability between the Java and JavaScript worlds. That means your Java code can call JavaScript code, and vice versa.on understanding how to write program using Oracle Nashorn."
  },
  {
    "postid":5899,
    "postdate":1256828340,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.251511853,
    "concept_entropy":0,
    "UMASS(coherence)":0.371062092,
    "TFIDF(informativeness)":2.321884704,
    "polarity":0,
    "normalized_text_entropy":4.251511853,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.337329175,
    "normalized_TFIDF":0.101042226,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I constructed class with one String field. Then I created two objects and I have to compare them using == operator and .equals() too. Here's what i've done: } After compile it shows two falses as a result. Why is it false if the two objects have the same fields - \"test\"? Am I wrong? Thanks"
  },
  {
    "postid":5900,
    "postdate":1256828940,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.173842806,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.201182606,
    "polarity":0,
    "normalized_text_entropy":4.173842806,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.052272261,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" compares object references, it checks to see if the two operands point to the same object (not objects, the object). If you want to compare strings (to see if they contain the same characters), you need to compare the strings using. In your case, if two instances of really are considered equal if the strings match, then: ...but usually if you are defining a class, there's more to equivalency than the equivalency of a single field (in this case)."
  },
  {
    "postid":5901,
    "postdate":1256828640,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.256365371,
    "concept_entropy":4.63956035,
    "UMASS(coherence)":0.681369905,
    "TFIDF(informativeness)":2.525540338,
    "polarity":-9,
    "normalized_text_entropy":4.256365371,
    "normalized_concept_entropy":4.63956035,
    "normalized_UMASS":0.619427186,
    "normalized_TFIDF":0.109904776,
    "normalized_polarity":0.092592593,
    "tagtext":"inheritance",
    "posttext":"Your method always will return the same as !!with my comments:"
  },
  {
    "postid":5902,
    "postdate":1256828700,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.397572347,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.571846424,
    "polarity":4,
    "normalized_text_entropy":4.397572347,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02488523,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"It looks like is just calling, so it will give the same results."
  },
  {
    "postid":5903,
    "postdate":1256829480,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.139929899,
    "concept_entropy":0,
    "UMASS(coherence)":0.405352587,
    "TFIDF(informativeness)":0.473100457,
    "polarity":1,
    "normalized_text_entropy":4.139929899,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.368502352,
    "normalized_TFIDF":0.020588069,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"IN the below code you are calling the overriden method .equals(). public boolean equals2(Object object2) {if(a.equals(object2)) { // here you are calling the overriden method, that is why you getting false 2 times.return true;}else return false;}"
  },
  {
    "postid":5904,
    "postdate":1256828820,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.196296273,
    "concept_entropy":4.563006599,
    "UMASS(coherence)":0.340721551,
    "TFIDF(informativeness)":2.505801858,
    "polarity":-1,
    "normalized_text_entropy":4.196296273,
    "normalized_concept_entropy":4.563006599,
    "normalized_UMASS":0.309746865,
    "normalized_TFIDF":0.10904581,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"So, normally would return a type of....but supposed it's an of object, how do I make to return a type of rather than?"
  },
  {
    "postid":5905,
    "postdate":1256828940,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.44359405,
    "concept_entropy":0,
    "UMASS(coherence)":0.648184825,
    "TFIDF(informativeness)":1.435588652,
    "polarity":0,
    "normalized_text_entropy":4.44359405,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.589258932,
    "normalized_TFIDF":0.062472987,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Like this: It's tempting to do it like: but the internal implementation will realloc a properly sized array anyway so you are better doing it upfront. If your list is not properly typed you need to do a cast before calling toArray. Like this:"
  },
  {
    "postid":5906,
    "postdate":1256829120,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.223271923,
    "concept_entropy":4.31123383,
    "UMASS(coherence)":0.59223351,
    "TFIDF(informativeness)":1.31335832,
    "polarity":2,
    "normalized_text_entropy":4.223271923,
    "normalized_concept_entropy":4.31123383,
    "normalized_UMASS":0.5383941,
    "normalized_TFIDF":0.057153849,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"It doesn't really need to return, for example:- Here's my class:-"
  },
  {
    "postid":5907,
    "postdate":1256832420,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.254655901,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.804549848,
    "polarity":0,
    "normalized_text_entropy":4.254655901,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035011862,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":5908,
    "postdate":1256858340,
    "tag":"1",
    "TFMvalue":0.923076923,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.119288703,
    "concept_entropy":4.487043663,
    "UMASS(coherence)":0.458456108,
    "TFIDF(informativeness)":1.25449068,
    "polarity":2,
    "normalized_text_entropy":4.119288703,
    "normalized_concept_entropy":4.487043663,
    "normalized_UMASS":0.41677828,
    "normalized_TFIDF":0.054592086,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I was looking as the question : which describes how to instantiate a class when having its name. Is there a way to do it in Java? I will have the package name and class name and I need to be able to create an object having that particular name."
  },
  {
    "postid":5909,
    "postdate":1399306740,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.252662002,
    "concept_entropy":4.364626506,
    "UMASS(coherence)":0.783898335,
    "TFIDF(informativeness)":1.411871983,
    "polarity":2,
    "normalized_text_entropy":4.252662002,
    "normalized_concept_entropy":4.364626506,
    "normalized_UMASS":0.71263485,
    "normalized_TFIDF":0.061440901,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Two ways: If your class has a no-arg constructor, you can get a object using and use the method to create an instance (though beware that this method is often because it can defeat Java's checked exceptions). For example: An alternative safer approach which also works if the class doesn't have any no-arg constructors is to query your class object to get its object and call a method on this object: Both methods are known as. You will typically have to catch the various exceptions which can occur, including things like:"
  },
  {
    "postid":5910,
    "postdate":1295285640,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.261938296,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.963804613,
    "polarity":0,
    "normalized_text_entropy":4.261938296,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041942205,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":5911,
    "postdate":1295287860,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.081036491,
    "concept_entropy":0,
    "UMASS(coherence)":0.705784596,
    "TFIDF(informativeness)":1.100101213,
    "polarity":0,
    "normalized_text_entropy":4.081036491,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.64162236,
    "normalized_TFIDF":0.047873469,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"useThis will cause class named A initialized."
  },
  {
    "postid":5912,
    "postdate":1295286480,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.574398265,
    "concept_entropy":4.186956705,
    "UMASS(coherence)":0.513040944,
    "TFIDF(informativeness)":0.987734732,
    "polarity":-7,
    "normalized_text_entropy":4.574398265,
    "normalized_concept_entropy":4.186956705,
    "normalized_UMASS":0.466400858,
    "normalized_TFIDF":0.04298358,
    "normalized_polarity":0.12962963,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":5913,
    "postdate":1295286360,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.273272201,
    "concept_entropy":0,
    "UMASS(coherence)":0.641404866,
    "TFIDF(informativeness)":0.486419074,
    "polarity":-3,
    "normalized_text_entropy":4.273272201,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.583095333,
    "normalized_TFIDF":0.02116766,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"something like this should work..."
  },
  {
    "postid":5914,
    "postdate":1295285760,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.290409208,
    "concept_entropy":0,
    "UMASS(coherence)":0.690272616,
    "TFIDF(informativeness)":1.053142713,
    "polarity":1,
    "normalized_text_entropy":4.290409208,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.62752056,
    "normalized_TFIDF":0.04582996,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" will solve your purpose."
  },
  {
    "postid":5915,
    "postdate":1295285940,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.326667541,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.594513698,
    "TFIDF(informativeness)":1.028748981,
    "polarity":1,
    "normalized_text_entropy":4.326667541,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.540466998,
    "normalized_TFIDF":0.04476841,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Creating New ObjectsThere is no equivalent to method invocation for constructors, because invoking a constructor is equivalent to creating a new object (to be the most precise, creating a new object involves both memory allocation and object construction). So the nearest equivalent to the previous example is to say: which finds a constructor that handles the specified parameter types and invokes it, to create a new instance of the object. The value of this approach is that it's purely dynamic, with constructor lookup and invocation at execution time, rather than at compilation time."
  },
  {
    "postid":5916,
    "postdate":1328324400,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.34854365,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.092879529,
    "polarity":1,
    "normalized_text_entropy":4.34854365,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.0475592,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I want to initialize an array of Player objects for a BlackJack game. I've read a lot about various ways to initialize primitive objects like an array of ints or an array of strings but I cannot take the concept to what I am trying to do here (see below). I would like to return an array of initialized Player objects. The number of player objects to create is an integer for which I prompt the user. I was thinking the constructor could accept an integer value and name the player accordingly while initializing some member variables of the Player object. I think I am close but still quite confused too. Here is what I am getting after changing this as I understood your suggestion:"
  },
  {
    "postid":5917,
    "postdate":1338461820,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.329143796,
    "concept_entropy":0,
    "UMASS(coherence)":0.339874368,
    "TFIDF(informativeness)":1.62325795,
    "polarity":-2,
    "normalized_text_entropy":4.329143796,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.308976698,
    "normalized_TFIDF":0.070639854,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"It is almost fine. Just have: And let the loop be: And note that java convention dictates that names of methods and variables should start with lower-case. Update: put your method within the class body."
  },
  {
    "postid":5918,
    "postdate":1378248180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.007885893,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.205010942,
    "TFIDF(informativeness)":0.694050583,
    "polarity":0,
    "normalized_text_entropy":4.007885893,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.186373584,
    "normalized_TFIDF":0.030203229,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I want to write a Object into CSV file.For XML we have XStream likeSo if i want to convert object to CSV do we have any such library ? EDIT:"
  },
  {
    "postid":5919,
    "postdate":1399854120,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.185314006,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.36071514,
    "TFIDF(informativeness)":0.811231872,
    "polarity":-1,
    "normalized_text_entropy":4.185314006,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.327922855,
    "normalized_TFIDF":0.035302646,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I want to write a Object into CSV file.For XML we have XStream likeSo if i want to convert object to CSV do we have any such library ? EDIT:"
  },
  {
    "postid":5920,
    "postdate":1354279980,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.289697082,
    "concept_entropy":0,
    "UMASS(coherence)":0.601182501,
    "TFIDF(informativeness)":1.954782016,
    "polarity":1,
    "normalized_text_entropy":4.289697082,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.546529546,
    "normalized_TFIDF":0.085066897,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"First, serialization is writing the object to a file 'as it is'. AFAIK, you cannot choose file formats and all. The serialized object (in a file) has its 'own file format' If you want to write the contents of an object (or a list of objects) to a CSV file, you can do it yourself, it should not be complex. Looks like can do this, but I have not tried this myself. : See following sample. This is no way foolproof, but you can build on this. This is product (getters and setters hidden for readability on SO): And this is how I tested: Hope this helps. Cheers."
  },
  {
    "postid":5921,
    "postdate":1357621380,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.283797138,
    "concept_entropy":3.945718475,
    "UMASS(coherence)":0.55364162,
    "TFIDF(informativeness)":2.98841656,
    "polarity":-1,
    "normalized_text_entropy":4.283797138,
    "normalized_concept_entropy":3.945718475,
    "normalized_UMASS":0.503310564,
    "normalized_TFIDF":0.130047913,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Two options I just ran into:"
  },
  {
    "postid":5922,
    "postdate":1364234220,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.947768983,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.961444837,
    "polarity":0,
    "normalized_text_entropy":3.947768983,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041839513,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"For easy CSV access, there is a library called. It really ease access to CSV file content. According to your update, I consider all previous replies as incorrect (due to their low-levelness). You can then go a completely diffferent way, the hibernate way, in fact ! By using the driver, you can load your CSV files as JDBC data source, and then directly map your beans to this datasource. I would have talked to you about, but as the site seems broken, I fear the lib is unavailable nowadays."
  },
  {
    "postid":5923,
    "postdate":1338451980,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.3225036,
    "concept_entropy":0,
    "UMASS(coherence)":0.583982043,
    "TFIDF(informativeness)":1.199475948,
    "polarity":1,
    "normalized_text_entropy":4.3225036,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.530892766,
    "normalized_TFIDF":0.052197992,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It would be interesting to have a csv serializer as it would take up the minimal space compared to other serializing method. The closest support for java object to csv is stringutils provided by spring utils project arrayToCommaDelimitedString(Object[] arr) but it is far from being a serializer. Here is a simple utility which uses reflection to serialize value objects } Here is an example value object}and the code to run the util Output:"
  },
  {
    "postid":5924,
    "postdate":1234451880,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.289229671,
    "concept_entropy":4.424437602,
    "UMASS(coherence)":0.666115855,
    "TFIDF(informativeness)":2.409482449,
    "polarity":2,
    "normalized_text_entropy":4.289229671,
    "normalized_concept_entropy":4.424437602,
    "normalized_UMASS":0.605559868,
    "normalized_TFIDF":0.104854246,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I wrote a simple class that uses and has two methods. I think with some simple recursion these methods could be modified to handle any Java object, but for me this was adequate."
  },
  {
    "postid":5925,
    "postdate":1234452060,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.315865895,
    "concept_entropy":0,
    "UMASS(coherence)":0.692760837,
    "TFIDF(informativeness)":2.268312383,
    "polarity":2,
    "normalized_text_entropy":4.315865895,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.629782579,
    "normalized_TFIDF":0.098710901,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I want to know what exactly the output is when I do the following. I know it gives something related to object as the output in my case is. I guess the is a hex number. I also did some work around and printedI got the number. I got an integer value. I don't know what returns, still out of curiosity, when I converted to decimal, I got! That's why I am curious about what exactly is this number. Is this some memory location of Java's sandbox or some other thing?"
  },
  {
    "postid":5926,
    "postdate":1234452300,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.223286636,
    "concept_entropy":0,
    "UMASS(coherence)":0.408735745,
    "TFIDF(informativeness)":1.288969794,
    "polarity":0,
    "normalized_text_entropy":4.223286636,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.37157795,
    "normalized_TFIDF":0.056092526,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What happens is that the default method of your class is getting used. This method is defined as follows: The value returned by the default method is implementation-specific:"
  },
  {
    "postid":5927,
    "postdate":1234452000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.336450983,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.783218926,
    "polarity":-1,
    "normalized_text_entropy":4.336450983,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.077600929,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The Javadoc for and in the class should be able to clarify this for you."
  },
  {
    "postid":5928,
    "postdate":1234452120,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.155339761,
    "concept_entropy":0,
    "UMASS(coherence)":0.608275529,
    "TFIDF(informativeness)":1.149488013,
    "polarity":0,
    "normalized_text_entropy":4.155339761,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.552977754,
    "normalized_TFIDF":0.050022651,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"When you print an instance of your class, that does not override the method, then the method of class is used. Which prints an output in the form: - Here's the source code of method, that you can find in the installation directory of your, under folder: -"
  },
  {
    "postid":5929,
    "postdate":1234454640,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.306163253,
    "concept_entropy":0,
    "UMASS(coherence)":0.620144653,
    "TFIDF(informativeness)":1.969724861,
    "polarity":0,
    "normalized_text_entropy":4.306163253,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.563767866,
    "normalized_TFIDF":0.085717169,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"That code calls the default implementation of the class, that is:"
  },
  {
    "postid":5930,
    "postdate":1399975080,
    "tag":"1",
    "TFMvalue":0.909090909,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.379378889,
    "concept_entropy":0,
    "UMASS(coherence)":0.571403696,
    "TFIDF(informativeness)":1.251560216,
    "polarity":3,
    "normalized_text_entropy":4.379378889,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.519457905,
    "normalized_TFIDF":0.054464561,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Just for review, can someone quickly explain what prevents this from working (on compile): ...and what makes this the way that DOES work: I'm not clear on the mechanism at work with casting (or whatever it is) that makes this so."
  },
  {
    "postid":5931,
    "postdate":1297770660,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.173946912,
    "concept_entropy":0,
    "UMASS(coherence)":0.626619324,
    "TFIDF(informativeness)":1.280575354,
    "polarity":2,
    "normalized_text_entropy":4.173946912,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.569653931,
    "normalized_TFIDF":0.055727222,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Because creates an array of Object, and you can't make into just by casting it.creates an array of. And yes, it is a shortcoming of the Collections class and the way Generics were shoehorned into Java.You'd expect that could return an array of E, but it doesn't. Interesting thing about the call: you don't have to make the \"a\" array big enough, so you can call it with if you like. Calling it like is actually better if you use later to get the array length. if the initial length was large and the same array object you passed was returned then you may faces later I asked a question earlier about Java generics, and was pointed to this FAQ that was very helpful: "
  },
  {
    "postid":5932,
    "postdate":1297771320,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.401189542,
    "concept_entropy":0,
    "UMASS(coherence)":0.586780594,
    "TFIDF(informativeness)":1.801556105,
    "polarity":-1,
    "normalized_text_entropy":4.401189542,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.533436904,
    "normalized_TFIDF":0.078398914,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"To ensure type safety when casting an array like you intended ( ), the JVM would have to inspect every single object in the array, so it's not actually a simple operation like a type cast. I think that's why you have to pass the array instance, which the operation then fills."
  },
  {
    "postid":5933,
    "postdate":1351961400,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":25,
    "Normalized_count":0.416666667,
    "text_entropy":4.258708767,
    "concept_entropy":0,
    "UMASS(coherence)":0.430445657,
    "TFIDF(informativeness)":3.101304862,
    "polarity":1,
    "normalized_text_entropy":4.258708767,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.391314234,
    "normalized_TFIDF":0.134960511,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I want to know the location that JVM allocates to objects being placed in the system memory."
  },
  {
    "postid":5934,
    "postdate":1297770960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.267711024,
    "concept_entropy":4.135203067,
    "UMASS(coherence)":0.499308684,
    "TFIDF(informativeness)":2.808322361,
    "polarity":0,
    "normalized_text_entropy":4.267711024,
    "normalized_concept_entropy":4.135203067,
    "normalized_UMASS":0.453916985,
    "normalized_TFIDF":0.122210695,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This is something you probably don't want to do. If you want to do this, something like this code might help: But"
  },
  {
    "postid":5935,
    "postdate":1297771080,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.087679685,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.137830289,
    "polarity":0,
    "normalized_text_entropy":4.087679685,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049515338,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Without using JVM-specific features this cannot be done.Java deliberately hides the location associated with each object to give the implementation more flexibility (the JVM often moves objects around in memory when doing garbage collection) and to improve security (you can't use raw pointers to trash memory or access nonexistent objects)."
  },
  {
    "postid":5936,
    "postdate":1355172300,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.316570256,
    "concept_entropy":3.899677289,
    "UMASS(coherence)":0.389732582,
    "TFIDF(informativeness)":1.423901255,
    "polarity":0,
    "normalized_text_entropy":4.316570256,
    "normalized_concept_entropy":3.899677289,
    "normalized_UMASS":0.354302347,
    "normalized_TFIDF":0.061964383,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can't because it doesn't exist. It changes over time: there is no such thing as 'location'."
  },
  {
    "postid":5937,
    "postdate":1297771500,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.230863108,
    "concept_entropy":4.098652005,
    "UMASS(coherence)":0.370729419,
    "TFIDF(informativeness)":1.445118142,
    "polarity":0,
    "normalized_text_entropy":4.230863108,
    "normalized_concept_entropy":4.098652005,
    "normalized_UMASS":0.337026745,
    "normalized_TFIDF":0.062887685,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am going through and some of my things which I consider as standard are not suggested by the book, for instance creation of object, I was under the impression that constructors are the best way of doing it and books says we should make use of static factory methods, I am not able to few some advantages and so disadvantages and so am asking this question, here are the benefits of using it.I am not able to understand the fourth advantage and the second disadvantage and would appreciate if someone can explain those points. I would also like to understand how to decide to use whether to go for Constructor or Static Factory Method for Object Creation."
  },
  {
    "postid":5938,
    "postdate":1360778520,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.269029749,
    "concept_entropy":3.898412848,
    "UMASS(coherence)":0.46806461,
    "TFIDF(informativeness)":2.010072706,
    "polarity":0,
    "normalized_text_entropy":4.269029749,
    "normalized_concept_entropy":3.898412848,
    "normalized_UMASS":0.425513282,
    "normalized_TFIDF":0.087473,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As for how to choose - there is no single recipe for that. You can weigh all of the above advantages and disadvantages given a use-case, but most often it will just be a decision driven by experience."
  },
  {
    "postid":5939,
    "postdate":1373379240,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.050103986,
    "concept_entropy":3.898412848,
    "UMASS(coherence)":0.3372288,
    "TFIDF(informativeness)":1.710979157,
    "polarity":1,
    "normalized_text_entropy":4.050103986,
    "normalized_concept_entropy":3.898412848,
    "normalized_UMASS":0.306571636,
    "normalized_TFIDF":0.074457247,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you know the concrete type of the class you are trying to create, then calling the Constructor is fine. Static Factory Methods are nice when you're not entirely sure how to construct the object you need.The Factory Method still calls the Constructor on the concrete type, but the method handles the decision on what kind of concrete class to instantiate. The Factory Method then returns an Interface type (rather than a concrete type) so that the concrete type is hidden from the caller."
  },
  {
    "postid":5940,
    "postdate":1383688140,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.304413236,
    "concept_entropy":0,
    "UMASS(coherence)":0.593763244,
    "TFIDF(informativeness)":1.891868026,
    "polarity":-2,
    "normalized_text_entropy":4.304413236,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.539784767,
    "normalized_TFIDF":0.082329048,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"A static method that is used for object creation has the same functional layout and appearance as any other static function. Just by looking at a static method that creates objects you wouldn't know it does this, and the opposite is the relevant part. When you're writing code that you're unfamiliar with, it can be difficult to identify the correct static method that is used to create objects. The use of the is well documented and can be very useful, especially in and situations. Also useful in the initialisation of complex objects."
  },
  {
    "postid":5941,
    "postdate":1275936780,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.358941701,
    "concept_entropy":4.380526822,
    "UMASS(coherence)":0.436147324,
    "TFIDF(informativeness)":2.046902019,
    "polarity":0,
    "normalized_text_entropy":4.358941701,
    "normalized_concept_entropy":4.380526822,
    "normalized_UMASS":0.396497567,
    "normalized_TFIDF":0.089075713,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I know that using the synchronize keyword before a method brings synchronization to that object. That is, 2 threads running the same instance of the object will be synchronized. However, since the synchronization is at the object level, 2 threads running different instances of the object will not be synchronized. So, if we have a static variable in a java class that is called by the method, we would like it to be synchronized across instances of the class. The two instances are running in 2 different threads. Can we achieve synchronization in the following way? Is it true that since we have defined an object 'lock' that is static and we are using the keyword synchronized for that lock, the static varibale count is now synchronized across instances of class Test?"
  },
  {
    "postid":5942,
    "postdate":1278360180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.226564456,
    "concept_entropy":4.485439604,
    "UMASS(coherence)":0.44897056,
    "TFIDF(informativeness)":1.110639058,
    "polarity":1,
    "normalized_text_entropy":4.226564456,
    "normalized_concept_entropy":4.485439604,
    "normalized_UMASS":0.408155055,
    "normalized_TFIDF":0.048332048,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"There are several ways to synchronize access to a static variable. Method 3 is the best in many cases because the lock object is not exposed outside of your class."
  },
  {
    "postid":5943,
    "postdate":1275937020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.345814208,
    "concept_entropy":0,
    "UMASS(coherence)":0.814555933,
    "TFIDF(informativeness)":1.603158397,
    "polarity":0,
    "normalized_text_entropy":4.345814208,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.740505394,
    "normalized_TFIDF":0.069765175,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you're simply sharing a counter, consider using an or another suitable class from the java.util.concurrent.atomic package:"
  },
  {
    "postid":5944,
    "postdate":1303233900,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.224261049,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.562438034,
    "TFIDF(informativeness)":0.943210791,
    "polarity":-2,
    "normalized_text_entropy":4.224261049,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.511307304,
    "normalized_TFIDF":0.041046016,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"Yes it is true. If you create two instance of your class Then t1.foo and t2.foo both synchronize on the same static object and hence block each other."
  },
  {
    "postid":5945,
    "postdate":1275936960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.285628906,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.20086989,
    "polarity":1,
    "normalized_text_entropy":4.285628906,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.052258653,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can synchronize your code over the class. That would be simplest.Hope you find this answer useful."
  },
  {
    "postid":5946,
    "postdate":1319898540,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.278212509,
    "concept_entropy":3.910440495,
    "UMASS(coherence)":0.713195419,
    "TFIDF(informativeness)":2.043153379,
    "polarity":-1,
    "normalized_text_entropy":4.278212509,
    "normalized_concept_entropy":3.910440495,
    "normalized_UMASS":0.648359472,
    "normalized_TFIDF":0.088912582,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If it is only about this one integer, you can also use( namespace is System.Threading )."
  },
  {
    "postid":5947,
    "postdate":1282749060,
    "tag":"1",
    "TFMvalue":0.636363636,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.132795451,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.618104695,
    "polarity":0,
    "normalized_text_entropy":4.132795451,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.070415598,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In java, what does the private static method of the Object class do?"
  },
  {
    "postid":5948,
    "postdate":1282751220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.383420963,
    "concept_entropy":0,
    "UMASS(coherence)":0.484004163,
    "TFIDF(informativeness)":3.152276381,
    "polarity":1,
    "normalized_text_entropy":4.383420963,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.440003785,
    "normalized_TFIDF":0.137178656,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The other answers are technically correct, but not very useful for someone with no JNI experience. :-) Normally, in order for the JVM to find your native functions, they have to be named a certain way. e.g., for, the corresponding C function is named. By using (or rather, the JNI function), you can name your C functions whatever you want. Here's the associated C code (from OpenJDK 6): (Notice that is not in the list; it will still be called by the \"standard\" name of.) For the functions listed, the associated C functions are as listed in that table, which is handier than writing a bunch of forwarding functions. Registering native functions is also useful if you are embedding Java in your C program and want to link to functions within the application itself (as opposed to within a shared library), or the functions being used aren't otherwise \"exported\", since these would not normally be found by the standard method lookup mechanism. Registering native functions can also be used to \"rebind\" a native method to another C function (useful if your program supports dynamically loading and unloading modules, for example). I encourage everybody to read the, which talks about this and much more. :-)"
  },
  {
    "postid":5949,
    "postdate":1282749240,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.077919558,
    "concept_entropy":4.341451457,
    "UMASS(coherence)":0.606878273,
    "TFIDF(informativeness)":1.396382669,
    "polarity":0,
    "normalized_text_entropy":4.077919558,
    "normalized_concept_entropy":4.341451457,
    "normalized_UMASS":0.551707521,
    "normalized_TFIDF":0.060766847,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What might be slightly confusing is that the code shown for java.lang.Object.registerNatives in a previous answer is just an of how to register native functions.This is the code that (in the implementation of OpenJDK) registers native functions for class Object.To register native functions for your own class, you must call the JNI function RegisterNatives from the native code in your own library.This might sound a bit circular, but there are a couple ways to break the loop. OR"
  },
  {
    "postid":5950,
    "postdate":1282752660,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.322490921,
    "concept_entropy":0,
    "UMASS(coherence)":0.468473089,
    "TFIDF(informativeness)":1.562094989,
    "polarity":1,
    "normalized_text_entropy":4.322490921,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.425884626,
    "normalized_TFIDF":0.067978205,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"it is a JNI function which registers native implementations and Object's native methods.take a look at explanation."
  },
  {
    "postid":5951,
    "postdate":1282752060,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.20225071,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.454868505,
    "polarity":0,
    "normalized_text_entropy":4.20225071,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.063311995,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Since you looked at the source code to find it, it's pretty easy to guess isn't? It's a native method, and it's called registerNatives, so I guess it registers objects with the underlying platform. It's also private, so it's probably nothing to be concerned about."
  },
  {
    "postid":5952,
    "postdate":1282919340,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.262940239,
    "concept_entropy":0,
    "UMASS(coherence)":0.518155755,
    "TFIDF(informativeness)":1.571801273,
    "polarity":0,
    "normalized_text_entropy":4.262940239,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.471050686,
    "normalized_TFIDF":0.068400597,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"So, now I've figured out how to make multiple of the same object correctly, I need to know how to make an array of them, changing depending on how many are needed, because it is pretty much an object, that stores 3 numbers. How can I Create an arraylist that is of different objects, because I'm going to have the numbers inside them different"
  },
  {
    "postid":5953,
    "postdate":1366289280,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.068327398,
    "concept_entropy":0,
    "UMASS(coherence)":0.562438034,
    "TFIDF(informativeness)":1.736129599,
    "polarity":0,
    "normalized_text_entropy":4.068327398,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.511307304,
    "normalized_TFIDF":0.075551727,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":5954,
    "postdate":1381336440,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.461293256,
    "concept_entropy":2.923231429,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.216484253,
    "polarity":-4,
    "normalized_text_entropy":4.461293256,
    "normalized_concept_entropy":2.923231429,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.09645548,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"Consider this code: If we have a constructor in super class, it will be invoked by every object tht we construct for the child class(ex. Object 'a' for class Test1 calls Test1(int n1, int n2) as well as Test()).Why does this happen? The output of this program is:"
  },
  {
    "postid":5955,
    "postdate":1343702940,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.03639293,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.071869735,
    "polarity":0,
    "normalized_text_entropy":4.03639293,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.090162242,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Because it will ensure that when a constructor is invoked, it can rely on all the fields in it's superclass being initialised. see 3.4.4 in "
  },
  {
    "postid":5956,
    "postdate":1343704380,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":18,
    "Normalized_count":0.3,
    "text_entropy":4.278484212,
    "concept_entropy":0,
    "UMASS(coherence)":0.599359426,
    "TFIDF(informativeness)":1.519022592,
    "polarity":0,
    "normalized_text_entropy":4.278484212,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.544872205,
    "normalized_TFIDF":0.066103809,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Yes. A superclass must be constructed before a derived class could be constructed too, otherwise some fields that should be available in the derived class could be not initialized. A little note:if you have to call explicitely the super class constructor to pass it some parameters: then the super constructor must be the first method call into derived constructor. For example this won't compile:"
  },
  {
    "postid":5957,
    "postdate":1343703120,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.518181053,
    "concept_entropy":4.624301117,
    "UMASS(coherence)":0.57823394,
    "TFIDF(informativeness)":1.65568181,
    "polarity":2,
    "normalized_text_entropy":4.518181053,
    "normalized_concept_entropy":4.624301117,
    "normalized_UMASS":0.525667218,
    "normalized_TFIDF":0.072050854,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"That��΂s how Java works. If you create a child object, the super constructor is (implicitly) called."
  },
  {
    "postid":5958,
    "postdate":1365358320,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.354660429,
    "concept_entropy":4.471603083,
    "UMASS(coherence)":0.572850705,
    "TFIDF(informativeness)":1.931302703,
    "polarity":-1,
    "normalized_text_entropy":4.354660429,
    "normalized_concept_entropy":4.471603083,
    "normalized_UMASS":0.520773368,
    "normalized_TFIDF":0.08404514,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Constructor implements logic that makes the object ready to work. Object may hold state in private fields, so only its class' methods can access them. So if you wish instance of your subclass be really ready to work after calling constructor (i.e. all its functionality including inherited from base class is OK) the base class's constructor must be called.This is why the system works this way.Automatically the default constructor of base class is called. If you want to change this you have to explicitly call constructor of base class by writing in the first line of your subclass' constructor."
  },
  {
    "postid":5959,
    "postdate":1343747820,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.192243911,
    "concept_entropy":4.635684135,
    "UMASS(coherence)":0.646688281,
    "TFIDF(informativeness)":1.349586779,
    "polarity":-1,
    "normalized_text_entropy":4.192243911,
    "normalized_concept_entropy":4.635684135,
    "normalized_UMASS":0.587898437,
    "normalized_TFIDF":0.058730415,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Java classes are instantiated in the following order: (at classload time) 0. initializers for static members and static initializer blocks, in orderof declaration. (at each new object) "
  },
  {
    "postid":5960,
    "postdate":1343703480,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.189734554,
    "concept_entropy":4.419206466,
    "UMASS(coherence)":0.573569372,
    "TFIDF(informativeness)":1.155449794,
    "polarity":1,
    "normalized_text_entropy":4.189734554,
    "normalized_concept_entropy":4.419206466,
    "normalized_UMASS":0.521426702,
    "normalized_TFIDF":0.050282091,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The subclass inherits fields from it's superclass(es) and those fields to get constructed/initialised (that's the usual purpose of a constructor: init the class members so that the instance works as required. We know that some people but a lot more functionality in those poor constructors...)"
  },
  {
    "postid":5961,
    "postdate":1343703120,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.779104016,
    "concept_entropy":3.86643315,
    "UMASS(coherence)":0.575706362,
    "TFIDF(informativeness)":0.788056186,
    "polarity":1,
    "normalized_text_entropy":3.779104016,
    "normalized_concept_entropy":3.86643315,
    "normalized_UMASS":0.52336942,
    "normalized_TFIDF":0.034294102,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The base class constructor will be called before the derived class constructor. This makes sense because it guarantees that the base class is properly constructed when the constructor for the derived class is executed. This allows you to use some of the data from the base class during construction of the derived class."
  },
  {
    "postid":5962,
    "postdate":1247843760,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.124594597,
    "concept_entropy":4.257874566,
    "UMASS(coherence)":0.566983134,
    "TFIDF(informativeness)":0.914819578,
    "polarity":1,
    "normalized_text_entropy":4.124594597,
    "normalized_concept_entropy":4.257874566,
    "normalized_UMASS":0.515439213,
    "normalized_TFIDF":0.039810507,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"When we create an object of subclass, it must take into consideration all the member functions and member variables defined in the superclass. A case might arise in which some member variable might be initialized in some of the superclass constructors.Specifically when a variable is defined as it will always be accessible in the subclass. Now from the subclass if we call a superclass function to print the value of this protected variable(which may be initialized in the constructor of the superclass) we must get the correct initialized value.Hence all the superclass constructors are invoked. Internally Java calls super() in each constructor. So each subclass constructor calls it's superclass constructor using super() and hence they are executed in top-bottom fashion. Note : Functions can be overridden not the variables. "
  },
  {
    "postid":5963,
    "postdate":1247844120,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.158748684,
    "concept_entropy":4.547383746,
    "UMASS(coherence)":0.697818945,
    "TFIDF(informativeness)":1.224043092,
    "polarity":1,
    "normalized_text_entropy":4.158748684,
    "normalized_concept_entropy":4.547383746,
    "normalized_UMASS":0.634380859,
    "normalized_TFIDF":0.053267089,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Since you are inheriting base class properties into derived class, there may be some situations where your derived class constructor requires some of the base class variables to initialize its variables. So first it has to initialize base class variables, and then derived class variables. That's why Java calls first base class constructor, and then derived class constructor. And also it doesn't make any sens to initialize child class with out initializing parent class."
  },
  {
    "postid":5964,
    "postdate":1247845680,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.065616673,
    "concept_entropy":3.86643315,
    "UMASS(coherence)":0.626312,
    "TFIDF(informativeness)":1.146839489,
    "polarity":0,
    "normalized_text_entropy":4.065616673,
    "normalized_concept_entropy":3.86643315,
    "normalized_UMASS":0.569374545,
    "normalized_TFIDF":0.049907394,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Constructor of Super class in called first because all the methods in the program firstly present in heap and after compilation they stores in to the stack,due to which super class constructor is called first."
  },
  {
    "postid":5965,
    "postdate":1247844060,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.230309256,
    "concept_entropy":4.471783346,
    "UMASS(coherence)":0.436147324,
    "TFIDF(informativeness)":1.526763789,
    "polarity":3,
    "normalized_text_entropy":4.230309256,
    "normalized_concept_entropy":4.471783346,
    "normalized_UMASS":0.396497567,
    "normalized_TFIDF":0.066440686,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I would like to generate a JSON String from my object: Everytime I try to do this, I get this error: These are the attributes of my class: Attributes of my referenced class: Any idea what causes this error? How can I fix it?"
  },
  {
    "postid":5966,
    "postdate":1247844300,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.077819531,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.470808476,
    "polarity":0,
    "normalized_text_entropy":3.077819531,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.06400566,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"That would probably happen if you have a circular reference. Does reference your parent object?"
  },
  {
    "postid":5967,
    "postdate":1330500180,
    "tag":"1",
    "TFMvalue":0.615384615,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.355675955,
    "concept_entropy":4.32036748,
    "UMASS(coherence)":0.512397512,
    "TFIDF(informativeness)":2.135459745,
    "polarity":-2,
    "normalized_text_entropy":4.355675955,
    "normalized_concept_entropy":4.32036748,
    "normalized_UMASS":0.46581592,
    "normalized_TFIDF":0.092929509,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"I had this problem when I had a Log4J logger as a class property, such as: This can be solved by either making the logger or simply by moving it into the actual function(s)."
  },
  {
    "postid":5968,
    "postdate":1370103960,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.065033865,
    "concept_entropy":0,
    "UMASS(coherence)":0.291730286,
    "TFIDF(informativeness)":1.833971896,
    "polarity":1,
    "normalized_text_entropy":4.065033865,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.265209351,
    "normalized_TFIDF":0.079809563,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"As SLaks said StackOverflowError happen if you have circular reference in your object. To fix it you could use TypeAdapter for your object. For example, if you need only generate String from your object you could use adapter like this: and register it like this: or like this, if you have interface and want to use adapter for all its subclasses:"
  },
  {
    "postid":5969,
    "postdate":1393297800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.754517385,
    "concept_entropy":0,
    "UMASS(coherence)":0.414603315,
    "TFIDF(informativeness)":1.542294537,
    "polarity":0,
    "normalized_text_entropy":3.754517385,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.376912105,
    "normalized_TFIDF":0.067116542,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In Android, gson stack overflow turned out to be the declaration of a Handler. Moved it to a class that isn't being deserialized. Based on Zar's recommendation, I made the the handler static when this happened in another section of code. Making the handler static worked as well."
  },
  {
    "postid":5970,
    "postdate":1393298220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.352487924,
    "concept_entropy":0,
    "UMASS(coherence)":0.446979607,
    "TFIDF(informativeness)":1.564285328,
    "polarity":-3,
    "normalized_text_entropy":4.352487924,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.406345097,
    "normalized_TFIDF":0.068073523,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"I have the same problem. In my case the reason was that constructor of my serialized class take context variable, like this: When I delete this argument, error has gone."
  },
  {
    "postid":5971,
    "postdate":1393298280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.173340368,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.575706362,
    "TFIDF(informativeness)":1.738886159,
    "polarity":0,
    "normalized_text_entropy":4.173340368,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.52336942,
    "normalized_TFIDF":0.075671685,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have two java objects that are instantiated from the same class. If I set both of their properties to the exact same values and then verify that they are the same However, neither of these approaches return a true value.I have checked the properties of each and they match. How do I compare these two objects to verify that they are identical?"
  },
  {
    "postid":5972,
    "postdate":1393298160,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.180932385,
    "concept_entropy":4.276072725,
    "UMASS(coherence)":0.421057792,
    "TFIDF(informativeness)":1.24845792,
    "polarity":1,
    "normalized_text_entropy":4.180932385,
    "normalized_concept_entropy":4.276072725,
    "normalized_UMASS":0.382779811,
    "normalized_TFIDF":0.054329557,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You need to provide your own implementation of in. You should also override if there's any chance of your objects being used in a hash table. A would be to combine the hash codes of the object's fields with something like: See for more details on implementing a hash function."
  },
  {
    "postid":5973,
    "postdate":1393298340,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.486845241,
    "concept_entropy":0,
    "UMASS(coherence)":0.575706362,
    "TFIDF(informativeness)":0.977183065,
    "polarity":1,
    "normalized_text_entropy":4.486845241,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.52336942,
    "normalized_TFIDF":0.042524399,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You need to Override and.will compare the objects for equality according to the properties you need and is mandatory in order for your objects to be used correctly in and "
  },
  {
    "postid":5974,
    "postdate":1393299720,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.811373678,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.372278349,
    "polarity":0,
    "normalized_text_entropy":3.811373678,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.059717892,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"1) == evaluates reference equality in this case 2) im not too sure about the equals, but why not simply overriding the compare method and plant it inside MyClass?"
  },
  {
    "postid":5975,
    "postdate":1393298040,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.255294919,
    "concept_entropy":0,
    "UMASS(coherence)":0.740147377,
    "TFIDF(informativeness)":1.874828493,
    "polarity":0,
    "normalized_text_entropy":4.255294919,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.672861252,
    "normalized_TFIDF":0.081587533,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You need to implement the equals() method in your. The reason that didn't work is this is checking that they refer to the same instance.Since you did for each, each one is a different instance. The reason that didn't work is because you didn't implement it yourself yet.I believe it's default behavior is the same thing as. Note that you should also implement if you're going to implement because a lot of java.util Collections expect that."
  },
  {
    "postid":5976,
    "postdate":1324855800,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.323476117,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.087810921,
    "polarity":2,
    "normalized_text_entropy":4.323476117,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.047338628,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You have to correctly override method equals() from class Object: I think that my first response was misunderstood probably because I was not too precise. So I decided to to add more explanations. Why do you have to override equals()? Well, because this is in the domain of a developer to decide what does it mean for two objects to be equal. Reference equality is not enough for most of the cases.For example, imagine that you have a HashMap whose keys are of type Person. Each person has name and address. Now, you want to find detailed bean using the key. The problem is, that you usually are not able to create an instance with the same reference as the one in the map. What you do is to create another instance of class Person. Clearly, operator == will not work here and you have to use equals(). But now, we come to another problem. Let's imagine that your collection is very large and you want to execute a search. The naive implementation would compare your key object with every instance in a map using equals(). That, however, would be very expansive. And here comes the hashCode(). As others pointed out, hashcode is a single number that does not have to be unique. The important requirement is that whenever equals() gives true for two objects, hashCode() must return the same value for both of them. The inverse implication does not hold, which is a good thing, because hashcode separates our keys into kind of buckets. We have a small number of instances of class Person in a single bucket. When we execute a search, the algorithm can jump right away to a correct bucket and only now execute equals for each instance. The implementation for hashCode() therefore must distribute objects as evenly as possible across buckets. There is one more point. Some collections require a proper implementation of a hashCode() method in classes that are used as keys not only for performance reasons. The examples are: HashSet and LinkedHashSet. If they don��Η��t override hashCode(), the default ObjecthashCode() method will allow multiple objects that you might consider \"meaningfullyequal\" to be added to your \"no duplicates allowed\" set. Some of the collections that use hashCode() Have a look at those two classes from apache commons that will allow you to implement equals() and hashCode() easily"
  },
  {
    "postid":5977,
    "postdate":1324855980,
    "tag":"1",
    "TFMvalue":0.636363636,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.017452114,
    "concept_entropy":0,
    "UMASS(coherence)":0.7059733,
    "TFIDF(informativeness)":1.347601211,
    "polarity":0,
    "normalized_text_entropy":4.017452114,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.641793909,
    "normalized_TFIDF":0.058644008,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Is pointer is just used for implementing java reference variable or how it is really implemented?Below are the lines from Java language specification Does that mean it is pointer all the time?"
  },
  {
    "postid":5978,
    "postdate":1375881180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.454453226,
    "concept_entropy":0,
    "UMASS(coherence)":0.563801564,
    "TFIDF(informativeness)":1.286494747,
    "polarity":0,
    "normalized_text_entropy":4.454453226,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.512546876,
    "normalized_TFIDF":0.055984818,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In modern JVMs, references are implemented as an address. Going back to the first version of HotSpot (and a bit earlier for the \"classic VM\"), references were implemented as handles. That is a fixed pointer to a pointer. The first pointer never changes for any particular object, but as the object data itself is moved the second pointer is changed. Obviously this impacts performance in use, but is easier to write a GC for. In the latest builds of JDK7 there is support for \"compressed oops\". I believe BEA JRockit has had this for some time. Moving to 64 bit systems requires twice as much memory and hence bandwidth for addresses. \"Compressed oops\" takes advantage of the least significant three or four bits of address always being zero. 32 bits of data are shifted left three or four bits, allowing 32 or 64 GB of heap instead of 4 GB."
  },
  {
    "postid":5979,
    "postdate":1387950480,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.088773329,
    "concept_entropy":4.511410427,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.120034457,
    "polarity":0,
    "normalized_text_entropy":4.088773329,
    "normalized_concept_entropy":4.511410427,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.048740911,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The answer is going to depend on every JVM implementation, but the best way to think of it is as a handle. It is a value that the JVM can look up in a table or some other such implementation the memory location of the reference. That way the JVM can move objects around in memory during garbage collection without changing the memory pointers everywhere."
  },
  {
    "postid":5980,
    "postdate":1251102540,
    "tag":"1",
    "TFMvalue":0.684210526,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.246925594,
    "concept_entropy":0,
    "UMASS(coherence)":0.810644459,
    "TFIDF(informativeness)":0.43164953,
    "polarity":-1,
    "normalized_text_entropy":4.246925594,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.736949508,
    "normalized_TFIDF":0.018784236,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You can actually go and get the source code from here:The short answer to your question is: yes, there is a pointer to a memory location for your java variables (and a little extra). However this is a gigantic oversimplification. There are many many many C++ objects involved in moving java variables around in the VM. If you want to get dirty take a look at the hotspotsrcsharemoops package.In practice none of this matters to developing java though, as you have no direct way of working with it (and secondly you wouldn't want to, the JVM is optimized for various processor architectures)."
  },
  {
    "postid":5981,
    "postdate":1251102600,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":28,
    "Normalized_count":0.466666667,
    "text_entropy":3.93287436,
    "concept_entropy":0,
    "UMASS(coherence)":0.786103328,
    "TFIDF(informativeness)":0.226059464,
    "polarity":-1,
    "normalized_text_entropy":3.93287436,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.714639389,
    "normalized_TFIDF":0.009837505,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"A primitive type is always passed by value. where as a Class Variable is actually a reference variable for the Object. Consider a primitive type: now the value of this primitive type is stored in a memory location of address 2068.Every time you use this primitive type as a parameter, a new copy is created as it is not pass by reference but pass by value.Now consider a class variable: Now this creates an object of the class type MyClass with a variable name C1. The class variable C1 contains an address of the memory location of the object which is linked to the Valriable C1. So basically the class variable C1 points to the object location(new MyClass()).And primitive types are stored in stack and objects in heaps."
  },
  {
    "postid":5982,
    "postdate":1251103200,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.362064638,
    "concept_entropy":0,
    "UMASS(coherence)":0.942029233,
    "TFIDF(informativeness)":1.101982002,
    "polarity":-5,
    "normalized_text_entropy":4.362064638,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.856390212,
    "normalized_TFIDF":0.047955316,
    "normalized_polarity":0.166666667,
    "tagtext":"inheritance",
    "posttext":"Yes, but I can't be manipulated as you normally do in C.Bear in mind that being Java a different programming language that relies on its VM, this concept ( pointer ) should be used only as an analogy to understand better the behavior of such artifacts."
  },
  {
    "postid":5983,
    "postdate":1337055120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.144795888,
    "concept_entropy":4.637756135,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.463662854,
    "polarity":-3,
    "normalized_text_entropy":4.144795888,
    "normalized_concept_entropy":4.637756135,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02017737,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"How can I cast an Object to an int in java?"
  },
  {
    "postid":5984,
    "postdate":1337055660,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.311093571,
    "concept_entropy":0,
    "UMASS(coherence)":0.436147324,
    "TFIDF(informativeness)":1.030222139,
    "polarity":1,
    "normalized_text_entropy":4.311093571,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.396497567,
    "normalized_TFIDF":0.044832518,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you're sure that this object is an : Or, starting from Java 7, you can equivalently write: Beware, it can throw a if your object isn't an and a if your object is. This way you assume that your Object is an Integer (the wrapped int) and you unbox it into an int.is a primitive so it can't be stored as an, the only way is to have an considered/boxed as an then stored as an. If your object is a, then you can use the method to convert it into a simple int : It can throw a if your object isn't really a with an integer as content."
  },
  {
    "postid":5985,
    "postdate":1337056080,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.173001883,
    "concept_entropy":4.524837113,
    "UMASS(coherence)":0.444012818,
    "TFIDF(informativeness)":2.103762478,
    "polarity":5,
    "normalized_text_entropy":4.173001883,
    "normalized_concept_entropy":4.524837113,
    "normalized_UMASS":0.403648016,
    "normalized_TFIDF":0.091550129,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Actually is a similar topic with little practical value.As far as I understand, primitives perform better and should be used everywhere except for the cases where Object-related features (e.g. check) are needed. Right?"
  },
  {
    "postid":5986,
    "postdate":1337055420,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.138642712,
    "concept_entropy":0,
    "UMASS(coherence)":0.363825004,
    "TFIDF(informativeness)":1.673751671,
    "polarity":0,
    "normalized_text_entropy":4.138642712,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.330750004,
    "normalized_TFIDF":0.072837206,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Do not forget that, since creating a new wrapper for every boxing occurrence is quite expensive, especially considering it usually being used at a single scope of a method, uses a pool of common wrappers. This is in fact an implementation of the. When a boxing occurs for a well-known value, instead of creating a new wrapper instance, a pre-created instance is fetched from a pool and returned. One consequence is:. For example, the code d = a * b + c is using Integer classes for a, b, c and d, and the generated code is d.valueOf(a.intValue() * b.intValue() + c.intValue()). All these method invocations have their own overhead, so. And even then, if you have a of Integer wrapping int, the overhead can implies longer execution times, up to, as. Jb adds this important comment: "
  },
  {
    "postid":5987,
    "postdate":1337055900,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.23259924,
    "concept_entropy":0,
    "UMASS(coherence)":0.414603315,
    "TFIDF(informativeness)":1.030660537,
    "polarity":1,
    "normalized_text_entropy":4.23259924,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.376912105,
    "normalized_TFIDF":0.044851596,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Primitives are faster when they are, as objects need to be unboxed before use; thus there is an extra step for the VM to perform. For example, In order perform arithmetic on an Integer, it must first be converted to an int before the arithmetic can be performed. In many business applications this probably rarely matters. But if you were writing something very numnber-crunching heavy like, say, a graphics transformation processor you are a lot more likely to care."
  },
  {
    "postid":5988,
    "postdate":1337055900,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.259257761,
    "concept_entropy":4.383141356,
    "UMASS(coherence)":0.529093661,
    "TFIDF(informativeness)":1.204317125,
    "polarity":1,
    "normalized_text_entropy":4.259257761,
    "normalized_concept_entropy":4.383141356,
    "normalized_UMASS":0.480994237,
    "normalized_TFIDF":0.052408667,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"yes, primitives are faster than objects.Since java 5 you can even mix primitives and objects without manually converting one to another.The autoboxing mechanism takes care of just that. this means that if you put a primitive in a collection, the compiler will not complain, and convert the primitive to an object implicitly."
  },
  {
    "postid":5989,
    "postdate":1368133680,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.319787947,
    "concept_entropy":0,
    "UMASS(coherence)":0.356470028,
    "TFIDF(informativeness)":0.836089665,
    "polarity":0,
    "normalized_text_entropy":4.319787947,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.324063662,
    "normalized_TFIDF":0.036384391,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you need store primitives in collections you might use. I prefer using primitives to wrappers, only place that absolutely needs to have wrappers are entity classes. Databases support nulls, so entities should too.I once worked on project that used primitives (and homebrew ORM) in database access: And then you had: God it was evil. "
  },
  {
    "postid":5990,
    "postdate":1337056080,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.234257216,
    "concept_entropy":4.272924843,
    "UMASS(coherence)":0.498151691,
    "TFIDF(informativeness)":1.107977802,
    "polarity":0,
    "normalized_text_entropy":4.234257216,
    "normalized_concept_entropy":4.272924843,
    "normalized_UMASS":0.452865174,
    "normalized_TFIDF":0.048216237,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I would say you should be worried about using primitives over wrappers only when you profile your application and see that the autoboxing is a performance or memory issue. In my experience memory becomes an issue before CPU cycles when talking about primitives vs wrapping objects."
  },
  {
    "postid":5991,
    "postdate":1224515100,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.437532649,
    "concept_entropy":3.898412848,
    "UMASS(coherence)":0.365635578,
    "TFIDF(informativeness)":1.424257635,
    "polarity":1,
    "normalized_text_entropy":4.437532649,
    "normalized_concept_entropy":3.898412848,
    "normalized_UMASS":0.33239598,
    "normalized_TFIDF":0.061979891,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":5992,
    "postdate":1224515400,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.372194563,
    "concept_entropy":0,
    "UMASS(coherence)":0.583982043,
    "TFIDF(informativeness)":0.766617894,
    "polarity":0,
    "normalized_text_entropy":4.372194563,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.530892766,
    "normalized_TFIDF":0.033361165,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You're defining an anonymous class that implements the interface, and immediately creating an object of type."
  },
  {
    "postid":5993,
    "postdate":1224515400,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.373863937,
    "concept_entropy":4.212284372,
    "UMASS(coherence)":0.551714754,
    "TFIDF(informativeness)":1.326159315,
    "polarity":0,
    "normalized_text_entropy":4.373863937,
    "normalized_concept_entropy":4.212284372,
    "normalized_UMASS":0.501558867,
    "normalized_TFIDF":0.057710914,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What this special syntax for anonymous inner classes does under the hood is create a class called. You can find that class file in your class folder next to the Test class, and if you printed you could also see that."
  },
  {
    "postid":5994,
    "postdate":1224515460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.221164142,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.715383553,
    "polarity":1,
    "normalized_text_entropy":4.221164142,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.031131583,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"This notation is shorthand for So in the end you're creating an instance of a concrete class, whose behavior you defined inline. You can do this with abstract classes too, by providing implementations for all the abstract methods inline."
  },
  {
    "postid":5995,
    "postdate":1224516060,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.123195551,
    "concept_entropy":0,
    "UMASS(coherence)":0.360637651,
    "TFIDF(informativeness)":2.350011918,
    "polarity":-2,
    "normalized_text_entropy":4.123195551,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.32785241,
    "normalized_TFIDF":0.102266247,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"i think your object has nothing to do with the interface. If you comment out the whole interface, still you will get the same output. Its just anonymous class created. I think, unless you use the class \"implements\" you cant implement the interface. But i dunno how naming collision doesn'thappen in your case. "
  },
  {
    "postid":5996,
    "postdate":1224515520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.215494988,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.463009474,
    "TFIDF(informativeness)":1.407128735,
    "polarity":-1,
    "normalized_text_entropy":4.215494988,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.420917704,
    "normalized_TFIDF":0.061234487,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Is superclass of all the custom class/objects inherited implicitly? I thought java didn't support multiple inheritance.The reason I ask is if I already inherit from another class in my custom class and again java is forcing implicit inheritance of on top of it, is it not multiple inheritance? Also, is java.lang.class Class also the superclass for all custom classes/Objects? If not, how in java reflections we can get the type of class for any class passed or call isInstance on any object?"
  },
  {
    "postid":5997,
    "postdate":1224515580,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.253532855,
    "concept_entropy":0,
    "UMASS(coherence)":0.428663845,
    "TFIDF(informativeness)":1.622203089,
    "polarity":-1,
    "normalized_text_entropy":4.253532855,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.389694405,
    "normalized_TFIDF":0.070593949,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Everything is an Object, that said you could see the structure as this: and not as this: Where extends both, it's not like this last example, but it's that which."
  },
  {
    "postid":5998,
    "postdate":1224517860,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.29776805,
    "concept_entropy":4.475243702,
    "UMASS(coherence)":0.566074291,
    "TFIDF(informativeness)":0.679556059,
    "polarity":1,
    "normalized_text_entropy":4.29776805,
    "normalized_concept_entropy":4.475243702,
    "normalized_UMASS":0.514612992,
    "normalized_TFIDF":0.029572466,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Every class without an explicit superclass inherits from and every other class inherits from it indirectly because when you go up the inheritance tree, you will finally end at a class without an explicit superclass and then at.is the superclass of all class objects (not of all objects!), for example of."
  },
  {
    "postid":5999,
    "postdate":1224524100,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.306926795,
    "concept_entropy":0,
    "UMASS(coherence)":0.609226675,
    "TFIDF(informativeness)":1.670371074,
    "polarity":4,
    "normalized_text_entropy":4.306926795,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.553842432,
    "normalized_TFIDF":0.072690091,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"Multiple inheritance means that one class has multiple predecessors. If A inherits from B, and B inherits from C, this is not multiple inheritance. I don't understand the second question (\"java.lang.class Class\"); you might want to rephrase that to clarify."
  },
  {
    "postid":6000,
    "postdate":1224515520,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.107100936,
    "concept_entropy":4.552616055,
    "UMASS(coherence)":0.591465182,
    "TFIDF(informativeness)":2.057061252,
    "polarity":-3,
    "normalized_text_entropy":4.107100936,
    "normalized_concept_entropy":4.552616055,
    "normalized_UMASS":0.53769562,
    "normalized_TFIDF":0.089517816,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":" is the superclass of every other class. When your class inherits from your class, it is not the child of, but it is still a descendant, because its parent is a descendant of. So if you don't specify a superclass/parent, it will automatically be Object. If you do specify a parent, then will still be a superclass, because it is by definition a superclass of the parent class.is not a superclass of each class, but the class specifies a means to get each class's with the method."
  },
  {
    "postid":6001,
    "postdate":1386908880,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.179815796,
    "concept_entropy":4.180886643,
    "UMASS(coherence)":0.643930258,
    "TFIDF(informativeness)":1.010410522,
    "polarity":-1,
    "normalized_text_entropy":4.179815796,
    "normalized_concept_entropy":4.180886643,
    "normalized_UMASS":0.585391144,
    "normalized_TFIDF":0.043970369,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The custom class that you inherit from itself inherits directly or implicitly from, so you indirectly inherit from Object. The chain goes.No multiple inheritance necessary. Multiple inheritance is when you directly inherit from two unrelated classes. For example, if you have a class that inherits directly from both and, that would be multiple inheritence."
  },
  {
    "postid":6002,
    "postdate":1341489420,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.979819211,
    "concept_entropy":4.331178241,
    "UMASS(coherence)":0.526435963,
    "TFIDF(informativeness)":0.996348369,
    "polarity":-1,
    "normalized_text_entropy":3.979819211,
    "normalized_concept_entropy":4.331178241,
    "normalized_UMASS":0.478578148,
    "normalized_TFIDF":0.043358422,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Minor correction: regarding the following expression: A class is a superclass of another class. Objects or of do not have as their superclass (since they are objects/object instances, not classes themselves.) The most appropriate description isthat these objects are of class, which has as its superclass. Now, to your question on. It is the superclass of everything that can be instantiated by the java runtime. That includes both: It doesn't. It only support single (or) inheritance (in conjunction with multiple (or) inheritance.You are confusing inheritance with class hierarchy. Pls see further below. And that's fine with multiple inheritance. Say you have a class B that you wrote inheriting from a class alreadyprovided by Java (say class A). So there is a linear, transitive relation as follows: Where stands for. Any class inheriting from Object can only have. At no point you'll have a class C for which the following constrain for any two classes A and B does not hold: Meaning, for all classes A and B such that A is an of B, then for all classes C, C can only be an of B *C is itself A. With single inheritance you can have (theoretically) an infinite inheritance chain so long as every class in the chain is preceeded by immediate parent. As a useful analogy, this resemble the relationship in natural numbers ( ). : This is not stuff that you use in day-to-day programming life activities. However, knowing precisely what these things mean under the hood will tremendously help you get through object orientation. No (see above.) As opposed to single inheritance - explained above - in multiple inheritance you can have multiple immediate parents (as seen in C++).As we noticed in the definitions above, the transitive inheritance relation '>' is from one class to another. But with multiple inheritance, the relation is from a set of superclasses to a single class: And in C++ where you can have classes without parents, then the set can be the null set.In java, you also have multiple inheritance, but limited to (or types.) No. It will help your learning if you take a visit to the Javadoc manuals which are available online. Look it up. Really. Because instances of java.lang.Class (and all classes used by java reflections) are meta-data descriptors for other classes. This has nothing to do with inheritance. What you are referring to here is known as. Furthermore, java.lang.Class is a final class; ergo, it cannot be the superclass of anything.The function of java.lang.Class is to be a meta-data provider/descriptor for all instances and subclasses of java.lang.Object (including java.lang.Class itself.) The class field associated to each class (.ie. String.class) is a static, class-level field describing the meta-data associated to that class.The meta-data contained/described by java.lang.Class contains meta-data accessor objects for methods, constructors and fields. Again, this has nothing to do with inheritance. Inheritance =/= meta-programming. Hope it helps."
  },
  {
    "postid":6003,
    "postdate":1341491100,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.907769418,
    "concept_entropy":4.406232565,
    "UMASS(coherence)":0.501565229,
    "TFIDF(informativeness)":0.886925139,
    "polarity":0,
    "normalized_text_entropy":3.907769418,
    "normalized_concept_entropy":4.406232565,
    "normalized_UMASS":0.45596839,
    "normalized_TFIDF":0.038596615,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In class: In class: "
  },
  {
    "postid":6004,
    "postdate":1341491160,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.244711293,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.287717415,
    "TFIDF(informativeness)":1.08724684,
    "polarity":1,
    "normalized_text_entropy":4.244711293,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.261561286,
    "normalized_TFIDF":0.047314081,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Let's step through it: ... is actually more complicated than it looks, because you're creating a new String. It might be easier to think of as: (To be absolutely accurate - these are not really equivalent. In the original the 'new String' is created at compile time and is part of the .class image. You can think of this as a performance hack.) So, first the JVM allocates space for the String. You typically don't know or care about the internals of the String implementation, so just take it on trust that a chunk of memory is being used to represent \"some property value\". Also, you have some memory temporarily allocated containing a reference to the String. In the second form, it's explicitly called; in your original form Java handles it without naming it. Next the JVM allocates space for a new SomeObject. That's a bit of space for Java's internal bookkeeping, and space for each of the object's fields. In this case, there's just one field,. Bear in mind that is just a reference to a String. For now, it'll be initialised to null. Next, the constructor is executed.All this does is copy the to the String, into your field. Finally, space is allocated for the object reference. This is set with a reference to the SomeObject.works in exactly the same way."
  },
  {
    "postid":6005,
    "postdate":1341491460,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.292852133,
    "concept_entropy":0,
    "UMASS(coherence)":0.276246617,
    "TFIDF(informativeness)":1.247618766,
    "polarity":1,
    "normalized_text_entropy":4.292852133,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.251133288,
    "normalized_TFIDF":0.054293039,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" by Dr. Heinz M. Kabutz gives a precise answer, plus a program to calculate the memory usage.The relevant part: As people have pointed out in the comments, Strings are a special case, because they can be interned.You can reason about the space they take up in the same way, but keep in mind that what looks like multiple copies of the same String may actually point to the same reference."
  },
  {
    "postid":6006,
    "postdate":1341583020,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.073378904,
    "concept_entropy":4.328180488,
    "UMASS(coherence)":0.396638316,
    "TFIDF(informativeness)":1.840632923,
    "polarity":0,
    "normalized_text_entropy":4.073378904,
    "normalized_concept_entropy":4.328180488,
    "normalized_UMASS":0.360580287,
    "normalized_TFIDF":0.080099433,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Points to remember: Ref: "
  },
  {
    "postid":6007,
    "postdate":1341491340,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.263259021,
    "concept_entropy":0,
    "UMASS(coherence)":0.443538254,
    "TFIDF(informativeness)":2.163068779,
    "polarity":0,
    "normalized_text_entropy":4.263259021,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.403216595,
    "normalized_TFIDF":0.094130981,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6008,
    "postdate":1341490740,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.171396533,
    "concept_entropy":0,
    "UMASS(coherence)":0.455150487,
    "TFIDF(informativeness)":0.495167711,
    "polarity":1,
    "normalized_text_entropy":4.171396533,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.41377317,
    "normalized_TFIDF":0.021548377,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Googled for \"Java Memory Management\" and got this - "
  },
  {
    "postid":6009,
    "postdate":1341494400,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.287654416,
    "concept_entropy":3.910440495,
    "UMASS(coherence)":0.63826861,
    "TFIDF(informativeness)":1.131286448,
    "polarity":2,
    "normalized_text_entropy":4.287654416,
    "normalized_concept_entropy":3.910440495,
    "normalized_UMASS":0.580244191,
    "normalized_TFIDF":0.049230567,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Why wasn't the class declared to be abstract ? Surely for an Object to be useful it needs added state or behaviour, an Object class is an abstraction, and as such it should have been declared abstract ..."
  },
  {
    "postid":6010,
    "postdate":1274972460,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.361753154,
    "concept_entropy":4.363037776,
    "UMASS(coherence)":0.757285122,
    "TFIDF(informativeness)":0.900261404,
    "polarity":5,
    "normalized_text_entropy":4.361753154,
    "normalized_concept_entropy":4.363037776,
    "normalized_UMASS":0.68844102,
    "normalized_TFIDF":0.039176974,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Ande, I think you are approaching this -- pun NOT intended -- with an unnecessary degree of abstraction.I think this (IMHO) unnecessary level of abstraction is what is causing the \"problem\" here.You are perhaps approaching this from a mathematical theoretical approach, where many of us are approaching this from a \"programmer trying to solve problems\" approach.I believe this difference in approach is causing the disagreements. When programmers look at practicalities and how to actually something, there are a number of times when you need some totally arbitrary Object whose actual instance is totally irrelevant.It just cannot be null.The example I gave in a comment to another post is the implementation of (== or or type of choice), which is commonly done by using a backing and using the keys as the Set.You often cannot use as the value, so what is commonly done is to use a static instance as the value, which will be ignored and never used.However, some non-null placeholder is needed. Another common use is with the keyword where is needed to synchronize on, and you want to ensure that your synchronizing item is totally private to avoid deadlock where different classes are unintentionally synchronizing on the same lock. A very common idiom is to allocate a to use in a class as the lock.To be fair, as of Java 5 and and related additions, this idiom is measurably less applicable. Historically, it has been quite useful in Java to have be instantiable.You could make a good point that with small changes in design or with small API changes, this would no longer be necessary.You're probably correct in this. And yes, the API could have provided a class that extends without adding anything at all, to be used as a placeholder for the purposes described above.But -- if you're extending but adding nothing, what is the value in the class other than allowing to be abstract?Mathematically, theoretically, perhaps one could find a value, but pragmatically, what value would it add to do this? There are times in programming where you need an object, object, concrete object that is not null, something that you can compare via and/or, but you just don't need any other feature to this object.It exists only to serve as a unique identifier and otherwise does absolutely nothing.satisfies this role perfectly and (IMHO) very cleanly. I would guess that is part of the reason why was not declared abstract: It is directly useful for it not to be."
  },
  {
    "postid":6011,
    "postdate":1274972820,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.401293742,
    "concept_entropy":0,
    "UMASS(coherence)":0.663978553,
    "TFIDF(informativeness)":1.798086399,
    "polarity":-1,
    "normalized_text_entropy":4.401293742,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.603616866,
    "normalized_TFIDF":0.078247921,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"An is useful even if it does not have any state or behaviour specific to it. One example would be its use as a generic guard that's used for synchronization: While this class is a bit simple in its implementation (it isn't evident here why it's useful to have an explicit object, you could just declare the method) there are several cases where this is useful."
  },
  {
    "postid":6012,
    "postdate":1274973420,
    "tag":"1",
    "TFMvalue":0.684210526,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.312487364,
    "concept_entropy":4.386963328,
    "UMASS(coherence)":0.528260538,
    "TFIDF(informativeness)":0.793329724,
    "polarity":0,
    "normalized_text_entropy":4.312487364,
    "normalized_concept_entropy":4.386963328,
    "normalized_UMASS":0.480236853,
    "normalized_TFIDF":0.034523592,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Does Object specify methods that classes extending it must implement in order to be useful? No, and therefor it needn't be abstract.The concept of a class being abstract has a well defined meaning that does not apply to Object."
  },
  {
    "postid":6013,
    "postdate":1274973540,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.303381764,
    "concept_entropy":0,
    "UMASS(coherence)":0.869805497,
    "TFIDF(informativeness)":1.128037668,
    "polarity":0,
    "normalized_text_entropy":4.303381764,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.79073227,
    "normalized_TFIDF":0.049089189,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can instantiate for synchronization locks:"
  },
  {
    "postid":6014,
    "postdate":1274972640,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.231860099,
    "concept_entropy":4.452690676,
    "UMASS(coherence)":0.514887831,
    "TFIDF(informativeness)":2.864277504,
    "polarity":0,
    "normalized_text_entropy":4.231860099,
    "normalized_concept_entropy":4.452690676,
    "normalized_UMASS":0.468079846,
    "normalized_TFIDF":0.124645713,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am not sure this is the reason, but it allows (or allowed, as there are now better ways of doing it) for an Object to be used as a lock:"
  },
  {
    "postid":6015,
    "postdate":1274974500,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.412400913,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.102973916,
    "polarity":0,
    "normalized_text_entropy":4.412400913,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.047998481,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"How is Object any more offensive than null? It makes a good place marker (as good as null anyway). Also, I don't think it would be good design to make an object abstract without an abstract method that needs to go on it. I'm not saying null is the best thing since sliced bread--I read an article the other day by the \"Inventor\" discussing the cost/value of having the concept of null...(I didn't even think null was inventable!I guess someone somewhere could claim he invented zero..)just that being able to instantiate Object is no worse than being able to pass null."
  },
  {
    "postid":6016,
    "postdate":1274974860,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.350411647,
    "concept_entropy":4.440831685,
    "UMASS(coherence)":0.603222475,
    "TFIDF(informativeness)":1.617740468,
    "polarity":2,
    "normalized_text_entropy":4.350411647,
    "normalized_concept_entropy":4.440831685,
    "normalized_UMASS":0.548384068,
    "normalized_TFIDF":0.070399748,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You never know when you might want to use a simple Object as a placeholder. Think of it as like having a zero in a numerical system (and null doesn't work for this, since null represents the absence of data)."
  },
  {
    "postid":6017,
    "postdate":1381692960,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.250121615,
    "concept_entropy":4.033569416,
    "UMASS(coherence)":0.599359426,
    "TFIDF(informativeness)":1.033987927,
    "polarity":0,
    "normalized_text_entropy":4.250121615,
    "normalized_concept_entropy":4.033569416,
    "normalized_UMASS":0.544872205,
    "normalized_TFIDF":0.044996395,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"There be a reason to make a class abstract. One is to prevent clients from instantiating the class and force them into using only subclasses (for whatever reasons). Another is if you wish to use it as an interface by providing abstract methods, which subclasses implement. Probably, the designers og Java saw no such reasons, so remains concrete."
  },
  {
    "postid":6018,
    "postdate":1381693260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.423869506,
    "concept_entropy":0,
    "UMASS(coherence)":0.441112036,
    "TFIDF(informativeness)":0.56712042,
    "polarity":1,
    "normalized_text_entropy":4.423869506,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.401010942,
    "normalized_TFIDF":0.024679567,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"As always, Guava comes to help: withStuff here can be used to kill nulls / Object instances for \"a not-null placeholder\" from the code. There are entirely seperated questions here:"
  },
  {
    "postid":6019,
    "postdate":1381697280,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":16,
    "Normalized_count":0.266666667,
    "text_entropy":4.300840329,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.744491416,
    "polarity":1,
    "normalized_text_entropy":4.300840329,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.03239828,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Are there any classes that don't inherit Object as SuperClass or maybe have become Obsolete/deprecated?"
  },
  {
    "postid":6020,
    "postdate":1381696920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.464392373,
    "concept_entropy":4.536962018,
    "UMASS(coherence)":0.510712167,
    "TFIDF(informativeness)":0.87514672,
    "polarity":-2,
    "normalized_text_entropy":4.464392373,
    "normalized_concept_entropy":4.536962018,
    "normalized_UMASS":0.464283788,
    "normalized_TFIDF":0.03808405,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"According to, java.lang.Object does not extend Object. Other than that, all classes i.e. All classes implicitly extend Object if no other superclass is given. Interfaces, on the other hand, do not extend Object, but they cannot contain invokable methods, nor can objects be instantiated from them. When interfaces are finally implemented (ha! ha! pun!), the implementing class will necessarily extend Object. (and, no, Object implements no interfaces)"
  },
  {
    "postid":6021,
    "postdate":1406323920,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.261073634,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.363077095,
    "polarity":-1,
    "normalized_text_entropy":4.261073634,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.015800146,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"According toSo, all objects in Java extends it directly or indirectly."
  },
  {
    "postid":6022,
    "postdate":1292436600,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.309990895,
    "concept_entropy":0,
    "UMASS(coherence)":0.444087426,
    "TFIDF(informativeness)":0.584418211,
    "polarity":1,
    "normalized_text_entropy":4.309990895,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.403715842,
    "normalized_TFIDF":0.025432321,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"All Java classes inherit (directly - by default, or via parents). If some class or method become deprecated with some platform release, it is always reflected in appropriate JavaDoc."
  },
  {
    "postid":6023,
    "postdate":1292436780,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.307130064,
    "concept_entropy":4.321492482,
    "UMASS(coherence)":0.62102862,
    "TFIDF(informativeness)":0.795835652,
    "polarity":5,
    "normalized_text_entropy":4.307130064,
    "normalized_concept_entropy":4.321492482,
    "normalized_UMASS":0.564571473,
    "normalized_TFIDF":0.034632644,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"There is exactly one of those, and it is itself. Also all interfaces. There are plenty of those. See the Javadoc."
  },
  {
    "postid":6024,
    "postdate":1292437500,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":4.473490378,
    "concept_entropy":0,
    "UMASS(coherence)":0.718712786,
    "TFIDF(informativeness)":0.606503783,
    "polarity":-1,
    "normalized_text_entropy":4.473490378,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.65337526,
    "normalized_TFIDF":0.026393426,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"My array does not contain any string. But its contains object references. Every object reference returns name, id, author and publisher by toString method. Now I need to sort that array of objects by the name. I know how to sort, but I do not know how to extract the name from the objects and sort them. "
  },
  {
    "postid":6025,
    "postdate":1292436960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.325578943,
    "concept_entropy":0,
    "UMASS(coherence)":0.486955085,
    "TFIDF(informativeness)":0.56391635,
    "polarity":0,
    "normalized_text_entropy":4.325578943,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.442686441,
    "normalized_TFIDF":0.024540135,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You have two ways to do that, both use the utility class"
  },
  {
    "postid":6026,
    "postdate":1292439660,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.379296227,
    "concept_entropy":0,
    "UMASS(coherence)":0.379831291,
    "TFIDF(informativeness)":0.652964735,
    "polarity":1,
    "normalized_text_entropy":4.379296227,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.345301174,
    "normalized_TFIDF":0.028415283,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can try something like this:"
  },
  {
    "postid":6027,
    "postdate":1280310480,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":3.980929166,
    "concept_entropy":0,
    "UMASS(coherence)":0.348951454,
    "TFIDF(informativeness)":0.757625988,
    "polarity":-2,
    "normalized_text_entropy":3.980929166,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.317228595,
    "normalized_TFIDF":0.032969861,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"Some brief background: I have a java app that's used to see when certain locations (classrooms) are in use or not.The user puts a location identifier into a search box and the program displays any events (classes) matching.The app will display all the pertinent information (class name, room #, professor name, day of week, time of class), classes that are in-session (or soon to be) are color-coded so you can tell at-a-glance if there's anything coming up.The data comes from an html page I'm scraping from (I don't have SQL access). Everything to this point works, I'm using JavaSwing for the UI.The events are stored as a basic object I made to hold it, the only part that matters for my question is that it stores to Java Date objects for the start and end time of each event. What I'm trying to do now is add a way to check for and display the gaps between events (when a classroom is empty).I have all the data I need (all the start and end times) but I'm having trouble coming up with a way to actually to actually code the program to see the gaps. And if that's not challenging enough: I want to implement it as simply as possible, not using any extra libraries.I don't want to re-create the wheel, but I'd much rather hash out the code by hand than just throw in an import and a couple method calls; half the point of this project is to challenge myself. For now I'm not looking for advice on how to actually display the data, for now I'm just trying to logically organize it in a usable way.It will end up being displayed in a JTable, but I'm not working on that implementation yet. My scraper pulls from an html table something like and parses it down to two strings and.These get passed with other data to my Course object. My Course object has a DateFormat set so it can interpret the incoming Strings into Dates. The idea is that I'll set two times, setting the window in which I want to check for gaps.I want to pick an interval, say 15 minutes, and find all the gaps of 15 or more minutes during which a classroom is empty, i.e. no classes meeting."
  },
  {
    "postid":6028,
    "postdate":1280324280,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.037180772,
    "concept_entropy":4.436209191,
    "UMASS(coherence)":0.703877453,
    "TFIDF(informativeness)":1.970946013,
    "polarity":1,
    "normalized_text_entropy":4.037180772,
    "normalized_concept_entropy":4.436209191,
    "normalized_UMASS":0.639888594,
    "normalized_TFIDF":0.085770311,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I don't have a complete answer, but I have some suggestions. A represents a date-time in UTC/GMT, that is, no time zone offset. Your values are in a time zone. In the long run, you'll be better off by not ignoring that time zone. Adjust your values. Generally think, work, and store date-times in UTC/GMT. Convert to local time as needed for presentation in the user interface. While a java.util.Date has no time zone, a Joda-Time (discussed below) does indeed know its own time zone and time zone offset. The java.util.Date and Calendar classes bundled with Java are notoriously troublesome. Avoid them. Instead, use either: Don't think of Joda-Time as any old \"extra library\". The first thing I do when creating a new project in my IDE is add the Joda-Time library. It is just that good. Or j.u.Date/Calendar is just that bad, depending on your perspective. The best way to handle a span of time is to make the beginning inclusive and the ending exclusive. Write logic where you check for GREATER THAN OR EQUALS to the beginning and LESS THAN the ending (not testing for equals on the ending). I discuss this more in along with a diagram. Joda-Time offers these classes for defining a span of time: Period, Duration, and Internal. The Hours and similar classes offer some handy utility methods. If your goal is to make a list of gaps, of spans of time where a classroom is not assigned to a class, then the obvious way it seems to me is to sort the classes chronologically (and by classroom) as in. Define an \"available\" span of time where its beginning is the prior class��Η�� ending, and its ending is the next class��Η�� beginning. I've no experience in this arena, so there may be a more clever way. See about sorting a List of Intervals. Here is some example code using Joda-Time 2.3. Specify a time zone rather than rely on default��Η�_ Create three classes as sample data, in arbitrary order��Η�_ Collect the sample data into a List��Η�_ Sort the List using a custom Comparator (see class definition below)��Η�_ Make a collection of objects representing each gap between classes we find��Η�_ The class definition for the used in code above and lifted from��Η�_ When run��Η�_ You said you only care about gaps at least 15 minutes long. A instance in Joda-Time represents the milliseconds between the start and stop points of an Interval. Here is some off-the-top-of-my-head code.Renamed \"gap\" var from above to \"gapInterval\" to remind you it is an instance. Note that is a class. The \"minutes\" var seen below is an instance, an integer primitive (\"int\"). Calling the method renders an primitive.The string outputs you see there are not arbitrary. Those are formats. That handy standard defines string representations of as well as the. That standard also defines a string representation of that may prove useful to you, in the format of such as \"P3Y6M4DT12H30M5S\" meaning \"three years, six months, four days, twelve hours, thirty minutes, and five seconds\". Or shorter, as in your case, a class may be for one and a quarter hours. Joda-Time uses ISO 8601 as its default for most everything, as both inputs and outputs."
  },
  {
    "postid":6029,
    "postdate":1280330580,
    "tag":"1",
    "TFMvalue":0.730769231,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.253938756,
    "concept_entropy":4.560812432,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.973971884,
    "polarity":0,
    "normalized_text_entropy":4.253938756,
    "normalized_concept_entropy":4.560812432,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.042384657,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Sorting is probably the key to your problem here. Presumably you have a big collection of all the courses you've scraped.First you'll need to be able to pull out all the courses given a particular location into a new list.You'll want this list to be sorted by the course date.Check out the various sorted collections (e.g.).You'll probably also need to make use of a \"comparator\" to make sure your courses get sorted by their date. Once you have that list, it's just a matter of iterating over it and finding the gaps."
  },
  {
    "postid":6030,
    "postdate":1280310720,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.045299822,
    "concept_entropy":4.590482611,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.147317299,
    "polarity":0,
    "normalized_text_entropy":4.045299822,
    "normalized_concept_entropy":4.590482611,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049928187,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"myMap is always null. getLastNonConfigurationInstance() returns an object. My map has two keys \"symbol\" and \"name\"."
  },
  {
    "postid":6031,
    "postdate":1280310960,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.409190074,
    "concept_entropy":4.565921804,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.899658108,
    "polarity":0,
    "normalized_text_entropy":4.409190074,
    "normalized_concept_entropy":4.565921804,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.03915072,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If returns a non-null object, then will either return the same object (if that object is a), or throw a. The situation that you describe is not possible, not unless you've uncovered a long-hidden bug in Java's cast operator.Hint: you haven't. Verify that is actually returning a non-null object. Verify that is actually null.If you're using a debugger to check those values, try printing them to the console instead.Debuggers can lie to you sometimes, or at least mislead."
  },
  {
    "postid":6032,
    "postdate":1353858240,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.376651071,
    "concept_entropy":2.923231429,
    "UMASS(coherence)":0.692140969,
    "TFIDF(informativeness)":0.411556138,
    "polarity":1,
    "normalized_text_entropy":4.376651071,
    "normalized_concept_entropy":2.923231429,
    "normalized_UMASS":0.629219063,
    "normalized_TFIDF":0.017909825,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I faced the same issue. Looks like calling getLastNonConfigurationInstance() in anything other than onCreate() returns null. I moved the statement to onCreate() method and voila..it returned what I expected it to return."
  },
  {
    "postid":6033,
    "postdate":1280312520,
    "tag":"1",
    "TFMvalue":0.818181818,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.093496319,
    "concept_entropy":4.512589341,
    "UMASS(coherence)":0.700385306,
    "TFIDF(informativeness)":0.862798588,
    "polarity":3,
    "normalized_text_entropy":4.093496319,
    "normalized_concept_entropy":4.512589341,
    "normalized_UMASS":0.636713915,
    "normalized_TFIDF":0.037546692,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"You haven't told us in what situation this happens? onRetainNonConfigurationInstance() is called before an Activity's onDestroy() when a configuration change happens."
  },
  {
    "postid":6034,
    "postdate":1280324460,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.947109655,
    "concept_entropy":4.586976169,
    "UMASS(coherence)":0.491507167,
    "TFIDF(informativeness)":0.604282157,
    "polarity":0,
    "normalized_text_entropy":3.947109655,
    "normalized_concept_entropy":4.586976169,
    "normalized_UMASS":0.446824697,
    "normalized_TFIDF":0.026296747,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"While searching for an explanation on how a reference variable is implemented in Java I came across this question: In there was a comment by Samuel_xL saying that specifying the vendor name would be a better question.So my question is that how an instance variable in implemented in Oracle JVM? Is it a pointer to an address? I know that a reference holds bits that tell the JVM how to access the object.But how is it structured??"
  },
  {
    "postid":6035,
    "postdate":1280323980,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.132526434,
    "concept_entropy":4.398888113,
    "UMASS(coherence)":0.354847058,
    "TFIDF(informativeness)":0.856981969,
    "polarity":1,
    "normalized_text_entropy":4.132526434,
    "normalized_concept_entropy":4.398888113,
    "normalized_UMASS":0.322588235,
    "normalized_TFIDF":0.037293568,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"From what I've been able to determine, object references are stored either as a type called (ordinary object pointer) or, depending on whether the JVM is using compressed object pointers or not. An is a C++ class that wraps a pointer to a Java object, and a is a 32-bit unsigned integer that has to be converted into a proper pointer in order to access the object; they have no internal structure. You can find the declarations here: "
  },
  {
    "postid":6036,
    "postdate":1280311320,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.116135137,
    "concept_entropy":0,
    "UMASS(coherence)":0.425734653,
    "TFIDF(informativeness)":0.897864861,
    "polarity":0,
    "normalized_text_entropy":4.116135137,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.387031503,
    "normalized_TFIDF":0.039072683,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm trying to write an equals method for objects that compares their fields, and if equal, then true: What would be wrong with this?"
  },
  {
    "postid":6037,
    "postdate":1280312040,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.186091489,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.282122361,
    "polarity":0,
    "normalized_text_entropy":4.186091489,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.055794544,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I looked at, and it seems the field is a. I'm going to assume that you haven't changed the type of that field. That's a class, and therefore a reference type, which means you need to use or a similar method to compare the colors (I haven't used that class before, so I can't tell you exactly which method to use). As in the comments, using to compare reference types is really comparing memory addresses in Java. It'll only return if they both refer to the same object in memory.that you need to use the base class for your parameter, otherwise you're not overriding, but actually overloading it, i.e. providing a different way of calling the same-named method. If you happen to pass an object of a totally different class by accident, unexpected behavior might occur (although then again if they are of different classes it will return correctly anyway)."
  },
  {
    "postid":6038,
    "postdate":1280325660,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.228083637,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.692633865,
    "polarity":1,
    "normalized_text_entropy":4.228083637,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.073658909,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In principle, this looks fine. Note however that you are comparing using. For primitives, this is no problem, but for objects it will check for the same instance, not the same value. This may or may not be what you want. If you are comparing e.g. java.lang.Strings, you'd want to use instead (and check for)."
  },
  {
    "postid":6039,
    "postdate":1280326680,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.076584699,
    "concept_entropy":0,
    "UMASS(coherence)":0.455150487,
    "TFIDF(informativeness)":0.833358321,
    "polarity":0,
    "normalized_text_entropy":4.076584699,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.41377317,
    "normalized_TFIDF":0.03626553,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you are comparing object variables instead of primitive types, you should be using a comparison instead. In your case, it also depends on how you created the Color objects.if you used the static instances (such as Color.BLUE), then actually, it shouldn't matter.If you created the Color object from rgb values, it definitely matters.Either way, it is best to get used to using .equals() for object variables."
  },
  {
    "postid":6040,
    "postdate":1280312700,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.253784308,
    "concept_entropy":0,
    "UMASS(coherence)":0.707482935,
    "TFIDF(informativeness)":2.194552516,
    "polarity":0,
    "normalized_text_entropy":4.253784308,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.643166305,
    "normalized_TFIDF":0.095501069,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"One thing to consider is that you are not overriding the method from, as you are changing the param type.You might find this method will not be used in all cases as you might expect.Instead of:you should have:and then internally test whether the param is an and cast as necessry."
  },
  {
    "postid":6041,
    "postdate":1297246500,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.291727127,
    "concept_entropy":4.524113431,
    "UMASS(coherence)":0.602079869,
    "TFIDF(informativeness)":0.996944115,
    "polarity":3,
    "normalized_text_entropy":4.291727127,
    "normalized_concept_entropy":4.524113431,
    "normalized_UMASS":0.547345335,
    "normalized_TFIDF":0.043384347,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I am new to JAVA programming.I have read it in my book This should return as a & b refer to different instances of String objects. Bcoz the assignments operator compares the instances of objects but Still I am getting a. I am using Eclipse IDE. That bit of code prints ��ΗΓfalse��ΗΝ for s == sToo. That's because s and sToo arereferences to different instances of the String object. So, even though they have the same value, they arenot equal in the eyes of the equality operators. Also, s == ��ΗΓs��ΗΝ prints false, because the string literalproduces yet another instance of the String class. Name of book: JAVA 7 for Absolute Beginners "
  },
  {
    "postid":6042,
    "postdate":1272044220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.3109901,
    "concept_entropy":0,
    "UMASS(coherence)":0.740300308,
    "TFIDF(informativeness)":1.102654617,
    "polarity":0,
    "normalized_text_entropy":4.3109901,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.67300028,
    "normalized_TFIDF":0.047984586,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This is an optimisation called in which compile-time constant Strings (aka known to be identical) can be set such that they really are the same object in memory (saving space for one of the most used types of object). Or in the words of the; Note that this only applies to Strings that are defined at compile time, so the following truly would print false. orN.B. It is possible to cause the second snippet to print true by making b1 and b2 final, allowing b1+b2 to be known at compile time. All in all you need to be very careful and, in the vast majority of cases you want string.equals(string) in which this behaviour does not exist."
  },
  {
    "postid":6043,
    "postdate":1276193160,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.293568712,
    "concept_entropy":4.421448398,
    "UMASS(coherence)":0.625790575,
    "TFIDF(informativeness)":1.425700079,
    "polarity":2,
    "normalized_text_entropy":4.293568712,
    "normalized_concept_entropy":4.421448398,
    "normalized_UMASS":0.568900523,
    "normalized_TFIDF":0.062042663,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I learned that when you modify a variable in Java it doesn't change the variable it was based on I assumed a similar thing for objects. Consider this class. After I tried this code I got confused. Please explain to me why changing any of the objects affects the other one. I understand that the value of variable text is stored in the same place in memory for both of the objects.Why the values for variables are independent but correlated for objects? Also, how to duplicate SomeObject, if simple assignment does not do the job?"
  },
  {
    "postid":6044,
    "postdate":1272051000,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.178672056,
    "concept_entropy":4.570295427,
    "UMASS(coherence)":0.778311067,
    "TFIDF(informativeness)":1.095335038,
    "polarity":0,
    "normalized_text_entropy":4.178672056,
    "normalized_concept_entropy":4.570295427,
    "normalized_UMASS":0.707555515,
    "normalized_TFIDF":0.047666058,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Every variable in Java is a. So when you do you just point to the same object as points to. You are actually assigning the value of the reference s1 (which points to an instance of) to s2. (because it points to the same object). There is an exception, primitive types:. They are stored by value. So when using, you only assign the value, but they can not point to the same object (because they are not references). This means thatonly sets the value of to the value of.At the end of the day, everything is assignment by value, its just the value of the reference and not the value of the object (with the exception of primite types as mentioned above). So in your case, if you want to make a copy of, you can do it like this: Alternatively, you can add a copy constructor to that takes an instance as argument and copies it into its own instance. With this you can copy an object pretty easily:"
  },
  {
    "postid":6045,
    "postdate":1384428420,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.228364995,
    "concept_entropy":4.507856783,
    "UMASS(coherence)":0.473754786,
    "TFIDF(informativeness)":1.291025672,
    "polarity":3,
    "normalized_text_entropy":4.228364995,
    "normalized_concept_entropy":4.507856783,
    "normalized_UMASS":0.430686169,
    "normalized_TFIDF":0.056181992,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"@brimborium's answer is very good (+1 for him), but I just want to elaborate more on it using some figures. Let's take the primitive assignment first: 1- First statement creates an Integer object of value 5. Then, at assigning it to the variable, the Inte"
  },
  {
    "postid":6046,
    "postdate":1384428900,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.077872964,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.948094854,
    "polarity":1,
    "normalized_text_entropy":4.077872964,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041258558,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"When you do this you have 2 references to the same object. Which means that whichever reference object you use, the changes you make will be visible when using the second reference. Think of it like this: you have one television in the room, but two remotes: it doesn't matter which remote you use, you'll still be making changes to the same underlying object (the television)."
  },
  {
    "postid":6047,
    "postdate":1384429200,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.286790652,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.513233474,
    "TFIDF(informativeness)":2.19543292,
    "polarity":2,
    "normalized_text_entropy":4.286790652,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.466575885,
    "normalized_TFIDF":0.095539382,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"When you write:is not a. It's a to the object. Hence if you assign s2 to s1, you're simply assigning references/handles and the underlying object is the same. This is important in Java. Everything is pass-by-value, but you never pass objects around - only references to objects. So when you assign, and then call a method on that changes an object, the underlying object is changed, and that's visible when you reference the object via.This is one argument for in objects. By making objects immutable they won't change under you and thus behave in a more predicatable fashion. If you want to copy an object, the easiest/most practical method is to write a method that simply creates a new version and copies over the fields. You can do clever copies using serialisation/reflection etc. but that's more complex, obviously."
  },
  {
    "postid":6048,
    "postdate":1384428780,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.28087249,
    "concept_entropy":0,
    "UMASS(coherence)":0.48381764,
    "TFIDF(informativeness)":0.917718179,
    "polarity":-1,
    "normalized_text_entropy":4.28087249,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.439834218,
    "normalized_TFIDF":0.039936646,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":": Because is a primitive type, is a copy by value, which means that and are two different objects, but with the same value.make and two references of a same object, so if you modify one, the other will be modified too. A good solution is to implement another constructor like this: Then, use it like that:"
  },
  {
    "postid":6049,
    "postdate":1281511380,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.391606342,
    "concept_entropy":4.417951998,
    "UMASS(coherence)":0.442733562,
    "TFIDF(informativeness)":1.420261167,
    "polarity":-2,
    "normalized_text_entropy":4.391606342,
    "normalized_concept_entropy":4.417951998,
    "normalized_UMASS":0.402485056,
    "normalized_TFIDF":0.061805976,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"In your code and are the object (you have only created one object using) and you let point to that same object in the next line. Therefore when you change it changes both if you reference the value through and. The operator on Integers creates a object, it doesn't change the existing object (so adding 5+5 does not give 5 the new value 10...)."
  },
  {
    "postid":6050,
    "postdate":1281515160,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.329571503,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.48002122,
    "TFIDF(informativeness)":0.882977793,
    "polarity":1,
    "normalized_text_entropy":4.329571503,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.436382927,
    "normalized_TFIDF":0.038424837,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"That's because the JVM stores a pointer to. When you call, you are basically saying that the pointer (i.e. memory address) has the same value as the one for. Since they both point to the same place in memory, they represent exactly the same thing. The operator assigns pointer values. It does not copy the object. Cloning objects is a complicated matter in itself. Every object has a clone() method which you might be tempted to use but it does a shallow copy (which basically means that it makes a copy of the top-level object but any object that are contained within it are not cloned). If you want to play around with object copies, definitely read Joshua Bloch's."
  },
  {
    "postid":6051,
    "postdate":1281511560,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.248306741,
    "concept_entropy":0,
    "UMASS(coherence)":0.575917267,
    "TFIDF(informativeness)":1.088907409,
    "polarity":2,
    "normalized_text_entropy":4.248306741,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.523561152,
    "normalized_TFIDF":0.047386344,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Let's start with your second example: This first statement assigns a new object toWhen you do the assignment in the second statement ( ), you are telling to point at the same object is currently pointing at, so you have two references to the same object. Note that you have not duplicated the, rather two variables are just pointing to the same object. So if you are modify or, you are actually modifying the same object (note if you did something like they would now be pointing at different objects). In your first example, and are primitive values, so modifying one will not affect the other. Under the hood of Java, all objects do work using pass by value. For objects, you are passing the \"value\" you are passing is the object's location in memory (so it appears to have a similar effect of pass by reference). Primitives behave differently and just pass a copy of the value."
  },
  {
    "postid":6052,
    "postdate":1281512280,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.244563633,
    "concept_entropy":0,
    "UMASS(coherence)":0.684863319,
    "TFIDF(informativeness)":2.570164085,
    "polarity":1,
    "normalized_text_entropy":4.244563633,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.622603017,
    "normalized_TFIDF":0.111846682,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The answers above explain the behaviour you are seeing. In answer to \"Also, how to duplicate SomeObject, if simple assignment does not do the job?\" - try searching for (it's a java interface that provides one way to copy objects) and ' ' (an alternative and, arguably, better approach)"
  },
  {
    "postid":6053,
    "postdate":1281511500,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.101939756,
    "concept_entropy":0,
    "UMASS(coherence)":0.303667234,
    "TFIDF(informativeness)":1.633195554,
    "polarity":0,
    "normalized_text_entropy":4.101939756,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.276061122,
    "normalized_TFIDF":0.071072312,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Object assignment to a reference does not clone your object. References are like pointers. They point to an object and when operations are invoked it is done on the object pointed by the pointer. In your example, s1 and s2 are pointing to the same object and setters alter the state of the same object and the changes are visible across references."
  },
  {
    "postid":6054,
    "postdate":1281516060,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.104119534,
    "concept_entropy":0,
    "UMASS(coherence)":0.463873715,
    "TFIDF(informativeness)":1.407876722,
    "polarity":1,
    "normalized_text_entropy":4.104119534,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.421703377,
    "normalized_TFIDF":0.061267038,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Change you class in order to create new reference instead of using the same one: You can use something like this (I don't pretend to have ideal solution): Usage:"
  },
  {
    "postid":6055,
    "postdate":1366128420,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":3.419381946,
    "concept_entropy":0,
    "UMASS(coherence)":0.324314677,
    "TFIDF(informativeness)":1.238730753,
    "polarity":0,
    "normalized_text_entropy":3.419381946,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.294831525,
    "normalized_TFIDF":0.053906257,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In the case above a new Integer is created. Here Integer is a non-primitive type andthe value within it is converted (to an int) and assigned to an int 'a'. In this case both s1 and s2 are reference types. They are not created to contain a value like primitive types, rather they contain the reference of some object. For the sake of understanding we can think reference as a link which indicates where I can found the object being referenced. Here the reference s1 tell us where we can found the value of \"first\" (which is actually stored in the memory of computer in an instance of SomeObject).In otherwords s1 is the address of the object of class \"SomeObject\". By the following assignment - we are just copying the value stored in s1 to s2 and we now know s1 contains the address of the string \"first\". After this assigenment both println() produces the same output because both s1 and s2 refrencing the same object. Along with copy constructor you can copy object with clone() method if you are a javauser. Clone can be used in the following manner -For more information on clone() this is a useful link "
  },
  {
    "postid":6056,
    "postdate":1281511920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.084663145,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.414603315,
    "TFIDF(informativeness)":1.264537644,
    "polarity":0,
    "normalized_text_entropy":4.084663145,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.376912105,
    "normalized_TFIDF":0.055029304,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"That is because and work only as references to your objects. When assigning you only assign the reference, meaning that both will point to the same object in memory (the object that has the current text \"first\"). When you do a setter now, either on s1 or s2, both will modify the same object."
  },
  {
    "postid":6057,
    "postdate":1298226600,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.11094286,
    "concept_entropy":0,
    "UMASS(coherence)":0.311680071,
    "TFIDF(informativeness)":1.347102954,
    "polarity":0,
    "normalized_text_entropy":4.11094286,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.283345519,
    "normalized_TFIDF":0.058622326,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"When you assign and object to a variable you really are assigning the reference to that object. So both variables and are referring the same object."
  },
  {
    "postid":6058,
    "postdate":1298231100,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.395737783,
    "concept_entropy":0,
    "UMASS(coherence)":0.336663684,
    "TFIDF(informativeness)":2.102591589,
    "polarity":2,
    "normalized_text_entropy":4.395737783,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.306057895,
    "normalized_TFIDF":0.091499175,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Since objects were referenced by a reference. So if you write s2=s1 only the reference will copied. Its like in C were you only handle with memory addresses. And if you copy the address of an memory and change the value behind this address both pointers (references) will change the one value at this point in memory."
  },
  {
    "postid":6059,
    "postdate":1298226780,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.131460047,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.514479352,
    "TFIDF(informativeness)":1.273031836,
    "polarity":1,
    "normalized_text_entropy":4.131460047,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.467708502,
    "normalized_TFIDF":0.055398948,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Second line ( ) simply assigns second variable to the first. This leads to second variable pointing to the same object instance as the first."
  },
  {
    "postid":6060,
    "postdate":1298228880,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.405226603,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.271033349,
    "TFIDF(informativeness)":1.341658115,
    "polarity":0,
    "normalized_text_entropy":4.405226603,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.246393954,
    "normalized_TFIDF":0.058385381,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In short, if you want to write a map of e.g. constants in Java, which in e.g. Python and Javascript you would write as a literal,is there a or any preset that you can use for writing a data structure like that?"
  },
  {
    "postid":6061,
    "postdate":1298229420,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.132690813,
    "concept_entropy":4.224897076,
    "UMASS(coherence)":0.420264963,
    "TFIDF(informativeness)":22.97935031,
    "polarity":0,
    "normalized_text_entropy":4.132690813,
    "normalized_concept_entropy":4.224897076,
    "normalized_UMASS":0.382059057,
    "normalized_TFIDF":1,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"? I'd use an. Value for e.g. can be obtained as follows: Only give the enum a bit more sensible name, e.g.,, etc, whatever those name/value pairs represent."
  },
  {
    "postid":6062,
    "postdate":1298227380,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.432695415,
    "concept_entropy":3.323231429,
    "UMASS(coherence)":0.34331784,
    "TFIDF(informativeness)":1.472559504,
    "polarity":-1,
    "normalized_text_entropy":4.432695415,
    "normalized_concept_entropy":3.323231429,
    "normalized_UMASS":0.312107127,
    "normalized_TFIDF":0.105315188,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I like to do it this way: The double {{ }} are an instance initialization block.They are a bit unusual but they are useful.No need for libraries or helpers."
  },
  {
    "postid":6063,
    "postdate":1231500720,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.274359112,
    "concept_entropy":0,
    "UMASS(coherence)":0.537567301,
    "TFIDF(informativeness)":1.889994511,
    "polarity":0,
    "normalized_text_entropy":4.274359112,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.488697546,
    "normalized_TFIDF":0.135169497,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"No, Java doesn't have a map literal. The closest you'll come to this is using Google Collections':"
  },
  {
    "postid":6064,
    "postdate":1231501020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.305884441,
    "concept_entropy":0,
    "UMASS(coherence)":0.494698644,
    "TFIDF(informativeness)":1.36938317,
    "polarity":0,
    "normalized_text_entropy":4.305884441,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.44972604,
    "normalized_TFIDF":0.097936175,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Sorry, I'm a tinkerer :-)Here's a somewhat cleaner way."
  },
  {
    "postid":6065,
    "postdate":1318621560,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.29820445,
    "concept_entropy":0,
    "UMASS(coherence)":0.425734653,
    "TFIDF(informativeness)":2.377927672,
    "polarity":2,
    "normalized_text_entropy":4.29820445,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.387031503,
    "normalized_TFIDF":0.170065725,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You can write yourself a quick helper function: Note the code above isn't going to stop you from overwriting constants of the same name, using multiple places in your list will result in the final's value appearing. Usage is something like:"
  },
  {
    "postid":6066,
    "postdate":1231501380,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.379157185,
    "concept_entropy":0,
    "UMASS(coherence)":0.505679786,
    "TFIDF(informativeness)":1.578922177,
    "polarity":2,
    "normalized_text_entropy":4.379157185,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.459708896,
    "normalized_TFIDF":0.112922082,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Java7 suppose to implement following syntax: However now you're forced to use solutions proposed by Jorn or Tony Ennis."
  },
  {
    "postid":6067,
    "postdate":1231501260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.317158081,
    "concept_entropy":0,
    "UMASS(coherence)":0.469437728,
    "TFIDF(informativeness)":1.180884953,
    "polarity":1,
    "normalized_text_entropy":4.317158081,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.426761571,
    "normalized_TFIDF":0.084455073,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Here's another way, best suited for maps that won't be changing:"
  },
  {
    "postid":6068,
    "postdate":1231501500,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.322330443,
    "concept_entropy":0,
    "UMASS(coherence)":0.465563158,
    "TFIDF(informativeness)":1.433297154,
    "polarity":3,
    "normalized_text_entropy":4.322330443,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.423239235,
    "normalized_TFIDF":0.102507205,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Ok, with Jorn's improvement I can't seem to change the map at all, internally or externally. Perhaps not quite as readable, but if you need the map to be unmodifiable I think this is better."
  },
  {
    "postid":6069,
    "postdate":1231502940,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.387139567,
    "concept_entropy":0,
    "UMASS(coherence)":0.565482283,
    "TFIDF(informativeness)":2.776678102,
    "polarity":0,
    "normalized_text_entropy":4.387139567,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.514074803,
    "normalized_TFIDF":0.198583741,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I like to do the declaration and initialization on the same line. I've used this handy little utility for so long it basically my \"map literal\" and until they're done \"right\" in the languange, I'm gonna continue on using it like that :) Happy to share it here."
  },
  {
    "postid":6070,
    "postdate":1249394640,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.052034671,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.487526779,
    "TFIDF(informativeness)":1.223487844,
    "polarity":0,
    "normalized_text_entropy":4.052034671,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.443206163,
    "normalized_TFIDF":0.087501966,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Say I have my own class It has some attributes and methods. It DOES NOT implement equals, DOES NOT implement hashCode. Once we call equals and hashCode, what are the default implementations? From Object class? And what are they? How the default equals will work? How the default hashCode will work and what will return? == will just check if they reference to the same object, so it's easy, but what about equals() and hashCode() methods?"
  },
  {
    "postid":6071,
    "postdate":1378534980,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.389732582,
    "TFIDF(informativeness)":0.632077125,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.354302347,
    "normalized_TFIDF":0.045205183,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Yes, the default implementation is Object's (generally speaking; if you inherit from a class that redefined equals and/or hashCode, then you'll use that implementation instead). From the: equals: hashCode:"
  },
  {
    "postid":6072,
    "postdate":1355333940,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.113663838,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.508151467,
    "TFIDF(informativeness)":0.769148373,
    "polarity":0,
    "normalized_text_entropy":4.113663838,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.461955879,
    "normalized_TFIDF":0.055008307,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"From in one of the JVM implementations: In both cases it's just comparing the memory addresses of the objects in question."
  },
  {
    "postid":6073,
    "postdate":1355334420,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.283053486,
    "concept_entropy":4.429469111,
    "UMASS(coherence)":0.455150487,
    "TFIDF(informativeness)":1.010655985,
    "polarity":-1,
    "normalized_text_entropy":4.283053486,
    "normalized_concept_entropy":4.429469111,
    "normalized_UMASS":0.41377317,
    "normalized_TFIDF":0.072280559,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"There are default implementations of and in Object. If you don't provide your own implementation, those will be used. For, this means an comparison: the objects will only be equal if they are exactly the same object. For, the has a good explanation. For more information, see Effective Java, (pdf), item 8."
  },
  {
    "postid":6074,
    "postdate":1355334360,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.487014893,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.310276226,
    "TFIDF(informativeness)":1.085240043,
    "polarity":0,
    "normalized_text_entropy":4.487014893,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.282069296,
    "normalized_TFIDF":0.077614696,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Yes, from class since your class extends Object implicitly. simply returns. implementation is native. Just a guess - it returns the pointer to the object."
  },
  {
    "postid":6075,
    "postdate":1320092820,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.298318112,
    "concept_entropy":4.409044946,
    "UMASS(coherence)":0.405109965,
    "TFIDF(informativeness)":0.96627089,
    "polarity":2,
    "normalized_text_entropy":4.298318112,
    "normalized_concept_entropy":4.409044946,
    "normalized_UMASS":0.368281786,
    "normalized_TFIDF":0.069106206,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"IBM's says: However, to be sure of the exact implementation details for a particular vendor's Java version it's probably best to look as the source (if it's available)"
  },
  {
    "postid":6076,
    "postdate":1320095520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.203748976,
    "concept_entropy":4.514415561,
    "UMASS(coherence)":0.657271773,
    "TFIDF(informativeness)":1.526919071,
    "polarity":-1,
    "normalized_text_entropy":4.203748976,
    "normalized_concept_entropy":4.514415561,
    "normalized_UMASS":0.597519794,
    "normalized_TFIDF":0.1092029,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If you do not provide your own implementation, one derived from Object would be used. It is OK, unless you plan to put your class instances into i.e. HashSet (any collection that actually use hashCode() ), or something that need to check object's equality (i.e. HashSet's contains() method). Otherwise it will work incorrectly, if that's what you are asking for. It is quite easy to provide your own implementation of these methods thanks to and from."
  },
  {
    "postid":6077,
    "postdate":1280081400,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.181357678,
    "concept_entropy":0,
    "UMASS(coherence)":0.431024977,
    "TFIDF(informativeness)":1.143261679,
    "polarity":1,
    "normalized_text_entropy":4.181357678,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.391840888,
    "normalized_TFIDF":0.081764314,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"What is the difference between an object, instance, and reference? They say that they have to create an instance to their application? What does that mean?"
  },
  {
    "postid":6078,
    "postdate":1280082120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.364346005,
    "concept_entropy":0,
    "UMASS(coherence)":0.461736724,
    "TFIDF(informativeness)":1.066970119,
    "polarity":1,
    "normalized_text_entropy":4.364346005,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.419760658,
    "normalized_TFIDF":0.07630806,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"An object and an instance are the same thing. Personally I prefer to use the word \"instance\" when refering to a specific object of a specific type, for example \"an instance of type Foo\". But when talking about objects in general I would say \"objects\" rather than \"instances\".A reference either refers to a specific object or else it can be a null reference. They probably mean you have to write something like this: If you are unsure what type you should instantiate you should contact the developers of the application and ask for a more complete example."
  },
  {
    "postid":6079,
    "postdate":1280086200,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.030407493,
    "concept_entropy":0,
    "UMASS(coherence)":0.436147324,
    "TFIDF(informativeness)":1.710783632,
    "polarity":0,
    "normalized_text_entropy":4.030407493,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.396497567,
    "normalized_TFIDF":0.122352611,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"\"instance to an application\" means nothing. \"object\" and \"instance\" are the same thing. There is a \"class\" that defines structure, and instances of that class (obtained with). For example there is the class, and there are instance with different properties like mileage, max speed, horse-power, brand, etc. Reference is, in the Java context, a variable* - it is something pointing to an object/instance. For example, - is a reference, that currently references no instance, but can reference an instance of the class. *Jon Skeet made a note about the difference between a variable and a reference. See his comment. It is an important distinction about how Java works when you invoke a method - pass-by-value. "
  },
  {
    "postid":6080,
    "postdate":1280097960,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.089934319,
    "concept_entropy":4.495324544,
    "UMASS(coherence)":0.542857624,
    "TFIDF(informativeness)":1.712368845,
    "polarity":1,
    "normalized_text_entropy":4.089934319,
    "normalized_concept_entropy":4.495324544,
    "normalized_UMASS":0.493506931,
    "normalized_TFIDF":0.122465983,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I think that Object = Instance. Reference is a \"link\" to an Object. variable c stores a reference to an object of type Car."
  },
  {
    "postid":6081,
    "postdate":1280082780,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.427260125,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.133693952,
    "polarity":1,
    "normalized_text_entropy":4.427260125,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.081080045,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Here an object is created from the class. A reference named c allows the programmer to access the object."
  },
  {
    "postid":6082,
    "postdate":1292400780,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.171362067,
    "concept_entropy":0,
    "UMASS(coherence)":0.632697085,
    "TFIDF(informativeness)":1.276870081,
    "polarity":1,
    "normalized_text_entropy":4.171362067,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.575179168,
    "normalized_TFIDF":0.091319782,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"When you use the keyword for example you are creating an instance of the class.Take a look here Refer for more information "
  },
  {
    "postid":6083,
    "postdate":1292400960,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.215054869,
    "concept_entropy":3.984054407,
    "UMASS(coherence)":0.427042605,
    "TFIDF(informativeness)":0.775621329,
    "polarity":0,
    "normalized_text_entropy":4.215054869,
    "normalized_concept_entropy":3.984054407,
    "normalized_UMASS":0.38822055,
    "normalized_TFIDF":0.055471243,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The main differnece is when you say ClassName obj = null; you are just creating an object for that class. It's not an instance of that class. This statement will just allot memory for the static meber variables, not for the normal member variables. But when you say ClassName obj = new ClassName(); you are creating an instance of the class. This staement will allot memory all member variables."
  },
  {
    "postid":6084,
    "postdate":1292400960,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.250273151,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.312528389,
    "TFIDF(informativeness)":0.785172308,
    "polarity":0,
    "normalized_text_entropy":4.250273151,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.284116717,
    "normalized_TFIDF":0.056154314,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"\"creating an instance of a class\"how about, \"you are taking a class and making a new variable of that class that WILL change depending on an input that changes\" Class in the library called Nacho variable Libre to hold the \"instance\" that will change Nacho Libre = new Nacho(Variable, Scanner Input, or whatever goes here, This is the place that accepts the changes then puts the value in \"Libre\" on the left side of the equals sign (you know \"Nacho Libre = new Nacho(Scanner.in)\"\"Nacho Libre\" is on the left of the = (that's not tech talk, that's my way of explaining it) I think that is better than saying \"instance of type\" or \"instance of class\".Really the point is it just needs to be detailed out more.... \"instance of type or class\" is not good enough for the beginner..... wow, its like a tongue twister and your brain cannot focus on tongue twisters very well.... that \"instance\" word is very annoying and the mere sound of it drives me nuts.... it begs for more detail.....it begs to be broken down better.I had to google what \"instance\" meant just to get my bearings straight..... try saying \"instance of class\" to your grandma.... yikes!"
  },
  {
    "postid":6085,
    "postdate":1288812300,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.213483344,
    "concept_entropy":0,
    "UMASS(coherence)":0.449277232,
    "TFIDF(informativeness)":1.184490964,
    "polarity":0,
    "normalized_text_entropy":4.213483344,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.408433847,
    "normalized_TFIDF":0.08471297,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Background: I have a MainTest class that has many buttons, each of which instantiate a class that I am coding/testing. I want the code/test cycle for these classes to be quick, and see the effect of my changes quickly, a few times a minute. MainTest which is stable takes about 20 seconds to load, which would not be a problem had I not needed to reload it for each change in the classes it instantiates. I want to load MainTest once, and when it instantiates another class, let's call it ChildTest, numerous times (upon button event), it should reload the latest version of ChildTest. I tried Class.ForName but it didn't make a difference. I have also tried using a custom classloader (copied from open source), to no avail."
  },
  {
    "postid":6086,
    "postdate":1288813020,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.265929261,
    "concept_entropy":4.098652005,
    "UMASS(coherence)":0.626312,
    "TFIDF(informativeness)":2.418964854,
    "polarity":1,
    "normalized_text_entropy":4.265929261,
    "normalized_concept_entropy":4.098652005,
    "normalized_UMASS":0.569374545,
    "normalized_TFIDF":0.173000641,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"There's no hope of \"overloading\" the operator but you could certainly write a custom class loader that simply reloads the bytecode every time you ask it to load a class.No out-of-the-box classloaders will do what you're looking for because they all assume that the class definition will not change through the life of the JVM. But here's how you make it happen.Create a class loader called, say, which overrides the methods and methods so that they simply reload the class files from disk every time they are called (instead of \"caching\" them for later use).Then you just have to call any time you suspect the class definition has changed (e.g. as part of your testing framework's lifecycle methods).fills in some of the details but misses some important points, especially about using new instances of the classloader for subsequent reloads and delegating to the default classloader when appropriate.Here is a simple working example which repeatedly loads the class and assumes its class file exists in the relative \"./bin\" directory: At each invocation of the \"do/while\" block in the main method, a new Reloader is instantiated which loads the class from disk and returns it to the caller.So if you overwrite the file to contain a new implementation with a different, overloaded method, then you should see the new implementation each time."
  },
  {
    "postid":6087,
    "postdate":1288812780,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.391041278,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.658375933,
    "TFIDF(informativeness)":1.621118156,
    "polarity":-1,
    "normalized_text_entropy":4.391041278,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.598523575,
    "normalized_TFIDF":0.115939874,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Sounds a little scary, but this should help. ClassLoader can dynamically load classes at runtime, I would read the api to determine if loading it again overrides the previous version."
  },
  {
    "postid":6088,
    "postdate":1288812480,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.323009805,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.662217787,
    "polarity":0,
    "normalized_text_entropy":4.323009805,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.047360796,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can give a try to. It is a \"development-only\" class-loader designed to do exactly what you need but, perhaps, it could be expensive for your needs. In your case, Peter Lawrey's solution could be enough."
  },
  {
    "postid":6089,
    "postdate":1288812540,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.354260786,
    "concept_entropy":4.57569176,
    "UMASS(coherence)":0.527226177,
    "TFIDF(informativeness)":1.216642953,
    "polarity":0,
    "normalized_text_entropy":4.354260786,
    "normalized_concept_entropy":4.57569176,
    "normalized_UMASS":0.479296525,
    "normalized_TFIDF":0.08701243,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am not sure how to do this in code, but NetBeans does have an \"Apply Code Changes\" button that will do this. However, it can only change the implementation of the class, it cannot change it's signature.This means you cannot add, remove, or change instance variables or methods.This is due to the design of the JVM which does not allow these to be changed once a class has been loaded once. Since NetBeans can do it, there must be a way, but I do not know how to do it manually. If you run in an IDE that supports this feature, you can just click the button each time you modify a class.It will then recompile that class and reload it."
  },
  {
    "postid":6090,
    "postdate":1362770400,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.156387532,
    "concept_entropy":0,
    "UMASS(coherence)":0.461018058,
    "TFIDF(informativeness)":0.608429192,
    "polarity":0,
    "normalized_text_entropy":4.156387532,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.419107325,
    "normalized_TFIDF":0.043513919,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I found an article on exactly this problem. BUT, maerics answer looks good too. will try it later."
  },
  {
    "postid":6091,
    "postdate":1288812480,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.414741011,
    "concept_entropy":4.520610099,
    "UMASS(coherence)":0.366644634,
    "TFIDF(informativeness)":1.126991107,
    "polarity":2,
    "normalized_text_entropy":4.414741011,
    "normalized_concept_entropy":4.520610099,
    "normalized_UMASS":0.333313304,
    "normalized_TFIDF":0.080600668,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"It sounds like you want ot use the hot deployment when can be used with the debugger.When you debug a problem and recomiple some of its classes you can get the option to reload the changed classes. EDIT: Apart from using the debugging API, you can use Instrumentation.However, since using a debugger is by far the simplest way to do this, if this doesn't work, you are likely to run into the same problems. It sounds like what you need to test smaller pieces of work so it takes less than a second run some subset of your application.Or you could load your application faster by providing a dump and re-load facility for the memory.This way you could start your application from a snapshot (perhaps immediately)"
  },
  {
    "postid":6092,
    "postdate":1288812480,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.317935397,
    "concept_entropy":0,
    "UMASS(coherence)":0.324811148,
    "TFIDF(informativeness)":0.738016908,
    "polarity":0,
    "normalized_text_entropy":4.317935397,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.295282862,
    "normalized_TFIDF":0.052781833,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The keyword grants access to classes in the same package and subclasses ( ). Now, every class has as superclass ( ). Hence I conclude that every class may access's methods even if they are. Take a look at the following example: While compiles fine, gives I neither understand why doesn't compile nor what's the difference (regarding the access ofs members) with."
  },
  {
    "postid":6093,
    "postdate":1288812600,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.172665753,
    "concept_entropy":0,
    "UMASS(coherence)":0.329761038,
    "TFIDF(informativeness)":0.834021681,
    "polarity":0,
    "normalized_text_entropy":4.172665753,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.299782762,
    "normalized_TFIDF":0.059647946,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can only access protected members of a type in a different package if the compile-time type of the expression you're referencing it through is either your own class or a subclass. (Where \"your\" class is the class containing the code.) Your own class has to be a subclass of the type which originally declares the method, too. Here's an example; assume that is in a different package to all the other classes: In other words, it's letting you have access to the protected members of \"objects which are a like you\". Details are in:"
  },
  {
    "postid":6094,
    "postdate":1288812480,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.206221852,
    "concept_entropy":0,
    "UMASS(coherence)":0.28831075,
    "TFIDF(informativeness)":0.774693908,
    "polarity":0,
    "normalized_text_entropy":4.206221852,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.262100682,
    "normalized_TFIDF":0.055404915,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"When you said \" \", you accessed your own object via its superclass Object.You performed a widening conversion to an Object.The code then attempts to call clone on Object. But, as you've noted, clone is a protected method, meaning that only if your object was in the same package of java.lang would it be able to access the OBJECT's clone method. When you say this.clone, your class extended Object and thus had access to override or use clone directly through the protected class modifier because of inheritance.But that doesn't change the Object implementation. By saying ((Object) yourObject), you get something that is only accessible through the Object class.Only public methods of the Object class are accessible ouside of the package java.lang, so you get the compile-time exception, because the compiler knows this. By saying this.clone(), you are invoking your object's clone method that it got through inheriting through Object, and is now able to be invoked because it becomes a part of your custom subclass."
  },
  {
    "postid":6095,
    "postdate":1298398080,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.965583936,
    "concept_entropy":4.176993762,
    "UMASS(coherence)":0.397604407,
    "TFIDF(informativeness)":0.954497757,
    "polarity":-2,
    "normalized_text_entropy":3.965583936,
    "normalized_concept_entropy":4.176993762,
    "normalized_UMASS":0.361458552,
    "normalized_TFIDF":0.06826421,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"The difference is how you are accessing Object.clone().clone is only accessible when accessed via a sub class or class in the same package.In the getOne() example you are claling this.clone().This clearly satisfies access from within a sub class. In getTwo() though you are acessing Object.clone() and TestClass.clone().In order for this to work you must have package level access to Object which you don't and hence the error."
  },
  {
    "postid":6096,
    "postdate":1298398320,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.250384044,
    "concept_entropy":4.43720295,
    "UMASS(coherence)":0.387697142,
    "TFIDF(informativeness)":1.159901105,
    "polarity":2,
    "normalized_text_entropy":4.250384044,
    "normalized_concept_entropy":4.43720295,
    "normalized_UMASS":0.352451947,
    "normalized_TFIDF":0.082954341,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Is there a reliable way to convert any object to a String and then back again to the same Object? I've seen some examples of people converting them using and then passing that value into a constructor to reconstruct the object again but not all objects have a constructor like this so that method wont work for all cases. What way will?"
  },
  {
    "postid":6097,
    "postdate":1298400300,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.25960718,
    "concept_entropy":4.503308256,
    "UMASS(coherence)":0.456031653,
    "TFIDF(informativeness)":0.788247879,
    "polarity":4,
    "normalized_text_entropy":4.25960718,
    "normalized_concept_entropy":4.503308256,
    "normalized_UMASS":0.41457423,
    "normalized_TFIDF":0.056374274,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"Yes, it is called!"
  },
  {
    "postid":6098,
    "postdate":1298408700,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.35800691,
    "concept_entropy":0,
    "UMASS(coherence)":0.459571049,
    "TFIDF(informativeness)":0.637678546,
    "polarity":1,
    "normalized_text_entropy":4.35800691,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.417791863,
    "normalized_TFIDF":0.045605788,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" to byte array, convert to Base64. Then decode back to byte array and deserialize."
  },
  {
    "postid":6099,
    "postdate":1298400360,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.309866874,
    "concept_entropy":4.424151375,
    "UMASS(coherence)":0.491152558,
    "TFIDF(informativeness)":1.260373737,
    "polarity":1,
    "normalized_text_entropy":4.309866874,
    "normalized_concept_entropy":4.424151375,
    "normalized_UMASS":0.446502325,
    "normalized_TFIDF":0.090139989,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"None will work in An object may, e.g., contain references to other JVMs handling their state, and this state may be not available for you to restore. Additional problems you're going to meet will include open streams, listening sockets, and almost anything else from the outer world. There's no need to repeat that at least two of Java core engineers say that serialization was a single worst feature in Java, that is, after finalization. (I do love serialization nevertheless, it's handy. But it won't work.)"
  },
  {
    "postid":6100,
    "postdate":1288334940,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.295878635,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.575643738,
    "polarity":-1,
    "normalized_text_entropy":4.295878635,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.112687613,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"One way is to use JSON.For implementation specific in Java, the answer might be given in this post: Using JSON is reliable enough that it's used for web application development (Ajax)."
  },
  {
    "postid":6101,
    "postdate":1288382340,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.242824426,
    "concept_entropy":4.212284372,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.966662448,
    "polarity":1,
    "normalized_text_entropy":4.242824426,
    "normalized_concept_entropy":4.212284372,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.069134209,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Yes, it is You can use, ObjectInputStream.readObject and ObjectOutputStream.writeObject. Please see below example:"
  },
  {
    "postid":6102,
    "postdate":1380312780,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.270663317,
    "concept_entropy":0,
    "UMASS(coherence)":0.491152558,
    "TFIDF(informativeness)":1.111323508,
    "polarity":2,
    "normalized_text_entropy":4.270663317,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.446502325,
    "normalized_TFIDF":0.079480146,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I'm preparing for an exam in Java and one of the questions which was on a previous exam was:\"What is the main difference in object creation between Java and C++?\" I think I know the basics of object creation like for example how constructors are called and what initialization blocks do in Java and what happens when constructor of one class calls a method of another class which isn't constructed yet and so on, but I can't find anything obvious. The answer is supposed to be one or two sentences, so I don't think that description of whole object creation process in Java is what they had in mind. Any ideas?"
  },
  {
    "postid":6103,
    "postdate":1330495980,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.457794528,
    "concept_entropy":0,
    "UMASS(coherence)":0.470357984,
    "TFIDF(informativeness)":1.412873832,
    "polarity":2,
    "normalized_text_entropy":4.457794528,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.427598167,
    "normalized_TFIDF":0.10104656,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"In addition to other excellent answers, one thing very important, and usually ignored/forgotten, or misunderstood (which explains why I detail the process below): The difference between C++ and Java is: The \"bugs\" for each languages are different:"
  },
  {
    "postid":6104,
    "postdate":1330496340,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.228468815,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.560318269,
    "TFIDF(informativeness)":3.116293641,
    "polarity":-1,
    "normalized_text_entropy":4.228468815,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.509380245,
    "normalized_TFIDF":0.222872522,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Unlike Java, in C++ objects can also be created on the stack. For example in C++ you can write In Java you can write"
  },
  {
    "postid":6105,
    "postdate":1330496160,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.315981964,
    "concept_entropy":0,
    "UMASS(coherence)":0.629686823,
    "TFIDF(informativeness)":0.7655335,
    "polarity":2,
    "normalized_text_entropy":4.315981964,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.572442566,
    "normalized_TFIDF":0.054749777,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Besides heap/stack issues I'd say: C++ constructors have initialization lists while Java uses assignment. See for details."
  },
  {
    "postid":6106,
    "postdate":1264545420,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.44307122,
    "concept_entropy":4.393843945,
    "UMASS(coherence)":0.705784596,
    "TFIDF(informativeness)":2.494434107,
    "polarity":3,
    "normalized_text_entropy":4.44307122,
    "normalized_concept_entropy":4.393843945,
    "normalized_UMASS":0.64162236,
    "normalized_TFIDF":0.178398086,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I would answer: C++ allows creating an object everywhere: on the heap, stack, member. Java forces you allocate objects on the heap,."
  },
  {
    "postid":6107,
    "postdate":1264550820,
    "tag":"1",
    "TFMvalue":0.583333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.336865456,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.290168724,
    "polarity":0,
    "normalized_text_entropy":4.336865456,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.09227088,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In Java, the Java Virtual Machine (JVM) that executes Java code mightlog all objects being created (or references to them to be exact) so that the memory allocated for them can later be freed automatically by garbage collection when objects are not referenced any more.I'm not sure whether this can be attributed to object creation in the strict sense but it surely happens somewhen between creation and assignment to a variable, even without an explicit assignment (when you create an object without assigning it, the JVM has to auto-release it some time after that as there are no more references). In C++, only objects created on the stack are released automatically (when they get out of scope) unless you use some mechanism that handles this for you. : Depending on the JVM's implementation."
  },
  {
    "postid":6108,
    "postdate":1264546620,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.141580932,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.655727552,
    "polarity":0,
    "normalized_text_entropy":4.141580932,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.118415084,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"There is one main difference between constructors in C++ and Java. Other differences follow from this design decision. The main difference is that the JVM first initializes all members to zero, before starting to execute any constructor. In C++, member initialization is part of the constructor. The result is that during execution of a base class constructor, in C++ the members of the derived class haven't been initialized yet! In Java, they have been zero-initialized. Hence the rule, which is explained in, that virtual calls called from a constructor cannot descend into a derived class. Otherwise uninitialized members could be accessed."
  },
  {
    "postid":6109,
    "postdate":1264545720,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.371965515,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.62379797,
    "polarity":0,
    "normalized_text_entropy":4.371965515,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.11613153,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Assuming that c++ uses alloc() when the new call is made, then that might be what they are looking for. (I do not know C++, so here I can be very wrong) Java's memory model allocates a chunk of memory when it needs it, and for each new it uses of this pre-allocated area. This means that a new in java is just setting a pointer to a memory segment and moving the free pointer while a new in C++ (granted it uses malloc in the background)will result in a system call. This makes objects cheaper to create in Java than languages using malloc; at least when there is no initialization ocuring.In short - creating objects in Java is cheap - don't worry about it unless you create loads of them."
  },
  {
    "postid":6110,
    "postdate":1264547400,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.305751123,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.571833963,
    "TFIDF(informativeness)":1.832120581,
    "polarity":3,
    "normalized_text_entropy":4.305751123,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.519849057,
    "normalized_TFIDF":0.131030442,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"class B inherits class A. Now when we create an object of type B, what is the memory allocated for B? Is it including A and B, or any other procedure for memory allocation?"
  },
  {
    "postid":6111,
    "postdate":1264545720,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.195479949,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.557732783,
    "polarity":2,
    "normalized_text_entropy":4.195479949,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.11140665,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"When you create the object B, let's say by calling the default constructor Then the JVM allocates an object with more or less: The dispatch vector is used by the compiler to store the address of every method that can be invoked on the given object and it depends on the class of the object rather than the instance of the object itself (every object B has the same interface after all!) So you do NOT need to allocate A, because there's no separate object A. You aren't instancing 2 separate objects. When you create B you are creating a \"specialized\" version of A.. which it can be viewed as A with something more. So only B needs to be allocated (but keep in mind that B also has everything its ancestors have)"
  },
  {
    "postid":6112,
    "postdate":1264561860,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.158108386,
    "concept_entropy":0,
    "UMASS(coherence)":0.592613152,
    "TFIDF(informativeness)":1.504579597,
    "polarity":0,
    "normalized_text_entropy":4.158108386,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.538739229,
    "normalized_TFIDF":0.107605216,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Yes. Objects of type B contain the part of A when they are allocated. No need to worry about that (namely no need to allocate both B and A)."
  },
  {
    "postid":6113,
    "postdate":1297633680,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.326055304,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.976354066,
    "polarity":0,
    "normalized_text_entropy":4.326055304,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.069827339,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"When you instanciate a B through, an implicit (or explicit) call is made to the constructor of A. The memory allocation is thus done for both classes.More specifically, if A declares three integer members and B (extends A) declares 2 float members, each new B will allocate three ints and two floats."
  },
  {
    "postid":6114,
    "postdate":1297633980,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.240570469,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.396142654,
    "polarity":1,
    "normalized_text_entropy":4.240570469,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.099849972,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I want to do a JUnit test case for an interface, as you know i can't make an object from the interface and i don't want any classes names to show up in that test, i want only to test the interface and only use it's methods in the test.So, i can't instantiate an object like : as i don't wont to use any classes methods, and i don't want to instantiate the interface as : as i don't want to override the methods in the test. i want to test BlaBla but deal in my test with it's interface (inter)."
  },
  {
    "postid":6115,
    "postdate":1297634040,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.29934565,
    "concept_entropy":0,
    "UMASS(coherence)":0.415512336,
    "TFIDF(informativeness)":1.719151418,
    "polarity":0,
    "normalized_text_entropy":4.29934565,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.377738487,
    "normalized_TFIDF":0.122951062,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"An is a contract. It has no logic to test. You can use a mocking framework like to create an instance of the without having to manually stub the methods. But it will just stub them in the background. You have to ask yourself you want to test? Given that the methods have implementation there is code. Say I have an like so What is there to test? The only thing I have said is that I want a class that to."
  },
  {
    "postid":6116,
    "postdate":1297634040,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.423327439,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.219542623,
    "polarity":0,
    "normalized_text_entropy":4.423327439,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.08721981,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The way to test an interface is to create a concrete class that implements it, instantiate it and test that class. You can't test an interface directly, because as you know, it can't be instantiated, leaving nothing to be tested. This should be obvious: an interface is just a collection of method signatures, with no method bodies - hence there is no behavior to be tested."
  },
  {
    "postid":6117,
    "postdate":1297634100,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.338846381,
    "concept_entropy":0,
    "UMASS(coherence)":0.485043813,
    "TFIDF(informativeness)":2.614118423,
    "polarity":2,
    "normalized_text_entropy":4.338846381,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.440948921,
    "normalized_TFIDF":0.186957724,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"There is no functionality to test in an interface (because it cannot be instantiated; it has no method implementations). So there is nothing JUnit can do with it."
  },
  {
    "postid":6118,
    "postdate":1402813140,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.235367148,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.428729424,
    "polarity":1,
    "normalized_text_entropy":4.235367148,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.102180528,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You could make an. For specific classes that implement the interface a unit test would simply extend the abstract base class. The abstract base class could test things that should hold, like after or other things."
  },
  {
    "postid":6119,
    "postdate":1332884220,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.380626867,
    "concept_entropy":0,
    "UMASS(coherence)":0.454026159,
    "TFIDF(informativeness)":0.957320834,
    "polarity":0,
    "normalized_text_entropy":4.380626867,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.412751054,
    "normalized_TFIDF":0.068466112,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am desigining handrwriting aplication for android. I would like to write information (LogInfo class) to log file, every time user press Enter button. After, I would like to read the information. This is part of my class with custom write method in LogInfo class: Here is read method: It works well when I save only one object in file. When I try to save more, reading is not working (It throws StreamCorruptedException). It read only one object from while loop. Any ideas? In main class, I just use two simple methods: defined as: requested UPDATE:"
  },
  {
    "postid":6120,
    "postdate":1332884400,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.210563042,
    "concept_entropy":0,
    "UMASS(coherence)":0.443166288,
    "TFIDF(informativeness)":1.029117238,
    "polarity":-2,
    "normalized_text_entropy":4.210563042,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.402878444,
    "normalized_TFIDF":0.07360088,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6121,
    "postdate":1332884460,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.303191128,
    "concept_entropy":4.482674872,
    "UMASS(coherence)":0.484551132,
    "TFIDF(informativeness)":1.162080251,
    "polarity":2,
    "normalized_text_entropy":4.303191128,
    "normalized_concept_entropy":4.482674872,
    "normalized_UMASS":0.440501029,
    "normalized_TFIDF":0.08311019,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"@EJP is right.it cannot append to an existing file created with an ObjectOutputStream. You can do the following steps to fix it:1. keep ObjectOutputStream object reference2. after writeObject() having been called, do not call close()3. provide a method to"
  },
  {
    "postid":6122,
    "postdate":1265719380,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.23096478,
    "concept_entropy":0,
    "UMASS(coherence)":0.606878273,
    "TFIDF(informativeness)":0.738760794,
    "polarity":0,
    "normalized_text_entropy":4.23096478,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.551707521,
    "normalized_TFIDF":0.052835034,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am new in java. In java, is a.But we do not have to use keyword to create an object of class where as is used for creating objects for other classes. I have heard about Wrapper classes like,which are similar to this.But is not Wrapper,isn't it? Actually what is happening when i use ??How it is different fromHere is a reference variable or something else??Are there other classes which do not require to create object ??"
  },
  {
    "postid":6123,
    "postdate":1265721360,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.990158737,
    "concept_entropy":4.220856147,
    "UMASS(coherence)":0.404702025,
    "TFIDF(informativeness)":1.796909836,
    "polarity":-1,
    "normalized_text_entropy":3.990158737,
    "normalized_concept_entropy":4.220856147,
    "normalized_UMASS":0.367910932,
    "normalized_TFIDF":0.128512224,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"With the following line you are not creating a new object in the heap but reusing a string literal (if already available):is a string literal in the string literal pool. Since, strings are immutable, they are reusable so they are pooled in the string literal pool by the JVM. And this is the recommended way, because you are reusing it. But, with the following you are actually creating a new object (in the heap):is a new object. In this case, even if the literal was already in the string literal pool, a new object is created. This is not recommended because chances are that you might end with more than one objects with the same value. Also see this post:Actually, you can not create any object in Java without using the keyword. e.g. Does, not mean that the object is created without using. It's just not required for us to use the keyword explicitly. But under the hood, if the object with value 1 does not already exist in cache (objects are cached by JVM), keyword will be used to create it."
  },
  {
    "postid":6124,
    "postdate":1265721420,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.265081262,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.877534889,
    "polarity":1,
    "normalized_text_entropy":4.265081262,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.134278404,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"String and Integer creation are different.Here the '=' operator is overloaded for string. So is the '+' operator in \"some\"+\"things\".Where as, Until Java 5.0 this is compile time error; you cant assign primitive to its wrapper. But from Java 5.0 this is called auto-boxing where primitives are auto promoted to their wrappers wherever required. will be different fromThe reason is that the JVM maintains a string table for all string literals. so there will be an entry in the table for \"hi\" , say its address is 1000. But when you explicitly create a string object, new object will be created, say its address is 2000. Now the new object will point to the entry in the string table which is 1000. Hence when you say it comparesSo it is false"
  },
  {
    "postid":6125,
    "postdate":1265721060,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.046479875,
    "concept_entropy":4.441417191,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.76742747,
    "polarity":2,
    "normalized_text_entropy":4.046479875,
    "normalized_concept_entropy":4.441417191,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.126403691,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"The Java language specification allows for representation of a string as a. You can consider it a shortcut initialization for a String that has one important side-effect that is different from regular initialization viaString literals are all, which means that they are constant values stored by the Java runtime and can be shared across multiple classes. For example: Would print out \"true\" since, both String instances actually point to the same object. This would not be the case if you initialize the strings via the keyword."
  },
  {
    "postid":6126,
    "postdate":1265721480,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.457954339,
    "concept_entropy":0,
    "UMASS(coherence)":0.462452204,
    "TFIDF(informativeness)":1.512885875,
    "polarity":2,
    "normalized_text_entropy":4.457954339,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.420411095,
    "normalized_TFIDF":0.108199268,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"In java \"==\" compares the left & right hand sides memory locations(and not the value at that memory location) and therefore in case of it returns false.In case of \"Hai\"==\"Hai\", java doesn't allocate separate memory for same string literal therefore here \"==\" returns true. You can always use equals method to compare values."
  },
  {
    "postid":6127,
    "postdate":1265719980,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.253640982,
    "concept_entropy":0,
    "UMASS(coherence)":0.562438034,
    "TFIDF(informativeness)":1.251356761,
    "polarity":-1,
    "normalized_text_entropy":4.253640982,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.511307304,
    "normalized_TFIDF":0.089495108,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I've been programming java for 2 years now, and apparently I have encountered a problem where I couldn't understand and differentiate class, reference, and an object again(I do not get why I forget these concepts). let get to down to the problem my is that I am not sure if a Class or reference is the same, though I have already an idea what is object. can someonedifferentiate in a nice and understandble and complete manner what are classes, references and object is? all i know is that the class is more like of a template for an object(blueprint to a house where the class is the blueprint and the house is an object)"
  },
  {
    "postid":6128,
    "postdate":1265722860,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.305078279,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.558907384,
    "polarity":1,
    "normalized_text_entropy":4.305078279,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.111490655,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you like housing metaphors: You can copy that reference as much as you like, but there's just one house -- you're just copying the card that has the address on it, not the house itself. Java methods are always pass-by-value, but the value could be an object's reference. So, if I have: Then let's see what's happening. The whole sequence would be something like:"
  },
  {
    "postid":6129,
    "postdate":1337023680,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.338946717,
    "concept_entropy":0,
    "UMASS(coherence)":0.571403696,
    "TFIDF(informativeness)":1.445612813,
    "polarity":-5,
    "normalized_text_entropy":4.338946717,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.519457905,
    "normalized_TFIDF":0.103388002,
    "normalized_polarity":0.166666667,
    "tagtext":"inheritance",
    "posttext":"When you code, you build anof anof a saidand keep a to it, so you can call its methods. Also, some basics:,,, and."
  },
  {
    "postid":6130,
    "postdate":1337024040,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.185533976,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.365607072,
    "TFIDF(informativeness)":0.585026345,
    "polarity":1,
    "normalized_text_entropy":4.185533976,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.332370065,
    "normalized_TFIDF":0.041840183,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Suppose you write there two lines of code: In line 1, Engine is a, its a blue-print basically. new Engine() is the that is made on the heap. You are refering that by using app1 and app2 in your code. So app1 and app2 are the."
  },
  {
    "postid":6131,
    "postdate":1337023800,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.349089459,
    "concept_entropy":0,
    "UMASS(coherence)":0.39845581,
    "TFIDF(informativeness)":1.204016638,
    "polarity":3,
    "normalized_text_entropy":4.349089459,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.362232555,
    "normalized_TFIDF":0.086109416,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"When you create an object, what happens behind the scene is that a piece of memory is reserved for containing that object. This could be anywhere in the great big memory landscape; it's up to the operating system and the compiler, and you don't really have any control or knowledge of where it ends up. Ask yourself, then, how do you use that object if you don't know where in memory it is? How can you read a value from it if you don't know where that value is stored? This is what references do for you. They are a way of keeping in touch with the object. It's a little string attached to the balloon that is a reference. You use the reference to say that \"I want to touch object now!\", or \"I want to read a value from object!\"."
  },
  {
    "postid":6132,
    "postdate":1337023860,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.371570462,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.306278206,
    "TFIDF(informativeness)":0.899603455,
    "polarity":0,
    "normalized_text_entropy":4.371570462,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.278434733,
    "normalized_TFIDF":0.064338254,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Class is a template, you are right. It is some knowledge about data structure. Object is that structure instance in memory. Reference is a memory address of that instance. If by you meant the java identifier, then is the basic class for all complex Java classes."
  },
  {
    "postid":6133,
    "postdate":1386592080,
    "tag":"1",
    "TFMvalue":0.733333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.40145723,
    "concept_entropy":4.559425783,
    "UMASS(coherence)":0.626309038,
    "TFIDF(informativeness)":1.057174117,
    "polarity":-4,
    "normalized_text_entropy":4.40145723,
    "normalized_concept_entropy":4.559425783,
    "normalized_UMASS":0.569371853,
    "normalized_TFIDF":0.075607465,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":" is the run time representation of thedefinition. And the is called the (as it references the actual object location in memory ) example Here, is (contains) the definition.creates an for this class (done only during execution, hence runtime representsion)is the name you use to work on the class object, is the."
  },
  {
    "postid":6134,
    "postdate":1253346900,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.427310507,
    "concept_entropy":4.444739942,
    "UMASS(coherence)":0.572850705,
    "TFIDF(informativeness)":0.521393897,
    "polarity":-1,
    "normalized_text_entropy":4.427310507,
    "normalized_concept_entropy":4.444739942,
    "normalized_UMASS":0.520773368,
    "normalized_TFIDF":0.037289288,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"========= Class and Object =========== Class => ex: Person (More like imagination) Object => ex: John, Mike (Real person) =========== Reference ============ ex:- (Television is a class, tv1 is a remote controller without Television)- (Now tv2 remote contr"
  },
  {
    "postid":6135,
    "postdate":1253347920,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.255457403,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.557761173,
    "TFIDF(informativeness)":1.563182547,
    "polarity":0,
    "normalized_text_entropy":4.255457403,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.507055612,
    "normalized_TFIDF":0.111796408,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I would like to test how many bytes an object reference use in the Java VM that I'm using.Do you guys know how to test this? Thanks!"
  },
  {
    "postid":6136,
    "postdate":1253347860,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.167046127,
    "concept_entropy":0,
    "UMASS(coherence)":0.573993976,
    "TFIDF(informativeness)":1.42506095,
    "polarity":0,
    "normalized_text_entropy":4.167046127,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.521812705,
    "normalized_TFIDF":0.101918164,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Taking the question literally, on most JVMs, all references on 32-bit JVMs take 4 bytes, one 64-bit JVMs, a reference takes 8 bytes unless -XX:+UseCompressedOops has been used, in which case it takes 4-bytes. I assume you are asking how to tell how much space an Object occupies.You can use Instrumentation (not a simple matter) but this will only give you a shallow depth.Java tends you break into many objects something which is C++ might be a single structure so it is not as useful. However, ifyou have a memory issue, I suggest you a memory profiler.This will give you the shallow and deep space objects use and give you a picture across the whole system.This is often more useful as you can start with the biggest consumers and optimise those as even if you have been developing Java for ten years+ you will only be guessing where is the best place to optimise unless you have hard data. Another way to get the object size if you don't want to use a profiler is to allocate a large array and see how much memory is consumed, You have to do this many times to get a good idea what the average size is. I would set the young space very high to avoid GCs confusing your results e.g. "
  },
  {
    "postid":6137,
    "postdate":1253369340,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.165770174,
    "concept_entropy":0,
    "UMASS(coherence)":0.649666632,
    "TFIDF(informativeness)":1.305818144,
    "polarity":4,
    "normalized_text_entropy":4.165770174,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.590606029,
    "normalized_TFIDF":0.093390103,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"If you need to be fairly accurate, check out the."
  },
  {
    "postid":6138,
    "postdate":1253376360,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.139262159,
    "concept_entropy":4.331178241,
    "UMASS(coherence)":0.487526779,
    "TFIDF(informativeness)":1.219093591,
    "polarity":0,
    "normalized_text_entropy":4.139262159,
    "normalized_concept_entropy":4.331178241,
    "normalized_UMASS":0.443206163,
    "normalized_TFIDF":0.087187696,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It can differ from JVM to JVM but says"
  },
  {
    "postid":6139,
    "postdate":1345053060,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.030551091,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.545439125,
    "TFIDF(informativeness)":1.234681587,
    "polarity":0,
    "normalized_text_entropy":4.030551091,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.49585375,
    "normalized_TFIDF":0.088302526,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" is the one I use. Got to love those 16-byte references !alphaworks.ibm.heapanalyzer"
  },
  {
    "postid":6140,
    "postdate":1345053360,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.226002577,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.439474049,
    "TFIDF(informativeness)":1.270163742,
    "polarity":1,
    "normalized_text_entropy":4.226002577,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.399521863,
    "normalized_TFIDF":0.090840155,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Suppose you have some AppendObjectOutputStream class (which is an ObjectOutputStream!) which overrides writeStreamHeader() like this: Now also, let's say you plan on saving multiple objects to a file; one object for each time your program runs. Would you, even on the first run, use AppendObjectOutputStream()?"
  },
  {
    "postid":6141,
    "postdate":1345053240,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.389295706,
    "concept_entropy":0,
    "UMASS(coherence)":0.520766358,
    "TFIDF(informativeness)":0.818414743,
    "polarity":1,
    "normalized_text_entropy":4.389295706,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.473423962,
    "normalized_TFIDF":0.058531762,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You have to write the stream header first time with regular ObjectOutputStream otherwise you will get java.io.StreamCorruptedException on opening the file with ObjectInputStream."
  },
  {
    "postid":6142,
    "postdate":1345058340,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.345358836,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.135991213,
    "polarity":1,
    "normalized_text_entropy":4.345358836,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.081244342,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Is it possible to an out of the box? i.e. any other way than coding a function manually."
  },
  {
    "postid":6143,
    "postdate":1345055820,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.175681776,
    "concept_entropy":0,
    "UMASS(coherence)":0.562438034,
    "TFIDF(informativeness)":1.179645649,
    "polarity":0,
    "normalized_text_entropy":4.175681776,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.511307304,
    "normalized_TFIDF":0.08436644,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In short, I don't think there is a solution."
  },
  {
    "postid":6144,
    "postdate":1301091900,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.15898474,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.044161072,
    "polarity":-1,
    "normalized_text_entropy":4.15898474,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.074676792,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I suggest to use java.lang.reflect. java.lang.Class expose all fields and allows reading public fields and calling public methods. Only the private field without accessors can't be cloned."
  },
  {
    "postid":6145,
    "postdate":1301094060,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.02312817,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.963696063,
    "polarity":2,
    "normalized_text_entropy":4.02312817,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.068922058,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I briefly looked at the library code. It does what Serialization does that is get the graph of the object internal and instead of writing to file, it writes to a memory location = which is the clone of the object. So although its faster than Serialization, its certainly doing the same thing. "
  },
  {
    "postid":6146,
    "postdate":1301092800,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.428540163,
    "concept_entropy":0,
    "UMASS(coherence)":0.810297338,
    "TFIDF(informativeness)":3.260480928,
    "polarity":4,
    "normalized_text_entropy":4.428540163,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.736633944,
    "normalized_TFIDF":0.233184574,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"I am trying to create a program for an online Java course. This program includes an Employee class and a Name class. I have to create multiple Employee objects and prompt the user to enter the employee's name. I am storing all the Employee objects in an employee array. Here's the code: The problem is that the compiler, while running the program, says that the last line is a NullPointerException.I'm not sure what I am doing wrong. Any suggestions? Thanks! -Sean"
  },
  {
    "postid":6147,
    "postdate":1301092200,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.315197773,
    "concept_entropy":0,
    "UMASS(coherence)":0.344368921,
    "TFIDF(informativeness)":1.865679155,
    "polarity":-2,
    "normalized_text_entropy":4.315197773,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.313062655,
    "normalized_TFIDF":0.1334305,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"You created a new array with a size of, but the default value for each element is. This means that the array initially contains null references. You need to use to instantiate each Employee object before you can call methods on them. You can either do this immediately after you create the array: Or you could do it inside your existing loop, just before you first need to use the object:"
  },
  {
    "postid":6148,
    "postdate":1301098620,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.452819531,
    "concept_entropy":0,
    "UMASS(coherence)":0.425734653,
    "TFIDF(informativeness)":0.728753112,
    "polarity":0,
    "normalized_text_entropy":3.452819531,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.387031503,
    "normalized_TFIDF":0.0521193,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You're not creating any objects. Creating the array doesn't create any objects - the array doesn't objects, it contains, and initially all those references are null. You just need: It's worth being very clear about the differences between objects and references - it affects all aspects of the language, from default values, to the assignment operator, to parameter passing, to garbage collection. It can be particularly confusing if you've come from a C++ background, I believe."
  },
  {
    "postid":6149,
    "postdate":1314036840,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.034052499,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.302770668,
    "TFIDF(informativeness)":0.754210198,
    "polarity":0,
    "normalized_text_entropy":4.034052499,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.275246062,
    "normalized_TFIDF":0.053939952,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6150,
    "postdate":1314037980,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.154512067,
    "concept_entropy":3.427333494,
    "UMASS(coherence)":0.375694131,
    "TFIDF(informativeness)":1.688912215,
    "polarity":1,
    "normalized_text_entropy":4.154512067,
    "normalized_concept_entropy":3.427333494,
    "normalized_UMASS":0.341540119,
    "normalized_TFIDF":0.1207884,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"How could I convert a XML Document to a Java Object (or Array)?I readed the XML like this: Now I want that XML as Object (or Array) but how should I do this?Are there any methods or tutorials or classes out there to do that?"
  },
  {
    "postid":6151,
    "postdate":1314037560,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.22836955,
    "concept_entropy":0,
    "UMASS(coherence)":0.399513783,
    "TFIDF(informativeness)":1.469028785,
    "polarity":1,
    "normalized_text_entropy":4.22836955,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.363194348,
    "normalized_TFIDF":0.105062676,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You will need."
  },
  {
    "postid":6152,
    "postdate":1314560640,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.174941013,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.381329964,
    "polarity":0,
    "normalized_text_entropy":4.174941013,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.098790592,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Use.The resulting XML looks like this: "
  },
  {
    "postid":6153,
    "postdate":1314560760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.150708366,
    "concept_entropy":0,
    "UMASS(coherence)":0.425734653,
    "TFIDF(informativeness)":1.103341665,
    "polarity":0,
    "normalized_text_entropy":4.150708366,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.387031503,
    "normalized_TFIDF":0.078909297,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I recommend using for XML (de)serialization. It's simpler than using Java's built-in XML APIs."
  },
  {
    "postid":6154,
    "postdate":1314560880,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.89366069,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.841909548,
    "polarity":0,
    "normalized_text_entropy":3.89366069,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.060212074,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I would look at JAX/B, which gives a way to \"bind\" between Java objects and XML representations. I've got a tiny write-up of doing it with Rational Eclipse-based tooling, but there appear to be (never used them myself) straight Eclipse plugins too, for example. Indeed writing JAX/B by hand is possible, gets a bit dull for complex XML, but annotations are quite easy."
  },
  {
    "postid":6155,
    "postdate":1314560880,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.457313193,
    "concept_entropy":0,
    "UMASS(coherence)":0.646959447,
    "TFIDF(informativeness)":1.5589544,
    "polarity":0,
    "normalized_text_entropy":4.457313193,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.588144952,
    "normalized_TFIDF":0.111494018,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have used and have found it quite easy and powerful.I am not as familiar with XStream, but Simple lets you control your XML schema using annotations which gives you a lot of freedom.The guy who writes it is always responsive on his mailing list."
  },
  {
    "postid":6156,
    "postdate":1332353700,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.295176938,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.379319911,
    "TFIDF(informativeness)":2.241489761,
    "polarity":0,
    "normalized_text_entropy":4.295176938,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.344836283,
    "normalized_TFIDF":0.160307896,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What is the C++ equivalent of?"
  },
  {
    "postid":6157,
    "postdate":1332353880,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.246235077,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.64420606,
    "TFIDF(informativeness)":1.505029436,
    "polarity":-1,
    "normalized_text_entropy":4.246235077,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.585641873,
    "normalized_TFIDF":0.107637387,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"There is no equivalent of this in C++ and it would be pointless to attempt to program Java in C++.That being said, I will approach this from a perspective of attempting to mimic as much of the assignment characteristics and spirit of the statement as possible.Each way I will suggest has downsides and limitations.The first two are not truly idiomatic C++ but it's important to know about them to see what problems the last two solved. Let me start with the most basic and least useful, a void pointer: Anything can be assigned to a void pointer from the new operator as new, placement new and the like always return a void pointer.The downsides should be obvious: loss of type information about the object pointed at.For one, C++ lacks reflection or any means of interrogating the object.You'd have to keep the type information in your head and use casting back and forth to actually use it.Since there's no type-safe way to cast from a void pointer, hilarity could ensue. If this were a return type from a function: any author using your code would need to figure out what happen.Unfortunately, often times what they thing should happen and what you, the author, think should be returned from a function are very different. If you want to restrict yourself to N types which are supported instead of infinite types that java.lang.Object can handle then there are.These can hold a set of pre-defined value types on the same memory space.Unions lack two very important things: the ability to know which value was assigned and the ability to hold non-POD types.This completely rules them out for use with any object with any sort of functionality such as. To clarify what the above actually means: If I set the first char within the \"b\" portion of an instance of \"myType\" then I also am setting the first byte of the int to that same value.In C++ these are really only useful for memory hacks and extremely low level programming (think embedded and the like.)They are not idiomatic C++.Now, if you truly want a \"I can hold anything\" then use a.This can hold any object without destroying a lot of type information which is so useful.The Boost documents state better than I in their purpose.Taken from the introduction section of Any: Think of Any solving many of the problems associated with a void pointer, such as loss of information about the contained object and the ability to safely cast to proper types.solves the same type of problem of that of a union without losing object information.Moreover it can be used with non-POD type objects.As the documentation states it best: Edit: Reorganized to show the what and the why of my thoughts when I answered the OP.I've also addressed comments below."
  },
  {
    "postid":6158,
    "postdate":1332353820,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.055958152,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.791759469,
    "polarity":0,
    "normalized_text_entropy":4.055958152,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.128143878,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"There is no equivalent to because in C++, not everything is an object.But theses, you can accomplish the same goal. The closest equivalent to in C++ is the use of ( ).An ABC is a class that is designed to be a base class to other classes.You create an ABC by giving your class at least one, and you specify that by using this syntax: A Pure Virtual member function typically has no implementation in the base class (See footnote *1). It is not possible to create an instance of an ABC: In order to use an ABC, you must create a subclass of it and implement each and every pure virtual member function in the derived class: Now you can create an instance of, while getting a pointer to the base class: The usual apply in the above code about using smart pointers etc.I omitted this for clarity, but from now on I'll use. You can also get an reference to without having to fearAn important note about destructors and ABCs.When you implement an ABC, you need to have a virtual destructor in the base class (Footnote *2).If you don't implement a virtual destructor in the base class, then when you try to an object through the base class pointer, you'll, and this is bad. In fact, in my real-world experience in implementing ABCs I often find that the member function that I really want to be pure virtual is the destructor.ABCs I design often have many virtual methods that are not pure and then one virtual destructor.IMO (debatable), this is a good starting point when designing an ABC:Make the dtor pure, and keep a minimal number of non-pure virtual member functions in the base class, and provide an implementation for the pure virtual dtor in the base class.As you design this way you'll find things you can't do in your actual code, and that's when you deviate from this design. *1 ) Base classes provide a definition for a pure virtual member function.But this is not the norm, and the reasons you might do this are somewhat beyond the scope of this post.Note that when you do this there is a special rule in the Standard that says you may not provide the definition along with the declaration; they must be seperate.Like this: *2) There are exceptions to the rule about having virtual destructors.Beyond the scope of this article, but a better rule of thumb is \" \""
  },
  {
    "postid":6159,
    "postdate":1332939900,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.317844228,
    "concept_entropy":0,
    "UMASS(coherence)":0.84461424,
    "TFIDF(informativeness)":2.64791222,
    "polarity":-2,
    "normalized_text_entropy":4.317844228,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.767831127,
    "normalized_TFIDF":0.189374604,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"There is no equivalent because Java allocates objects from a managed heap, C++ allocates them in unmanaged memory.Objects in Java are automatically reference counted, whereas C++ requires explicit release of all memory. The runtime environments are fundamentally different, drawing analogies due to similar looking syntax is a trap."
  },
  {
    "postid":6160,
    "postdate":1332430320,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.331284629,
    "concept_entropy":0,
    "UMASS(coherence)":0.562438034,
    "TFIDF(informativeness)":1.66310205,
    "polarity":2,
    "normalized_text_entropy":4.331284629,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.511307304,
    "normalized_TFIDF":0.118942497,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"In a current problem I am having ( ) I have been running through the code like a madman trying to devour any useful missed information from the javadoc of each class used.Now, I pulled quite a bit of this code from previous questions so there was a fair bit I didn't write myself. The issue I noticed is that the code I grabbed is initializing an object, say \"SimpleDoc\" which implements an interface (Doc) and assigning it to that interface?!Little Code snippet: Now as far as I was led to understand in java we create objects. I'm familiar with inheritance, and I'm familiar with the trick of using interfaces to allow a class to \"inherit\" multiple super classes.But this just isn't sticking right. You can create a class which implements an interface, that is fine with me. But what is happening here when a interface is created and an object is reduced to its interface? What am I accessing when I reference mydoc exactly?"
  },
  {
    "postid":6161,
    "postdate":1339507740,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.410089167,
    "concept_entropy":0,
    "UMASS(coherence)":0.664777331,
    "TFIDF(informativeness)":1.708344616,
    "polarity":2,
    "normalized_text_entropy":4.410089167,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.604343028,
    "normalized_TFIDF":0.122178176,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"The trick is to realize that you're not \"creating\", \"instantiating\", or \"initializing\" an interface. You are simply defining a variable as being something that you know implements that interface. You are essentially telling other programmers working on this code that for the rest of this method, you are only interested in the fact that is a (i.e., something that satisfies the interface). This can make programming simpler because the IDE's auto-complete will now only show you the methods that are defined by this interface, rather than everything that a is capable of doing. Imagine that in the future you want to expand your functionality so that you could have different implementations of Doc depending on some input. Rather than creating the SimpleDoc explicitly, you say: The can produce any type of, and this method doesn't really care what kind gets instantiated, because it's going to treat it like a regardless."
  },
  {
    "postid":6162,
    "postdate":1338514560,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.299833434,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.694150961,
    "polarity":1,
    "normalized_text_entropy":4.299833434,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049644608,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can not create interfaces, what you do here is you create an object of the class which implements the interface. Because the class implements this interface, you are allowed to handle as if it was an instance of that interface. This allows you to access all declared methods in the interface, which are implemented in the classIf, for example, your Doc-Interface would look like this: and your SimpleDoc class would look like this: ... then you could only access the-method of you-object. But you could also say: ... and then you would be also able to call "
  },
  {
    "postid":6163,
    "postdate":1338515340,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.188248699,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.726227402,
    "polarity":0,
    "normalized_text_entropy":4.188248699,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.051938665,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The question is basically self-explanatory.I haven't been able to find an API for arrays (other than this, but this just defines a bunch of static helper functions for dealing with actual arrays).If there is no class for it, this seems to suggest that an array can't be an. However, the fact that an array has public fields like and methods that it can invoke like and seem to suggest (very strongly) the complete opposite. What is the explanation for the odd presentation and behavior of primitive arrays? As a note, I tried to use the \"Open Implementation\" Eclipse feature on the method of an array just now, hoping that I would be able to look at where and how this method was defined (since it said int[] overrode it from Object), but it actually caused my entire Eclipse to freeze up and crash..."
  },
  {
    "postid":6164,
    "postdate":1338514980,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.349121312,
    "concept_entropy":0,
    "UMASS(coherence)":0.625219308,
    "TFIDF(informativeness)":1.303816183,
    "polarity":1,
    "normalized_text_entropy":4.349121312,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.568381189,
    "normalized_TFIDF":0.093246925,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"There is a class for every array type, so there's a class for, there's a class for. These classes are created by JVM. You can access them by,. The direct super class of these classes areThere's also a compile-time subtyping rule, if is subtype of, is subtype of."
  },
  {
    "postid":6165,
    "postdate":1338518460,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":0,
    "concept_entropy":4.570684433,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.685702038,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.570684433,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049040354,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The should give you an idea: : So arrays are not instances and therefore you don't need a constructor to create them. Instead you use the."
  },
  {
    "postid":6166,
    "postdate":1386010200,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":19,
    "Normalized_count":0.316666667,
    "text_entropy":4.164307227,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.915996678,
    "polarity":1,
    "normalized_text_entropy":4.164307227,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.065510672,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"So short and simple, yes <Type>[] is a type of. It extends directly from as I understand it. There are all the Object methods on it,,, ... Plus a special exposed variable called. The class is a utility class for dealing with types of Arrays. It's a little confusing when you add to the mess things like:does not inherit from. Also, unlike other types, there are no constructors for array types. They respect the keyword but that is usually to allocate for the size. It's a little bizarre, but just one of those language quirks. To answer the question though, yes they are an object."
  },
  {
    "postid":6167,
    "postdate":1225107960,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.27952903,
    "concept_entropy":3.974937501,
    "UMASS(coherence)":0.419148416,
    "TFIDF(informativeness)":1.602694771,
    "polarity":1,
    "normalized_text_entropy":4.27952903,
    "normalized_concept_entropy":3.974937501,
    "normalized_UMASS":0.381044015,
    "normalized_TFIDF":0.114622262,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"See "
  },
  {
    "postid":6168,
    "postdate":1225108560,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.352959368,
    "concept_entropy":3.974937501,
    "UMASS(coherence)":0.451753722,
    "TFIDF(informativeness)":2.020637638,
    "polarity":1,
    "normalized_text_entropy":4.352959368,
    "normalized_concept_entropy":3.974937501,
    "normalized_UMASS":0.410685202,
    "normalized_TFIDF":0.144512892,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It is an object"
  },
  {
    "postid":6169,
    "postdate":1294156020,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.016440608,
    "concept_entropy":4.547323006,
    "UMASS(coherence)":0.375694131,
    "TFIDF(informativeness)":0.917652739,
    "polarity":0,
    "normalized_text_entropy":4.016440608,
    "normalized_concept_entropy":4.547323006,
    "normalized_UMASS":0.341540119,
    "normalized_TFIDF":0.065629111,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Only those several primitive types in Java as we known. Basically, we still have several steps to create an array, such as declare, or initialize if needed, and that means array is an object indeed. Stepping deeper, the primitive types could be stored in memory with the original values but object is an address(reference). So we can imagine a paradox, how could we store the original values in the memory if the array is an primitive type? I think the same as String, but String is a final object so that you can construct an object in an easy way, String s = \"s\", like a primitive type."
  },
  {
    "postid":6170,
    "postdate":1294157460,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":3.978371961,
    "concept_entropy":0,
    "UMASS(coherence)":0.286485258,
    "TFIDF(informativeness)":1.70719729,
    "polarity":0,
    "normalized_text_entropy":3.978371961,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.260441144,
    "normalized_TFIDF":0.122096121,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"See the below code. It compiles: - Now, on any primitive type, you cannot call a method( ) defined in Object class (Or, any method for that matter).. So, an array is essentially an.. From the: - And,: - So, from the first quote, is not actually a class.. It is another type.. But, essentially arrays are objects, though not of some, but they are of type.. So they are not instances of some class, and may be objects of are defined to be created that way.."
  },
  {
    "postid":6171,
    "postdate":1294156440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.471820348,
    "concept_entropy":0,
    "UMASS(coherence)":0.547305526,
    "TFIDF(informativeness)":0.933409522,
    "polarity":0,
    "normalized_text_entropy":4.471820348,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.497550478,
    "normalized_TFIDF":0.066756011,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"To make a class immutable what I can do is: 1)Make class final 2)do not provide setters 3)mark all variables as final But if my class has another object of some other class then , somone can change value of thatobject"
  },
  {
    "postid":6172,
    "postdate":1294156500,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.541593898,
    "concept_entropy":0,
    "UMASS(coherence)":0.473832754,
    "TFIDF(informativeness)":1.017575085,
    "polarity":0,
    "normalized_text_entropy":4.541593898,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.430757049,
    "normalized_TFIDF":0.072775403,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"A) Make the immutable as well or B) Don't allow direct access to the object, instead providing only getters to act as a proxy. You make a deep copy of and return a copy rather than the original, but that generally isn't the type of behavior you would expect in Java. "
  },
  {
    "postid":6173,
    "postdate":1294215660,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.42899028,
    "concept_entropy":3.923260325,
    "UMASS(coherence)":0.667203548,
    "TFIDF(informativeness)":1.485894558,
    "polarity":2,
    "normalized_text_entropy":4.42899028,
    "normalized_concept_entropy":3.923260325,
    "normalized_UMASS":0.60654868,
    "normalized_TFIDF":0.10626889,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Immutability is best considered from the perspective of the API user. So your object API needs to satisfy the following two conditions: : It is in fact OK to have mutable data inside an immutable object. Consider java.lang.String for example: although it is generally considered as the definitive immutable class, it does in fact have a mutable internal field for caching the hashCode (not many people know this!). So to address your question, if you wish to contain another (mutable) object inside an immutable object then you typically need to do one or more of the following: All of these solutions are a bit hacky - a better solution overall is to avoid the use of mutable objects within immutable objects. In the long run it's asking for trouble because sooner or later a mutable reference will leak out and you will have an extremely hard to find bug. You are better moving towards a full hierarchy of immutable objects (the approach taken by languages like Scala and Clojure)"
  },
  {
    "postid":6174,
    "postdate":1294156860,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.352712362,
    "concept_entropy":4.521179909,
    "UMASS(coherence)":0.381809946,
    "TFIDF(informativeness)":0.543853942,
    "polarity":2,
    "normalized_text_entropy":4.352712362,
    "normalized_concept_entropy":4.521179909,
    "normalized_UMASS":0.347099951,
    "normalized_TFIDF":0.038895596,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I assume OtherClass (by the way you say Other once) is meant to be a class you don't control, or which has to have a setter. If you can't remove, change it to and return a read-only view of.There will be wrappers for all the get methods, but no set ones."
  },
  {
    "postid":6175,
    "postdate":1371748860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.298582711,
    "concept_entropy":0,
    "UMASS(coherence)":0.409599686,
    "TFIDF(informativeness)":0.664064082,
    "polarity":0,
    "normalized_text_entropy":4.298582711,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.372363351,
    "normalized_TFIDF":0.04749284,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Return deep clones from your getters. You may find this to be no easy task."
  },
  {
    "postid":6176,
    "postdate":1289348100,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.128079732,
    "concept_entropy":4.003086219,
    "UMASS(coherence)":0.268677973,
    "TFIDF(informativeness)":1.717258348,
    "polarity":0,
    "normalized_text_entropy":4.128079732,
    "normalized_concept_entropy":4.003086219,
    "normalized_UMASS":0.244252703,
    "normalized_TFIDF":0.122815672,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"All the objects referenced in the immutable class should be immutable, or at least be encapsulated as private and making sure that they are not modified (not inside the methods of your class and definitely not from the outside). For instance, if you have this situation: ... You can not provide the method, because doing so will open the door for outside modifications, like this: As a special case of the above, all collections and/or maps should be made immutable, with the methods in the class."
  },
  {
    "postid":6177,
    "postdate":1289349060,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.569663711,
    "concept_entropy":0,
    "UMASS(coherence)":0.282574145,
    "TFIDF(informativeness)":1.747617744,
    "polarity":0,
    "normalized_text_entropy":3.569663711,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.256885586,
    "normalized_TFIDF":0.12498693,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"you cannot (reasonably) stop that in java.if you don't have control over the other class, there are ways to effectively get immutable behavior, but it can be very expensive in practice.basically, you must always return a copy of that class in any public method return values.(the jdk actually has this problem with the TimeZone class)."
  },
  {
    "postid":6178,
    "postdate":1289348760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.471718671,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.277899935,
    "TFIDF(informativeness)":1.135475732,
    "polarity":0,
    "normalized_text_entropy":3.471718671,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.252636305,
    "normalized_TFIDF":0.081207476,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Java objects are not primitive. If you mark a primitive as final, then its value cannot be changed once it is assigned. However, object contents cannot be final, only object references can be final. So you cannot make an object in this way. One solution might be abandoning all setter/mutator methods those could change the particular fields of the object and encapsulating them in a way that you can only access them, not change them."
  },
  {
    "postid":6179,
    "postdate":1289348760,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.246626613,
    "concept_entropy":0,
    "UMASS(coherence)":0.368188573,
    "TFIDF(informativeness)":1.344708441,
    "polarity":0,
    "normalized_text_entropy":4.246626613,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.334716885,
    "normalized_TFIDF":0.096171477,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In Java, an array IS AN Object. My question is... is an Object constructor called when new arrays is being created? We would like to use this fact to instrument Object constructor with some extra bytecode which checks length of array being constructed. Would that work?"
  },
  {
    "postid":6180,
    "postdate":1252286520,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.321117753,
    "concept_entropy":0,
    "UMASS(coherence)":0.649399948,
    "TFIDF(informativeness)":1.974282246,
    "polarity":1,
    "normalized_text_entropy":4.321117753,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.590363589,
    "normalized_TFIDF":0.141197626,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"As far as the Java Language Specification is concerned, although both use the keyword, and are different forms of expression, each with its own rules. The description of Array Creation Expressions does not mention calling a constructor."
  },
  {
    "postid":6181,
    "postdate":1252286760,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.053665169,
    "concept_entropy":0,
    "UMASS(coherence)":0.312166597,
    "TFIDF(informativeness)":1.460656975,
    "polarity":0,
    "normalized_text_entropy":4.053665169,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.283787815,
    "normalized_TFIDF":0.104463937,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Per the: \"Arrays are created and manipulated using a distinct set of instructions.\" So, while arrays are instances of Objects, they aren't initialized the same way that other objects are (which you can see if you scroll up from that link anchor)."
  },
  {
    "postid":6182,
    "postdate":1353580980,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.033171632,
    "concept_entropy":0,
    "UMASS(coherence)":0.324314677,
    "TFIDF(informativeness)":1.182262546,
    "polarity":0,
    "normalized_text_entropy":4.033171632,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.294831525,
    "normalized_TFIDF":0.084553596,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I don't think so because you can not derive a native array to overridethe constructor"
  },
  {
    "postid":6183,
    "postdate":1252287060,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.555533151,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.341891354,
    "polarity":0,
    "normalized_text_entropy":3.555533151,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.095970003,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can use byte code manipulation to place the check where ever a new array is created."
  },
  {
    "postid":6184,
    "postdate":1303555980,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.857631849,
    "concept_entropy":0,
    "UMASS(coherence)":0.21443827,
    "TFIDF(informativeness)":0.959266769,
    "polarity":0,
    "normalized_text_entropy":3.857631849,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.194943882,
    "normalized_TFIDF":0.068605282,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Nope. I found this on the AspectJ mailing list:. You probably ask about arrays for a reason, but if you can, why not switch to the collection classes. That will give you lots of opportunity to intercept and do validations."
  },
  {
    "postid":6185,
    "postdate":1303556100,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.221227027,
    "concept_entropy":0,
    "UMASS(coherence)":0.463873715,
    "TFIDF(informativeness)":0.856877093,
    "polarity":1,
    "normalized_text_entropy":4.221227027,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.421703377,
    "normalized_TFIDF":0.06128253,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In fact, I call a c++ function : And what I'd like to do, is get back the original object's values. Considering the java code declaration for this object : In exemple, get the value from the third row in the second column. Anybody's got an idea on how to do it ??"
  },
  {
    "postid":6186,
    "postdate":1303556160,
    "tag":"1",
    "TFMvalue":0.68,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.323135141,
    "concept_entropy":4.544697984,
    "UMASS(coherence)":0.499535764,
    "TFIDF(informativeness)":1.815533329,
    "polarity":1,
    "normalized_text_entropy":4.323135141,
    "normalized_concept_entropy":4.544697984,
    "normalized_UMASS":0.454123422,
    "normalized_TFIDF":0.129844148,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6187,
    "postdate":1340146440,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.318665124,
    "concept_entropy":0,
    "UMASS(coherence)":0.663139343,
    "TFIDF(informativeness)":1.380842769,
    "polarity":1,
    "normalized_text_entropy":4.318665124,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.602853948,
    "normalized_TFIDF":0.098755748,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'm trying to write a simple ball game, and there's several turns (ie., ball lives). The ball \"dies\" when it passes the bottom border of the screen. What I have so far works, but doesn't seem to be the proper way to do things: The die() method basically fades the ball's colour slowly (dark_gray -> pause(50) -> light_gray -> pause(50)), but doesn't actually do anything useful. The remove(), obviously, gets rid of the ball from the screen, which is what I want. It makes sense to me for this remove() to be a part of Ball's die() method, as opposed to it being a separate method call in the main program -- but I'm not sure how to go about this? Can an object delete itself? And, if it can, is object suicide better than object murder, from a philosophical/methodological point of view? Thanks!"
  },
  {
    "postid":6188,
    "postdate":1340147880,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.355839598,
    "concept_entropy":0,
    "UMASS(coherence)":0.465563158,
    "TFIDF(informativeness)":0.979345203,
    "polarity":0,
    "normalized_text_entropy":4.355839598,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.423239235,
    "normalized_TFIDF":0.070041261,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The object can remove itself given it has some sort of reference to the view rendering mechanism. Your sample doesn't give enough information so I'll exemplify one way to do it:Neither nor is better or worse. It depends on your design and requirements.In this sample though, might be since this way the object need to know in which context it's being used. "
  },
  {
    "postid":6189,
    "postdate":1340147940,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.448364542,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.65867374,
    "TFIDF(informativeness)":0.985946291,
    "polarity":3,
    "normalized_text_entropy":4.448364542,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.598794309,
    "normalized_TFIDF":0.07051336,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I have a JList which uses a DefaultListModel. I then add values to the model which then appear in the JList. I have created a MouseListener which (when double clicked) allows the user to edit the current user number of that person they have selected. I have checked that the actual object of that record is being changed, and it is. The only issue I'm having is getting the actual Jlist to update to show the new values of that object. Snippets of the current code I have are:"
  },
  {
    "postid":6190,
    "postdate":1397549220,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.195433283,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.409926454,
    "TFIDF(informativeness)":0.641450945,
    "polarity":-1,
    "normalized_text_entropy":4.195433283,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.372660413,
    "normalized_TFIDF":0.045875584,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You need to call on the ListModel."
  },
  {
    "postid":6191,
    "postdate":1326903060,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.180452022,
    "concept_entropy":4.506086332,
    "UMASS(coherence)":0.508151467,
    "TFIDF(informativeness)":1.155744921,
    "polarity":0,
    "normalized_text_entropy":4.180452022,
    "normalized_concept_entropy":4.506086332,
    "normalized_UMASS":0.461955879,
    "normalized_TFIDF":0.082657097,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Instead of, update your existing model using one of the methods such as, which will for you."
  },
  {
    "postid":6192,
    "postdate":1326903120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.316776567,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.766522918,
    "TFIDF(informativeness)":2.357005085,
    "polarity":-3,
    "normalized_text_entropy":4.316776567,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.696839016,
    "normalized_TFIDF":0.168569374,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"You need to call. But since this method is protected (I really wonder why), you can't do that directly. Instead, make a small subclass: Use it as your list model: After updating a user number, update the corresponding JList entry:Alternatively, if you don't want a subclass, you can just replace the JList element after the user number changed:. Though this is somewhat cumbersome and having a subclass seems the cleaner approach."
  },
  {
    "postid":6193,
    "postdate":1326903240,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.252156928,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.317052016,
    "polarity":0,
    "normalized_text_entropy":4.252156928,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.094193532,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I was having a discussion about usage ofs ands in Java. How many objects are created in each of these two examples? Ex 1: Ex 2: In my opinion, Ex 1 will create 5 and Ex 2 will create 4 objects."
  },
  {
    "postid":6194,
    "postdate":1326903300,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.359796214,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.527217774,
    "polarity":-1,
    "normalized_text_entropy":4.359796214,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.109224263,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You can determine the answer by analyzing the java bytecode (use). Example 1 creates two objects (see line #4) and two objects (see line #7), while example 2 creates one object (see line #2).Note that you must also take the objects into account (since arrays are objects in Java). and objects are both implemented using an underlying. Thus, example 1 creates objects and example 2 creates objects. Example 1: Example 2:"
  },
  {
    "postid":6195,
    "postdate":1312911720,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.108948036,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.139918027,
    "polarity":-1,
    "normalized_text_entropy":4.108948036,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.081525182,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"In terms of objects created: Example 1 creates 8 objects: Example 2 creates 2 object: To be fair, I did not know that new char[] actually created an Object in Java (but I knew they were created). Thanks to aix for pointing that out."
  },
  {
    "postid":6196,
    "postdate":1312915080,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.007242714,
    "concept_entropy":0,
    "UMASS(coherence)":0.606878273,
    "TFIDF(informativeness)":1.908152655,
    "polarity":1,
    "normalized_text_entropy":4.007242714,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.551707521,
    "normalized_TFIDF":0.136468139,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I've used a memory profiler to get the exact counts. On my machine, the first example creates 8 objects: On the other hand, the second example: creates 2 objects: This is using JDK 1.6u30. P.S. To the make the comparison fair, you probably ought to call at the end of the second example."
  },
  {
    "postid":6197,
    "postdate":1312912260,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.933954578,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.302770668,
    "TFIDF(informativeness)":0.900570237,
    "polarity":1,
    "normalized_text_entropy":3.933954578,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.275246062,
    "normalized_TFIDF":0.064407396,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The answer is tied to specific implementations of the language (compiler and runtimelibraries).Even to the presence of specific optimization options or not.And, of course, version of the implementation (and, implicitly, the JLS it is compliant with).So, it's better to speak in term of minima and maxima.In fact, this exercise gives a betterFor Ex1, the minimum number of objects is 1 (the compiler realizes that there are only constants involved and produces only code for ).The maximum could be just anything, depending on implementation, but a reasonable estimation is 8 (also given in another answer as the number produced by certain configuration). For Ex2, the minimum number of objects is 2.The compiler has no way of knowing if we have replaced StringBuilder with a custom version with different semantics, so it will not optimize.The maximum could be around 6, for an extremely memory-conserving StringBuilder implementation that expands a backing array one character at a time, but in most cases it will be 2 too."
  },
  {
    "postid":6198,
    "postdate":1316467920,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.094360938,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.959982853,
    "polarity":0,
    "normalized_text_entropy":4.094360938,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.068656495,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have two values, and: and an ArrayList: Let's say I add three of the and five of the enemies into the.Whenever I want to change a variable inside the array, e.g.:in the array is changed, instead of just the one at index."
  },
  {
    "postid":6199,
    "postdate":1316468700,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.400407406,
    "concept_entropy":0,
    "UMASS(coherence)":0.553106836,
    "TFIDF(informativeness)":1.381827364,
    "polarity":5,
    "normalized_text_entropy":4.400407406,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.502824396,
    "normalized_TFIDF":0.098826165,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"You're adding 3 references to the smallRed enemy each time to the arraylist.To explain;can be considered a memory address (although its more complicated than that), so you're adding the same memory address several times (like adding the same house address to your real life address book). It doesn't matter what page you get the address from in your address book; letters go to the same house. Every time you use the keyword you are creating a new instance of an object, otherwise you're just passing around a reference to an old object."
  },
  {
    "postid":6200,
    "postdate":1316468220,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.359780447,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.121487161,
    "polarity":0,
    "normalized_text_entropy":4.359780447,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.080207034,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a class called. It has the following; It has 2 attributes,, and. 1 person can have many telephones, so you may see people with multiple ID's below. There's another class called. and it will have a method called,. The personList, has 3-4 Person objects. I need to search the PersonArrayList and find the object that will match the Person object. How can i get this done ? Note: i tried. But this doesn't work."
  },
  {
    "postid":6201,
    "postdate":1316468760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.086524808,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.765496966,
    "polarity":0,
    "normalized_text_entropy":4.086524808,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.054747164,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Make sure you override and for Person class. But you have to have equality check on telephone number assuming telephone number unique. This would not be a solution but a workaround. Use bellum's answer. Mark it as correct answer."
  },
  {
    "postid":6202,
    "postdate":1316468460,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.094403949,
    "concept_entropy":0,
    "UMASS(coherence)":0.546447585,
    "TFIDF(informativeness)":0.9900644,
    "polarity":-1,
    "normalized_text_entropy":4.094403949,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.496770532,
    "normalized_TFIDF":0.070807881,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"For implementing and you can observe."
  },
  {
    "postid":6203,
    "postdate":1316468580,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.071177977,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.355923059,
    "TFIDF(informativeness)":0.692284631,
    "polarity":0,
    "normalized_text_entropy":4.071177977,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.323566417,
    "normalized_TFIDF":0.049511131,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"First of all, why are you not having a for storing all your for a particular person. That way, you won't have to create a separate instance for each for the same, which simply makes no sense. You can change your attributes of Person class to: - And then have a list of Person, as you are having. To find a with a particular telephoneNumber, you need to iterate through your."
  },
  {
    "postid":6204,
    "postdate":1316469180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.181258871,
    "concept_entropy":0,
    "UMASS(coherence)":0.372080875,
    "TFIDF(informativeness)":1.038648745,
    "polarity":1,
    "normalized_text_entropy":4.181258871,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.338255341,
    "normalized_TFIDF":0.074282559,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You need to iterate the array, check the persons one by one for phone number, and when you get to the one you need just assign it to a variable."
  },
  {
    "postid":6205,
    "postdate":1255223640,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.283477217,
    "concept_entropy":0,
    "UMASS(coherence)":0.626312,
    "TFIDF(informativeness)":1.317953028,
    "polarity":-1,
    "normalized_text_entropy":4.283477217,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.569374545,
    "normalized_TFIDF":0.094257971,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Use a loop to iterate through the list. In the body of the loop, check if the telephone number of the person in the list is the telephone number you're looking for. If yes, then return the person. See in Oracle's Java Tutorials."
  },
  {
    "postid":6206,
    "postdate":1255223760,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.2719273,
    "concept_entropy":4.5642206,
    "UMASS(coherence)":0.340525739,
    "TFIDF(informativeness)":2.574242766,
    "polarity":0,
    "normalized_text_entropy":4.2719273,
    "normalized_concept_entropy":4.5642206,
    "normalized_UMASS":0.309568854,
    "normalized_TFIDF":0.184105878,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Many solutions, define two persons as equal by their phone number but what if two persons that live in the same house and / or have the same phone number are added to the list? Which one is the correct one?. Before rushing to find the person, you have to define a way to determine if two persons are, indeed, equal without ambiguous results. Unless you restrict the creation of persons based on that very phone number by making it unique (you do not clarify this in your question, so I assume there is no such restriction), the result of the search is undefined.You're using an so you can't guarantee even a result by insertion order. I suggest you base the equality test in a person's instead of its phone. To prevent the modification of's just define a getter for it and do not define a method at all. Then, you can redefine (and if you feel like it) based on."
  },
  {
    "postid":6207,
    "postdate":1255224960,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":3.838039817,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.469381279,
    "TFIDF(informativeness)":1.556068072,
    "polarity":2,
    "normalized_text_entropy":3.838039817,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.426710254,
    "normalized_TFIDF":0.111287592,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"This is a simple java program. It contains a class \"Student\" and we are making its two objects stud,stud1. Similarly I have also made a String object \"a\" whose value is \"Hello\". As we know when we create a class object, it just holds a reference values for that object.That's why when I tried to print stud and stud1 I am getting two reference values.But since \"a\" is an object of class String we should expect a reference value instead of value \"Hello\".Why its happening? "
  },
  {
    "postid":6208,
    "postdate":1255223880,
    "tag":"1",
    "TFMvalue":0.692307692,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.383214716,
    "concept_entropy":0,
    "UMASS(coherence)":0.385085663,
    "TFIDF(informativeness)":1.002416524,
    "polarity":0,
    "normalized_text_entropy":4.383214716,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.350077875,
    "normalized_TFIDF":0.071691286,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This line is equivalentto Since the method you get something more meaningful than a bunch of characters and digits when printing strings. You could let your user-defined classes do this too. In your class it would look like this: Here's an for a run with your code where overrides."
  },
  {
    "postid":6209,
    "postdate":1255323120,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.066028217,
    "concept_entropy":0,
    "UMASS(coherence)":0.418770649,
    "TFIDF(informativeness)":1.176765112,
    "polarity":2,
    "normalized_text_entropy":4.066028217,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.38070059,
    "normalized_TFIDF":0.084160428,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"When you call, the String output is the of the object passed to it. Of course the of a is the string itself, so you'd expect. If your class doesn't define a method (and it doesn't), the defined for its parent (is the class) is used, which prints a value based on type/class and the of the object."
  },
  {
    "postid":6210,
    "postdate":1267738800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.332752601,
    "concept_entropy":0,
    "UMASS(coherence)":0.594047128,
    "TFIDF(informativeness)":2.729297836,
    "polarity":-1,
    "normalized_text_entropy":4.332752601,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.540042844,
    "normalized_TFIDF":0.195195178,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"When you hand System.out.println() an object, it will call that object's toString() method in order to be able to print something out. Object has a default toString() method, and that's what's getting called for your Student objects, because you did not override the toString() method. Strings, however, have toString() defined in the obvious way, so it's printing out that custom string representation of the object; namely, the value of the string."
  },
  {
    "postid":6211,
    "postdate":1267739280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.255670182,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.460254296,
    "polarity":1,
    "normalized_text_entropy":4.255670182,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.104435138,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"When you call , the method of that object is called. Since you dont have one implemented for, the is called which prints the reference value. To print meaningful values, override it like so --"
  },
  {
    "postid":6212,
    "postdate":1267744020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.206291093,
    "concept_entropy":0,
    "UMASS(coherence)":0.552944684,
    "TFIDF(informativeness)":1.522686233,
    "polarity":1,
    "normalized_text_entropy":4.206291093,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.502676985,
    "normalized_TFIDF":0.108900174,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Themethod of a is called and prints the String \"Hello\"."
  },
  {
    "postid":6213,
    "postdate":1388275980,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.226846808,
    "concept_entropy":0,
    "UMASS(coherence)":0.324314677,
    "TFIDF(informativeness)":1.330126379,
    "polarity":2,
    "normalized_text_entropy":4.226846808,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.294831525,
    "normalized_TFIDF":0.09512859,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Your student class just don't override toString() method, which is inherited by every java object: ()"
  },
  {
    "postid":6214,
    "postdate":1320277680,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.10318316,
    "concept_entropy":0,
    "UMASS(coherence)":0.41516948,
    "TFIDF(informativeness)":1.451167062,
    "polarity":-1,
    "normalized_text_entropy":4.10318316,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.3774268,
    "normalized_TFIDF":0.103785233,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Simply, there is method inside the class (System.out is an instance of PrintStream), and inside its implementation there is. You can override of any object to format the string yields from calling."
  },
  {
    "postid":6215,
    "postdate":1324388520,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.293056766,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.582453456,
    "polarity":1,
    "normalized_text_entropy":4.293056766,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.113174634,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have an object and a class name, i can check whether obj is of the type MyClass using either instanceof or i can say obj.getClass().equals(\"MyClass\").So i want to know are there any other ways of checking the type of an object."
  },
  {
    "postid":6216,
    "postdate":1349151900,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.397970191,
    "concept_entropy":4.583088212,
    "UMASS(coherence)":0.478142948,
    "TFIDF(informativeness)":1.748492609,
    "polarity":2,
    "normalized_text_entropy":4.397970191,
    "normalized_concept_entropy":4.583088212,
    "normalized_UMASS":0.434675407,
    "normalized_TFIDF":0.125049499,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Beware: returns true also if your object is a subclass of , or if it implements the interface(this is usually what you are interested in - if you recall the \"IS A\" OOP concept) See also about , similar to but a little more powerful."
  },
  {
    "postid":6217,
    "postdate":1366169280,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.35400508,
    "concept_entropy":0,
    "UMASS(coherence)":0.638554176,
    "TFIDF(informativeness)":1.913791672,
    "polarity":2,
    "normalized_text_entropy":4.35400508,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.580503796,
    "normalized_TFIDF":0.136871433,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Note that the two options you cite are equivalent:"
  },
  {
    "postid":6218,
    "postdate":1349152200,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.35400508,
    "concept_entropy":0,
    "UMASS(coherence)":0.638554176,
    "TFIDF(informativeness)":1.913791672,
    "polarity":2,
    "normalized_text_entropy":4.35400508,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.580503796,
    "normalized_TFIDF":0.136871433,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":" is another option."
  },
  {
    "postid":6219,
    "postdate":1349152200,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.188075489,
    "concept_entropy":0,
    "UMASS(coherence)":0.429074471,
    "TFIDF(informativeness)":1.239428604,
    "polarity":-1,
    "normalized_text_entropy":4.188075489,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.390067701,
    "normalized_TFIDF":0.088642025,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"instanceof is another option."
  },
  {
    "postid":6220,
    "postdate":1349152560,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.236944541,
    "concept_entropy":0,
    "UMASS(coherence)":0.488008428,
    "TFIDF(informativeness)":1.181235638,
    "polarity":1,
    "normalized_text_entropy":4.236944541,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.443644025,
    "normalized_TFIDF":0.084480154,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You could probably recurse through to get something similar to."
  },
  {
    "postid":6221,
    "postdate":1262621580,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.089849153,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.138658389,
    "polarity":0,
    "normalized_text_entropy":4.089849153,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.081435094,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As said by others, does not have the same functionality as. On another point, when dealing with this problem in code, using a-pattern is a clean (although not smallest in lines of code) solution. A nice advantage is that once a visitor-interface has been setup for a set of classes, this can be reused again in all other places that need to handle all/some/one different extensions of a class."
  },
  {
    "postid":6222,
    "postdate":1262622960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.932942564,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.635776178,
    "polarity":0,
    "normalized_text_entropy":3.932942564,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045469733,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" is not proper solution as it gives true for subclass of a class. Use this instead:"
  },
  {
    "postid":6223,
    "postdate":1262621820,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.143092371,
    "concept_entropy":3.902174814,
    "UMASS(coherence)":0.393545797,
    "TFIDF(informativeness)":1.096304214,
    "polarity":2,
    "normalized_text_entropy":4.143092371,
    "normalized_concept_entropy":3.902174814,
    "normalized_UMASS":0.357768906,
    "normalized_TFIDF":0.078405989,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I was studying Polymorphismfrom \"Head First Java\" and came to this concept. Can anyoneexplain it please with an example? So what's the difference between Reference Type and Object Type?"
  },
  {
    "postid":6224,
    "postdate":1302808320,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.230491818,
    "concept_entropy":0,
    "UMASS(coherence)":0.434719197,
    "TFIDF(informativeness)":0.585124243,
    "polarity":2,
    "normalized_text_entropy":4.230491818,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.39519927,
    "normalized_TFIDF":0.041847185,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I don't think their use of \"object type\" and \"reference type\" is standardized, but here's my interpretation. Consider this code: The is of type. The that it references is of type. So the \"reference type\" would be and the \"object type\" would be. What makes this confusing is that there's the (standardized, official) term \" \" that encapsulates types that can be referenced. In Java that includes all classes, enums, interfaces, arrays. It excludes only the primitive types ( , ...)."
  },
  {
    "postid":6225,
    "postdate":1302808560,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.281774756,
    "concept_entropy":0,
    "UMASS(coherence)":0.808652577,
    "TFIDF(informativeness)":2.408900549,
    "polarity":0,
    "normalized_text_entropy":4.281774756,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.735138706,
    "normalized_TFIDF":0.172280857,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What is meant by the terms is the following: Maybe some will find it easier to understand with these terms."
  },
  {
    "postid":6226,
    "postdate":1302808560,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.881338177,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.173825568,
    "polarity":0,
    "normalized_text_entropy":3.881338177,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.083950197,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I don't really understand the use of 'this' in Java. If someone could help me clarify I would really appreciate it. On this website it says:\"Within an instance method or a constructor, this is a reference to the current object ��ΗΔ the object whose method or constructor is being called. You can refer to any member of the current object from within an instance method or a constructor by using this.\" and it gives the following example: For example, the Point class was written like this but it could have been written like this: Yet, I still don't fully understand why x = a could have been written as this.x = x? Why isn't it this.x = a? Why is the x on the left side? I'm sorry but I am very new to Java. I apologize for boring the experts."
  },
  {
    "postid":6227,
    "postdate":1302808560,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.011718773,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.204105571,
    "polarity":0,
    "normalized_text_entropy":4.011718773,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.086115776,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If some variable/argument with same name as object's property is defined, it \"overlaps\" the name of that property and one should use this.var_name. So yes, it could be written as, but is somewhat redundant."
  },
  {
    "postid":6228,
    "postdate":1302811380,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.326195081,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.337325059,
    "polarity":0,
    "normalized_text_entropy":4.326195081,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.167161888,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In the second example one of the arguments is named x. By referencing this.x, you mean the x field/property of the class the method is part of. It could read as:Point.x = argument x this is being used to differentiate the two, making the meaning of the code clear."
  },
  {
    "postid":6229,
    "postdate":1303910700,
    "tag":"1",
    "TFMvalue":0.916666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.970573096,
    "concept_entropy":4.010740114,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.609437912,
    "polarity":0,
    "normalized_text_entropy":3.970573096,
    "normalized_concept_entropy":4.010740114,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.115104521,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It isn't this.x = a because there isn't an 'a' in the second example. The point is that you can reuse the same variable name, which is less confusing :-|"
  },
  {
    "postid":6230,
    "postdate":1303910820,
    "tag":"1",
    "TFMvalue":0.814814815,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.19818726,
    "concept_entropy":4.501475959,
    "UMASS(coherence)":0.386335817,
    "TFIDF(informativeness)":0.846954005,
    "polarity":0,
    "normalized_text_entropy":4.19818726,
    "normalized_concept_entropy":4.501475959,
    "normalized_UMASS":0.351214379,
    "normalized_TFIDF":0.060572846,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The idea is to make it clear that you are providing values for andin your constructor. Problem is now that due to the scoping rules that within the constructor refers to the passed value and not the field.Hence results in the parameter being assigned its own value and the shadowed field untouched.This is usually not what is wanted. Hence, a mechanism is needed to say \"I need x than the one immediately visible here\".Here refers to the current object - so refers to a field in the current object, and refers to the object this object extends so you can get to a field \"up higher\"."
  },
  {
    "postid":6231,
    "postdate":1303910940,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.238991937,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.52274362,
    "TFIDF(informativeness)":1.241817172,
    "polarity":-1,
    "normalized_text_entropy":4.238991937,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.475221473,
    "normalized_TFIDF":0.088812852,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":" is a reference to the current object, so you access it like any other object - is the property of. So is the argument passed in, which you assign to. This is namespacing - the idea that a name for a variable only applies within a given block of code. In java, where you are working within a function belonging to the class, you are inside the namespace for that class, however, if you have another variable with the same name as an argument, it will take precedence, and you instead access the attribute via.can also be used in other ways. For example, say I want to draw the current object to the screen in a fictional library, from within the class, I could do: You can also call functions allows us to reference the object we are currently 'inside', so we can pass the current object as an argument. This is very useful. (No pun intended)."
  },
  {
    "postid":6232,
    "postdate":1303910940,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.036008582,
    "concept_entropy":4.504626336,
    "UMASS(coherence)":0.34331784,
    "TFIDF(informativeness)":0.911948991,
    "polarity":1,
    "normalized_text_entropy":4.036008582,
    "normalized_concept_entropy":4.504626336,
    "normalized_UMASS":0.312107127,
    "normalized_TFIDF":0.065221187,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"\"this\" is a reference to the current object you are using. You use it when you have a name clash between a field and a parameter. Parameter takes precedence over fields. No clash, no need for this: But this will work, too: Name clash, need to use \"this\": If you did onlythen you would just assign parameters with its own value, which effectively does nothing. There are more usages of keyword \"this\"."
  },
  {
    "postid":6233,
    "postdate":1302805320,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.525374048,
    "concept_entropy":0,
    "UMASS(coherence)":0.409278066,
    "TFIDF(informativeness)":0.658240488,
    "polarity":0,
    "normalized_text_entropy":4.525374048,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.372070969,
    "normalized_TFIDF":0.047076346,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"\"This\" is a hidden \"argument\" that gets passed for you so that the methods that operate on the object know which object exactly they are to operate on. Now imagine you pass the argument of name \"x\" but the class does have that var name defined already. What happens ? Well, the name x that \"belongs\" to the object and the argument x are not the same data-object yet they share the name. In order to disambiguate, you need to say explicitly \"this.x\", which tells the compiler that you're talking about the x that already belongs to \"this\" object. (That is, the current object you're trying to operate on.)"
  },
  {
    "postid":6234,
    "postdate":1302805740,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.231729754,
    "concept_entropy":4.496319864,
    "UMASS(coherence)":0.367488614,
    "TFIDF(informativeness)":0.616837399,
    "polarity":2,
    "normalized_text_entropy":4.231729754,
    "normalized_concept_entropy":4.496319864,
    "normalized_UMASS":0.334080558,
    "normalized_TFIDF":0.044115261,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"In the second example, the arguments to the constructor are not and; they were changed to and, and means \"assign this Point class instance's member variable the value passed to the constructor as\"."
  },
  {
    "postid":6235,
    "postdate":1331657040,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.24127034,
    "concept_entropy":3.235926351,
    "UMASS(coherence)":0.501565229,
    "TFIDF(informativeness)":1.137308674,
    "polarity":0,
    "normalized_text_entropy":4.24127034,
    "normalized_concept_entropy":3.235926351,
    "normalized_UMASS":0.45596839,
    "normalized_TFIDF":0.081338565,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This really has to do with how the java compiler identifies variables by their name. Function (formaal) parameters names precede class member variables. In the first example the formal parameter names are a and b and they do not collide with the member variables x and y so writing is logical as x can only mean the member variable class Point. In the second example x refers both to the formal parameter name and to the member variable. Writing x within the function body refers to the parameter so if you need some other way in order to refer to the member variable x. This is done by explicitly accessing a member via the 'this' keyword."
  },
  {
    "postid":6236,
    "postdate":1256507640,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.480266205,
    "concept_entropy":4.608919926,
    "UMASS(coherence)":0.48381764,
    "TFIDF(informativeness)":1.867206591,
    "polarity":0,
    "normalized_text_entropy":4.480266205,
    "normalized_concept_entropy":4.608919926,
    "normalized_UMASS":0.439834218,
    "normalized_TFIDF":0.13353974,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have three classes ( ,, and) that extend another class ( ). How can I tell which subclass an object is a part of? So far I have a property that has the classes' name, but I think it could be possible to use an operator similar to javascript's typeof. (Similar to:)"
  },
  {
    "postid":6237,
    "postdate":1256507820,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.081660549,
    "concept_entropy":0,
    "UMASS(coherence)":0.558228859,
    "TFIDF(informativeness)":0.764080307,
    "polarity":0,
    "normalized_text_entropy":4.081660549,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.507480781,
    "normalized_TFIDF":0.054645847,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can use the keyword. Note, however, that needing to use this is often a sign of a bad design.You should typically write method overrides in each of your derived classes so that you don't explicitly need to check which class something is."
  },
  {
    "postid":6238,
    "postdate":1256507880,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.371407752,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.294598662,
    "polarity":0,
    "normalized_text_entropy":4.371407752,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.092587702,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can say to find out if it is a Carnivore or a descendant thereof, and you can use to find out if it is exactly a Carnivore and a descendant thereof.However, the fact that you need to perform a check of this kind usually means that you have a flaw in your design, a missing overridable method, or something like that."
  },
  {
    "postid":6239,
    "postdate":1352559300,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.404385346,
    "concept_entropy":0,
    "UMASS(coherence)":0.63826861,
    "TFIDF(informativeness)":2.191785798,
    "polarity":1,
    "normalized_text_entropy":4.404385346,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.580244191,
    "normalized_TFIDF":0.156753145,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Java has an operator.However, that type of thing can be contrary to object-oriented design."
  },
  {
    "postid":6240,
    "postdate":1352559780,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.9490707,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.523169622,
    "polarity":1,
    "normalized_text_entropy":3.9490707,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.108934746,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can use the operator"
  },
  {
    "postid":6241,
    "postdate":1352559540,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.715975233,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":4.300867911,
    "polarity":5,
    "normalized_text_entropy":3.715975233,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.307591449,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":". Here objInstance is the object you want to test."
  },
  {
    "postid":6242,
    "postdate":1352559600,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.11959615,
    "concept_entropy":4.533159516,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.791233438,
    "polarity":0,
    "normalized_text_entropy":4.11959615,
    "normalized_concept_entropy":4.533159516,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.128106257,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Take a look at operator Note that although many people thinks that using it may be considered dangerous, they even compare to, but it's not bad. You can use it, but not really often."
  },
  {
    "postid":6243,
    "postdate":1352559540,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.305088214,
    "concept_entropy":4.035728751,
    "UMASS(coherence)":0.467396617,
    "TFIDF(informativeness)":2.750037541,
    "polarity":-2,
    "normalized_text_entropy":4.305088214,
    "normalized_concept_entropy":4.035728751,
    "normalized_UMASS":0.424906015,
    "normalized_TFIDF":0.19667845,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"How do you create an inner class object with reflection? Both Inner and Outer classes have default constructors that take no parameters"
  },
  {
    "postid":6244,
    "postdate":1364413500,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.320733676,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.008531147,
    "polarity":1,
    "normalized_text_entropy":4.320733676,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.072128594,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"That means you can never construct an inner class using; instead, you must use the constructor that takes a single instance. Here's some example code that demonstrates its use: (Note that in standard Java terminology, an is always non-static. A static member class is called a.)"
  },
  {
    "postid":6245,
    "postdate":1364413800,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.09112986,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.770778762,
    "polarity":0,
    "normalized_text_entropy":4.09112986,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.05512491,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Please explain the difference between object one and two: Class opel extends class car."
  },
  {
    "postid":6246,
    "postdate":1364413860,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.296120269,
    "concept_entropy":4.213634139,
    "UMASS(coherence)":0.547388906,
    "TFIDF(informativeness)":1.599186738,
    "polarity":2,
    "normalized_text_entropy":4.296120269,
    "normalized_concept_entropy":4.213634139,
    "normalized_UMASS":0.497626278,
    "normalized_TFIDF":0.114371373,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You could reassign to an object of some other subclass of: But you can't reassign like that, since it's restricted to being an. If is a method that's defined in the class but not the class, then the compiler will give you an error if you do this: But this is OK: since it knows is restricted to being an, so it knows that method will exist. Generally, you want to declare your variables to be the type possible.That is, if you're only going to use methods in, then declare it with type (like you did with), because you're telling the reader that the algorithm only needs to know that is a, it doesn't need to know what kind of car it is.It's necessary to understand that a variable has both a and a.The compiler sees as a, because it doesn't know what kind of the variable will be at any given time.But the of both will be.If you have a method that is defined for, and then overridden for, and will both call the method.Once the compiler looks at the compile-time type and decides the call is legal, then which one gets called when the program is run depends on the runtime type. "
  },
  {
    "postid":6247,
    "postdate":1397595960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.346097232,
    "concept_entropy":4.468317841,
    "UMASS(coherence)":0.568470153,
    "TFIDF(informativeness)":1.270217082,
    "polarity":2,
    "normalized_text_entropy":4.346097232,
    "normalized_concept_entropy":4.468317841,
    "normalized_UMASS":0.516791048,
    "normalized_TFIDF":0.090843969,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"so the constuctor is saying ) expected, error not a statement and ; expected object class"
  },
  {
    "postid":6248,
    "postdate":1364413680,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.289638046,
    "concept_entropy":4.551994316,
    "UMASS(coherence)":0.721833758,
    "TFIDF(informativeness)":0.764852061,
    "polarity":-2,
    "normalized_text_entropy":4.289638046,
    "normalized_concept_entropy":4.551994316,
    "normalized_UMASS":0.656212507,
    "normalized_TFIDF":0.054701041,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"should be String, String, int and long are expected in this order by your constructor, which is defined by. Allison without (double)quotes is not a String."
  },
  {
    "postid":6249,
    "postdate":1364414460,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.206546119,
    "concept_entropy":4.511638584,
    "UMASS(coherence)":0.452134691,
    "TFIDF(informativeness)":1.519778245,
    "polarity":1,
    "normalized_text_entropy":4.206546119,
    "normalized_concept_entropy":4.511638584,
    "normalized_UMASS":0.411031537,
    "normalized_TFIDF":0.108692199,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"First you can check your class object is created. Print some message inif you can not see any print statement then problem with object. Check what you pass and passed value is. If not print then problem. You are,You have to pass string value wihin "
  },
  {
    "postid":6250,
    "postdate":1364414640,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.227791933,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.619984114,
    "TFIDF(informativeness)":1.143544003,
    "polarity":0,
    "normalized_text_entropy":4.227791933,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.563621922,
    "normalized_TFIDF":0.081784506,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You are not passing a string for Name and Address to your constructor, try changing to"
  },
  {
    "postid":6251,
    "postdate":1400110800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.157849017,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.547979972,
    "TFIDF(informativeness)":1.400916019,
    "polarity":0,
    "normalized_text_entropy":4.157849017,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.498163611,
    "normalized_TFIDF":0.100191356,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Because strings are always used within the double quotes . put your arguments which are stringsin thedouble quotes."
  },
  {
    "postid":6252,
    "postdate":1275504180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.174362682,
    "concept_entropy":0,
    "UMASS(coherence)":0.761232595,
    "TFIDF(informativeness)":1.602148466,
    "polarity":-1,
    "normalized_text_entropy":4.174362682,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.692029632,
    "normalized_TFIDF":0.114583191,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"you are calling construtor that in not exist for your first argument you have defined string so pass in double quote while calling construtor "
  },
  {
    "postid":6253,
    "postdate":1275504540,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.124283587,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.389732582,
    "TFIDF(informativeness)":2.146617086,
    "polarity":-1,
    "normalized_text_entropy":4.124283587,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.354302347,
    "normalized_TFIDF":0.153522748,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6254,
    "postdate":1275504660,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.271589825,
    "concept_entropy":4.358269039,
    "UMASS(coherence)":0.739688586,
    "TFIDF(informativeness)":1.417136594,
    "polarity":1,
    "normalized_text_entropy":4.271589825,
    "normalized_concept_entropy":4.358269039,
    "normalized_UMASS":0.672444169,
    "normalized_TFIDF":0.101351427,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Simple explanation : When you useOnly public methods that are defined in are accessible. Methods defined in are not. When you usepublic methods defined in are also accessible along with the pubic methods. Object created in both cases is the same. Ex:"
  },
  {
    "postid":6255,
    "postdate":1275504660,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.504394227,
    "concept_entropy":4.226571829,
    "UMASS(coherence)":0.493629388,
    "TFIDF(informativeness)":1.055238387,
    "polarity":0,
    "normalized_text_entropy":4.504394227,
    "normalized_concept_entropy":4.226571829,
    "normalized_UMASS":0.448753989,
    "normalized_TFIDF":0.075469024,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The two objects are exactly the same. What's different is the type of the variable where the object reference is stored. In practice, this means that if there are any methods specific to, you'll be able to access them through but not through (the latter would require a cast)."
  },
  {
    "postid":6256,
    "postdate":1299472620,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.364578993,
    "concept_entropy":4.423651957,
    "UMASS(coherence)":0.76665251,
    "TFIDF(informativeness)":1.355351855,
    "polarity":1,
    "normalized_text_entropy":4.364578993,
    "normalized_concept_entropy":4.423651957,
    "normalized_UMASS":0.696956827,
    "normalized_TFIDF":0.096932677,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The objects are the same.However, because is declared as type you cannot use methods on it without casting."
  },
  {
    "postid":6257,
    "postdate":1299472740,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.103587146,
    "concept_entropy":3.954248671,
    "UMASS(coherence)":0.506626963,
    "TFIDF(informativeness)":1.954450193,
    "polarity":0,
    "normalized_text_entropy":4.103587146,
    "normalized_concept_entropy":3.954248671,
    "normalized_UMASS":0.460569966,
    "normalized_TFIDF":0.139779268,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In both the cases, objects of will be created, but the references will be different. With the reference of i.e , you won't be able to invoke the methods present in the but not in the. You will require casting to invoke the methods. Like : Now :"
  },
  {
    "postid":6258,
    "postdate":1299472800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.181586638,
    "concept_entropy":4.487670355,
    "UMASS(coherence)":0.472549973,
    "TFIDF(informativeness)":1.428652301,
    "polarity":1,
    "normalized_text_entropy":4.181586638,
    "normalized_concept_entropy":4.487670355,
    "normalized_UMASS":0.429590885,
    "normalized_TFIDF":0.102175012,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"just think like this.when you using the parent (super class) reference you will get access to only the things(variable , methods) that parent has. but if you use the reference of child you will get everything that the parent and child have (child inherit properties from parent)."
  },
  {
    "postid":6259,
    "postdate":1299473040,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.2681653,
    "concept_entropy":4.307096382,
    "UMASS(coherence)":0.433064976,
    "TFIDF(informativeness)":1.697513347,
    "polarity":-1,
    "normalized_text_entropy":4.2681653,
    "normalized_concept_entropy":4.307096382,
    "normalized_UMASS":0.393695433,
    "normalized_TFIDF":0.12140354,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"In addition to the above answers, because the constructed object is really an object of typeyou can cast it to and call the methods:"
  },
  {
    "postid":6260,
    "postdate":1240548060,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.314457579,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.521155149,
    "TFIDF(informativeness)":0.83750941,
    "polarity":0,
    "normalized_text_entropy":4.314457579,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.473777408,
    "normalized_TFIDF":0.059897383,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I wrote a small class that creates a report object containing 3 arrays. At creation of the object these arrays are initialised with values. However when i test the class to see for example what's in the departments array, it prints out that the array elements are null. why? Test Class: thanks Baba"
  },
  {
    "postid":6261,
    "postdate":1240553040,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.153432019,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.920119573,
    "polarity":0,
    "normalized_text_entropy":4.153432019,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.065805535,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Make it like this Actually you are creating new arrays objects local to your constructor those are getting initialized in constructor.your class fields will be initialized using the code above .** :**Above code will give you illegal start of expression Here is working code"
  },
  {
    "postid":6262,
    "postdate":1240548420,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.078967905,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.495385303,
    "TFIDF(informativeness)":0.857472223,
    "polarity":0,
    "normalized_text_entropy":4.078967905,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.450350275,
    "normalized_TFIDF":0.061325093,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As the other answers have noted, your constructor created new local variables \"shadowing\" the instance variables instead of populating the instance variables with data. However, the population code is a little different if you separate the declaration from the populating, and they didn't get that quite right.You also had a '+' character that didn't belong. This code compiles and works (tested), and does basically what your looking for. You can alternatively create the arrays in the declaration and then populate the array entries in the constructor or elsewhere. With that approach the code could be something like: As a third alternative, you can do all the initialization in the field declaration as follows: In this case, you don't need to define the constructor at all, as it does nothing.An empty one will be supplied by Java."
  },
  {
    "postid":6263,
    "postdate":1240550760,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.447650528,
    "concept_entropy":4.571277021,
    "UMASS(coherence)":0.604409517,
    "TFIDF(informativeness)":1.503359605,
    "polarity":0,
    "normalized_text_entropy":4.447650528,
    "normalized_concept_entropy":4.571277021,
    "normalized_UMASS":0.549463197,
    "normalized_TFIDF":0.107517964,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"So in a class I have, I have overriden 2 methods as follows: But when I try: I am still getting false. Why? What is == looking at?What exactly is == comparing and can I make it return true in any way for foo and bar in this example? "
  },
  {
    "postid":6264,
    "postdate":1240553400,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":20,
    "Normalized_count":0.333333333,
    "text_entropy":4.22409248,
    "concept_entropy":4.396906333,
    "UMASS(coherence)":0.735169132,
    "TFIDF(informativeness)":1.324132866,
    "polarity":0,
    "normalized_text_entropy":4.22409248,
    "normalized_concept_entropy":4.396906333,
    "normalized_UMASS":0.668335575,
    "normalized_TFIDF":0.094699943,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"foo == bar is false that is correct you are trying to compare reference and not object. I fyou want to compare Object you have to use equals method on object instance"
  },
  {
    "postid":6265,
    "postdate":1240583100,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.283532786,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.637850476,
    "polarity":1,
    "normalized_text_entropy":4.283532786,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045618084,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" compares the reference of the objects. So, it actually just returns if it is the same exact object."
  },
  {
    "postid":6266,
    "postdate":1316719140,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.170915501,
    "concept_entropy":4.485455862,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.056821334,
    "polarity":0,
    "normalized_text_entropy":4.170915501,
    "normalized_concept_entropy":4.485455862,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.075582234,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This is because you override function. You should write.It would've worked if you were using C++ and overloaded the operator instead of the method."
  },
  {
    "postid":6267,
    "postdate":1307718000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.124256798,
    "concept_entropy":4.540223464,
    "UMASS(coherence)":0.476133312,
    "TFIDF(informativeness)":4.772821771,
    "polarity":-1,
    "normalized_text_entropy":4.124256798,
    "normalized_concept_entropy":4.540223464,
    "normalized_UMASS":0.432848465,
    "normalized_TFIDF":0.341344862,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Because == compares references, so == only gives you true if you compare the exact same object with itself. So"
  },
  {
    "postid":6268,
    "postdate":1307718240,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.094346992,
    "concept_entropy":4.377558948,
    "UMASS(coherence)":0.497248984,
    "TFIDF(informativeness)":2.682474764,
    "polarity":-1,
    "normalized_text_entropy":4.094346992,
    "normalized_concept_entropy":4.377558948,
    "normalized_UMASS":0.452044531,
    "normalized_TFIDF":0.191846464,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Simple, make it into a. This is true:is identity comparison, or to put it in other words: comparison of memory address. For logical comparison of value types, provide your own implementation. This also require that the client code using your objects invoke this method for comparison. You need not provide the implementation and client code need not use for non-value types such as or. and would be two examples of a value type. These kinds need to define what it is to be logically equivalent with a provided object. Not providing the implementation will default to use identity comparison which in turn can cause subtle bugs and issues with data structures provided in the JDK library."
  },
  {
    "postid":6269,
    "postdate":1307718960,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":16,
    "Normalized_count":0.266666667,
    "text_entropy":4.249122398,
    "concept_entropy":4.366458016,
    "UMASS(coherence)":0.560894095,
    "TFIDF(informativeness)":1.232733104,
    "polarity":0,
    "normalized_text_entropy":4.249122398,
    "normalized_concept_entropy":4.366458016,
    "normalized_UMASS":0.509903723,
    "normalized_TFIDF":0.088163173,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I want my JSON to look like this: Code so far: and I just missing the part how I can convert the Java object to JSON with Jackson: My Question is: Are my classes correct? Which instance do I have to call and how that I can achieve this JSON output?"
  },
  {
    "postid":6270,
    "postdate":1307718180,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.128820677,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.24285452,
    "polarity":1,
    "normalized_text_entropy":4.128820677,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.231923961,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"To convert your in JSON with Jackson:"
  },
  {
    "postid":6271,
    "postdate":1307718300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.224613737,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.054230484,
    "polarity":1,
    "normalized_text_entropy":4.224613737,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.1469154,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"This might be useful........."
  },
  {
    "postid":6272,
    "postdate":1307719080,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.218975882,
    "concept_entropy":0,
    "UMASS(coherence)":0.599359426,
    "TFIDF(informativeness)":1.112320472,
    "polarity":1,
    "normalized_text_entropy":4.218975882,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.544872205,
    "normalized_TFIDF":0.079551447,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Can anyone tell me what are Cohesion and Decoupling? I found coupling but there is no Decoupling anywhere. I need to learn their meanings. Any help will be appreciated. Thanks for replying."
  },
  {
    "postid":6273,
    "postdate":1307718480,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.339807483,
    "concept_entropy":0,
    "UMASS(coherence)":0.595650288,
    "TFIDF(informativeness)":1.48100398,
    "polarity":1,
    "normalized_text_entropy":4.339807483,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.541500262,
    "normalized_TFIDF":0.105919124,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"That article from Aaron is very good for understanding, also I'd recommend that you read maning book, they give very good examples on how the spring solves that problem it will definitely improve your understanding of this. I came accross this in this great book called Growing object oriented software guided by tests :"
  },
  {
    "postid":6274,
    "postdate":1355619300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.235326537,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.990676323,
    "polarity":5,
    "normalized_text_entropy":4.235326537,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.213888565,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Cohesion - related to the principle that a class/method should be responsible for one thing only i.e there are no stray methods that don't belong in the encapsulation; a method only does one thing.High/Low cohesion is the degree to which this holds. Coupling - how interdependent different parts of the system are. e.g how and where there are dependencies.If two classes make calls to methods of each other then they are tightly coupled, as changing one would mean having to change the other. Decoupling is the process of making something that was tightly coupled less so, or not at all. Flexible systems have High Cohesion and Loose Coupling. "
  },
  {
    "postid":6275,
    "postdate":1307718420,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.555270827,
    "concept_entropy":0,
    "UMASS(coherence)":0.729867235,
    "TFIDF(informativeness)":6.6978973,
    "polarity":-20,
    "normalized_text_entropy":4.555270827,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.663515668,
    "normalized_TFIDF":0.479023299,
    "normalized_polarity":-0.111111111,
    "tagtext":"inheritance",
    "posttext":"For coupling, should answer all your questions. deals with cohesion. \"Decoupling\" is just another name for \"little/low coupling\". So these terms answer these questions: "
  },
  {
    "postid":6276,
    "postdate":1307718480,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.35101026,
    "concept_entropy":0,
    "UMASS(coherence)":0.461584222,
    "TFIDF(informativeness)":1.080077848,
    "polarity":0,
    "normalized_text_entropy":4.35101026,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.41962202,
    "normalized_TFIDF":0.077245504,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Here my thoughts on cohesion. Imagine there is module. Inside the module we have task. When those task are highly related to each other we say it has high cohesion. When those tasks are not related we say it has low cohesion. My best attempt to explain decoupling is that decoupling is the act of removing coupling.Low Coupling helps us get to high cohesion! Remember that we want our module to have related task and one single responsibility. But what is coupling? Coupling is the degree of dependencyon other modules to achieve our single responsibility for that module. So by low coupling we are saying that we are not very dependant on external modules hence we have high cohesion.However, if we have many dependencies to external module we would have high coupling and low cohesion. Get it? Cohesion is the degree to which the tasks performed by a single module are functionally related.\" IEEE, 1983 \"Cohesion is the \"glue\" that holds a module together. It can be thought of as the type of association among the component elements of a module. Generally, one wants the highest level of cohesion possible.\"Bergland, 1981  A software component is said to exhibit a high degree of cohesion if the elements in that unit exhibit a high degree of functional relatedness. This means that each element in the program unit should be essential for that unit to achieve its purpose.\"  Sommerville, 1989 "
  },
  {
    "postid":6277,
    "postdate":1319354940,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.123729347,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.82251155,
    "polarity":0,
    "normalized_text_entropy":4.123729347,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.058824759,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"decoupling allows the separation of object interaction from classes and inheritance into distinct layers of abstraction used to polymorphic-ally decouple the encapsulation which is the practice of using re-usable code to prevent discrete code modules from interacting with each other. "
  },
  {
    "postid":6278,
    "postdate":1373377800,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.479875014,
    "concept_entropy":4.288001442,
    "UMASS(coherence)":0.567131836,
    "TFIDF(informativeness)":1.03696613,
    "polarity":1,
    "normalized_text_entropy":4.479875014,
    "normalized_concept_entropy":4.288001442,
    "normalized_UMASS":0.515574396,
    "normalized_TFIDF":0.074162221,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"According to the HashSet javadoc, HashSet.contains only returns a boolean. How can I \"find\" an object in a hashSet and modify it (it's not a primitive data type)? I see that HashTable has a get() method, but I would prefer to use the set."
  },
  {
    "postid":6279,
    "postdate":1337694180,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.412870565,
    "concept_entropy":4.104583843,
    "UMASS(coherence)":0.416885424,
    "TFIDF(informativeness)":1.545174836,
    "polarity":0,
    "normalized_text_entropy":4.412870565,
    "normalized_concept_entropy":4.104583843,
    "normalized_UMASS":0.378986749,
    "normalized_TFIDF":0.110508524,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can remove an element and add a different one. Modifying an object while it is in a hash set is a recipe for disaster (if the modification changes the hash value or equality behavior)."
  },
  {
    "postid":6280,
    "postdate":1337711880,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.079184581,
    "concept_entropy":0,
    "UMASS(coherence)":0.340136269,
    "TFIDF(informativeness)":0.871132411,
    "polarity":2,
    "normalized_text_entropy":4.079184581,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.30921479,
    "normalized_TFIDF":0.062302048,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"In Java, I've done things like the following without thinking much about it: However, recently I've become unsure as to whether doing that is safe. After all, there is no reference to the object after it's created (well, there is the reference, but does that count?), so it looks like there's a danger that the garbage collector might delete the object while it's in the middle of executing something. So perhaps the method should look like this: Now, I'm pretty sure that the first version works and I've never had any problems with it, but I'd like to know if it's safe to do in all cases (not only in a specific JVM, but preferably according to what the language specification says about such cases)."
  },
  {
    "postid":6281,
    "postdate":1337695440,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.305398443,
    "concept_entropy":0,
    "UMASS(coherence)":0.356801975,
    "TFIDF(informativeness)":1.370458304,
    "polarity":-1,
    "normalized_text_entropy":4.305398443,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.324365432,
    "normalized_TFIDF":0.098013067,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If an object method is being executed, it means someone is in possession of that reference.So no, an object can't be GC'd while a method is being executed."
  },
  {
    "postid":6282,
    "postdate":1237475880,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.217542894,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.559335238,
    "TFIDF(informativeness)":1.547444341,
    "polarity":1,
    "normalized_text_entropy":4.217542894,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.50848658,
    "normalized_TFIDF":0.110670836,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"For the most part garbage collection is transparent. It's there to remove the unnecessary complication of manual memory management. So, it will appear not to be collected, but what actually happens is more subtle. Trivially, a compiler may completely elide the construction of the object. (By compiler, I mean a lower level compiler than javac. The bytecodes will be a literal transliteration of the source.) More obscurely, garbage collection typically runs in separate threads and actually remove the unaccessed object as a method on it is being run. How can this be observed? The usual suspect in a finaliser. It may run concurrently with a method running on the object. Typically you would get around this problem with blocks in both the finaliser and the normal methods, which introduces the necessary relationship."
  },
  {
    "postid":6283,
    "postdate":1237476180,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.225713865,
    "concept_entropy":4.425304012,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.205683971,
    "polarity":1,
    "normalized_text_entropy":4.225713865,
    "normalized_concept_entropy":4.425304012,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.086228661,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"m is just a variable which has reference stored. This will be used by programmer to use the same object further to write logic on same object.While execution, program will be converted to OP-CODES / INSTRUCTIONS .These INSTRUCTION will have the reference to object(it is a memory location after all). In case m is present, location of object will be accessed via INDIRECT REFERENCE.If m is absent, the reference is DIRECT.So here, object is being used by CPU registers, irrespective of use of reference variable.This will be available till the flow of execution is in scope of main() function.Further, as per GC process, GC only removes objects from memory, once GC is sure that the object will not be used any further.Every object is given chance to survive a number of times(depends on situation and algorithm). Once the number of chances are over, then only object is garbage collected.In simpler words, objects which were used recently, will be given chance to stay in memory. Old objects will be removed from memory. So given your code:the object will not be garbage collected.Also, for examples, try to look at anonymous class examples. Or examples from event handling in AWT / SWING.There, you will find a lot of usage like this. "
  },
  {
    "postid":6284,
    "postdate":1348772040,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":17,
    "Normalized_count":0.283333333,
    "text_entropy":4.318995091,
    "concept_entropy":0,
    "UMASS(coherence)":0.457375907,
    "TFIDF(informativeness)":1.339087522,
    "polarity":3,
    "normalized_text_entropy":4.318995091,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.415796279,
    "normalized_TFIDF":0.095769477,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"What is the difference between creating a new object and dependency injection? Please explain in detail."
  },
  {
    "postid":6285,
    "postdate":1348779300,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.49240288,
    "concept_entropy":4.60931061,
    "UMASS(coherence)":0.413833193,
    "TFIDF(informativeness)":1.645968519,
    "polarity":-1,
    "normalized_text_entropy":4.49240288,
    "normalized_concept_entropy":4.60931061,
    "normalized_UMASS":0.376211994,
    "normalized_TFIDF":0.117717133,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Well,creating a new object is as explicit as it can get - you create a new instance of the desired class. Dependency injections is a mechanism that provides you with references where you need them.Imagine a class that represents a connection pool to your database - you usually only have one instance of that class. Now you need to distribute that reference to all the classes that use it.Here is where Dependency Injection comes in handy - by using a DI framework such as Spring you can define that the one instance of your pool will be injected into the classes that need it. Your question itself is not easy to answer since the creation of an object and dependency injection can't be compared that easily..."
  },
  {
    "postid":6286,
    "postdate":1348782420,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.2706117,
    "concept_entropy":0,
    "UMASS(coherence)":0.436147324,
    "TFIDF(informativeness)":0.766196951,
    "polarity":-1,
    "normalized_text_entropy":4.2706117,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.396497567,
    "normalized_TFIDF":0.054797226,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Of course both create objects. The difference is in who is responsible for the creation. Is it the class which needs its dependencies or a container like Spring for example, which wires the components dependencies. You configure the dependencies in a separate(typically XML) configuration file. It is really a separation of concerns. The class says I need this, this and this component so I functionate properly. The class doesn't care how it gets its components. You plug in them into the class with a separate configuration file. To give you an example lets consider having a shopping class which needs a payment module. You don't want to hardcode which payment module will be used. To achieve this you inverse the control. You can change the used payment module with a few keystrokes in the configuration file of the container. The power is that you aren't touching any Java code."
  },
  {
    "postid":6287,
    "postdate":1348818060,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.210614888,
    "concept_entropy":0,
    "UMASS(coherence)":0.619984114,
    "TFIDF(informativeness)":0.914706804,
    "polarity":-3,
    "normalized_text_entropy":4.210614888,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.563621922,
    "normalized_TFIDF":0.065418422,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"Well, they're not exactly comparable. You will always have to create a new object by instantiating a class at some point. And dependency injection also have to create new objects. Dependency injection really comes into play when you want to control or verify the behaviour of instances used by a class that you use, or want to test. (For Test Driven Development dependency injection is key for any except the smallest example) Assume a class Holder which requires an object of class Handle. The traditional way to do that would be to let the Holder instance create and own it: The Holder instance creates myHandle and noone outside the class can get at it. In some cases, unittesting being on of them, this is a problem because it is not possible to test the Holder class without creating the Handle instance which in turn might depend on many other classes and instances. This makes testing unwieldy and cumbersome. By injecting the Handle instance, for example in the constructor, someone from the outside becomes responsible for the creation of the instance. As you can see the code is almost the same, and the Handle is still private, but the Holder class now has a much loser coupling to its outside world which makes many things simpler. And when testing the Holder class a mock or stub object can be injected instead of a real instance making it possible to verify or control the interaction between the Holder, its caller and the handle."
  },
  {
    "postid":6288,
    "postdate":1276682640,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.289129901,
    "concept_entropy":4.566724487,
    "UMASS(coherence)":0.474961771,
    "TFIDF(informativeness)":0.548741518,
    "polarity":2,
    "normalized_text_entropy":4.289129901,
    "normalized_concept_entropy":4.566724487,
    "normalized_UMASS":0.431783428,
    "normalized_TFIDF":0.039245148,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"When using an inversion-of-control container to perform dependency injection, the container creates the objects, and not the developer. This is done so that the container can \"inject\" these objects into other objects. I'd suggest you read some articles about dependency-injection and/or spring. Or read other topics on dependency injection here on SO."
  },
  {
    "postid":6289,
    "postdate":1276683420,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.341113736,
    "concept_entropy":4.537093535,
    "UMASS(coherence)":0.715710564,
    "TFIDF(informativeness)":0.596876739,
    "polarity":2,
    "normalized_text_entropy":4.341113736,
    "normalized_concept_entropy":4.537093535,
    "normalized_UMASS":0.650645967,
    "normalized_TFIDF":0.042687705,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Dependency injections adds a layer of configurability into your application. In the sense, when you hard code object construction, you need to re-build and re-deploy your app, but when you use dependency injection, you can re configure the XML and change the behavior without re-building and re-deploying. There are a large variety of use cases where this can save a lot of tie and effort. "
  },
  {
    "postid":6290,
    "postdate":1276683000,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.299220513,
    "concept_entropy":4.478852837,
    "UMASS(coherence)":0.411284131,
    "TFIDF(informativeness)":2.149073847,
    "polarity":5,
    "normalized_text_entropy":4.299220513,
    "normalized_concept_entropy":4.478852837,
    "normalized_UMASS":0.373894665,
    "normalized_TFIDF":0.153698452,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Let's say I needed to make a series of String[] objects. I know that if i wanted to make a string array called \"test\" to hold 3 Strings I could do String[] test = new String[3]; But let's say I needed to make a series of these arrays and I wanted them to be named, 1,2, 3, 4, 5... etc.For however many I needed and I didn't know how many I'd need. How do I achieve a similar effect to this: Which would created 5 string arrays named 1 through 5. Basically I want to be able to create array objects with a name detemined by some other function.Why can't I seem to do this?Am I just being stupid?"
  },
  {
    "postid":6291,
    "postdate":1276683780,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.321657517,
    "concept_entropy":4.542805252,
    "UMASS(coherence)":0.560450242,
    "TFIDF(informativeness)":1.443514728,
    "polarity":0,
    "normalized_text_entropy":4.321657517,
    "normalized_concept_entropy":4.542805252,
    "normalized_UMASS":0.50950022,
    "normalized_TFIDF":0.10323795,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"There aren't any \"variable variables\" (that is variables with variable names) in Java, but you can create Maps or Arrays to deal with your particular issue.When you encounter an issue that makes you think \"I need my variables to change names dynamically\" you should try and think \"associative array\".In Java, you get associative arrays usings. That is, you can keep a List of your arrays, something like: Or perhaps a little closer to what you're after, you can use a Map:"
  },
  {
    "postid":6292,
    "postdate":1276684260,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.352056304,
    "concept_entropy":0,
    "UMASS(coherence)":0.504891954,
    "TFIDF(informativeness)":0.810957298,
    "polarity":2,
    "normalized_text_entropy":4.352056304,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.458992685,
    "normalized_TFIDF":0.057998417,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Others have already provided great answers, but just to cover all bases, Java does have array of arrays. Now you don't have 5 variables named,,,,, each being a... ...but you do have an array of,,,,,, each being a."
  },
  {
    "postid":6293,
    "postdate":1375526700,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.355591679,
    "concept_entropy":0,
    "UMASS(coherence)":0.562438034,
    "TFIDF(informativeness)":1.269251993,
    "polarity":1,
    "normalized_text_entropy":4.355591679,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.511307304,
    "normalized_TFIDF":0.090774948,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The closest you will get in Java is: Note that is not a variable, but in conjunction with the object it works like one ... sort of."
  },
  {
    "postid":6294,
    "postdate":1336877280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.209836607,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.498339196,
    "TFIDF(informativeness)":0.863632118,
    "polarity":1,
    "normalized_text_entropy":4.209836607,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.453035633,
    "normalized_TFIDF":0.061765639,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"What you want to do is called metaprogramming - programming a program, which Java does not support (it allows metadata only through annotations). However, for such an easy use case, you can create a method which will take an int and return the string array you wanted, e.g. by acccessing the array of arrays. If you wanted some more complex naming convention, consider swtich statement for few values and map for more values. For fixed number of values with custom names define an Enum, which can be passed as an argument."
  },
  {
    "postid":6295,
    "postdate":1221561420,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.109198454,
    "concept_entropy":0,
    "UMASS(coherence)":0.428401498,
    "TFIDF(informativeness)":1.217330702,
    "polarity":0,
    "normalized_text_entropy":4.109198454,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.389455907,
    "normalized_TFIDF":0.087061617,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"When doees the instance variable get initialized? Is it after the constructor block is done or before it?Consider this example: Parent Constructor Child init() parent Init() Child Constructor attribute 1 : 100 attribute 2 : null"
  },
  {
    "postid":6296,
    "postdate":1221555840,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.255098851,
    "concept_entropy":0,
    "UMASS(coherence)":0.647597243,
    "TFIDF(informativeness)":2.08035681,
    "polarity":1,
    "normalized_text_entropy":4.255098851,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.588724766,
    "normalized_TFIDF":0.148783915,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The memory for the object as a whole is allocated when the operator is invoked, before the constructor is entered.Memory is allocated for individual instances in, but there is no point when memory is allocated for individual properties -- only whole objects. The method is called in the super constructor, so is assigned, and then the subclass constructor is invoked which applies property initializers in the order they appear in the source code.This line overwrites the value assigned by to. If you add a call to right after your call to then this will become apparent. Calling sub-class methods before the base class has finished initializing is dangerous.The sub-class might rely on its base-class's invariants to protect its own invariants, and if the base-class constructor has not completed, then its invariants may not hold. This is also likely to confuse C++ programmers and the like who would expect a call to from the base class to invoke the base class's version since C++ rewrites the vtable pointer as constructors are entered. See for all the gory details."
  },
  {
    "postid":6297,
    "postdate":1242161220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.201452238,
    "concept_entropy":3.452819531,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.216214841,
    "polarity":0,
    "normalized_text_entropy":4.201452238,
    "normalized_concept_entropy":3.452819531,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.086981812,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"After consuming the answers and link provided here is my digest observation : Here is the flow: As Fabian Barney mention:::::It's generally bad practise to call methods inside constructor that can be overridden by subclasses.Still figuring out. Appreciate any pointers. Thanks for Mike and Fabian"
  },
  {
    "postid":6298,
    "postdate":1221555900,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.130172479,
    "concept_entropy":0,
    "UMASS(coherence)":0.461018058,
    "TFIDF(informativeness)":1.196431449,
    "polarity":2,
    "normalized_text_entropy":4.130172479,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.419107325,
    "normalized_TFIDF":0.085566935,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I need to convert XML data to Java objects. What would be best practice to convert this XML data to object? Idea is to fetch data via a web service (it doesn't use WSDL, just HTTP GET queries, so I cannot use any framework) and answers are in XML. What would be best practice to handle this situation?"
  },
  {
    "postid":6299,
    "postdate":1221556320,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.311577952,
    "concept_entropy":4.48575247,
    "UMASS(coherence)":0.646688281,
    "TFIDF(informativeness)":1.155531845,
    "polarity":0,
    "normalized_text_entropy":4.311577952,
    "normalized_concept_entropy":4.48575247,
    "normalized_UMASS":0.587898437,
    "normalized_TFIDF":0.082641858,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Have a look at. It might not be the quickest, but it is one of the most user friendly and straightforward converters in Java, especially if your model is not complex."
  },
  {
    "postid":6300,
    "postdate":1221555900,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.20121719,
    "concept_entropy":4.557942595,
    "UMASS(coherence)":0.743364869,
    "TFIDF(informativeness)":13.98240401,
    "polarity":2,
    "normalized_text_entropy":4.20121719,
    "normalized_concept_entropy":4.557942595,
    "normalized_UMASS":0.675786245,
    "normalized_TFIDF":1,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"JAXB is a standard API for doing this: "
  },
  {
    "postid":6301,
    "postdate":1221556380,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.149417843,
    "concept_entropy":4.57923256,
    "UMASS(coherence)":0.472936578,
    "TFIDF(informativeness)":0.806847626,
    "polarity":0,
    "normalized_text_entropy":4.149417843,
    "normalized_concept_entropy":4.57923256,
    "normalized_UMASS":0.429942344,
    "normalized_TFIDF":0.109216587,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"For a JMS project we were marshalling and unmarshalling (going from java to xml and xml to java) XML embedded in TextMessages (string property). We tried JAXB,, and. We found that XMLBeans worked best for us. Fast, easily configurable, good documentation, and easy Maven integration. "
  },
  {
    "postid":6302,
    "postdate":1221556440,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.07741807,
    "concept_entropy":0,
    "UMASS(coherence)":0.36920892,
    "TFIDF(informativeness)":1.216095428,
    "polarity":1,
    "normalized_text_entropy":4.07741807,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.335644473,
    "normalized_TFIDF":0.164613228,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have used and will continue to use JDOM -> www.jdom.org"
  },
  {
    "postid":6303,
    "postdate":1221555720,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.3259752,
    "concept_entropy":4.47743261,
    "UMASS(coherence)":0.580305736,
    "TFIDF(informativeness)":0.879589998,
    "polarity":1,
    "normalized_text_entropy":4.3259752,
    "normalized_concept_entropy":4.47743261,
    "normalized_UMASS":0.527550669,
    "normalized_TFIDF":0.119063147,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Another option is a Sax Parser.It is procedural - i.e. a visitor pattern - but if the xml is fairly lightweight, (and even medium weight) I have found it to be very useful for this."
  },
  {
    "postid":6304,
    "postdate":1221557880,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.360754663,
    "concept_entropy":0,
    "UMASS(coherence)":0.327997902,
    "TFIDF(informativeness)":1.174638258,
    "polarity":0,
    "normalized_text_entropy":4.360754663,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.298179911,
    "normalized_TFIDF":0.159001498,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"JAXB API which comes in Java(In built)."
  },
  {
    "postid":6305,
    "postdate":1221560460,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.234071824,
    "concept_entropy":0,
    "UMASS(coherence)":0.650202661,
    "TFIDF(informativeness)":2.256362347,
    "polarity":-1,
    "normalized_text_entropy":4.234071824,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.591093328,
    "normalized_TFIDF":0.305425939,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I have used JIBX in MQ module. It works very well. Ant config is simple. Used Xsd2Jibx converter to generate the binding files and Java beans from XML schema. Marshalling and un-marshalling allow to specify character-set parameter. It was useful in my project to handle custom character-set. But I found an issue in the binding compiler. If the Java bean has lengthier path name, it generates class file with lengthier file name which will cause issue in Windows XP(it has a maximum file length limit). I haven't used other APIs. So I am not trying to compare with others. If you decided to use JIBX, I hope this will be helpful. More details, please refer "
  },
  {
    "postid":6306,
    "postdate":1242160140,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.184900259,
    "concept_entropy":0,
    "UMASS(coherence)":0.310993413,
    "TFIDF(informativeness)":0.749685418,
    "polarity":-1,
    "normalized_text_entropy":4.184900259,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.282721285,
    "normalized_TFIDF":0.101478991,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I've used XStream as well, it is easy to use and customizable. You can add your own custom converters and that was very handy for me..."
  },
  {
    "postid":6307,
    "postdate":1290810480,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.283650441,
    "concept_entropy":0,
    "UMASS(coherence)":0.550970371,
    "TFIDF(informativeness)":1.034276884,
    "polarity":0,
    "normalized_text_entropy":4.283650441,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.500882155,
    "normalized_TFIDF":0.140001888,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"So surprised more people have not mentioned Jibx. Amazing lib and i think a lot simpler to use than Jaxb. Performance is also fab!"
  },
  {
    "postid":6308,
    "postdate":1290811020,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.278435056,
    "concept_entropy":0,
    "UMASS(coherence)":0.626619324,
    "TFIDF(informativeness)":1.420115612,
    "polarity":-1,
    "normalized_text_entropy":4.278435056,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.569653931,
    "normalized_TFIDF":0.192229828,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"For this you can also consider apache's bitwixt and simple framework for xml"
  },
  {
    "postid":6309,
    "postdate":1290811080,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.134516367,
    "concept_entropy":0,
    "UMASS(coherence)":0.304996936,
    "TFIDF(informativeness)":0.932286671,
    "polarity":0,
    "normalized_text_entropy":4.134516367,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.277269942,
    "normalized_TFIDF":0.126196279,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I want to ask a question about Java. I have a user-defined object class, student, which have 2 data members, name and id. And in another class, I have to declare that object[], (e.g.). However, I don't know the size of the object array. Is it possible to declare an object array but don't know the size? thank you."
  },
  {
    "postid":6310,
    "postdate":1290810780,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.041729155,
    "concept_entropy":4.490790922,
    "UMASS(coherence)":0.217528043,
    "TFIDF(informativeness)":3.001186645,
    "polarity":1,
    "normalized_text_entropy":4.041729155,
    "normalized_concept_entropy":4.490790922,
    "normalized_UMASS":0.197752766,
    "normalized_TFIDF":0.406246918,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"User instead. It'll expand automatically as you add new elements. Later you can convert it to array, if you need. As another option (not sure what exactly you want), you can declare field and not initialize it immediately."
  },
  {
    "postid":6311,
    "postdate":1290811140,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.059192977,
    "concept_entropy":0,
    "UMASS(coherence)":0.595650288,
    "TFIDF(informativeness)":1.058656352,
    "polarity":2,
    "normalized_text_entropy":4.059192977,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.541500262,
    "normalized_TFIDF":0.143301944,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"As you have probably figured out by now, regular arrays in Java are of fixed size (an array's size cannot be changed), so in order to add items dynamically to an array, you need a resizable array. In Java, resizable arrays are implemented as the ArrayList class ( ).A simple example of its use: The brackets (a feature called generics in Java) are optional; however, you should use them. Basically they restrict the type of object that you can store in the array list, so you don't end up storing String objects in an array full of Integer objects."
  },
  {
    "postid":6312,
    "postdate":1290811920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.251731718,
    "concept_entropy":0,
    "UMASS(coherence)":0.524887881,
    "TFIDF(informativeness)":1.655623607,
    "polarity":0,
    "normalized_text_entropy":4.251731718,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.477170801,
    "normalized_TFIDF":0.224108684,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You could declare as:, and create it with fixed size: until you could know the size. If you have to use array."
  },
  {
    "postid":6313,
    "postdate":1327679220,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.326958943,
    "concept_entropy":0,
    "UMASS(coherence)":0.481522332,
    "TFIDF(informativeness)":1.206389608,
    "polarity":-1,
    "normalized_text_entropy":4.326958943,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.437747575,
    "normalized_TFIDF":0.163299427,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Its not possible,we need to specify the size of array when declaring object array; in both cases not any objects are created only the space is allocated for the array. this will create a new object;"
  },
  {
    "postid":6314,
    "postdate":1327679400,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.255384179,
    "concept_entropy":0,
    "UMASS(coherence)":0.394416219,
    "TFIDF(informativeness)":1.528930508,
    "polarity":1,
    "normalized_text_entropy":4.255384179,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.358560199,
    "normalized_TFIDF":0.20695924,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"HelloI am curious how java generates hash values by using method of the Object API ? "
  },
  {
    "postid":6315,
    "postdate":1327679460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.255400714,
    "concept_entropy":0,
    "UMASS(coherence)":0.375694131,
    "TFIDF(informativeness)":1.354734796,
    "polarity":1,
    "normalized_text_entropy":4.255400714,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.341540119,
    "normalized_TFIDF":0.183379743,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Java doesn't generate hashCode(), i.e. nothing automatic is happening here. However, generates a HashCode based on the memory address of the instance of the object. Most classes (especially if you are going to use it in any of the API) should implement their own HashCode (and by contract their own equals method)."
  },
  {
    "postid":6316,
    "postdate":1327729740,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.245098864,
    "concept_entropy":0,
    "UMASS(coherence)":0.337137913,
    "TFIDF(informativeness)":1.22527515,
    "polarity":0,
    "normalized_text_entropy":4.245098864,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.306489012,
    "normalized_TFIDF":0.165855814,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The of is actually a native method and the implementation is actually not pure Java. Now, regarding the how it works, does a great job at explaining it: The whole answer is actually worth the read."
  },
  {
    "postid":6317,
    "postdate":1220282460,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":0,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.410516118,
    "TFIDF(informativeness)":1.483324322,
    "polarity":1,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.373196471,
    "normalized_TFIDF":0.200785891,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"According to Java Platform API documentation, the calculation of hashcode is based on 32-bit internal JVM address of the Object. It is true that the object moves during execution (AFAIK the only reason is garbage collector). But hashcode does not change. So when you have an object like this In this case person1.hashCode will not be equal to person2.hashCode because the memory addresses of these two objects are not the same. But person2.hashCode will be equal to person3 because they are pointing to the same object. So if you need to use hashCode method for your objects you must implement it yourself. By the way. It is something like this: (C# syntax)No overflow check is done here, so the hashCode may be positive or negative."
  },
  {
    "postid":6318,
    "postdate":1221023160,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.260643691,
    "concept_entropy":0,
    "UMASS(coherence)":0.537567301,
    "TFIDF(informativeness)":0.985747223,
    "polarity":-1,
    "normalized_text_entropy":4.260643691,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.488697546,
    "normalized_TFIDF":0.133432811,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The Object.hashCode() uses the System.identityHashCode() which is based on an id number for a given object."
  },
  {
    "postid":6319,
    "postdate":1220342160,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.448062128,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.406858227,
    "TFIDF(informativeness)":2.295596394,
    "polarity":2,
    "normalized_text_entropy":4.448062128,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.369871115,
    "normalized_TFIDF":0.310736742,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Java does not generate meaningful for you, it is your job as a programmer to generate a useful. The default is just the memory location."
  },
  {
    "postid":6320,
    "postdate":1220285340,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.986724916,
    "concept_entropy":4.466400215,
    "UMASS(coherence)":0.498168464,
    "TFIDF(informativeness)":1.184850619,
    "polarity":0,
    "normalized_text_entropy":3.986724916,
    "normalized_concept_entropy":4.466400215,
    "normalized_UMASS":0.452880422,
    "normalized_TFIDF":0.160383865,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I know that can sort an arraylist alphabetically when they are strings, but what about when they are something more complex such as a data object containing two or more variables including a. Is there a way to sort them then? If there isn't a way with then I can imagine making a for loop or standard sorting algorithm to look at the strings variable of each object and move the object's index in the array.But I was wondering mainly if I overlooked something about the methods"
  },
  {
    "postid":6321,
    "postdate":1261074480,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.376054381,
    "concept_entropy":4.530441537,
    "UMASS(coherence)":0.760962572,
    "TFIDF(informativeness)":2.522834642,
    "polarity":-1,
    "normalized_text_entropy":4.376054381,
    "normalized_concept_entropy":4.530441537,
    "normalized_UMASS":0.691784156,
    "normalized_TFIDF":0.341496188,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Use. Il allows you to pass an instance of Comparator to sort according to your needs. Note that the contains guidelines regarding the building of comparators. You may define the comparator as an anonymous class if it's only locally used. Here's an example where I sort objects regarding to one of their fields which is a String : Alternatively, you might also make your class implement the interface but this makes sense only if you can define a natural (obvious) order."
  },
  {
    "postid":6322,
    "postdate":1296087060,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.207028296,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.402387558,
    "polarity":2,
    "normalized_text_entropy":4.207028296,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.189830121,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I would create an inner class implementing the Comparator interface: Now when you want to sort your Car list by horsePower:"
  },
  {
    "postid":6323,
    "postdate":1296087300,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.866132729,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.526435963,
    "TFIDF(informativeness)":0.97608889,
    "polarity":1,
    "normalized_text_entropy":3.866132729,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.478578148,
    "normalized_TFIDF":0.132125439,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"My application required to have switch case statement of type String.I need something like this: Is it possible to have?"
  },
  {
    "postid":6324,
    "postdate":1296087180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.2219322,
    "concept_entropy":0,
    "UMASS(coherence)":0.537567301,
    "TFIDF(informativeness)":2.049529728,
    "polarity":0,
    "normalized_text_entropy":4.2219322,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.488697546,
    "normalized_TFIDF":0.277428642,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Since you are switching on Strings I assume that the strings are known at compile time. In that case you can use an enum. Then"
  },
  {
    "postid":6325,
    "postdate":1348162380,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.243206297,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.057270138,
    "polarity":-1,
    "normalized_text_entropy":4.243206297,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.143114303,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"See this question:Not currently supported, but expected to be in Java 7. Edit: actually appears to bes only, not anys Perhaps each object should implement a method that contains the logic you're trying to put into the switch statement?"
  },
  {
    "postid":6326,
    "postdate":1296087480,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.320812013,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.185698305,
    "polarity":0,
    "normalized_text_entropy":4.320812013,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.160498609,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"No, you can't do this (try it and find out). But if you want this, perhaps a Map such as a HashMap would better suit your purposes."
  },
  {
    "postid":6327,
    "postdate":1377061620,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.291153657,
    "concept_entropy":0,
    "UMASS(coherence)":0.565482283,
    "TFIDF(informativeness)":2.822272934,
    "polarity":0,
    "normalized_text_entropy":4.291153657,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.514074803,
    "normalized_TFIDF":0.382028783,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"No, use other collections like Hashmap or use array indexes to do the same, create an array of elements and put a switch case on index"
  },
  {
    "postid":6328,
    "postdate":1296087300,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.306717519,
    "concept_entropy":0,
    "UMASS(coherence)":0.48555617,
    "TFIDF(informativeness)":1.296954592,
    "polarity":3,
    "normalized_text_entropy":4.306717519,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.4414147,
    "normalized_TFIDF":0.175558494,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"What is the best practice for referencing nested objects? Say I have the following: and in my controller or service class I need to check the someString String variable of the InnerB class to make sure it is not null or not empty so I do this: To me this looks messy and could have issues if the nested objects themselves are null. Do I create getters ans setters in the parent objects for the child objects checking for null?Just wondering what the best practice was if any and/or what some of you do in your code?"
  },
  {
    "postid":6329,
    "postdate":1389665880,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.68418372,
    "concept_entropy":4.450997718,
    "UMASS(coherence)":0.368188573,
    "TFIDF(informativeness)":1.631042568,
    "polarity":1,
    "normalized_text_entropy":3.68418372,
    "normalized_concept_entropy":4.450997718,
    "normalized_UMASS":0.334716885,
    "normalized_TFIDF":0.220781343,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If any of those objects can be null, then you have to check for null before calling a getter on this object, of course.But this kind of chaining is a bad smell of a lack of encapsulation (anemic objects having just data, and no behavior). You're violating the : don't talk to strangers."
  },
  {
    "postid":6330,
    "postdate":1270352940,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.173833249,
    "concept_entropy":0,
    "UMASS(coherence)":0.526435963,
    "TFIDF(informativeness)":1.063854623,
    "polarity":-1,
    "normalized_text_entropy":4.173833249,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.478578148,
    "normalized_TFIDF":0.144005593,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I would recommend reading up on the."
  },
  {
    "postid":6331,
    "postdate":1270353600,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.537056273,
    "concept_entropy":4.120300687,
    "UMASS(coherence)":0.450605386,
    "TFIDF(informativeness)":1.395364416,
    "polarity":1,
    "normalized_text_entropy":4.537056273,
    "normalized_concept_entropy":4.120300687,
    "normalized_UMASS":0.40964126,
    "normalized_TFIDF":0.188879454,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can use Apache Commons BeanUtils to navigate through your nested properties like this: Add method to your Outer class and write something likeI can't remember if that class check null properties, but I would look site. Hope this helps!"
  },
  {
    "postid":6332,
    "postdate":1270353300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.189405521,
    "concept_entropy":0,
    "UMASS(coherence)":0.396318819,
    "TFIDF(informativeness)":1.615149071,
    "polarity":0,
    "normalized_text_entropy":4.189405521,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.360289835,
    "normalized_TFIDF":0.218629966,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You have two options:"
  },
  {
    "postid":6333,
    "postdate":1270360800,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.336025106,
    "concept_entropy":4.560855909,
    "UMASS(coherence)":0.387800339,
    "TFIDF(informativeness)":1.622161274,
    "polarity":0,
    "normalized_text_entropy":4.336025106,
    "normalized_concept_entropy":4.560855909,
    "normalized_UMASS":0.352545763,
    "normalized_TFIDF":0.219579152,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I don't think users of Outer should have knowledge of Outer.InnerA.InnerB.SomeString - it's buried to deep. You can't change implementation of InnerB without touching clients of Outer 3 levels separated - so what's the point of even having inner classes? Situations like you're describing are ugly and shouldn't arise. I'd recommend you first consider whether SomeString belongs in InnerB or InnerA or Outer. Now suppose your hierarchy is correct, yet SomeString has this unique property of being required by clients of Outer (if SomeString is not unique that way, hierarchy is definitely wrong). In this case, Outer.getSomeString(), or better yet, Outer.isSomeStringNullOrEmpty(), so that at least clients of Outer don't have to know about InnerA and InnerBPS. someString.equalsIgnoreCase(\"\") is expensive, don't use that. Much cheaper is someString.length() == 0"
  },
  {
    "postid":6334,
    "postdate":1270353360,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.381828438,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.154510739,
    "polarity":0,
    "normalized_text_entropy":4.381828438,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.156276995,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It's messy, but if you only had to do it in one place then I might live with it.Otherwise, I'd implement a that hides the internal path, since your Outer class is the one you're exposing as your interface. This also allows you to deal with a case where one of the intermediary inner classes is null, without having to do a number of sequential checks each time you try to access."
  },
  {
    "postid":6335,
    "postdate":1270360500,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.349789226,
    "concept_entropy":0,
    "UMASS(coherence)":0.357057235,
    "TFIDF(informativeness)":1.346244749,
    "polarity":0,
    "normalized_text_entropy":4.349789226,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.324597486,
    "normalized_TFIDF":0.182230513,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"My belief is that you should not expose \"inner-inner\" members through methods of the outer class unless you are adding some sort of functionality or different behaviour to them or the value is \"essential\" to the use of the outer class. However this is also a matter of judgement and can vary depending on the use and architecture of your code. On a side note if you want the code for a long string of invocations to be \"less ugly\" I suggest voting for addition of the for project coin in the next version of Java (I wish it had made it into 7 :-()."
  },
  {
    "postid":6336,
    "postdate":1321450800,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.276305434,
    "concept_entropy":0,
    "UMASS(coherence)":0.541987862,
    "TFIDF(informativeness)":3.043054798,
    "polarity":1,
    "normalized_text_entropy":4.276305434,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.492716238,
    "normalized_TFIDF":0.411914279,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"here is my java code which is used fro de de-serialization, i am trying to convert json string into java object. in doing so i have used the following code. and my product.java class i am getting the following error. help me to slove this,"
  },
  {
    "postid":6337,
    "postdate":1321450920,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.456611398,
    "concept_entropy":0,
    "UMASS(coherence)":0.599359426,
    "TFIDF(informativeness)":2.181524845,
    "polarity":2,
    "normalized_text_entropy":4.456611398,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.544872205,
    "normalized_TFIDF":0.295295778,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"It looks like you are trying to read an object from JSON that actually describes an array.Java objects are mapped to JSON objects with curly braces but your JSON actually starts with square brackets designating an array. What you actually have is a To describe generic types, due to Java's type erasure, you must use a.Your deserialization could read:A couple of other notes: your classes should always be CamelCased.Your main method can just be which saves you all the useless blocks."
  },
  {
    "postid":6338,
    "postdate":1321451040,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.184452688,
    "concept_entropy":4.404286568,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.695253343,
    "polarity":-2,
    "normalized_text_entropy":4.184452688,
    "normalized_concept_entropy":4.404286568,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.364835145,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"You have to change the line to since you are deserializing an array (btw: you should start your class names with upper case letters as mentioned earlier). Additionally you have to create setter methods for your fields or mark them as public in order to make this work. Edit: You can also go with Steven Schlansker's suggestion and use instead if you want to avoid arrays."
  },
  {
    "postid":6339,
    "postdate":1378752240,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.01312768,
    "concept_entropy":4.442184315,
    "UMASS(coherence)":0.408735745,
    "TFIDF(informativeness)":1.299227196,
    "polarity":0,
    "normalized_text_entropy":4.01312768,
    "normalized_concept_entropy":4.442184315,
    "normalized_UMASS":0.37157795,
    "normalized_TFIDF":0.175866118,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"this also done the trick."
  },
  {
    "postid":6340,
    "postdate":1321451040,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.048095896,
    "concept_entropy":4.463874404,
    "UMASS(coherence)":0.472149396,
    "TFIDF(informativeness)":1.606602921,
    "polarity":1,
    "normalized_text_entropy":4.048095896,
    "normalized_concept_entropy":4.463874404,
    "normalized_UMASS":0.429226724,
    "normalized_TFIDF":0.217473141,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Your class needs a parameterless constructor. You can make it private, but Jackson needs the constructor. As a side note: You should use Pascal casing for your class names. That is, and not."
  },
  {
    "postid":6341,
    "postdate":1321451220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.233521852,
    "concept_entropy":4.583407822,
    "UMASS(coherence)":0.396318819,
    "TFIDF(informativeness)":2.028668711,
    "polarity":0,
    "normalized_text_entropy":4.233521852,
    "normalized_concept_entropy":4.583407822,
    "normalized_UMASS":0.360289835,
    "normalized_TFIDF":0.274604851,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I came across a rather unusual way to build an object of a class in this blog : . Is this a good way to do this. What are the benefits?"
  },
  {
    "postid":6342,
    "postdate":1376832180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.38682795,
    "concept_entropy":4.544963492,
    "UMASS(coherence)":0.552944684,
    "TFIDF(informativeness)":1.855627867,
    "polarity":0,
    "normalized_text_entropy":4.38682795,
    "normalized_concept_entropy":4.544963492,
    "normalized_UMASS":0.502676985,
    "normalized_TFIDF":0.25118168,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This is the with a. As you see from the article, the two ideas are complementary and often used together (which I've seen some call a), so much so, that they are often confused as the same thing: Note that you can use the builder pattern without a fluent interface (e.g. a builder with simple setters).You can also use the fluent interface idea in more contexts than just builders (e.g. to improve the readability of a set of overloaded methods with many parameters and parameter variations). This seems highly accepted as \"a good way to do this\" (at least based on the number of articles and blog posts I've seen proselytizing the idea). Each idea has its own distinct advantages/benefits.For example, see:"
  },
  {
    "postid":6343,
    "postdate":1317891240,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.514479352,
    "TFIDF(informativeness)":1.386172834,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.467708502,
    "normalized_TFIDF":0.187635262,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The only benefit is readability.By the way, this is an example of a. A fluent interface seeks to provide an API that, when used, produces more readable code than a standard OOP API tends to provide."
  },
  {
    "postid":6344,
    "postdate":1317892860,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.065692581,
    "concept_entropy":0,
    "UMASS(coherence)":0.388379276,
    "TFIDF(informativeness)":1.216712074,
    "polarity":1,
    "normalized_text_entropy":4.065692581,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.353072069,
    "normalized_TFIDF":0.164696698,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Yes, this is what had in mind in of his \"Effective Java\"."
  },
  {
    "postid":6345,
    "postdate":1317891480,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.015250496,
    "concept_entropy":0,
    "UMASS(coherence)":0.406608285,
    "TFIDF(informativeness)":1.056008088,
    "polarity":0,
    "normalized_text_entropy":4.015250496,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.369643895,
    "normalized_TFIDF":0.14294347,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This is a simple example of the. It allows the separation of the algorithm for creating a complex object from the parts that make up the object and the way they are assembled. explains the consequences of this pattern as: A real-world example of this pattern is the class in the Smalltalk-80 compiler sub-system. Source code is parsed by an object of the class which is initialized with a. The object notifies its object each time it recognizes a syntactic construct. When the parser is done, it asks the builder for the parse tree it built and returns it to the client."
  },
  {
    "postid":6346,
    "postdate":1317892500,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.005369515,
    "concept_entropy":0,
    "UMASS(coherence)":0.263242062,
    "TFIDF(informativeness)":1.535142189,
    "polarity":0,
    "normalized_text_entropy":4.005369515,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.239310965,
    "normalized_TFIDF":0.207800066,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm quite happy to do my first stackoverflow post here - cause you are discussing my article :-) I think this construction (leverage of both builder and fluent interface: fluent builder) greatly improves code readability. What is more (and not getting into discussion around design patterns) it proves its value when we need immutable objects. Simply, by making constructor private and removing all the setters, we gain a very powerful tool for an elegant and readable, yet powerful way of building immutable objects. Finally, the whole post was supposed to be more about smart usage of templates to generate repeatable code - but I pretty like the discussion. "
  },
  {
    "postid":6347,
    "postdate":1254518160,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.251804837,
    "concept_entropy":0,
    "UMASS(coherence)":0.355397504,
    "TFIDF(informativeness)":1.303109181,
    "polarity":1,
    "normalized_text_entropy":4.251804837,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.32308864,
    "normalized_TFIDF":0.176391592,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I personally find using a Builder with a Fluent Interface very useful and very intuitive. You can express better your intents when sending messages to the builder.I wrote a little example of a Builder with Fluent Interface, hope it helps."
  },
  {
    "postid":6348,
    "postdate":1254518340,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.223424744,
    "concept_entropy":0,
    "UMASS(coherence)":0.394153144,
    "TFIDF(informativeness)":1.081837341,
    "polarity":0,
    "normalized_text_entropy":4.223424744,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.35832104,
    "normalized_TFIDF":0.146439771,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Is there a way to see all the references to an object in execution time? I'm using Netbeans, this feature exist in it? EDIT: No problem in using profilers to do this, I only need know the references, no matters how."
  },
  {
    "postid":6349,
    "postdate":1254518940,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.213017847,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.186520298,
    "polarity":0,
    "normalized_text_entropy":4.213017847,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.160609876,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Ok, Netbeans show all the references to an object. First, run the project in debug mode, after, show the Loaded Classes or.Choose the class will want to see the references and double click on it. Pause the execution and there is.In the top is the attributes of the object, and in the bottom, all references to it."
  },
  {
    "postid":6350,
    "postdate":1254518340,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.307247676,
    "concept_entropy":4.524002525,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.093082678,
    "polarity":2,
    "normalized_text_entropy":4.307247676,
    "normalized_concept_entropy":4.524002525,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.147961964,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"If you dump the heap and analyse it you get find all the references.Profilers like VisualVM and YourKit can do this for you. However its not possible to determine this dynamically.If you want to know all the things which refer to an object you must maintain a collection these yourself."
  },
  {
    "postid":6351,
    "postdate":1332291300,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.208671181,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.229945467,
    "polarity":1,
    "normalized_text_entropy":4.208671181,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.166487998,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In Netbeans you can use the feature to see where a particular class may have been referenced inside of a particular project. From the, select the class and right click >. The results looks a bit like the following image:"
  },
  {
    "postid":6352,
    "postdate":1332295380,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.232752905,
    "concept_entropy":4.4457533,
    "UMASS(coherence)":0.720625851,
    "TFIDF(informativeness)":0.799785208,
    "polarity":-1,
    "normalized_text_entropy":4.232752905,
    "normalized_concept_entropy":4.4457533,
    "normalized_UMASS":0.65511441,
    "normalized_TFIDF":0.108260603,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Unfortunately, there is no such feature available in Java. But, there is a way of being notified that there is no more reference to an object at runtime. The solution is to create a weak reference to the monitored object and associate it with a. When there will be no more hard reference to that object, the GC will sooner or later recollect it and enqueue the weak reference. You can check this with. If you provide more information about your issue, may be we can give more tips & tricks. To control all references to an oject, you may use the Proxy Pattern. Instead of setting references to your connection object, you create a proxy object containing a private instance of the connection object. Then, have your code call the proxy who will call the connection object itself, instead of having direct references to the connection. When you are done with the connection object, close it inside the proxy object. If other parts of the code still try to access that connection objects via the proxy, you will be able to detect it in the proxy when it is called. It is a trick you can use to find which part of the code is still 'referencing' your object, so to speak. Hope this helps."
  },
  {
    "postid":6353,
    "postdate":1332291900,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.286579562,
    "concept_entropy":4.447227995,
    "UMASS(coherence)":0.871171642,
    "TFIDF(informativeness)":0.819454,
    "polarity":0,
    "normalized_text_entropy":4.286579562,
    "normalized_concept_entropy":4.447227995,
    "normalized_UMASS":0.79197422,
    "normalized_TFIDF":0.110923012,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am storing a class object into a string using method. Now, I want to convert the string into that class object. How to do that? Please help me with source code."
  },
  {
    "postid":6354,
    "postdate":1378275780,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.236262206,
    "concept_entropy":4.3834309,
    "UMASS(coherence)":0.476248025,
    "TFIDF(informativeness)":0.769835805,
    "polarity":3,
    "normalized_text_entropy":4.236262206,
    "normalized_concept_entropy":4.3834309,
    "normalized_UMASS":0.43295275,
    "normalized_TFIDF":0.104206589,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Your question is ambiguous.It could mean at least two different things, one of which is ... well ... a serious misconception on your part. If you did this: then the answer is that there is no simple way to turn back into an instance of.You couldn't do it even if the method gave you one of those funky \"SomeClass@xxxxxxxx\" strings.(That string does not encode the state of the object, or even a reference to the object.The xxxxxxxx part is the object's.It is not unique, and cannot be magically turned back into a reference to the object.) The only way you could turn the output of back into an object would be to: This is probably a bad approach.Certainly, it is a lot of work to do this for non-trivial classes. If you did something like this: then you could get the same object back (i.e. the one that is in) as follows: This gives you the but there is no magic way to reconstruct the original instance using it.(Obviously, the name of the class does not contain the state of the object.) If you are looking for a way to serialize / deserialize an arbitrary object going to the effort of coding the unparse / parse methods yourself, then you be using method at all.Here are some alternatives that you can use: Each of these approaches has advantages and disadvantages ... which I won't go into here."
  },
  {
    "postid":6355,
    "postdate":1346158140,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.149100885,
    "concept_entropy":4.380526822,
    "UMASS(coherence)":0.537745579,
    "TFIDF(informativeness)":0.66052849,
    "polarity":0,
    "normalized_text_entropy":4.149100885,
    "normalized_concept_entropy":4.380526822,
    "normalized_UMASS":0.488859617,
    "normalized_TFIDF":0.089410522,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In a book on Core Java, I found this excerpt : After reading this I was wondering, that What bothers me is that, How can a method in Object class make a field by field clone of a sub-class object, when it knows nothing about that class.:-(Regards AViD"
  },
  {
    "postid":6356,
    "postdate":1346158740,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.320398681,
    "concept_entropy":3.427333494,
    "UMASS(coherence)":0.437865773,
    "TFIDF(informativeness)":1.754863101,
    "polarity":3,
    "normalized_text_entropy":4.320398681,
    "normalized_concept_entropy":3.427333494,
    "normalized_UMASS":0.398059794,
    "normalized_TFIDF":0.23754195,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Actually, is implemented in native code, so I assume it just does a memory copy (copy all the bytes) without knowing the contents. Besides that, there is the Reflection API to gain knowlegde about a class (which would be slower, however)."
  },
  {
    "postid":6357,
    "postdate":1346158620,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.170128557,
    "concept_entropy":0,
    "UMASS(coherence)":0.641124267,
    "TFIDF(informativeness)":1.152419964,
    "polarity":1,
    "normalized_text_entropy":4.170128557,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.582840243,
    "normalized_TFIDF":0.095492464,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Read this from the: Means when you have a subobject in your object you shouldnt just clone/copy its reference but the internal structure of this object (in order to create a new instance of it), if each object has its clone() methode you will be able to clone it like the parent object otherwise you will have to create a new instance of it and copy its internal premitive fields one by one."
  },
  {
    "postid":6358,
    "postdate":1346158500,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":0,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.303521224,
    "TFIDF(informativeness)":0.931346298,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.275928385,
    "normalized_TFIDF":0.077173735,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The method is, how should I call it in the following scenarios? "
  },
  {
    "postid":6359,
    "postdate":1346158620,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.12656486,
    "concept_entropy":4.381507687,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.543613451,
    "polarity":0,
    "normalized_text_entropy":4.12656486,
    "normalized_concept_entropy":4.381507687,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.0450452,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can create the array of objects on the fly: Another suggestion is that you change the signature of the method so that it uses java varargs: Nice thing is that it is compiled into a method with the same signature as above. But it may be called like or."
  },
  {
    "postid":6360,
    "postdate":1346158620,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3,
    "concept_entropy":3.902174814,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.286871476,
    "polarity":1,
    "normalized_text_entropy":3,
    "normalized_concept_entropy":3.902174814,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.023770904,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Is it possible to create ; I mean add objects from different classes to one arraylist? Thanks."
  },
  {
    "postid":6361,
    "postdate":1346158980,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":3.94346519,
    "concept_entropy":3.902174814,
    "UMASS(coherence)":0.760017472,
    "TFIDF(informativeness)":0.791518494,
    "polarity":1,
    "normalized_text_entropy":3.94346519,
    "normalized_concept_entropy":3.902174814,
    "normalized_UMASS":0.690924975,
    "normalized_TFIDF":0.065587246,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Yes, it's possible: The list will accept any object that implements."
  },
  {
    "postid":6362,
    "postdate":1325005740,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.303288797,
    "concept_entropy":0,
    "UMASS(coherence)":0.613730549,
    "TFIDF(informativeness)":1.350252322,
    "polarity":-1,
    "normalized_text_entropy":4.303288797,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.557936863,
    "normalized_TFIDF":0.111885359,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Yes you can. But you need a common class to your object types. In your case this would be. So for instance: Vehicle class: Bus class: Car class: Main class:"
  },
  {
    "postid":6363,
    "postdate":1325006700,
    "tag":"1",
    "TFMvalue":0.583333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.232745376,
    "concept_entropy":0,
    "UMASS(coherence)":0.7319773,
    "TFIDF(informativeness)":1.701643605,
    "polarity":0,
    "normalized_text_entropy":4.232745376,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.665433909,
    "normalized_TFIDF":0.141002539,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Get use of. Let's say you have a parent class for and. You can add objects of types, or to this list since Bus Vehicle, Car Vehicle and Vehicle Vehicle. Retrieving an object from the list and operating based on its type:"
  },
  {
    "postid":6364,
    "postdate":1325006760,
    "tag":"1",
    "TFMvalue":0.533333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.200419539,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.970329764,
    "polarity":1,
    "normalized_text_entropy":4.200419539,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.080404004,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can't specify more than one type parameter unfortunately, so you'll have to find a common superclass for your types and use that. An extreme case would be just using: Be careful that you will need to cast the result to the specific type that you need if you retrieve an item (to get full functionality, not just the common one):"
  },
  {
    "postid":6365,
    "postdate":1325005980,
    "tag":"1",
    "TFMvalue":0.631578947,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.188428137,
    "concept_entropy":3.91494675,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.773058867,
    "polarity":0,
    "normalized_text_entropy":4.188428137,
    "normalized_concept_entropy":3.91494675,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.064057634,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I need a class which creates Objects assigning an ID to each Object created. This ID is as usual an int attribute to the class. I want this value (ID) to be increased each time an Object is created and then to be assigned to that Object starting with 1. It strikes me that I need a static int attribute. How can I initialize this static attribute?Should I create a separate method to do the increment of the ID (as an ID generator) which is invoked inside the constructor?What is in general the most effective and well-designed manner to implement that? "
  },
  {
    "postid":6366,
    "postdate":1336105080,
    "tag":"1",
    "TFMvalue":0.733333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.180858172,
    "concept_entropy":4.232140237,
    "UMASS(coherence)":0.593763244,
    "TFIDF(informativeness)":0,
    "polarity":3,
    "normalized_text_entropy":4.180858172,
    "normalized_concept_entropy":4.232140237,
    "normalized_UMASS":0.539784767,
    "normalized_TFIDF":0,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Just like you mention use a for the id, and increment it when creating new objects. Please note that you need to protect if is created by multiple threads (for example using as the other answers suggest)."
  },
  {
    "postid":6367,
    "postdate":1336105320,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.180858172,
    "concept_entropy":4.232140237,
    "UMASS(coherence)":0.593763244,
    "TFIDF(informativeness)":1.474846105,
    "polarity":3,
    "normalized_text_entropy":4.180858172,
    "normalized_concept_entropy":4.232140237,
    "normalized_UMASS":0.539784767,
    "normalized_TFIDF":0.122209518,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"You could also try java.util.concurrent.AtomicInteger, which generates IDs inYou may use this in a static context like:"
  },
  {
    "postid":6368,
    "postdate":1336105440,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.237623598,
    "concept_entropy":4.541791687,
    "UMASS(coherence)":0.637305381,
    "TFIDF(informativeness)":2.438360818,
    "polarity":9,
    "normalized_text_entropy":4.237623598,
    "normalized_concept_entropy":4.541791687,
    "normalized_UMASS":0.579368528,
    "normalized_TFIDF":0.20204881,
    "normalized_polarity":0.425925926,
    "tagtext":"inheritance",
    "posttext":"I would suggest to use, which is thread-safe "
  },
  {
    "postid":6369,
    "postdate":1336105980,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.032473736,
    "concept_entropy":0,
    "UMASS(coherence)":0.402646705,
    "TFIDF(informativeness)":1.360603846,
    "polarity":0,
    "normalized_text_entropy":4.032473736,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.366042459,
    "normalized_TFIDF":0.112743112,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Is it possible to get a Object that is instanced in the Code by a String at Runtime? Somthing like that: Thanks"
  },
  {
    "postid":6370,
    "postdate":1336105860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.981739581,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.371448086,
    "TFIDF(informativeness)":1.295235595,
    "polarity":0,
    "normalized_text_entropy":3.981739581,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.337680078,
    "normalized_TFIDF":0.107326532,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Here's an example If it's a class field, you can get it by name like this. If it's a local method variable you are trying to invoke on, then you might be able to get at to the variable in from the current method from the call stackmaybe."
  },
  {
    "postid":6371,
    "postdate":1322603460,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.076799808,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.395022905,
    "TFIDF(informativeness)":1.517836397,
    "polarity":0,
    "normalized_text_entropy":4.076799808,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.359111732,
    "normalized_TFIDF":0.125771804,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You might have to rephrase the question.If you just want to get the \"aaaa\" and \"bbb\" strings from the initial string, you can use "
  },
  {
    "postid":6372,
    "postdate":1322604780,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.436500728,
    "concept_entropy":4.366399592,
    "UMASS(coherence)":0.807747861,
    "TFIDF(informativeness)":0.618261125,
    "polarity":1,
    "normalized_text_entropy":4.436500728,
    "normalized_concept_entropy":4.366399592,
    "normalized_UMASS":0.734316237,
    "normalized_TFIDF":0.051230697,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It is hard to make out what you are asking, but you can fetch field values by name using reflection.Something like this: (I've left out a lot of exception handling ...) But as a comment points out, if you are really trying to implement an associative array, there are better ways of doing this in Java; e.g. using a class."
  },
  {
    "postid":6373,
    "postdate":1351501920,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.302921639,
    "concept_entropy":0,
    "UMASS(coherence)":0.852363982,
    "TFIDF(informativeness)":0.764863408,
    "polarity":5,
    "normalized_text_entropy":4.302921639,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.774876347,
    "normalized_TFIDF":0.063378537,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"If your String is a member field of your object, you can go take a look at the class. However, I have to warn you that the code that you'll end up with will be by far longer than what you expect here. Indeed, you'll have to do some operations : Each of these steps will eb a rather obscure line of code, with a bunch of throwed exceptions. So, if you have an alternative, well, use it !"
  },
  {
    "postid":6374,
    "postdate":1351502940,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.329944693,
    "concept_entropy":4.388448142,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.843346504,
    "polarity":1,
    "normalized_text_entropy":4.329944693,
    "normalized_concept_entropy":4.388448142,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.069881847,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have custom components on a jPanel and i would like to work with them without repainting them. I knwo if i use a List or Map that it is possible but i have to change the value in the Map and then repaint the GUI with the infomration in the Map. "
  },
  {
    "postid":6375,
    "postdate":1351502460,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.375915884,
    "concept_entropy":4.392785293,
    "UMASS(coherence)":0.618354357,
    "TFIDF(informativeness)":0.795543923,
    "polarity":3,
    "normalized_text_entropy":4.375915884,
    "normalized_concept_entropy":4.392785293,
    "normalized_UMASS":0.562140325,
    "normalized_TFIDF":0.065920803,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I am writing a Bytecode instrumenter. Right now, I am trying to find out how to do that in the presence of objects. I would like some clarifications on two lines I read in the JVMS (section 4.9.4): My question is, what does \"uses\" mean here? I'm guessing that it means: passing it as a method attribute, calling and on it, or calling any instance method on it. Are their other forbidden uses? And I believe that it follows that other instructions such as, and are allowed. Which means that in an method, GETFIELD and PUTFIELD are allowed before another is called. However, in Java, doing any operation on an instance field before a call to or results in a compilation error. Could someone clarify this? 3) I have one more question. When does an object reference becomes initialized, and hence, ready to be freely used? From reading the JVMS, I came up with the answer that whether an object is initialized or not, is up to each method. At a certain point in time, the object can be initialized for a method but not for the other. Specifically, an object becomes initialized for a method when called by that method returns. For example, consider that the method created an object and called which then called the superclass's. After returning from, the object is now considered initialized by , but is not yet initialized for. Does this mean, in after, I can pass the object as a parameter to a method, even before returning from to main(). Could someone confirm that this whole analysis is true? Thank you for your time.ps: I have actually posted the same question to the Sun forums but with on response. I hope I'll have more luck here. Thank you. First thank you for your answers and time. Although I didn't get a clear-cut answer (I had many questions and some of them were a bit vague), your answers and examples, and the subsequent experiments, were extremely useful for me in understanding more deeply how the JVM works. The main thing I discovered is that the Verifier's behavior differ with different implementations and versions (which makes the job of bytecode manipulation much more complicated). The problem lies in either a non-conformity to the JVMS, or a lack of documentation from the verifier's developers, or the JVMS has some subtle vagueness in the verifier's area. One last thing, SO Rocks!!! I posted the same question in the official Sun JVM Specifications forum, and I still got no answer till now."
  },
  {
    "postid":6376,
    "postdate":1323670200,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.30381053,
    "concept_entropy":4.505324873,
    "UMASS(coherence)":0.781386512,
    "TFIDF(informativeness)":1.600774166,
    "polarity":5,
    "normalized_text_entropy":4.30381053,
    "normalized_concept_entropy":4.505324873,
    "normalized_UMASS":0.710351375,
    "normalized_TFIDF":0.132644239,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"I suggest that you download a copy of the OpenJDK sources and look at what the verifier is actually checking.If nothing else, that may help you understand what the JMV specification is saying. (However, @Joachim is right.Relying on what the verifier implementation does rather than what the specification says is rather risky.)"
  },
  {
    "postid":6377,
    "postdate":1323670500,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.363953982,
    "concept_entropy":4.365336764,
    "UMASS(coherence)":0.711192073,
    "TFIDF(informativeness)":0.415058192,
    "polarity":4,
    "normalized_text_entropy":4.363953982,
    "normalized_concept_entropy":4.365336764,
    "normalized_UMASS":0.646538248,
    "normalized_TFIDF":0.034392783,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"In bytecode verification, since the verifier works at link-time, the types of local variables of methods are inferred. The types of method arguments are known as they are in the method signature in the class file. The types of other local variables are not known and are inferred, so I assume the in the above statement relates to this. EDIT:Thesection 4.9.4 of the reads: This assignment of fields in the above statement is the \"initial\" initialization of the instance variables to default initial values (like int is 0, float is 0.0f etc.) when the memory for the object is allocated. There is one more \"proper\" initialization of instance variables when the virtual machine invokes the instance initialization method(constructor) on the object. The provided by John Horstmann helped clarify things. So these statements dont hold true. \"This DOESNOT mean that in an method, and are allowed before another is called.\"The and instructions are used to access (and change) the instance variables(fields) of a class (or instance of a class). And this can happen only when the instance variables(fields) are initialized.\" From the JVMS :And only after this can you use and. The java compiler generates atleast one instance initialization method(constructor) for every class it compiles. If the class declares no constructors explicitly, the compiler generated a default no-arg constructor that just invokes the superclass no-arg constructor. And rightly so doing any operation on an instance field before a call to or results in a compilation error. An method can contain three kinds of code: an invocation of another method, code that implements any instance variable initializers, and code for the body of the constructor. If a constructor begins with an explicit invocation of another constructor in the same class (a invocation) its corresponding method will be composed of two parts: If a constructor does not begin with a invocation and the class is not Object, the method will have three components: If a constructor does not begin with a invocation and the class is Object(and Object has no superclass), then its method cant begin with a superclass method invocation.If a constructor begins with an explicit invocation of a superclass constructor ( a invocation), its method will invoke the corresponding superclassmethod. I think this answers your first and second question. For example,Heres the bytecode for the above three constructors from the compiler(javac): In the first constructor, the method begins with calling the same-class method and then executed the body of the corresponding constructor. Because the constructor begins with a, its corresponding method doesnot contain bytecode for initializing the instance variables. In the second constructor, the method for the constructor has "
  },
  {
    "postid":6378,
    "postdate":1323670440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.391209278,
    "concept_entropy":4.4457533,
    "UMASS(coherence)":0.51606166,
    "TFIDF(informativeness)":0.89200088,
    "polarity":-11,
    "normalized_text_entropy":4.391209278,
    "normalized_concept_entropy":4.4457533,
    "normalized_UMASS":0.469146964,
    "normalized_TFIDF":0.073913473,
    "normalized_polarity":0.055555556,
    "tagtext":"inheritance",
    "posttext":"Contrary to what the java language specifies, at the bytecode level it possible to access fields of a class in a constructor before calling the superclass constructor. The following code uses the asm library to create such a class: Instantiation this class works fine, without any verification errors:"
  },
  {
    "postid":6379,
    "postdate":1323670500,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.332374057,
    "concept_entropy":4.588446791,
    "UMASS(coherence)":0.548315748,
    "TFIDF(informativeness)":1.097347761,
    "polarity":0,
    "normalized_text_entropy":4.332374057,
    "normalized_concept_entropy":4.588446791,
    "normalized_UMASS":0.498468862,
    "normalized_TFIDF":0.09092904,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have two object arrays like so: I would like to know if the arrays are equal.I'm defining equal as every value in array1 is the same as the value in that position in the array2.So these two arrays would be equal.What is the best why to find out if these two arrays are equal? is not a deep equals so that won't work and I don't know if looping over each element and comparing them is the best and most efficient way to solve this problem. Does anyone have any better suggestions? Edit: I needed an equals that can go into nested arrays."
  },
  {
    "postid":6380,
    "postdate":1323670500,
    "tag":"1",
    "TFMvalue":0.9,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.262252131,
    "concept_entropy":4.493190278,
    "UMASS(coherence)":0.401087848,
    "TFIDF(informativeness)":0.283860274,
    "polarity":1,
    "normalized_text_entropy":4.262252131,
    "normalized_concept_entropy":4.493190278,
    "normalized_UMASS":0.364625316,
    "normalized_TFIDF":0.023521388,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Use. This does the same job as but also works with nested arrays."
  },
  {
    "postid":6381,
    "postdate":1323670440,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.357018738,
    "concept_entropy":4.387113118,
    "UMASS(coherence)":0.600577095,
    "TFIDF(informativeness)":1.634646682,
    "polarity":1,
    "normalized_text_entropy":4.357018738,
    "normalized_concept_entropy":4.387113118,
    "normalized_UMASS":0.545979177,
    "normalized_TFIDF":0.135451002,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6382,
    "postdate":1300624320,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.143210319,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.68272398,
    "polarity":0,
    "normalized_text_entropy":4.143210319,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.056572254,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"To compare arrays, I would use the Arrays.equals method:"
  },
  {
    "postid":6383,
    "postdate":1300624860,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.256640614,
    "concept_entropy":0,
    "UMASS(coherence)":0.664777331,
    "TFIDF(informativeness)":0.820200534,
    "polarity":1,
    "normalized_text_entropy":4.256640614,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.604343028,
    "normalized_TFIDF":0.067963913,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In the example you've posted the arrays will actually contain objects. In that case, is enough. However, if your arrays contain some objects of yours, you have to implement in your class so that work"
  },
  {
    "postid":6384,
    "postdate":1300624620,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.350053041,
    "concept_entropy":0,
    "UMASS(coherence)":0.520864438,
    "TFIDF(informativeness)":1.798478875,
    "polarity":0,
    "normalized_text_entropy":4.350053041,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.473513125,
    "normalized_TFIDF":0.149026557,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Generally utility class is very usefull."
  },
  {
    "postid":6385,
    "postdate":1300624920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.586351632,
    "concept_entropy":3.884858892,
    "UMASS(coherence)":0.567425191,
    "TFIDF(informativeness)":1.405133947,
    "polarity":0,
    "normalized_text_entropy":4.586351632,
    "normalized_concept_entropy":3.884858892,
    "normalized_UMASS":0.515841083,
    "normalized_TFIDF":0.11643299,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" should give you what you are looking for."
  },
  {
    "postid":6386,
    "postdate":1300624800,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.358823019,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.926266661,
    "polarity":0,
    "normalized_text_entropy":4.358823019,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.076752823,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm looking for an solution to generate a checksum for any type of Java object, which remains the same for every exection of an application which produces the same object. I tried it with, but as I read in the api thank you, best regard alex"
  },
  {
    "postid":6387,
    "postdate":1300626120,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.242781631,
    "concept_entropy":0,
    "UMASS(coherence)":0.488243965,
    "TFIDF(informativeness)":1.142710782,
    "polarity":0,
    "normalized_text_entropy":4.242781631,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.44385815,
    "normalized_TFIDF":0.094687936,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I had similar problem (generating good hashcode for XML files) and I found out that the best solution is to use MD5 through or in case you need something faster:. Please notice that even if would be the same every time it is anyway too short (only 32 bits) to ensure high uniqueness. I think 64 bits is a minimum to compute good hash code. Please be aware that MD5 generates 128 bits long hash code, which should is even more that needed in this situation. Of course to use you need serialize (in your case marshall) the object first."
  },
  {
    "postid":6388,
    "postdate":1256136660,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.288011346,
    "concept_entropy":4.510431343,
    "UMASS(coherence)":0.3854411,
    "TFIDF(informativeness)":3.309336483,
    "polarity":2,
    "normalized_text_entropy":4.288011346,
    "normalized_concept_entropy":4.510431343,
    "normalized_UMASS":0.350401,
    "normalized_TFIDF":0.27422008,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I think you should look at. Serialization mechanism needs to solve similar problem, so you can look how it's implemented.But if you describe the problem you're trying to solve you'll probably get more precise solution."
  },
  {
    "postid":6389,
    "postdate":1256136840,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.323091616,
    "concept_entropy":0,
    "UMASS(coherence)":0.480771776,
    "TFIDF(informativeness)":1.271947287,
    "polarity":2,
    "normalized_text_entropy":4.323091616,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.437065251,
    "normalized_TFIDF":0.105396803,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"If you control the source, you can implement hashCode() so it will be consistent from one execution to another."
  },
  {
    "postid":6390,
    "postdate":1256137140,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.2164051,
    "concept_entropy":4.343928774,
    "UMASS(coherence)":0.493874742,
    "TFIDF(informativeness)":0.891189232,
    "polarity":0,
    "normalized_text_entropy":4.2164051,
    "normalized_concept_entropy":4.343928774,
    "normalized_UMASS":0.448977038,
    "normalized_TFIDF":0.073846218,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Do you want to be able to do this for Java objects? In that case doesn't work. For some classes has a stricter definition which guarantees equality across executions. For example has a well-defined implementation. Similarly and have well-defined values, provided all objects that they contain have well-defined values (note that the general does require the value to be well-defined). For other classes you will have to use reflection recursively with some well-defined formula to build a checksum."
  },
  {
    "postid":6391,
    "postdate":1256136840,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.036884174,
    "concept_entropy":4.311096887,
    "UMASS(coherence)":0.649399948,
    "TFIDF(informativeness)":0.433216988,
    "polarity":3,
    "normalized_text_entropy":4.036884174,
    "normalized_concept_entropy":4.311096887,
    "normalized_UMASS":0.590363589,
    "normalized_TFIDF":0.035897467,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"The Apache commons lang library provides a class which helps building a hash code that fills your requirements from the class properties. Example: See "
  },
  {
    "postid":6392,
    "postdate":1343038080,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.328590004,
    "concept_entropy":4.412389501,
    "UMASS(coherence)":0.48002122,
    "TFIDF(informativeness)":1.885410207,
    "polarity":-1,
    "normalized_text_entropy":4.328590004,
    "normalized_concept_entropy":4.412389501,
    "normalized_UMASS":0.436382927,
    "normalized_TFIDF":0.156229909,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If you're f you're using Eclipse IDE then it has actions (under Source menu) to generate hashcode and equals functions. It allows you to choose the attributes of the class you want in the hashcode. This is similar to using the HashCodeBuilder approach that has already been suggested. Alternatively you could stream the object to a byte array and generate an MD5 of that."
  },
  {
    "postid":6393,
    "postdate":1343052840,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.251031079,
    "concept_entropy":0,
    "UMASS(coherence)":0.487526779,
    "TFIDF(informativeness)":0.801975621,
    "polarity":1,
    "normalized_text_entropy":4.251031079,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.443206163,
    "normalized_TFIDF":0.06645375,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Hashcode is OK. Either given class overrides and also, as contract demands,. By contract, if returns hashcode must be the same. Or class doesn't override. In this case different executions of your application cannot produce object, so there is no problem. The only problem is that some classes (even from Java API) break contract for."
  },
  {
    "postid":6394,
    "postdate":1343038680,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.919140359,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.324314677,
    "TFIDF(informativeness)":0.614712162,
    "polarity":0,
    "normalized_text_entropy":3.919140359,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.294831525,
    "normalized_TFIDF":0.050936621,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Example"
  },
  {
    "postid":6395,
    "postdate":1343039340,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.20537008,
    "concept_entropy":4.451987856,
    "UMASS(coherence)":0.490433892,
    "TFIDF(informativeness)":1.231620998,
    "polarity":0,
    "normalized_text_entropy":4.20537008,
    "normalized_concept_entropy":4.451987856,
    "normalized_UMASS":0.445848993,
    "normalized_TFIDF":0.102055264,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am a newbie in java. Say, I have a class. I want to printAbove code gives output like this:"
  },
  {
    "postid":6396,
    "postdate":1343043420,
    "tag":"1",
    "TFMvalue":0.529411765,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.280963649,
    "concept_entropy":4.537374284,
    "UMASS(coherence)":0.600451943,
    "TFIDF(informativeness)":1.829270445,
    "polarity":-2,
    "normalized_text_entropy":4.280963649,
    "normalized_concept_entropy":4.537374284,
    "normalized_UMASS":0.545865403,
    "normalized_TFIDF":0.151578025,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"If you want to print meaningful content of any object, you have to implement your own method, which will override the parent( ) class's method. By default all the classes(Whatever you create) extends class. Sample Code: Output: If you have bigger class with many variables, you can use to implement your toString() method. XStream will print your object meaningful in XML format. Even you can parse them back to equivalent object. Hope this would help you. "
  },
  {
    "postid":6397,
    "postdate":1333728480,
    "tag":"1",
    "TFMvalue":0.615384615,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.156533556,
    "concept_entropy":4.535165006,
    "UMASS(coherence)":0.59223351,
    "TFIDF(informativeness)":0.547677519,
    "polarity":0,
    "normalized_text_entropy":4.156533556,
    "normalized_concept_entropy":4.535165006,
    "normalized_UMASS":0.5383941,
    "normalized_TFIDF":0.045381959,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This is the result of default toString() method - the classname + hashcode. This can be override by overriding toString(). Some reference here: "
  },
  {
    "postid":6398,
    "postdate":1333728900,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.409289595,
    "concept_entropy":4.567199486,
    "UMASS(coherence)":0.633591749,
    "TFIDF(informativeness)":2.065571853,
    "polarity":-3,
    "normalized_text_entropy":4.409289595,
    "normalized_concept_entropy":4.567199486,
    "normalized_UMASS":0.575992499,
    "normalized_TFIDF":0.171158563,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"I think you want to overwrite Individual toString. See()"
  },
  {
    "postid":6399,
    "postdate":1312609260,
    "tag":"1",
    "TFMvalue":0.733333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.292756566,
    "concept_entropy":0,
    "UMASS(coherence)":0.639702756,
    "TFIDF(informativeness)":1.825548782,
    "polarity":2,
    "normalized_text_entropy":4.292756566,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.58154796,
    "normalized_TFIDF":0.151269638,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Since it hasn't been explained yet, overriding the toString() method simply means that you create a toString() method of your own in your class. By putting your own version of toString() in your class, you make it so that java will use your toString() method rather than the default. Because the original toString() method returns a string, however, your toString() method must also return a string. Your Individual class would look something like this: Then, when you called your System.out.print(ind); it would print out your string."
  },
  {
    "postid":6400,
    "postdate":1312609440,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.198911358,
    "concept_entropy":4.241516955,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.987712146,
    "polarity":1,
    "normalized_text_entropy":4.198911358,
    "normalized_concept_entropy":4.241516955,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.081844353,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have a Map containing a mixture of types like in this simple example What I get back are plains, nos, nos. The output looks like Can I fix it somehow? I'd expect that such simple cases will be handled correctly by default.The serialized version (i.e. the above) looks fine:"
  },
  {
    "postid":6401,
    "postdate":1312609560,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.202820347,
    "concept_entropy":4.406179613,
    "UMASS(coherence)":0.524503719,
    "TFIDF(informativeness)":0.943110812,
    "polarity":-1,
    "normalized_text_entropy":4.202820347,
    "normalized_concept_entropy":4.406179613,
    "normalized_UMASS":0.476821563,
    "normalized_TFIDF":0.078148573,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Gson isn't that smart. Rather provide a clear and static data structure in flavor of a Javabean class so that Gson understands what type the separate properties are supposed to be deserialized to. E.g. in combination with : as per the comments, the keyset seems to be not fixed (although you seem to be able to convert it manually afterwards without knowing the structure beforehand). You could create a. Here's a quick'n'dirty example. which you use as follows:"
  },
  {
    "postid":6402,
    "postdate":1291040580,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.242914863,
    "concept_entropy":0,
    "UMASS(coherence)":0.431024977,
    "TFIDF(informativeness)":1.078271146,
    "polarity":-1,
    "normalized_text_entropy":4.242914863,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.391840888,
    "normalized_TFIDF":0.089348303,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6403,
    "postdate":1291041120,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.418052228,
    "concept_entropy":4.732672985,
    "UMASS(coherence)":0.653531768,
    "TFIDF(informativeness)":1.623030783,
    "polarity":-4,
    "normalized_text_entropy":4.418052228,
    "normalized_concept_entropy":4.732672985,
    "normalized_UMASS":0.594119789,
    "normalized_TFIDF":0.134488479,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"Upgrade to. It prints this:"
  },
  {
    "postid":6404,
    "postdate":1291041300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.469882542,
    "concept_entropy":0,
    "UMASS(coherence)":0.629385243,
    "TFIDF(informativeness)":0.547221458,
    "polarity":0,
    "normalized_text_entropy":4.469882542,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.572168403,
    "normalized_TFIDF":0.045344169,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You are storing the data in a Map.It looks like you need to cast the object to the type you need."
  },
  {
    "postid":6405,
    "postdate":1291041180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.382478582,
    "concept_entropy":0,
    "UMASS(coherence)":0.491152558,
    "TFIDF(informativeness)":0.851170372,
    "polarity":-3,
    "normalized_text_entropy":4.382478582,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.446502325,
    "normalized_TFIDF":0.070530153,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"If you want a JSON string from, I think is better choice than. This is a brief example from : Result:For decoding, refer to ."
  },
  {
    "postid":6406,
    "postdate":1291041540,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.285209518,
    "concept_entropy":3.905704802,
    "UMASS(coherence)":0.488986883,
    "TFIDF(informativeness)":0.488851169,
    "polarity":0,
    "normalized_text_entropy":4.285209518,
    "normalized_concept_entropy":3.905704802,
    "normalized_UMASS":0.44453353,
    "normalized_TFIDF":0.040507457,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"How can I convert the java Object into a InputStream?"
  },
  {
    "postid":6407,
    "postdate":1324150140,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.287333654,
    "concept_entropy":0,
    "UMASS(coherence)":0.389732582,
    "TFIDF(informativeness)":1.331254676,
    "polarity":1,
    "normalized_text_entropy":4.287333654,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.354302347,
    "normalized_TFIDF":0.110311165,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can useYou write the object (obj in the code below) to the, your object you want to convert to an input stream must implement."
  },
  {
    "postid":6408,
    "postdate":1324150260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.472096834,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.418926243,
    "polarity":3,
    "normalized_text_entropy":4.472096834,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.117575855,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Is a primitive or is it considered an object? When i send it as a parameter to a function, does it send its reference (like an object) or its value (like a primitive)?"
  },
  {
    "postid":6409,
    "postdate":1258305600,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.916530173,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.412018833,
    "polarity":0,
    "normalized_text_entropy":3.916530173,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034140934,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Every Java array is an Object. When you pass it as an argument, you pass a copy of the reference to the array."
  },
  {
    "postid":6410,
    "postdate":1258306740,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.398691785,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.155159839,
    "polarity":2,
    "normalized_text_entropy":4.398691785,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.178582053,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Arrays are objects.Arrays of arrays are also objects. Java doesn't really have multidimensional arrays as such, just support for arrays of arrays. "
  },
  {
    "postid":6411,
    "postdate":1364802660,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.322422487,
    "concept_entropy":3.905704802,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.206820747,
    "polarity":2,
    "normalized_text_entropy":4.322422487,
    "normalized_concept_entropy":3.905704802,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.100000252,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"In java, arrays are full blown objects. Having said that, all primitives and object references in java are always passed by value and never by reference. In the case of objects, the object is passed by value. The difference between this and passing by reference is subtle but significant."
  },
  {
    "postid":6412,
    "postdate":1364803020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.247053662,
    "concept_entropy":4.422458292,
    "UMASS(coherence)":0.414982957,
    "TFIDF(informativeness)":1.14519969,
    "polarity":1,
    "normalized_text_entropy":4.247053662,
    "normalized_concept_entropy":4.422458292,
    "normalized_UMASS":0.377257234,
    "normalized_TFIDF":0.094894173,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"When an array of objects is not referenced anymore, does the objects in that array are garbage collected too? (assuming no variables are referencing the elements) In this page,it says - \"The biggest danger is placing an object into a collection and forgetting to remove it. The memory used by that object will never be reclaimed.\" If you make sure to nullify the references, why will that memory be unclaimed? Thanks"
  },
  {
    "postid":6413,
    "postdate":1364808060,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.127083176,
    "concept_entropy":4.214892586,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.363077095,
    "polarity":0,
    "normalized_text_entropy":4.127083176,
    "normalized_concept_entropy":4.214892586,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.030085496,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Yes. This is when you holding a reference to the collection. For example, if you have a in which you put a key-value and then forget to remove then it stays there for ever. Think http sessions, if you use something in or some such at start of request using session id as key but fail to remove it at end of the request processing.."
  },
  {
    "postid":6414,
    "postdate":1358480640,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.503967012,
    "concept_entropy":0,
    "UMASS(coherence)":0.380821421,
    "TFIDF(informativeness)":1.303000553,
    "polarity":0,
    "normalized_text_entropy":4.503967012,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.346201292,
    "normalized_TFIDF":0.107969956,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"For the first question, the answer is yes, absolutely: the objects inside non-referenced array and no other references do get garbage collected. As for the second question, the document talks about placing forgetting an object inside a collection, for example a cache of some sort, a static field, a thread-local store, etc. "
  },
  {
    "postid":6415,
    "postdate":1358480820,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.159709186,
    "concept_entropy":0,
    "UMASS(coherence)":0.613730549,
    "TFIDF(informativeness)":1.530135397,
    "polarity":0,
    "normalized_text_entropy":4.159709186,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.557936863,
    "normalized_TFIDF":0.12679093,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It won't be unclaimed if nothing references it. The article says that if you nullify a reference, but the object is still in a referenced collection (hence referenced), it won't be collected."
  },
  {
    "postid":6416,
    "postdate":1358481300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.705229003,
    "concept_entropy":0,
    "UMASS(coherence)":0.339669305,
    "TFIDF(informativeness)":1.165131575,
    "polarity":2,
    "normalized_text_entropy":3.705229003,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.308790277,
    "normalized_TFIDF":0.09654578,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Generally speaking, anything that's not referenced is garbage collected.So, yes, those objects would be garbage collected. Also, note that:"
  },
  {
    "postid":6417,
    "postdate":1358481000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.328198012,
    "concept_entropy":0,
    "UMASS(coherence)":0.409129278,
    "TFIDF(informativeness)":1.273868191,
    "polarity":2,
    "normalized_text_entropy":4.328198012,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.371935707,
    "normalized_TFIDF":0.105555974,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Afteris the Thread object a candidate for the GC? "
  },
  {
    "postid":6418,
    "postdate":1358481660,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.268665435,
    "concept_entropy":3.617809684,
    "UMASS(coherence)":0.551795722,
    "TFIDF(informativeness)":1.629323356,
    "polarity":0,
    "normalized_text_entropy":4.268665435,
    "normalized_concept_entropy":3.617809684,
    "normalized_UMASS":0.501632475,
    "normalized_TFIDF":0.135009898,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If it's started, it's not eligible for GC - the code that's running can ask for, after all. If you just created it but didn't start it, like this: then I suspect it be eligible for GC - but it's pretty unusual to create a thread without starting it. (I guess an exception could be thrown before you got round to starting it...)"
  },
  {
    "postid":6419,
    "postdate":1363550640,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.250915775,
    "concept_entropy":4.604943889,
    "UMASS(coherence)":0.684537939,
    "TFIDF(informativeness)":0.956557962,
    "polarity":0,
    "normalized_text_entropy":4.250915775,
    "normalized_concept_entropy":4.604943889,
    "normalized_UMASS":0.622307217,
    "normalized_TFIDF":0.079262838,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"No, its not eligible for Garbage Collection. Since, the thread is scheduled in the runnable queue by the Thread Scheduler( after calling), it won't be eligible for GC. One of the methods to check if the thread is still running or not is to call. The method returns true if the thread upon which it is called is still running. It returns false otherwise. In your case,you can always call method, just to check whether the thread is alive or not. When the thread stops or end's its lifecycle or is not yet scheduled to run (like Jon's Code Snippet), then it's eligible for GC. "
  },
  {
    "postid":6420,
    "postdate":1328380260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.221101878,
    "concept_entropy":4.5652385,
    "UMASS(coherence)":0.735169132,
    "TFIDF(informativeness)":0.98123989,
    "polarity":2,
    "normalized_text_entropy":4.221101878,
    "normalized_concept_entropy":4.5652385,
    "normalized_UMASS":0.668335575,
    "normalized_TFIDF":0.081308045,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You only need to protect a Thread if you want to retain it after it has finished.It cannot be GC'ed while it is running (or anything the Thread uses)"
  },
  {
    "postid":6421,
    "postdate":1328381460,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":0,
    "concept_entropy":4.424437602,
    "UMASS(coherence)":0.662806723,
    "TFIDF(informativeness)":0.809385877,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.424437602,
    "normalized_UMASS":0.602551566,
    "normalized_TFIDF":0.067067783,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"To pass an array to oracle procedure we use and objects. What objects do I have to use to pass an object to a stored procedure?"
  },
  {
    "postid":6422,
    "postdate":1328381340,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.414560356,
    "concept_entropy":4.354633464,
    "UMASS(coherence)":0.409385987,
    "TFIDF(informativeness)":0.826996291,
    "polarity":1,
    "normalized_text_entropy":4.414560356,
    "normalized_concept_entropy":4.354633464,
    "normalized_UMASS":0.372169079,
    "normalized_TFIDF":0.068527027,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The ArrayDesciptor and ARRAY classes (as well as StructDescriptor and STRUCT) map to Oracle TYPES - i.e. objects created something like... If you have access to the java, you should be able to see where the ArrayDescriptor is constructed and get the database type name from that. You can use these oracle types as parameters to functions and procedures."
  },
  {
    "postid":6423,
    "postdate":1373080020,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.370125469,
    "concept_entropy":4.39882125,
    "UMASS(coherence)":0.497363818,
    "TFIDF(informativeness)":0.873047976,
    "polarity":4,
    "normalized_text_entropy":4.370125469,
    "normalized_concept_entropy":4.39882125,
    "normalized_UMASS":0.452148925,
    "normalized_TFIDF":0.072342987,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"I have two classes. One(Person) for getters and setters, and another(People) for compute the data. What is my situation is, I get the data from the DB using, then createda person Object to store the row data. Then i created people Object to store all persons. Each Object created as SET.Now the problem is the last line in the While LoopIt says How can i overcome this problem? Thanks."
  },
  {
    "postid":6424,
    "postdate":1373080080,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.284659422,
    "concept_entropy":0,
    "UMASS(coherence)":0.644854847,
    "TFIDF(informativeness)":0.830010637,
    "polarity":1,
    "normalized_text_entropy":4.284659422,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.586231679,
    "normalized_TFIDF":0.068776803,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"My understandig from your design is that you have a relation, so the class holds a collection of objects. Then I'd expect something like this: So in your database related code you wouldn't need to create another set, because already has the one you need:"
  },
  {
    "postid":6425,
    "postdate":1374571620,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.221203329,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.750909446,
    "polarity":0,
    "normalized_text_entropy":4.221203329,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.062222276,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I don't understand why you would want 2 classes in the first place. You cand have Person implement the computational part as well. But, nevertheless, what you could do: and then:"
  },
  {
    "postid":6426,
    "postdate":1374571980,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":14,
    "Normalized_count":0.233333333,
    "text_entropy":3.987300397,
    "concept_entropy":0,
    "UMASS(coherence)":0.261154132,
    "TFIDF(informativeness)":0.78112589,
    "polarity":0,
    "normalized_text_entropy":3.987300397,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.237412847,
    "normalized_TFIDF":0.064726088,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Based on what you are trying to do I feel, you should convert your Person to People class before adding to the set. Your People class may have a constructor which takes a Person as an argument and copies the required fields from Person to People. Here your code to add to set will look likeWhen you declare what it means is that this set is supposed to contain objects of 'type' People i.e. instances of People or instances of subclasses of People. If People is an interface, then the set may contain any object that implements the interface."
  },
  {
    "postid":6427,
    "postdate":1288475640,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.187022182,
    "concept_entropy":0,
    "UMASS(coherence)":0.298928342,
    "TFIDF(informativeness)":0.922937069,
    "polarity":0,
    "normalized_text_entropy":4.187022182,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.271753038,
    "normalized_TFIDF":0.076476925,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I understand is a data structure (bean-like, with getters and setters), and should contain all objects from the database and perform calculations on them. If that is true, first of all, you cannot declare people within the loop (because a new object will be created for each, and you don't want that, from what I understand). Second, needs to be able to contain Person objects. So it should at least be composed of a of objects. You can add more functionality as you please. So, try something like this: And use it like this, as the previous poster suggested:"
  },
  {
    "postid":6428,
    "postdate":1288525980,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.481099129,
    "concept_entropy":4.555950339,
    "UMASS(coherence)":0.515293788,
    "TFIDF(informativeness)":1.868254518,
    "polarity":-2,
    "normalized_text_entropy":4.481099129,
    "normalized_concept_entropy":4.555950339,
    "normalized_UMASS":0.468448898,
    "normalized_TFIDF":0.154808345,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"I don't think that should be written in the loop."
  },
  {
    "postid":6429,
    "postdate":1288488960,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.313325765,
    "concept_entropy":0,
    "UMASS(coherence)":0.357940854,
    "TFIDF(informativeness)":1.829217021,
    "polarity":3,
    "normalized_text_entropy":4.313325765,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.325400776,
    "normalized_TFIDF":0.151573598,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I'm relative new to C++ and my background is in Java. I have to port some code from Java to C++ and some doubts came up relative to the Object Java's class. So, if I want to port this: I believe I should use void* type or templates right? I don't know what's the \"standard\" procedure to accomplish it. Thanks"
  },
  {
    "postid":6430,
    "postdate":1288550160,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.180896956,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.371964984,
    "TFIDF(informativeness)":1.063798797,
    "polarity":1,
    "normalized_text_entropy":4.180896956,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.338149985,
    "normalized_TFIDF":0.088149087,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It depends what you want to do with. If you use a template, then any methods you call on will be bound at compile time tos type.This is type safe, and preferable, as any invalid use of the object will be flagged as compiler errors. You could also pass a and cast it to the desired type, assuming you have some way of knowing what it should be.This is more dangerous and more susceptible to bugs in your code.You can make it a little safer by using to enable run-time type checking."
  },
  {
    "postid":6431,
    "postdate":1366840440,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.365982811,
    "concept_entropy":4.467033924,
    "UMASS(coherence)":0.501565229,
    "TFIDF(informativeness)":1.821907997,
    "polarity":3,
    "normalized_text_entropy":4.365982811,
    "normalized_concept_entropy":4.467033924,
    "normalized_UMASS":0.45596839,
    "normalized_TFIDF":0.150967954,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"If you want to accept a pointer to an arbitrary object, then you would want the type to be. However, that would be the end of the function, you can't do anything with a except store it's value or cast it to a pointer to some known object. If you're going to cast it anyway, then you probably know what the object is, so you don't need the.C++ just doesn't have the same kinds of introspection abilities that Java has. In other words, there's not a convenient way to say something like. The closest thing that I'm aware of is runtime type information (RTTI), which you can see in action.The other alternative is to create your own root class, and write your own introspection methods (a lot of C++ frameworks do this). "
  },
  {
    "postid":6432,
    "postdate":1366840620,
    "tag":"1",
    "TFMvalue":0.6875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.08801827,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.441112036,
    "TFIDF(informativeness)":1.966236114,
    "polarity":0,
    "normalized_text_entropy":4.08801827,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.401010942,
    "normalized_TFIDF":0.16292735,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm studying Effective Java and in Item 5 of the Book, Joshua Bloch talks about the avoidance of creating unnecessary objects. An example demonstrates mutable Date objects that are never modified once their values have been computed. Here the 'bad practice': The isBabyBoomer method unnecessarily creates a new Calendar, TimeZone, and two Date instances each time it is invoked - and that clearly makes sense to me. And here the improved code: Calendar, TimeZone, and Date instances are created only once, when it is initialized.Bloch explains, that this results in significant performance gains if the methodis invoked frequently. On his machine: Bad Version: 32,000 ms for 10 million invocations Improved Version: 130ms for 10 million invocations But when I run the examples on my System the performance is exactly the same (14ms).Is that a compiler feature that the instances are only created once ? Edit: Here is my benchmark: Cheers, Markus"
  },
  {
    "postid":6433,
    "postdate":1366840680,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.245875038,
    "concept_entropy":4.424437602,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.023393038,
    "polarity":3,
    "normalized_text_entropy":4.245875038,
    "normalized_concept_entropy":4.424437602,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.250526075,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Your benchmark is wrong. With the newest Java 7 and a proper warmup I get a dramatic difference between the two methods: Here is the full runnable code:"
  },
  {
    "postid":6434,
    "postdate":1366841040,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.589898095,
    "concept_entropy":4.447707738,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.671257077,
    "polarity":0,
    "normalized_text_entropy":3.589898095,
    "normalized_concept_entropy":4.447707738,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.138484633,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Your question turned out to be just another case of a wrong microbenchmark. However, in some special cases (mostly with simple data-holding classes), there really is a JVM optimization that discards most of object instantiations. You might want to look at the links below. The methods described there are obviously not applicable in your case, but it might make the difference in some other strange cases where object instantiation just doesn't seem to taky any time. So remember this for when you actually come across the working example of your question: The most relevant part:"
  },
  {
    "postid":6435,
    "postdate":1366840620,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.288951445,
    "concept_entropy":0,
    "UMASS(coherence)":0.550126439,
    "TFIDF(informativeness)":2.905643581,
    "polarity":0,
    "normalized_text_entropy":4.288951445,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.500114945,
    "normalized_TFIDF":0.240769054,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I've searched about the size of a java object for a long time, there are a lot of answers like, everyone is telling me that the size of the overhead of a java object, and how to calculate out the actual size. But how do they know that? I did not find any evidence from the official oracle documents. What is the evidence for that conclusion? Or the data was just come from some guesses based on some experiments?Another thing. It is mentioned in the official document that there is a 'approximative' way to measure the object - the way, can anybody explain to me what is the 'approximately' means? When it is accurate, when it is not. Better to have the evidence."
  },
  {
    "postid":6436,
    "postdate":1334066040,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.225995382,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.390247397,
    "polarity":0,
    "normalized_text_entropy":4.225995382,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.115199453,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"from experience. Its up to the JVM. For OpenJDK based JVMs, 32-bit JVM has a different header size to 64-bit JVM as the header contains a reference. Other JVMs could be different again. Essentially, yes. When you measure the size of an object it can means many different things Given you can have many difference answers depending on what you need to know, it is useful to have one number which is approximately close to all of these which you use for calculations. Where you get a problem using Runtime is that the TLAB allocated data in large blocks.These large blocks can be further allocated in a multi-thread way. The downside is you don't get accurate memory used information. run without options Turn off the TLAB and you see withThis is much higher than you might expect because the class itself had to be loaded.If you create one instance of a Float first by adding to the start you get"
  },
  {
    "postid":6437,
    "postdate":1334066160,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.332915596,
    "concept_entropy":0,
    "UMASS(coherence)":0.494698644,
    "TFIDF(informativeness)":1.234226045,
    "polarity":0,
    "normalized_text_entropy":4.332915596,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.44972604,
    "normalized_TFIDF":0.102271125,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I think the answer can only be empirical as it is:"
  },
  {
    "postid":6438,
    "postdate":1334066520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.458275049,
    "concept_entropy":4.551381861,
    "UMASS(coherence)":0.623805662,
    "TFIDF(informativeness)":0.843679144,
    "polarity":3,
    "normalized_text_entropy":4.458275049,
    "normalized_concept_entropy":4.551381861,
    "normalized_UMASS":0.567096056,
    "normalized_TFIDF":0.06990941,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"For me the best method is the most down-to-earth one, usingThere may be some transient allocation in the process, so you also need to run the GC. There are no guarantees provided by, but this approach has always worked for me: You must be careful to ensure this gives stable results. For example, an approach is to calculate memory load for several different object counts and compare results. They should all match on the memory/instance answer they give. I have advised this before, been put down for the lame solution, been recommended to use proper tooling, etc. So I used tooling, for example��ΗΔand it gave results. This method has to me."
  },
  {
    "postid":6439,
    "postdate":1316719920,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.339120966,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.699994173,
    "TFIDF(informativeness)":0.615168123,
    "polarity":1,
    "normalized_text_entropy":4.339120966,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.636358339,
    "normalized_TFIDF":0.050974403,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"there are two different sizes for java objects: the shallow size and the retained size.the of an object is the sum of sizes of all it's fields: straight-forward for primitive members, and the size of a pointer for every non-primitive member(and this varies between 32 & 64 bit architectures). you can find the shallow size of an object at runtime using instrumantation. is defined by the heap space that will be freed when the object is garbaged.finding the retained size of an object is not trivial, mainly because objects are usually composed of other objects. for example: what is the retained size of a? and b? use a profiler to compute retained size (most profilers are using static heap analysis for that). "
  },
  {
    "postid":6440,
    "postdate":1316720400,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.356897056,
    "concept_entropy":4.271671697,
    "UMASS(coherence)":0.352251973,
    "TFIDF(informativeness)":1.922954506,
    "polarity":0,
    "normalized_text_entropy":4.356897056,
    "normalized_concept_entropy":4.271671697,
    "normalized_UMASS":0.320229066,
    "normalized_TFIDF":0.159340926,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I've seen so many different posts about what way you're supposed to serialize an object to a file, and all of them conflict in nature on how to do it and what the best practices are.So here's what I'm trying to save: We can assume that the size of configArgs is known that I need to make a file, here's what I have so far."
  },
  {
    "postid":6441,
    "postdate":1316720220,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.320828034,
    "concept_entropy":0,
    "UMASS(coherence)":0.37208639,
    "TFIDF(informativeness)":1.460515045,
    "polarity":0,
    "normalized_text_entropy":4.320828034,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.338260355,
    "normalized_TFIDF":0.12102201,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Well I assume, you want to write object directly into the file I just provided important code. Implement this with exception handling."
  },
  {
    "postid":6442,
    "postdate":1265372160,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.972290949,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.237352763,
    "TFIDF(informativeness)":0.957388171,
    "polarity":1,
    "normalized_text_entropy":3.972290949,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.215775239,
    "normalized_TFIDF":0.079331631,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"An example of how to serialize an object: For more info "
  },
  {
    "postid":6443,
    "postdate":1265372460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.831235582,
    "concept_entropy":0,
    "UMASS(coherence)":0.352041067,
    "TFIDF(informativeness)":1.303640387,
    "polarity":0,
    "normalized_text_entropy":4.831235582,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.320037334,
    "normalized_TFIDF":0.108022975,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can use the XMLDecoder/XMLEncoder to serialize JavaBean as xml.Here are the examples from oracle's Javadocs on the two classes: (XMLDecoder) (XMLEncoder) Note that you would need to add getters and setters and make the class serializable."
  },
  {
    "postid":6444,
    "postdate":1265385060,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.382136355,
    "concept_entropy":0,
    "UMASS(coherence)":0.514479352,
    "TFIDF(informativeness)":1.465939327,
    "polarity":2,
    "normalized_text_entropy":4.382136355,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.467708502,
    "normalized_TFIDF":0.12147148,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"do you want to write IHandler into test.txt file? tryif you want read IHandler from that file, need do this"
  },
  {
    "postid":6445,
    "postdate":1265372460,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.299325011,
    "concept_entropy":0,
    "UMASS(coherence)":0.386716786,
    "TFIDF(informativeness)":1.095832685,
    "polarity":0,
    "normalized_text_entropy":4.299325011,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.351560715,
    "normalized_TFIDF":0.090803497,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am working on development of an application to process (and merge) several large java serialized objects (size of order GBs) using Hadoop framework. Hadoop stores distributes blocks of a file on different hosts. But as deserialization will require the all the blocks to be present on single host, its gonna hit the performance drastically. How can I deal this situation where different blocks have to cant be individually processed, unlike text files ?"
  },
  {
    "postid":6446,
    "postdate":1347887460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.370853719,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.820832188,
    "polarity":1,
    "normalized_text_entropy":4.370853719,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.068016253,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"There's two issues: one is that each file must (in the initial stage) be processed in whole: the mapper that sees the first byte must handle all the rest of that file. The other problem is locality: for best efficiency, you'd like all the blocks for each such file to reside on the same host. Processing files in whole: One simple trick is to have the first-stage mapper process a, not their contents. If you want 50 map jobs to run, make 50 files each with that fraction of the filenames. This is easy and works with java or streaming hadoop.Alternatively, use a non-splittable input format such as. For more details, see \" \" and \" \" on the hadoop wiki. Locality: This leaves a problem, however, that the blocks you are reading from are disributed all across the HDFS: normally a performance gain, here a real problem.I don't believe there's any way to chain certain blocks to travel together in the HDFS. Is it possible to place the files in each node's local storage? This is actually the most performant and easiest way to solve this: have each machine start jobs to process all the files in e.g. (being as clever as you care to be about efficiently using local partitions and number of CPU cores). If the files originate from a SAN or from say s3 anyway, try just pulling from there directly: it's built to handle the swarm. A note on using the first trick: If some of the files are much larger than others, put them alone in the earliest-named listing, to avoid issues with speculative execution. You might turn off speculative execution for such jobs anyway if the tasks are dependable and you don't want some batches processed multiple times."
  },
  {
    "postid":6447,
    "postdate":1265373360,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.31878639,
    "concept_entropy":0,
    "UMASS(coherence)":0.821273269,
    "TFIDF(informativeness)":1.945868313,
    "polarity":0,
    "normalized_text_entropy":4.31878639,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.746612063,
    "normalized_TFIDF":0.161239622,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It sounds like your input file is one big serialized object. Is that the case? Could you make each item its own serialized value with a simple key? For example, if you were wanting to use Hadoop to parallelize the resizing of images you could serialize each image individually and have a simple index key. Your input file would be a text file with the key values pairs being index key and then serialized blob would be the value.I use this method when doing simulations in Hadoop. My serialized blob is all the data needed for the simulation and the key is simply an integer representing a simulation number. This allows me to use Hadoop (in particular Amazon Elastic Map Reduce) like a grid engine."
  },
  {
    "postid":6448,
    "postdate":1265441400,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.20622377,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.090856047,
    "polarity":0,
    "normalized_text_entropy":4.20622377,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.09039112,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I think the basic (unhelpful) answer is that you can't really do this, since this runs directly counter to the MapReduce paradigm. Units of input and output for mappers and reducers are records, which are relatively small. Hadoop operates in terms of these, not file blocks on disk. Are you sure your process needs everything on one host? Anything that I'd describe as a merge can be implemented pretty cleanly as a MapReduce where there is no such requirement. If you mean that you want to ensure certain keys (and their values) end up on the same reducer, you can use a to define how keys are mapped onto reducer instances. Depending on your situation, this may be what you really are after. I'll also say it kind of sounds like you are trying to operate on HDFS files, rather than write a Hadoop MapReduce. So maybe your question is really about how to hold open severals on HDFS, read their records and merge, manually. This isn't a Hadoop question then, but, still doesn't need blocks to be on one host. "
  },
  {
    "postid":6449,
    "postdate":1299687480,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.266546514,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.290796355,
    "polarity":0,
    "normalized_text_entropy":4.266546514,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.106958685,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have an object which itself has multiple objects as fields. The question I have is, I have two objects of these kind and I want to compare these two. I know I can do equals, comparator etc. but is there a way to use reflection to get the properties of the object and make comparison.for example, if I have a Car object, which as wheels object, which has tires object, which has bolts object. Please remember all the above objects are individual and not nested classes. How do I compare 2 car objects?Any help is appreciated? Thanks"
  },
  {
    "postid":6450,
    "postdate":1359466680,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.980776669,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.723652588,
    "polarity":1,
    "normalized_text_entropy":3.980776669,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.059963703,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"is the correct approach. Automatic comparison via reflection is not recommended. For one thing \"state\" is a more generic concept than reflected property comparison. You could write something that did deep reflection comparison but it's kinda missing the point."
  },
  {
    "postid":6451,
    "postdate":1308219360,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.578506733,
    "concept_entropy":0,
    "UMASS(coherence)":0.571835556,
    "TFIDF(informativeness)":3.943819043,
    "polarity":-3,
    "normalized_text_entropy":4.578506733,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.519850505,
    "normalized_TFIDF":0.326794927,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":" has an class that does exactly this (see the methods)also provides more explicit methods for null-safe comparison of specific fields, which makes writing \"proper\" (i.e. non-reflective) equals methods a bit less onerous."
  },
  {
    "postid":6452,
    "postdate":1308219720,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.397915544,
    "concept_entropy":0,
    "UMASS(coherence)":0.375694131,
    "TFIDF(informativeness)":1.34950772,
    "polarity":0,
    "normalized_text_entropy":4.397915544,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.341540119,
    "normalized_TFIDF":0.111823659,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Most modern IDE's have generators for hashcode and equals which let you select the properties to take into account. Those beat performance of their reflective counterparts easily. "
  },
  {
    "postid":6453,
    "postdate":1308219780,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.233975395,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.055788768,
    "polarity":0,
    "normalized_text_entropy":4.233975395,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.087485356,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The idea is interesting, but please be aware that reflection can be slow. If you need to do a lot of comparisons, or you are putting your objects in collection classes that do comparisons (for example, etc.) then comparing objects via reflection can become a performance bottleneck."
  },
  {
    "postid":6454,
    "postdate":1308220200,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.029187712,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.324326838,
    "polarity":0,
    "normalized_text_entropy":4.029187712,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.109737107,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6455,
    "postdate":1305832500,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.06146788,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.345982996,
    "polarity":0,
    "normalized_text_entropy":4.06146788,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.111531592,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Is it good to use hashmap instead of using the object class......Using Hashmap.... And using object class..... Please tell me in the context of application health, memory requirement etc ..."
  },
  {
    "postid":6456,
    "postdate":1305832800,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.840459292,
    "concept_entropy":4.493776654,
    "UMASS(coherence)":0.839149951,
    "TFIDF(informativeness)":5.273419562,
    "polarity":26,
    "normalized_text_entropy":4.840459292,
    "normalized_concept_entropy":4.493776654,
    "normalized_UMASS":0.762863592,
    "normalized_TFIDF":0.436969024,
    "normalized_polarity":0.740740741,
    "tagtext":"inheritance",
    "posttext":"This depends a lot on what you are trying to achieve: for flexibility, hash map is better. But the flexibility comes at a price: hash map is also larger and slower than a class with the identical number of strongly-typed fields. There is also an impact on readability: when you business logic is specific to a class with a fixed number of fields, a special-purpose class clearly wins; when the fields are configured dynamically, hash table is your only option. You could also have a hybrid design, when an object uses a hash map for its storage internally, presents nicely named fields externally, and exposes semantics to add more \"fields\" as you go. To summarize, before you decide to go with a hash map for its flexibility, you should decide if you really need all that flexibility in your design. Sometimes, the answer is \"yes\", and sometimes it is \"no\"; there is no \"one size fits all\" solution to this."
  },
  {
    "postid":6457,
    "postdate":1305832740,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.229399905,
    "concept_entropy":0,
    "UMASS(coherence)":0.47462949,
    "TFIDF(informativeness)":1.623588323,
    "polarity":1,
    "normalized_text_entropy":4.229399905,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.431481355,
    "normalized_TFIDF":0.134534678,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"An object has fields (data) and methods (behaviour). If your data consists in a fixed set of cells (A, B and C), then definitely use an object.Java is an OO object, and OO design, encapsulation etc. are there to help you build robust, maintainable and fast programs. A Map is useful when you must associate a variable number of keys and values. But it's simply a data structure, and doesn't allow you to encapsulate additional behavior. For example, you might have a getAAndB() method in your object that returns A concatenated with B. Or you might have methods to transform or query the fields. Or you could pass ABC instances to other objects that make use of them. Using an object ABD with well-defined methods is much easier than using a. What are the keys of the map? What are their values? Where is it documented? What if you want to change the keys? How will you detect all the places in the code where these keys are used?"
  },
  {
    "postid":6458,
    "postdate":1305832800,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.262031286,
    "concept_entropy":0,
    "UMASS(coherence)":0.485063518,
    "TFIDF(informativeness)":1.111843014,
    "polarity":0,
    "normalized_text_entropy":4.262031286,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.440966835,
    "normalized_TFIDF":0.092130154,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You should see this as a \"design\" issue before performance. No need to do upfront premature optimization in favour of good design. So, the question is: In most cases I wouldn't do it but it's hard to say a definitive or a definitive without knowing the larger context.30-40K: Number of records is irrelevant for the Object vs HashMap comparison because they're going to be handled in a loop (disclaimer: irrelevant in terms of design not in terms of performance). However the number of columns in your spreadsheet is important as this is going to be reflected directly as the number of attributes in your object. If this is just a or exercise then I'd go with the HashMap approach. Assuming that ABC will be a short-lived, throwaway data container object without behaviour, there's no need to create it. Then I'd test the performance of the system and if it doesn't satisfy the acceptance criteria then I'd profile it and optimize it only if necessary. "
  },
  {
    "postid":6459,
    "postdate":1305832800,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.99055086,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.900652417,
    "polarity":0,
    "normalized_text_entropy":3.99055086,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.074630361,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"got a little problem im hoping someone can enlighten me on. Trying to serialise a Java Object of my own creation which is made up of other Java Objects (Again of my own creation). It was running fine until I get this error when the jdbc attempts to run the PreparedStatement storing the Object as a blob. Im running MySQL as the database and have checked that all my objects which im attempting to store in the blob field are defined as \"implements Serializable\". I have attempted to try a normal BLOB datatype in MySQL and also MedBlob. Im running MySQL client version: 5.1.41 via Xampp. Code is below: Error stack is below: Thanks for the help. Lewis EDIT: Fixed code is below."
  },
  {
    "postid":6460,
    "postdate":1292499420,
    "tag":"1",
    "TFMvalue":0.769230769,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.399725845,
    "concept_entropy":4.521864277,
    "UMASS(coherence)":0.611254553,
    "TFIDF(informativeness)":1.705107674,
    "polarity":1,
    "normalized_text_entropy":4.399725845,
    "normalized_concept_entropy":4.521864277,
    "normalized_UMASS":0.555685957,
    "normalized_TFIDF":0.14128958,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" is a. Since you use it as a name for your column, you need to escape the name like this: "
  },
  {
    "postid":6461,
    "postdate":1292499720,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.306720949,
    "concept_entropy":0,
    "UMASS(coherence)":0.813586919,
    "TFIDF(informativeness)":1.635050285,
    "polarity":0,
    "normalized_text_entropy":4.306720949,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.739624472,
    "normalized_TFIDF":0.135484446,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a class of 'Character', Character is non-static. I want my player class to extend Character but to also be static. I basically want all other objects and classes to be able to access player without having to create and pass a player instance. What's the best why to achieve this?"
  },
  {
    "postid":6462,
    "postdate":1292499600,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.321928095,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.305377476,
    "polarity":0,
    "normalized_text_entropy":3.321928095,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.025304358,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The only nice way I can think of is actually not an extension but a wrapper: Of course you can also extend AND wrap: Or, actually, since your goal is just to guarantee that there is a single player object, you can forget about making the methods static, but hide the constructor(s): That ensures that the only way to get a is to call, and that it always gives you the same object (you never create more than one)."
  },
  {
    "postid":6463,
    "postdate":1292499600,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.409497409,
    "concept_entropy":4.690437422,
    "UMASS(coherence)":0.487720296,
    "TFIDF(informativeness)":0.966456254,
    "polarity":-5,
    "normalized_text_entropy":4.409497409,
    "normalized_concept_entropy":4.690437422,
    "normalized_UMASS":0.443382087,
    "normalized_TFIDF":0.080083036,
    "normalized_polarity":0.166666667,
    "tagtext":"inheritance",
    "posttext":"Really it seems like you just want a global variable.This is often accomplished through the Singleton pattern: There should be very little need for those methods in Player to be static. You're sacrificing good design for a tiny bit of convenience (that will probably bite you later anyway). Personally I favour dependency injection over global state about 95% of the time.When a method needs to have access to the player, pass it in.That will let you test your code much more easily and will make your code more conducive to change."
  },
  {
    "postid":6464,
    "postdate":1292499660,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.087426603,
    "concept_entropy":4.679378914,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.630399166,
    "polarity":-2,
    "normalized_text_entropy":4.087426603,
    "normalized_concept_entropy":4.679378914,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.052236486,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"I am new to Java and getting an error for the following case: But, after removing the first line, it works fine.What is the issue?"
  },
  {
    "postid":6465,
    "postdate":1286850720,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.098257312,
    "concept_entropy":4.628350771,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.959114253,
    "polarity":0,
    "normalized_text_entropy":4.098257312,
    "normalized_concept_entropy":4.628350771,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.079474659,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Variable names are only references. They point to a space in memory (in the heap) which contains an object. When you do, it does two things: create the object in memory, and point the myObject reference to it.So when you do, it follows the reference, and check the sections part of your object in memory. Then when you do, you basically destroy the link between your reference and your object in memory. Hence when doing, Java cannot follow the reference anymore because it's not pointing to anything. So it throws aNote that the object itself is destroyed by, only the reference is nullified. The Garbage Collector then detects that your object is unreachable (if there's no other reference to it) and reclaims the memory, destroying the object."
  },
  {
    "postid":6466,
    "postdate":1286850960,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.1763455,
    "concept_entropy":4.64802758,
    "UMASS(coherence)":0.749581735,
    "TFIDF(informativeness)":1.026884712,
    "polarity":-4,
    "normalized_text_entropy":4.1763455,
    "normalized_concept_entropy":4.64802758,
    "normalized_UMASS":0.681437941,
    "normalized_TFIDF":0.085090292,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"This is exactly what it should do. By assigning to a variable, you explicitly state that it is no longer bound to an instance.So when you refer to in your code, you refer to the member of a non-existent instance."
  },
  {
    "postid":6467,
    "postdate":1286855820,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.750861688,
    "concept_entropy":4.570918621,
    "UMASS(coherence)":0.790648429,
    "TFIDF(informativeness)":0.50629881,
    "polarity":0,
    "normalized_text_entropy":3.750861688,
    "normalized_concept_entropy":4.570918621,
    "normalized_UMASS":0.718771299,
    "normalized_TFIDF":0.041953214,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The issue is that once you say it points it memory to null, ie it does not initiate any memory objects to it. So you get a null pointer error.By the way, if you are trying to instantiate its value as null then try to give its internal data property as null, ex.Maybe it varies for the class that you are using. Check it out at."
  },
  {
    "postid":6468,
    "postdate":1276602660,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.33223815,
    "concept_entropy":3.974937501,
    "UMASS(coherence)":0.390690095,
    "TFIDF(informativeness)":1.465911114,
    "polarity":-3,
    "normalized_text_entropy":4.33223815,
    "normalized_concept_entropy":3.974937501,
    "normalized_UMASS":0.355172814,
    "normalized_TFIDF":0.121469142,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"you are trying to access the member of a null object.. that is the problem.. if you want a new instance..then do the following.."
  },
  {
    "postid":6469,
    "postdate":1276602900,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.113313146,
    "concept_entropy":3.974937501,
    "UMASS(coherence)":0.402646705,
    "TFIDF(informativeness)":0.957912551,
    "polarity":0,
    "normalized_text_entropy":4.113313146,
    "normalized_concept_entropy":3.974937501,
    "normalized_UMASS":0.366042459,
    "normalized_TFIDF":0.079375082,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You assign a value to a field of an object which is referred to by. However, since doesn't refer to any object (it is set to), the assignment can't take place, and you will get a NullPointerException instead. If you don't want the exception to appear, you should first assign an object to."
  },
  {
    "postid":6470,
    "postdate":1276602900,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.201135026,
    "concept_entropy":0,
    "UMASS(coherence)":0.542857624,
    "TFIDF(informativeness)":1.172098965,
    "polarity":-1,
    "normalized_text_entropy":4.201135026,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.493506931,
    "normalized_TFIDF":0.097123116,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If you mark an object null you cannot assign values to its member variables."
  },
  {
    "postid":6471,
    "postdate":1276603740,
    "tag":"1",
    "TFMvalue":0.545454545,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.410479803,
    "concept_entropy":0,
    "UMASS(coherence)":0.358287282,
    "TFIDF(informativeness)":1.181115224,
    "polarity":-1,
    "normalized_text_entropy":4.410479803,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.325715711,
    "normalized_TFIDF":0.097870226,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"My method takes as input an Object. How do i determine it's type, then cast it accordingly? So for example:Inside the binarySearch method, i need a way to determine the type (or class) of Object o. Then i need to cast it with that type. how would i do that??? And more specifically, Object o is a child of a base class (EG SalariedEmp is child of Employee), and i specifically need the base class. EDIT:I figured out how to do what I wanted, which really should be a completely different question. I needed to use the .compareTo method from to set up a way to compare two objects based on private data from those objects. All i had to do was implement my class as 'Comparable' using the keyword. So no matter what Type of objects are compared in my binarySearch method, it works if they are of the same (unknown) type and have Comparable implemented. This makes my binarySearch method very re-usable with any type of comparable class. So, in all fairness, I'll accept the answer that covers the original question. :)"
  },
  {
    "postid":6472,
    "postdate":1311856680,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.251774825,
    "concept_entropy":0,
    "UMASS(coherence)":0.379319911,
    "TFIDF(informativeness)":0.957067673,
    "polarity":0,
    "normalized_text_entropy":4.251774825,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.344836283,
    "normalized_TFIDF":0.079305074,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Two ways to do this:"
  },
  {
    "postid":6473,
    "postdate":1311856980,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.450702815,
    "concept_entropy":4.629377633,
    "UMASS(coherence)":0.863010708,
    "TFIDF(informativeness)":4.161868268,
    "polarity":-1,
    "normalized_text_entropy":4.450702815,
    "normalized_concept_entropy":4.629377633,
    "normalized_UMASS":0.784555189,
    "normalized_TFIDF":0.344863043,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6474,
    "postdate":1311856920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.052110892,
    "concept_entropy":4.364414555,
    "UMASS(coherence)":0.66959382,
    "TFIDF(informativeness)":0.897296435,
    "polarity":1,
    "normalized_text_entropy":4.052110892,
    "normalized_concept_entropy":4.364414555,
    "normalized_UMASS":0.608721655,
    "normalized_TFIDF":0.074352276,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can use RTTI (Run-Time Type Identification) by using the instanceof operator or by calling .getClass() on the instance, but that's almost always an indication that the super-type you're using is either the wrong super-type, or is badly designed. In your case, you don't need to be using Object, as you already know that you at least have an Employee. The Object Oriented paradigm is that you don't ask an object instance it is, you ask it to do something. In this case, you have a choice of several thing you might want to ask an Employee object to do. Which one is the best choice for you depends on exactly what you're trying to model: You could ask it if it is salaried, and then possibly cast it, by adding a virtual method to the Employee base class. The base method would return false, but a SalariedEmployee would override that method and return true. But while that avoids (the likely more expensive) RTTI, it doesn't avoid the cast. You could add a method SalariedEmployee asSalariedEmployee(), which in the base class would return null and in a SalariedEmployee would return. That gives you a \"safe\" cast, but you still need a test against null. Or you could just add a Money getSalary() method to Employee.Now you don't have to do any casting, but you'd need to decide what the salary of a non-salaried employee is; that could be null, zero, or NaN (the special Not a Number value). If you decided to return null, in some cases (e.g, adding values) you'd have to test against null, in others (e.g, passing the salary to .equals()) you wouldn't need to test against null, as any instance.equals(null) should return false by the specification for Object.equals(). If you return zero, you can add without testing against null, but equals might be a bit weird -- is it really true that two hourly workers, each of whom get no salary, have the same (nonexistent) salary? That depends on what you're modeling. If it is true, return zero. If it's not true that two hourly workers have the same non-existent salary, return a NaN value. This is justa specific case of the \"Null Object Pattern\"."
  },
  {
    "postid":6475,
    "postdate":1311856980,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.210525545,
    "concept_entropy":4.068555311,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.985295697,
    "polarity":1,
    "normalized_text_entropy":4.210525545,
    "normalized_concept_entropy":4.068555311,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.08164412,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'm not sure which one of my methods that's not working. When i create accounts from addSavingsAccount everything is working fine, but when I want to print out the info from two classes it prints name and pNr but shows the first accountnumber to all clients. What's wrong with this?"
  },
  {
    "postid":6476,
    "postdate":1311856800,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.346701574,
    "concept_entropy":4.068555311,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.802558938,
    "polarity":-1,
    "normalized_text_entropy":4.346701574,
    "normalized_concept_entropy":4.068555311,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.066502085,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I am not sure I see enough code, but it looks like you're trying to set things up so that each has an account ID.However, your method is going to return a different value each time it's called, even when called on the same, because it will increment a counter each time it's called. What you need to do is to declare an instance member such as in the, and set it when a new is created:is the only place you want to use the.Then, would return the instance member, without incrementing anything."
  },
  {
    "postid":6477,
    "postdate":1320529620,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.925621207,
    "concept_entropy":4.194455718,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.687209929,
    "polarity":1,
    "normalized_text_entropy":3.925621207,
    "normalized_concept_entropy":4.194455718,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.056943971,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'm stuck. Coming from C++ I thought this would simply work, but it does not. Can you please give me an advice? I will try to not end up with kind of creation method in each class used for T. Also i don't want to have constructor looking like: A(Class classT){ ...Ideally i would like to have something like this c++ code. Thanks for help."
  },
  {
    "postid":6478,
    "postdate":1382550900,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.419531975,
    "concept_entropy":4.529054704,
    "UMASS(coherence)":0.578512353,
    "TFIDF(informativeness)":1.880945391,
    "polarity":-1,
    "normalized_text_entropy":4.419531975,
    "normalized_concept_entropy":4.529054704,
    "normalized_UMASS":0.525920321,
    "normalized_TFIDF":0.155859943,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You cannot do such things in Java. Read about type erasure: "
  },
  {
    "postid":6479,
    "postdate":1382551020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.236315273,
    "concept_entropy":4.30491692,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.994757072,
    "polarity":0,
    "normalized_text_entropy":4.236315273,
    "normalized_concept_entropy":4.30491692,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.082428114,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Besides the issue of type erasure -- which makes this impossible in any event -- you simply can't guarantee that has an exposed, no-argument constructor! The traditional workaround is to pass around that provide methods that can be used to obtain objects.A simplistic example would be and then your class can get a and call on it to get mores.More sophisticated examples might require additional arguments to a method, for example, or overloads. Less-pretty workarounds include explicit reflection, passing around objects.For example, returns a newly constructed raw.You have to explicitly pass around the object, and the reflection-based approach is slower than a normal constructor or a factory object (even though the speed of reflection has been improving lately).You also depend on the class exposing a no-arg constructor, which isn't always the case.It can be made to work, but it's never what I'd call \"pleasant.\" (That said, for reference, there are indications that the situation may change somewhat in Java 8 with Project Lambda and friends.)"
  },
  {
    "postid":6480,
    "postdate":1338825120,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.201934892,
    "concept_entropy":3.427333494,
    "UMASS(coherence)":0.491152558,
    "TFIDF(informativeness)":1.169392361,
    "polarity":0,
    "normalized_text_entropy":4.201934892,
    "normalized_concept_entropy":3.427333494,
    "normalized_UMASS":0.446502325,
    "normalized_TFIDF":0.09689884,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Sorry to disapoint you but this is just plain impossible in java without constructors. Java throws away the generic information at runtime (see type erasure)"
  },
  {
    "postid":6481,
    "postdate":1338892860,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.022141119,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.463873715,
    "TFIDF(informativeness)":1.179523945,
    "polarity":1,
    "normalized_text_entropy":4.022141119,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.421703377,
    "normalized_TFIDF":0.097738369,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"try this:"
  },
  {
    "postid":6482,
    "postdate":1338833280,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.342400772,
    "concept_entropy":3.923260325,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.872831813,
    "polarity":1,
    "normalized_text_entropy":4.342400772,
    "normalized_concept_entropy":3.923260325,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.155187631,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Hello I would like to know how many objects are created with this array? Thanks in advance!"
  },
  {
    "postid":6483,
    "postdate":1338833640,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.230849914,
    "concept_entropy":4.675584292,
    "UMASS(coherence)":0.562540829,
    "TFIDF(informativeness)":1.236854373,
    "polarity":-8,
    "normalized_text_entropy":4.230849914,
    "normalized_concept_entropy":4.675584292,
    "normalized_UMASS":0.511400754,
    "normalized_TFIDF":0.102488915,
    "normalized_polarity":0.111111111,
    "tagtext":"inheritance",
    "posttext":"Nine objects are created. Each String is TWO objects. The String reference, and the String's underlying. So for 4 strings, that's 8 objects. Then, there is the itself for a total of 9. This of course assumes the String literal has not beened yet by the JVM. If it has, then it will not create the, but instead pull it from the pool, which could give you a total of 1, 3, 5, 7, or the original 9 objects created, depending on how manys areed."
  },
  {
    "postid":6484,
    "postdate":1332604380,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":4.445136224,
    "UMASS(coherence)":0.476133312,
    "TFIDF(informativeness)":0.271822424,
    "polarity":-3,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.445136224,
    "normalized_UMASS":0.432848465,
    "normalized_TFIDF":0.022523901,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"Between 1 and 5 depending on JVM implementation and state. A new String array is apparently created, the Strings - we don't know. EDIT: As someone pointed out in other answers. 1-9 would be a more precise answer. Since you create a char[] inside a String when it gets constructed."
  },
  {
    "postid":6485,
    "postdate":1332606420,
    "tag":"1",
    "TFMvalue":0.615384615,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.320919358,
    "concept_entropy":0,
    "UMASS(coherence)":0.607052697,
    "TFIDF(informativeness)":0.965455001,
    "polarity":1,
    "normalized_text_entropy":4.320919358,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.551866088,
    "normalized_TFIDF":0.080000069,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The answer is none, because can't create objects, only can. :P"
  },
  {
    "postid":6486,
    "postdate":1332606360,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.322789996,
    "concept_entropy":4.277971855,
    "UMASS(coherence)":0.65073337,
    "TFIDF(informativeness)":1.06882237,
    "polarity":-2,
    "normalized_text_entropy":4.322789996,
    "normalized_concept_entropy":4.277971855,
    "normalized_UMASS":0.591575791,
    "normalized_TFIDF":0.088565354,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"You should get 5 distinct hashCode.A strong suggestion that there now exists 5 objects in your heap."
  },
  {
    "postid":6487,
    "postdate":1395875640,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.186024328,
    "concept_entropy":4.518680728,
    "UMASS(coherence)":0.608385233,
    "TFIDF(informativeness)":3.011224978,
    "polarity":1,
    "normalized_text_entropy":4.186024328,
    "normalized_concept_entropy":4.518680728,
    "normalized_UMASS":0.553077485,
    "normalized_TFIDF":0.249517799,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"HI, Five objects are created. If you are using then the jvm will create one object on heap. But if you are providing elements to array for e.g. then the jvm will create six object with five integer and one array object on heap."
  },
  {
    "postid":6488,
    "postdate":1395876360,
    "tag":"1",
    "TFMvalue":0.708333333,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.349235037,
    "concept_entropy":4.47914597,
    "UMASS(coherence)":0.614230415,
    "TFIDF(informativeness)":2.606436933,
    "polarity":1,
    "normalized_text_entropy":4.349235037,
    "normalized_concept_entropy":4.47914597,
    "normalized_UMASS":0.558391286,
    "normalized_TFIDF":0.215976027,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Depending on how you look at it, you could say 9 objects or just one.If you look at this array in a debugger you will be able to see 9 objects, the array, the String objects and the char[] in those char[]. However the String literals are in a pool and are not created each time (only once) So if you run this line many times you will be only creating the array each time. i.e. only one additional object is created."
  },
  {
    "postid":6489,
    "postdate":1395876060,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.472143508,
    "concept_entropy":4.307799417,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.046375039,
    "polarity":1,
    "normalized_text_entropy":4.472143508,
    "normalized_concept_entropy":4.307799417,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.169567866,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Hi I would like to know diff between the above comparisons? I am getting null pointer exception when I check.But if I change it to, it workes fine. I did look into thisBut I didnt get satisfactory answer."
  },
  {
    "postid":6490,
    "postdate":1395876120,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.962103165,
    "concept_entropy":3.910440495,
    "UMASS(coherence)":0.576125451,
    "TFIDF(informativeness)":1.774149611,
    "polarity":0,
    "normalized_text_entropy":3.962103165,
    "normalized_concept_entropy":3.910440495,
    "normalized_UMASS":0.52375041,
    "normalized_TFIDF":0.147010572,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"No. and are equivalent. Perhaps you're mixing it up with the fact thatand can make a difference (since the second alternative could result in a NPE)."
  },
  {
    "postid":6491,
    "postdate":1395878880,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.502223853,
    "TFIDF(informativeness)":1.378846555,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.456567139,
    "normalized_TFIDF":0.11425475,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If I have JungleCat as a subclass of Cat (JungleCat Cat), and then I say: I'm wondering what are the object types of,,,, and?I'm also wondering why there's redundancy in instantiating an object: why do you need to list two object types when you instantiate an object. I'm sorry if this is a really basic question, but it's the sort of thing where I just want to know and with a good answer with good reasoning, which I know I can expect here (and not Yahoo Answers, etc) :P"
  },
  {
    "postid":6492,
    "postdate":1396013700,
    "tag":"1",
    "TFMvalue":0.769230769,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.383869875,
    "concept_entropy":4.53156714,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.925540031,
    "polarity":0,
    "normalized_text_entropy":4.383869875,
    "normalized_concept_entropy":4.53156714,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.159555169,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In the below statement: - You can break it up in two parts: - Now, you are making the reference, point to the object. References are nothing but a link to the object that is created, so that you can access them. You can also create object just like this: - But, in the above case, you will only be able to use the methods and properties at the place where you have instantiated. But, later on, since you have no reference to access that object, you can't access it's properties either. Now, let's move ahead to the 2nd statement: - Here, as you can guess, you have reference of type, and an object of type. This is what we call. So, basically, you can create a reference of any super type, and make it point to an object of any subtype. This is pretty simple to understand -This is not true the other way round. For e.g.: - Now this is not valid. Because a is not neccessarily a. It can be any other Cat. So, you can't have your reference point to a object. Now here's your: - Well,,.. are not objects, but are references pointing to some objects. And you can infer from the above explanation, the reference type of each of them. Object types are the type used on the RHS of the object creation statement. The type used with keyword, is the type of the. You can have different types of reference pointing to the same object type.So, you can have both, and references pointing to the same object type."
  },
  {
    "postid":6493,
    "postdate":1388349720,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.154999896,
    "concept_entropy":0,
    "UMASS(coherence)":0.562892544,
    "TFIDF(informativeness)":1.387048708,
    "polarity":0,
    "normalized_text_entropy":4.154999896,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.511720495,
    "normalized_TFIDF":0.114934401,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"When you instantiate an Object you have to specify So basically a you need to create a JungleCat object and also create a reference pointing to it. The reference pointing to it is capable of pointing to Cat(JungleCat, PetCat and all cats) in case ofand only JungleCats ifAbout Object types will be what you are assigning to it from right hand side of assignment operater. AboutYes because, a cat need not be a JungleCat(only thing we know about it is that, it is a cat), but a JungleCat is a cat for sure. Thats whyis valid"
  },
  {
    "postid":6494,
    "postdate":1389963240,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.474191357,
    "concept_entropy":0,
    "UMASS(coherence)":0.496071961,
    "TFIDF(informativeness)":1.382639799,
    "polarity":0,
    "normalized_text_entropy":4.474191357,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.45097451,
    "normalized_TFIDF":0.114569068,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I don't know what \"object type\" means in this context. I'd recommend instead thinking of things in terms of and. The point of the \"redundancy\" is because Java is statically typed and also supports dynamic dispatching. The static typing requires that variables have a declared type; the dynamic dispatching allows the run-time type to be different from the declared type. For example, you could assign more than one object to the same variable during the course of your program's execution: The declared type of determines what methods can be invoked via that variable: Likewise it determines what methods cannot be invoked via that variable: This allows a variable's behavior to vary by run-time type - polymorphism - while still having compile time checking."
  },
  {
    "postid":6495,
    "postdate":1388350320,
    "tag":"1",
    "TFMvalue":0.733333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.303585296,
    "concept_entropy":4.139051054,
    "UMASS(coherence)":0.495385303,
    "TFIDF(informativeness)":1.418738831,
    "polarity":0,
    "normalized_text_entropy":4.303585296,
    "normalized_concept_entropy":4.139051054,
    "normalized_UMASS":0.450350275,
    "normalized_TFIDF":0.117560326,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Yes. A derived class reference can't point to it's base class. Use methos to know. This is called. i.e. one base class reference can point to any of it's derived class."
  },
  {
    "postid":6496,
    "postdate":1388350380,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.305282757,
    "concept_entropy":4.555472248,
    "UMASS(coherence)":0.494698644,
    "TFIDF(informativeness)":1.3653193,
    "polarity":1,
    "normalized_text_entropy":4.305282757,
    "normalized_concept_entropy":4.555472248,
    "normalized_UMASS":0.44972604,
    "normalized_TFIDF":0.113133847,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" work as the of is assigned to the of the.And as this is a the "
  },
  {
    "postid":6497,
    "postdate":1388350140,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.257677861,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.34331784,
    "TFIDF(informativeness)":0.842741858,
    "polarity":0,
    "normalized_text_entropy":4.257677861,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.312107127,
    "normalized_TFIDF":0.069831744,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This is the fundamental principle behind polymorphism. The type of each object is what appears on the left hand side of the expression, however, it will act like whatever is on the right hand side. For example, let's think of a function like so: Now, we assume our classes are something like: Now, let's instanstiate some objects: Passing into our function: Assume we modified the function like so: Then will obviously not compile, as it's a. What about? This also won't compile, as we've said it's also of type. We know that it's actually a, but we've told the compiler \"ok, just treat this like it's a normal type\". What's often missing in a lot of these beginner examples is motivation as for someone would want to do this. Cats and Animals and the like are often poor examples. For a better example, suppose we have some code which is meant to do different things based on what operating system it's running on; say moving a file around. If it runs on, we want to move a file to say, if it's on Windows,. So we define an interface like so: Now, we don't know which system this code is going to run on until runtime - so we can do a runtime check and instantiate the proper class at runtime: Likewise, any functions can simply take a - they don't care what - hence we don't have to write two function definitions every time we want to use a different kind of, eg and, we can simply replace this with one function, pass in the correct type, and it will \"just work\". This is probably a lot more info than the question requires, but hopefully it also gives you some intuition as to why such things are done in a slightly more concrete way than the usual Cats and Dogs."
  },
  {
    "postid":6498,
    "postdate":1379513760,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.31626804,
    "concept_entropy":4.398904875,
    "UMASS(coherence)":0.579897257,
    "TFIDF(informativeness)":1.488471875,
    "polarity":-3,
    "normalized_text_entropy":4.31626804,
    "normalized_concept_entropy":4.398904875,
    "normalized_UMASS":0.527179325,
    "normalized_TFIDF":0.123338584,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"So Im using Netbeans and the Design tab, placing labels, textboxes, etc.Great, however when you double-click on say a label it autogenerated this code: Now I didn't want it to do that, but when I highlight and attempt to delete it - Netbeans does not allow me to do so.How do I go about removing this?"
  },
  {
    "postid":6499,
    "postdate":1379514960,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.222681804,
    "concept_entropy":0,
    "UMASS(coherence)":0.34331784,
    "TFIDF(informativeness)":1.279651269,
    "polarity":4,
    "normalized_text_entropy":4.222681804,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.312107127,
    "normalized_TFIDF":0.106035175,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"In the Design mode you select the particular object and click Events under Properties and remove the event from the event property"
  },
  {
    "postid":6500,
    "postdate":1379513940,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.287850221,
    "concept_entropy":0,
    "UMASS(coherence)":0.587370312,
    "TFIDF(informativeness)":2.09333014,
    "polarity":2,
    "normalized_text_entropy":4.287850221,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.533973011,
    "normalized_TFIDF":0.173458686,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"To answer Brian's question on the more general case:If you have auto-generated variables that are hiding in the Design mode, and you cannot select and remove them, you can usually delete them with the following steps: (in NetBeans7.4) Go in the Design mode to the top window menu -> Windows -> Navigator. You will see Group \"Navigator\" popped up on the left (usually). Now you can delete unwanted variables (or edit them) with the right click menu."
  },
  {
    "postid":6501,
    "postdate":1379514000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.266258055,
    "concept_entropy":0,
    "UMASS(coherence)":0.533607828,
    "TFIDF(informativeness)":1.857047519,
    "polarity":0,
    "normalized_text_entropy":4.266258055,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.485098025,
    "normalized_TFIDF":0.153879704,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Section 10.2 of Java conventions recommends using class names instead of objects to use static variables or methods, i.e. or instead ofThere is no explanation of the rationale behind this, although I suspect this has something to do with memory use. It would be great if someone could explain this."
  },
  {
    "postid":6502,
    "postdate":1379520780,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.277794938,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.488243126,
    "polarity":0,
    "normalized_text_entropy":4.277794938,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.040457073,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I guess you mean \"for static methods and variables\". There is no difference regarding memory, except of course if you create the instance just for calling the method. Conventions aren't for memory efficiency but for coder efficiency, which is directly related with the readability of the code. The rationale is that by readingyou know it's a static method and that it can't use or change your instance. And if you writethen the reader has to read your source code to know if variable1 is static or not."
  },
  {
    "postid":6503,
    "postdate":1341932940,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.294391133,
    "concept_entropy":4.439223986,
    "UMASS(coherence)":0.552944684,
    "TFIDF(informativeness)":1.198511839,
    "polarity":1,
    "normalized_text_entropy":4.294391133,
    "normalized_concept_entropy":4.439223986,
    "normalized_UMASS":0.502676985,
    "normalized_TFIDF":0.099311754,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you use object for static variable access then compiler will replace it with only. So It is same as"
  },
  {
    "postid":6504,
    "postdate":1342017360,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.143078037,
    "concept_entropy":0,
    "UMASS(coherence)":0.594839867,
    "TFIDF(informativeness)":1.749363679,
    "polarity":0,
    "normalized_text_entropy":4.143078037,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.540763515,
    "normalized_TFIDF":0.144956746,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This has to do with methods and variables. Since these methods/variables are associated with the respective class rather than an instance of the class, it is nice to use refer to these methods or variables as or would be a good starting point to learn about the use of the static keyword to create fields and methods that belong to the class, rather than to an instance of the class"
  },
  {
    "postid":6505,
    "postdate":1275285540,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.184073502,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.476753841,
    "polarity":1,
    "normalized_text_entropy":4.184073502,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.122367598,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It is only because, public static method or public static variable is not associated with any object, but the class. Though the language designer has given the flexibility of invoking them on objects, reader of the code would be confused whether those are static variable/methods or instance methods/variables. So readability is the reason behindasking the developers to invoke them on classes."
  },
  {
    "postid":6506,
    "postdate":1275285840,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.165163885,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.43193338,
    "polarity":0,
    "normalized_text_entropy":4.165163885,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.201516216,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You are allowed to access static members either by using the class name notation or by accessing using an object. It is not recommended to use the object notation since it can be very confusing. It is much clearer if the static methods and variables are called with the class name notation."
  },
  {
    "postid":6507,
    "postdate":1275285900,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.318961258,
    "concept_entropy":0,
    "UMASS(coherence)":0.547624171,
    "TFIDF(informativeness)":2.510390185,
    "polarity":1,
    "normalized_text_entropy":4.318961258,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.497840155,
    "normalized_TFIDF":0.208017347,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"static variable belongs to the class and not to object(instance).A static variable can be accessed directly by the class name and doesn��Η��t need any object.it saves space not having to have variables for the same data for each class.There is no differen between two calling but maintain coding convention to keep more readbale "
  },
  {
    "postid":6508,
    "postdate":1275286080,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.258144703,
    "concept_entropy":0,
    "UMASS(coherence)":0.509895949,
    "TFIDF(informativeness)":1.789520562,
    "polarity":1,
    "normalized_text_entropy":4.258144703,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.463541772,
    "normalized_TFIDF":0.148284248,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I am developing an app that creates a large number of small, immutable Java objects. An example might be: Where it is likely that many instances of Point will need to refer to the same (x,y,z) location.To what extent does it make sense to try to cache and re-use such objects during the lifetime of the application? Any special tricks to handle this kind of situation?"
  },
  {
    "postid":6509,
    "postdate":1275285960,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.085126092,
    "concept_entropy":0,
    "UMASS(coherence)":0.568733954,
    "TFIDF(informativeness)":1.98399749,
    "polarity":0,
    "normalized_text_entropy":4.085126092,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.517030867,
    "normalized_TFIDF":0.164399103,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The problem you are likely to have is making the object pool light weight enough to be cheaper than just creating the objects.You want to the pool to be large enough that you get a fairly high hit rate. In my experience, you are likely to have problems micro-benchmarking this. When you are creating a single object type repeatedly in a micro-benchmark, you get much better results than when creating a variety of objects in a real/complex application. The problem with many object pool aproaches is that they a) require a key object, which costs as much or more than creating a simple object, b) involve some synchromization/locking which again can cost as much as creating an object c) require an extra object when adding to the cache (e.g. a Map.Entry), meaning your hit rate has to be much better for the cache to be worth while. The most light weight, but dumb caching strategy I know is to use an array with a hashcode. e.g. Note: the array is not thread safe, but since the Point is immutable, this doesn't matter.The cache works on a best effort basis, and is naturally limited in size with a very simple eviction strategy. For testing purposes, you can add hit/miss counters to determine the caches effectiveness for you data set."
  },
  {
    "postid":6510,
    "postdate":1403104140,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.235891326,
    "concept_entropy":4.363482475,
    "UMASS(coherence)":0.686292144,
    "TFIDF(informativeness)":2.526436317,
    "polarity":2,
    "normalized_text_entropy":4.235891326,
    "normalized_concept_entropy":4.363482475,
    "normalized_UMASS":0.623901949,
    "normalized_TFIDF":0.209346971,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"When it becomes a problem. Otherwise you're just creating a useless layer of abstraction. Either way, you could easily implement this with a that you call to get a, which always returns the same object instance for any given x, y and z. But then you have to manage when the points should be removed from cache because they wont be garbage collected. I say forget about it unless it's an actual issue. Your application shouldn't depend on such a caching mechanism, which would allow you to add it in later if necessary. So maybe just use a factory that returns a new point instance very time for now."
  },
  {
    "postid":6511,
    "postdate":1403104500,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.218110919,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.540941968,
    "polarity":2,
    "normalized_text_entropy":4.218110919,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.12768639,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"It sounds almost like a textbook example of the pattern."
  },
  {
    "postid":6512,
    "postdate":1403106000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.255140503,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.672594009,
    "polarity":0,
    "normalized_text_entropy":4.255140503,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.138595415,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"How many instances will share the same coordinates, how many will exist at the same time, and how many will be discarded? Reusing the objects only has benefits if a significant percentage of live objects at one time are duplicates (at least 20%, I'd say) and overall memory usage is problematic. And if objects are discarded frequently, you have to construct the cache in a way that prevents it from becoming a memory leak (probably using soft/weak references)."
  },
  {
    "postid":6513,
    "postdate":1403104560,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.100261929,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.174033072,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Remember that caching these objects will influence concurrency and garbage collection in (most likely) a bad way. I wouldn't do it unless the other objects that refer to the points are long lived too."
  },
  {
    "postid":6514,
    "postdate":1403105220,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.112004888,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.799507563,
    "polarity":2,
    "normalized_text_entropy":4.112004888,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.149111796,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"@regularfry is correct - classic GOF Flyweight a.k.a hash consing situation. I'd say try using a java.util.WeakHashMap to store the objects and see whether it increases performance / decreases memory consumption."
  },
  {
    "postid":6515,
    "postdate":1403106600,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.121961923,
    "concept_entropy":4.468711839,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.658478265,
    "polarity":3,
    "normalized_text_entropy":4.121961923,
    "normalized_concept_entropy":4.468711839,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.137425748,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"As for most cases: it depends. If your object is rather complex (takes a lot of time to instatiate) put can be expressed in a string, it makes sense to create and load them through a static factory method. This also makes sense if some representations of the object are used more often than others (in your case maybe Point(0,0,0)) e.g"
  },
  {
    "postid":6516,
    "postdate":1403131440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":3.866204384,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.700013956,
    "polarity":1,
    "normalized_text_entropy":3.866204384,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.140867502,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"When is it good form to push a local variable to a function/method as a parameter, rather than using a class variable in place of the function/method variable. For instance, I can have a function: or I can have a class variable \"_var\" and use it in the same function, like this: I'm of the mind to, if we have a class variable to be used in some function/method, called in my example above, that I should send the function/method the class variable as a parameter, so that the function is easier to read and test. When is it good form to do either?I know this is a loaded question, but I'm trying to make a case for my argument with a co-worker, and they're stating that I would add more code to the function/method signatures, rather than keeping the function/method signatures smaller. In my mind, I'm making the code cleaner and easier to maintain by pushing the class variable(s) to the respective functions/methods, rather than forcing them to rely on/know about a class variable's existence. Please advise."
  },
  {
    "postid":6517,
    "postdate":1403105880,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.336327984,
    "concept_entropy":0,
    "UMASS(coherence)":0.151644358,
    "TFIDF(informativeness)":2.097927254,
    "polarity":-2,
    "normalized_text_entropy":4.336327984,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.137858507,
    "normalized_TFIDF":0.173839615,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"The only answer out of the blue, for a any generic case is:.Data members, static members and function arguments all serve.Of course, there are some key tips we can give for what types of signs you should look for choosing one or the other. Typical cases: There are some common symptoms of bad choice. Consider the following questions: I'm under the impression that you and your co-worker are in a simple misunderstanding of the nature of this parameter.Make sure you clearly understand your co-worker's arguments and make yourself clear.Try to rephrase what it is that you're trying to say."
  },
  {
    "postid":6518,
    "postdate":1282463580,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.384850252,
    "concept_entropy":0,
    "UMASS(coherence)":0.276861652,
    "TFIDF(informativeness)":1.958446485,
    "polarity":2,
    "normalized_text_entropy":4.384850252,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.251692411,
    "normalized_TFIDF":0.162281882,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I look at it in terms of, i.e. who is dependent on the variable (in your case), is it a method or a class? For e.g. JavaBeans have class variables that are dependent by the class, so if the class needs these variables then is best. Alternatively, if you class doesn't care about and doesn't need it anywhere else, and only requires, then is essential."
  },
  {
    "postid":6519,
    "postdate":1282463820,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.201575743,
    "concept_entropy":0,
    "UMASS(coherence)":0.392227824,
    "TFIDF(informativeness)":2.347144192,
    "polarity":3,
    "normalized_text_entropy":4.201575743,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.356570749,
    "normalized_TFIDF":0.194490367,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"It shouldn't be about what gives more or less code or what takes more effort to type. It is about what is more logical within the context of that class and function. Keeping things isolated from each other like you do is in general a good thing but don't over do it. When it is clear from the purpose of a function that it should be working on a value contained in a class var it should do so and not receive the value through a parameter."
  },
  {
    "postid":6520,
    "postdate":1282468980,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":3.89430422,
    "concept_entropy":0,
    "UMASS(coherence)":0.169628916,
    "TFIDF(informativeness)":1.286194646,
    "polarity":0,
    "normalized_text_entropy":3.89430422,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.154208105,
    "normalized_TFIDF":0.106577376,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"For example, instead of doing you do then later you add an object of type \"ClassName\" will that automatically set the type of your array as?"
  },
  {
    "postid":6521,
    "postdate":1282463880,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.135400088,
    "concept_entropy":4.488333574,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.911694015,
    "polarity":0,
    "normalized_text_entropy":4.135400088,
    "normalized_concept_entropy":4.488333574,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.158407853,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"No.Generics are for compile time only.You are just losing the benefit of that check.At runtime all generic information is erased In other words, at runtime is just an ArrayList.The benefit of doing that over just a List is that when you are writing your code, the compiler will check that you dont put anything inappropriate in your list."
  },
  {
    "postid":6522,
    "postdate":1398889140,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.471354487,
    "concept_entropy":4.135699553,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.193060748,
    "polarity":0,
    "normalized_text_entropy":3.471354487,
    "normalized_concept_entropy":4.135699553,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.181722619,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"when you don't specify, it would be the same as if you specified ArrayList<Object>, meaning that any type of object could be added to the ArrayList.The type checks which are performed when specifying a class happen at compile time, not at runtime, so its not possible for things to work the way you propose (having them more specific class determined at runtime)."
  },
  {
    "postid":6523,
    "postdate":1260982260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":3.879664005,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.745458212,
    "polarity":0,
    "normalized_text_entropy":3.879664005,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.144633129,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The real type is really. The type only exists for the compiler (this is called erasure), and its purpose is to give type safety at the compiler level. But at the bytecode level you don't have that knowledge of generic types. "
  },
  {
    "postid":6524,
    "postdate":1260983460,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.237405925,
    "concept_entropy":0,
    "UMASS(coherence)":0.395471029,
    "TFIDF(informativeness)":2.259071609,
    "polarity":-2,
    "normalized_text_entropy":4.237405925,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.359519117,
    "normalized_TFIDF":0.187192448,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"How do I override the equals method in the object class? i.e I have I want to convert the parameter obj to a type Person, but if I do (Person) obj it won't work."
  },
  {
    "postid":6525,
    "postdate":1260983220,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.929216168,
    "concept_entropy":0,
    "UMASS(coherence)":0.215940747,
    "TFIDF(informativeness)":2.123611191,
    "polarity":1,
    "normalized_text_entropy":3.929216168,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.19630977,
    "normalized_TFIDF":0.175967851,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can cast it inside the method, just make sure that is of the right type using instance of"
  },
  {
    "postid":6526,
    "postdate":1260982680,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.317964164,
    "TFIDF(informativeness)":1.537386648,
    "polarity":-2,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.289058331,
    "normalized_TFIDF":0.127391787,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"It's actually more complicated than you might think. Have Eclipse (or whatever IDE you're using) auto-generate an method; you'll see it contains a few checks and casts before it does a comparison. Also see here: "
  },
  {
    "postid":6527,
    "postdate":1260990360,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.194569749,
    "concept_entropy":0,
    "UMASS(coherence)":0.438484386,
    "TFIDF(informativeness)":2.284396104,
    "polarity":-3,
    "normalized_text_entropy":4.194569749,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.398622169,
    "normalized_TFIDF":0.1892909,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6528,
    "postdate":1261006500,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":3.904731686,
    "concept_entropy":0,
    "UMASS(coherence)":0.11434898,
    "TFIDF(informativeness)":1.631519981,
    "polarity":-1,
    "normalized_text_entropy":3.904731686,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.103953618,
    "normalized_TFIDF":0.135191916,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Take a look at. Be aware that if you override you also override. The equals/hashCode contract is that if two objects are equal they must have the same hash code."
  },
  {
    "postid":6529,
    "postdate":1261013400,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":0.231183806,
    "TFIDF(informativeness)":1.545276004,
    "polarity":-1,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.210167096,
    "normalized_TFIDF":0.12804552,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If you plan to create subclasses of Person, use something like if(obj!=null && obj.getClass() == Person.class) rather than instanceof"
  },
  {
    "postid":6530,
    "postdate":1328132340,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.191053355,
    "concept_entropy":0,
    "UMASS(coherence)":0.174480517,
    "TFIDF(informativeness)":2.697139041,
    "polarity":-2,
    "normalized_text_entropy":4.191053355,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.158618652,
    "normalized_TFIDF":0.223491835,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"The only reason to use rather than is if one wanted to assert that both references being compared point to objects of the exact same class rather than objects implementing the same base class. Say we have an and a (extends).would yield true, would return false. In some cases the latter might be preferred, but rarely in case of comparison of instances in or methods."
  },
  {
    "postid":6531,
    "postdate":1260982440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.577542032,
    "concept_entropy":4.431746517,
    "UMASS(coherence)":0.242567287,
    "TFIDF(informativeness)":3.890050455,
    "polarity":-1,
    "normalized_text_entropy":4.577542032,
    "normalized_concept_entropy":4.431746517,
    "normalized_UMASS":0.220515715,
    "normalized_TFIDF":0.322339524,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"One more point may be good to know that after you override method (and also) method you can to compare two objects of same class like follows:"
  },
  {
    "postid":6532,
    "postdate":1260982920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.76140633,
    "concept_entropy":4.181147632,
    "UMASS(coherence)":0.386399311,
    "TFIDF(informativeness)":2.008673335,
    "polarity":0,
    "normalized_text_entropy":3.76140633,
    "normalized_concept_entropy":4.181147632,
    "normalized_UMASS":0.351272101,
    "normalized_TFIDF":0.166443807,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have notice that there is two way to write object casting the different is the brackets place of the property."
  },
  {
    "postid":6533,
    "postdate":1260983280,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.074939589,
    "concept_entropy":0,
    "UMASS(coherence)":0.373454386,
    "TFIDF(informativeness)":2.299764645,
    "polarity":0,
    "normalized_text_entropy":4.074939589,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.339503987,
    "normalized_TFIDF":0.190564377,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" they are not. You can also understand it from the precedence of. Since it has the highest precedence, it will be evaluated first. So, in: - is evaluated first, then the casting is performed. In fact you don't really need a parenthesis around that. (binds tighter to the operator than the operator). So, invocation will always be done before casting. Unless you force it to reverse as in the below case: - In: - is evaluated first, then the invocation is done. As, now you have enclosed inside the brackets, due to which it tighter to the operator, due to higher precedence enforced by."
  },
  {
    "postid":6534,
    "postdate":1397934660,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.299328559,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.855513192,
    "polarity":0,
    "normalized_text_entropy":4.299328559,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.236615122,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"They are doing two totally unrelated things: first is dowcasting the result of and the second is downcasting the variable. The first one looks like the one you need, given the type of the left-hand side. Note that in the first example you have extra parentheses, this would be enough, and is how this is idiomatically written:"
  },
  {
    "postid":6535,
    "postdate":1260982620,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.36502895,
    "concept_entropy":0,
    "UMASS(coherence)":0.731280866,
    "TFIDF(informativeness)":4.270613383,
    "polarity":0,
    "normalized_text_entropy":4.36502895,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.664800787,
    "normalized_TFIDF":0.353873941,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"They are not the same. "
  },
  {
    "postid":6536,
    "postdate":1260983160,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.445920994,
    "concept_entropy":4.275166006,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.581929017,
    "polarity":2,
    "normalized_text_entropy":4.445920994,
    "normalized_concept_entropy":4.275166006,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.213945238,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"No they are not doing the same thing. First the will be called and the object returned by will be casted toand in the second case first the object will be casted to and then will be invoked on that newly casted object"
  },
  {
    "postid":6537,
    "postdate":1260994920,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.244946533,
    "concept_entropy":0,
    "UMASS(coherence)":0.894561667,
    "TFIDF(informativeness)":3.178178807,
    "polarity":2,
    "normalized_text_entropy":4.244946533,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.813237879,
    "normalized_TFIDF":0.26335202,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"They are doing different things as detailed in the other answers. You can also cast by doing this Depending on what you actaully want to cast. Either property or the result of getType(). I prefer this syntax as it is more explicit and easier on the eye..."
  },
  {
    "postid":6538,
    "postdate":1304413200,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.934414906,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.062992424,
    "polarity":0,
    "normalized_text_entropy":3.934414906,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.170944825,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"They are entirely doing diffrent things. they are not same at all. This first invokes getType of property and then casts the returned Object to SimpleType This first casts the property to SimpleType and then invokes getType on the SimpleType"
  },
  {
    "postid":6539,
    "postdate":1304413860,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.204196909,
    "concept_entropy":4.612785109,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.567995337,
    "polarity":0,
    "normalized_text_entropy":4.204196909,
    "normalized_concept_entropy":4.612785109,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.212790658,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a Java class called Term holding polynomials like below I also have an equals method in the same class like below I am stuck with how to code how to compare these 2 Term objects Within my JUnit test file I am using the test below to try and test the equals method"
  },
  {
    "postid":6540,
    "postdate":1304414700,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.310160348,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.093933779,
    "polarity":1,
    "normalized_text_entropy":4.310160348,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.173508705,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"What's wrong with "
  },
  {
    "postid":6541,
    "postdate":1349928360,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.117495473,
    "concept_entropy":4.49154771,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.121349657,
    "polarity":1,
    "normalized_text_entropy":4.117495473,
    "normalized_concept_entropy":4.49154771,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.175780455,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6542,
    "postdate":1352751600,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.399935322,
    "concept_entropy":4.490310702,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.239389545,
    "polarity":0,
    "normalized_text_entropy":4.399935322,
    "normalized_concept_entropy":4.490310702,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.185561542,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I need to write a utility program which would accept a blank HashMap and any object as arguments and return the HashMapThis object contains a lot of objects within it and those objects within has a lot of children and the lineage goes on. My utility must be generic enough to recursively read through all children until it hits primitives in each object, place each of those objects in the hasp map and return it back.This is something like the parent would be there in the map. but the individual children also would be there as sub sequent entries in the map.I am new to java reflection and I went through some tutorials and examples on the net. Not very confident about how to proceed. I believe this is one of the frequent requirements experts and professionals over here might have faced. Plese help me with a starting point on this. If there is any bean utilities open source available to do this? if so please let me know."
  },
  {
    "postid":6543,
    "postdate":1276083240,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.405049308,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.842231057,
    "polarity":5,
    "normalized_text_entropy":4.405049308,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.23551453,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Something like this should do it: this of course puts all fields from all objects into one map. You might have to create a map for each recursion step if you want submaps for children. I can give you that code as well if you need it. There is no return of a map, because the one that is passed to the method is filled."
  },
  {
    "postid":6544,
    "postdate":1276085700,
    "tag":"1",
    "TFMvalue":0.9,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.01648711,
    "concept_entropy":3.903425635,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.779218904,
    "polarity":1,
    "normalized_text_entropy":4.01648711,
    "normalized_concept_entropy":3.903425635,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.147430626,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Have a look at. It already does a large chunk of what you need, and may even do the whole lot in one go."
  },
  {
    "postid":6545,
    "postdate":1353919320,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.222224787,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.544462915,
    "polarity":1,
    "normalized_text_entropy":4.222224787,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.210840701,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have an array of objects that I want to compare to a target object. I want to return the number of objects that exactly match the target object. Here is my count method: And here is my equals method: I run some test code, and I expect 1 matching only, but I get 3 instead. Do you see any errors?"
  },
  {
    "postid":6546,
    "postdate":1276083720,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.21242829,
    "concept_entropy":4.273098997,
    "UMASS(coherence)":0.533593989,
    "TFIDF(informativeness)":1.695375845,
    "polarity":2,
    "normalized_text_entropy":4.21242829,
    "normalized_concept_entropy":4.273098997,
    "normalized_UMASS":0.485085445,
    "normalized_TFIDF":0.140483176,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"There is a at the end of your: This makes happen irrespective of what your method returns."
  },
  {
    "postid":6547,
    "postdate":1346966940,
    "tag":"1",
    "TFMvalue":0.933333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.263465729,
    "concept_entropy":3.91494675,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.521222263,
    "polarity":0,
    "normalized_text_entropy":4.263465729,
    "normalized_concept_entropy":3.91494675,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.126052365,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You should override this function: Do note the class being used in method's signature instead of. Your can use annotation to get a compiler error if you are not using method signature correctly. Having said that, what's probably happening in your code is what the other answer is stating..."
  },
  {
    "postid":6548,
    "postdate":1346967300,
    "tag":"1",
    "TFMvalue":0.928571429,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":4.081470067,
    "concept_entropy":4.208295599,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.061243329,
    "polarity":1,
    "normalized_text_entropy":4.081470067,
    "normalized_concept_entropy":4.208295599,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.170799891,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I try to serialize an object that contains an other object which is itself serializable. Is there a way to make it work ? The pointer to the other object seems to be lost when I serialize the first object."
  },
  {
    "postid":6549,
    "postdate":1346971020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.395788116,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.948298164,
    "polarity":0,
    "normalized_text_entropy":4.395788116,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.161440966,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Here are two rules concerning persistent objects: Check the article. It's include source code and a good explanation of the serialization process. Source code answering \"How do I serialize a tree of objects?\" is also available at Check also.To know some details check this excellent article:."
  },
  {
    "postid":6550,
    "postdate":1286953140,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.200959977,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.91416385,
    "polarity":1,
    "normalized_text_entropy":4.200959977,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.158612509,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The \"pointer\" is lost indeed. After deserialization new objects are constructed. Before you provide your code - check whether your 2nd object isn't defined as - this stops java serialization."
  },
  {
    "postid":6551,
    "postdate":1286953140,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.996226358,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":4.67463995,
    "polarity":0,
    "normalized_text_entropy":3.996226358,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.387352615,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"All of the attributes of the Serializable object should be serialized as well, unless they're defined as transient."
  },
  {
    "postid":6552,
    "postdate":1286953320,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.765395664,
    "concept_entropy":4.273098997,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.883449183,
    "polarity":0,
    "normalized_text_entropy":3.765395664,
    "normalized_concept_entropy":4.273098997,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.156067414,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It should work just fine, so long as everything's serializable. What do you mean by the pointer (by which I assume you mean reference) being \"lost\"? Could you provide a short but complete program which demonstrates the problem? Admittedly Java binary serialization can be fiddly at times, but this much should work fine out of the box."
  },
  {
    "postid":6553,
    "postdate":1286953380,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.471425646,
    "concept_entropy":4.280341275,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.352959847,
    "polarity":0,
    "normalized_text_entropy":4.471425646,
    "normalized_concept_entropy":4.280341275,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.277834823,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You might be happy using. It serializes the entire hierarchy of a Java object pretty easily."
  },
  {
    "postid":6554,
    "postdate":1387371960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.41362357,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.741329395,
    "polarity":0,
    "normalized_text_entropy":4.41362357,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.227153561,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I exactly feel the same, the inner object value will be also serializable until and unless it is being marked transient. If the inner object class was not serializable then it would throw a compile time error.Kindly let us know if u did solve it and if my understanding is wrong."
  },
  {
    "postid":6555,
    "postdate":1379594580,
    "tag":"1",
    "TFMvalue":0.764705882,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.987453657,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.030059872,
    "polarity":1,
    "normalized_text_entropy":3.987453657,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.16821595,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'm searching a nice way to send a java object to my rest web service. It's possible or not ? For sample I wan't to send an \"User\" Object to my rest : It's possible to generate AUTOMATICALY this kind of Rest ? www.foo.com/createUser/name=\"foo\"&surname=\"foo\""
  },
  {
    "postid":6556,
    "postdate":1348302900,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.411805579,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.872509546,
    "TFIDF(informativeness)":3.326769419,
    "polarity":2,
    "normalized_text_entropy":4.411805579,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.793190496,
    "normalized_TFIDF":0.275664617,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Have a look at. The shows you how to get started. Restlet allows you to use a number of representation formats, including and."
  },
  {
    "postid":6557,
    "postdate":1348303680,
    "tag":"1",
    "TFMvalue":0.727272727,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.2201067,
    "concept_entropy":0,
    "UMASS(coherence)":0.493630574,
    "TFIDF(informativeness)":1.827988258,
    "polarity":0,
    "normalized_text_entropy":4.2201067,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.448755067,
    "normalized_TFIDF":0.15147178,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I would consider using a JSON representation for this kind of Java objects.I prefer the Jersey implementation of JAX-RS and it has built-in support for JSON serialization over JAXB. Hope this helps... "
  },
  {
    "postid":6558,
    "postdate":1348303620,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.118645976,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.162012743,
    "polarity":0,
    "normalized_text_entropy":4.118645976,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.096287346,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"That's NOT REST. That's."
  },
  {
    "postid":6559,
    "postdate":1348303500,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.257374322,
    "concept_entropy":4.166635724,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.913634615,
    "polarity":0,
    "normalized_text_entropy":4.257374322,
    "normalized_concept_entropy":4.166635724,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.158568656,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Is there any difference between passing Interface reference or class reference as shown in example ; What are the key differences between case1 and case2? Do they have any advantages in terms of performance , visibility , protecting the object from illegal usage? Are there any disadvantages in using it like this?"
  },
  {
    "postid":6560,
    "postdate":1328234520,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.270690909,
    "concept_entropy":4.287430891,
    "UMASS(coherence)":0.177574326,
    "TFIDF(informativeness)":0.614677688,
    "polarity":2,
    "normalized_text_entropy":4.270690909,
    "normalized_concept_entropy":4.287430891,
    "normalized_UMASS":0.161431205,
    "normalized_TFIDF":0.050933764,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"By passing the interface you are creating the opportunity to pass all the classes which implements the interface. But in case1 you can only pass the and its subclasses. For example think about the following case Now in case2 you can pass both the instance of MyClass and YourClass. but in case1 you can't. In OOP it is recommended to program to the interface instead of class. So if you think about good design there will be no case1. Only case2 will do the job for you."
  },
  {
    "postid":6561,
    "postdate":1328234640,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.224550493,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.425563077,
    "TFIDF(informativeness)":0.703810983,
    "polarity":0,
    "normalized_text_entropy":4.224550493,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.386875525,
    "normalized_TFIDF":0.058319577,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The only advantage is that you are by using interface and you are free to change the implementation in future. But when you use concrete class then you are bound to the behavior of that class. Suppose you were passing in method of other class then it can be any implementation of list the user does not care. But if you pass then the user can use specific methods and you will not be able to change it to in future. So is better thanPerformance will be same when passing any kind of reference, it does not matter whether it is an interface or concrete class reference.As per the comment and further post of @maaartinus there seems to be some difference in performance when using interfaces. But again I would not be worried unless it proven to be a bottleneck in my code, which is going to be never. "
  },
  {
    "postid":6562,
    "postdate":1328235600,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.30268174,
    "concept_entropy":0,
    "UMASS(coherence)":0.300682436,
    "TFIDF(informativeness)":1.551180774,
    "polarity":-1,
    "normalized_text_entropy":4.30268174,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.273347669,
    "normalized_TFIDF":0.128534804,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I need some help getting started.I have one array storing several arrays (in this case, lets say 3, this may be a lot more or less): All the arrays within the mainarray have the same amount of values, but this may also change to fewer or lessLets say I have following arrays: Everytime I try to make this Object[][] the sorting comes out like this: Here comes my problem:Is there a way of making this arrays into an Object[][], but with this sorting? Thanks in advance!"
  },
  {
    "postid":6563,
    "postdate":1328235120,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.225723389,
    "concept_entropy":0,
    "UMASS(coherence)":0.325686171,
    "TFIDF(informativeness)":7.058048458,
    "polarity":3,
    "normalized_text_entropy":4.225723389,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.296078337,
    "normalized_TFIDF":0.584847936,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Here you go This works for your example. You can generalise it further. output "
  },
  {
    "postid":6564,
    "postdate":1328236020,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.041453777,
    "concept_entropy":0,
    "UMASS(coherence)":0.240031277,
    "TFIDF(informativeness)":1.043642973,
    "polarity":0,
    "normalized_text_entropy":4.041453777,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.218210252,
    "normalized_TFIDF":0.086478924,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This code works for arrays of all sizes, assuming that they are of equal sizes though (as you said). This is just a modified version of's code. Input:Output: Input:Output:"
  },
  {
    "postid":6565,
    "postdate":1307344320,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.610577243,
    "concept_entropy":0,
    "UMASS(coherence)":0.019588275,
    "TFIDF(informativeness)":2.813793656,
    "polarity":0,
    "normalized_text_entropy":3.610577243,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.017807523,
    "normalized_TFIDF":0.233158135,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a comma separated text file with information in the format: firstname,lastname,meal1,meal2,meal3,meal4....with each new student on a new line. I have the following student object. I need a method that is to be used from another class to populate an Array of student objects. I am unsure how to do this with the Scanner as I only need the first two from each line, any help pointing me in the right direction would be very thankful. ~Thanks!"
  },
  {
    "postid":6566,
    "postdate":1307344500,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.162506465,
    "concept_entropy":0,
    "UMASS(coherence)":0,
    "TFIDF(informativeness)":1.170543841,
    "polarity":0,
    "normalized_text_entropy":4.162506465,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0,
    "normalized_TFIDF":0.096994255,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6567,
    "postdate":1307344740,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.32908497,
    "concept_entropy":0,
    "UMASS(coherence)":0.43882194,
    "TFIDF(informativeness)":1.394143951,
    "polarity":0,
    "normalized_text_entropy":4.32908497,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.398929036,
    "normalized_TFIDF":0.115522331,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As a tip I can post you the code how to read lines from file with scanner. Then you can parse a line. Try to do this by yourself.Good luck."
  },
  {
    "postid":6568,
    "postdate":1307344560,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.189379868,
    "concept_entropy":3.74741304,
    "UMASS(coherence)":0.288443746,
    "TFIDF(informativeness)":1.432538218,
    "polarity":2,
    "normalized_text_entropy":4.189379868,
    "normalized_concept_entropy":3.74741304,
    "normalized_UMASS":0.262221587,
    "normalized_TFIDF":0.118703778,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I have this messy code that I really want to clean up because it has about 12 else if's and each of these if statements check for the instanceof 2 objects, so something like:If (parentObj instanceof superclass && parentObj2 instanceof superclass)Each if statement executes something different, so polymorphism I think won't make it any better. Also because 12 different super classes for this little functionality (most if statements execute 1 liners) would be a bit ridiculous. And another reason why polymorphism wouldn't work is because I do not have access to the parent class or the super classes. I know that many instanceof conditions is generally not good to do, even though I never really understood why. The methods that are executed inside each if statement are not of the parent class, but are of the super classes, so that's why I need to check for their types so that I can cast them and execute those methods. Any ideas as to how I can clean this up? Thanks!EDIT: Sorry for the lack of detail, I wrote this on my phone. Anyway below is an example of what I am dealing with. I have looked at the strategy pattern, and my only concern with that was for the same reason that I would have to create many different classes and I felt like creating many different objects just to execute 1 liners all of the time would be a bit wasteful. Also it looks like to me that in a strategy design, I would still have to have the many instanceof checks to know which strategy to execute. Anyway, below is some code :p"
  },
  {
    "postid":6569,
    "postdate":1307344560,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.358339583,
    "concept_entropy":0,
    "UMASS(coherence)":0.401890562,
    "TFIDF(informativeness)":0.967252599,
    "polarity":1,
    "normalized_text_entropy":4.358339583,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.365355056,
    "normalized_TFIDF":0.080149023,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The pattern seems to suit this down to the ground. is the link to the wikipedia article, which should be more than enough to get you started, and because you've provided 0 code, I think I won't either. Firstly, I would have them implementing a common interface or superclass. This is so you don't to test what type of class they are. Simply have them call the same method.I know you've said polymorphism is out of the question, but I'm not sure why. And if you don't have access to the super class.. make a common interface. For example: Now let's define some common interface,: And now your tree looks like this:"
  },
  {
    "postid":6570,
    "postdate":1307344920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.307550159,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":1,
    "TFIDF(informativeness)":4.712657739,
    "polarity":0,
    "normalized_text_entropy":4.307550159,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.909090909,
    "normalized_TFIDF":0.390502866,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a question about instruction optimization. If an object is to be used in two statements, is it faster to create a new object reference or should I instead call the object directly in both statements? For the purposes of my question, the object is part of a of objects (this example is from a streamlined version of Java without ArrayLists). Here is an example:is the class in question, and is the of AutoEvent objects. The contains two methods in question: and.This code could, therefore, alternately be written as:Is this faster than the above?I understand the casting process is slow, so this question is actually twofold: additionally, in the event that I am not casting the object, which would be more highly optimized? Bear in mind this is solely for two uses of the object in question."
  },
  {
    "postid":6571,
    "postdate":1266167580,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.423320138,
    "concept_entropy":0,
    "UMASS(coherence)":0.533593989,
    "TFIDF(informativeness)":1.216978609,
    "polarity":1,
    "normalized_text_entropy":4.423320138,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.485085445,
    "normalized_TFIDF":0.100841958,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The first solution is better all round: P.S. is pretty outdated. Consider converting to an. By using the generic ArrayList you won't need to explicitly cast, and it is much faster than a (because it isn't synchronised and therefore has less locking overhead)"
  },
  {
    "postid":6572,
    "postdate":1266168300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":3.5,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.482118872,
    "polarity":0,
    "normalized_text_entropy":3.5,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.039949602,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"First solution will be faster. The reason is that assignments work faster than method invocations.In the second case you will have method elementAt() invoked twice, which will make it slower and JVM will probably not be able to optimize this code because it doesn't know what exactly is happening in the elementAt(). Also remember that Vector's methods are synchronized, which makes every method invocation even slower due to lock acquisition."
  },
  {
    "postid":6573,
    "postdate":1266171660,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.296657839,
    "concept_entropy":4.165852596,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.905706315,
    "polarity":0,
    "normalized_text_entropy":4.296657839,
    "normalized_concept_entropy":4.165852596,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.07504914,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I don't know what do you mean by \"create a new object reference\" here.The following code probably will be translated into bytecode that obtains sequence element, casts it to and store the resulting reference on stack.Local variable as other local variables is stored on stack too, so assigning reference to is is just copying 4 bytes from one stack slot to another, nearby stack slot.This is very-very fast operation.Modern JVMs do not do reference counting, so assigning references is probably as cheap as assigning values."
  },
  {
    "postid":6574,
    "postdate":1266171960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.451743667,
    "concept_entropy":0,
    "UMASS(coherence)":0.559046792,
    "TFIDF(informativeness)":2.916043915,
    "polarity":1,
    "normalized_text_entropy":4.451743667,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.508224356,
    "normalized_TFIDF":0.241630852,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Lets get some terminology straight first.Your code does not \"create a new object reference\".It is fetching an existing object reference (either once or twice) from a. To answer your question, it is (probably) a little bit faster to fetch once and put the reference into a temporary variable.But the difference is small, and to be significant unless you do it lots of times in a loop. (The method on a or is and cheap.If the list was a linked list, which has an implementation for, then that call could be expensive, and the difference between making 1 or 2 calls could be significant ...) Generally speaking, you should think about the complexity of your algorithms, but beyond that you shouldn't spend time optimizing ... until you have solid profiling evidence to tell you where to optimize. I can't say whether would be more appropriate.This could be a case where you the thread-safety offered by."
  },
  {
    "postid":6575,
    "postdate":1266168300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.273023415,
    "concept_entropy":0,
    "UMASS(coherence)":0.473775088,
    "TFIDF(informativeness)":2.493826617,
    "polarity":1,
    "normalized_text_entropy":4.273023415,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.430704625,
    "normalized_TFIDF":0.206644848,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I am retrieving number of values from database, that need to be added to a list and then to a MAP with specific Key based on their values, for example,I need to put row1 and row 3 in a list and each of row2 and row 4 in a separate list, then put these three lists into MAP and use the category names (1,2,3) as keys of MAP. I am not sure how to add them to the list and MAP.My constraint is that not everytime that I retrieve the values the same rows will be retrieved, so everytime I may need different number of lists to keep the values of each category that has been retrieved. My code is as following,the last line runs into this error > \"\" the method add(Rows) is undefined for the type Object.even if I add the object to a list I run into the same error, the method add(List) is undefined for the type Object."
  },
  {
    "postid":6576,
    "postdate":1266168660,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.078274802,
    "concept_entropy":4.567829782,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.499142477,
    "polarity":1,
    "normalized_text_entropy":4.078274802,
    "normalized_concept_entropy":4.567829782,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.28994789,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You need to create a map of lists. As you read the records, if there exist a key (here is category) then add the current row to the list the problem is that you need to specify generic type here"
  },
  {
    "postid":6577,
    "postdate":1387325460,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.303622304,
    "concept_entropy":4.567363279,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.814806924,
    "polarity":1,
    "normalized_text_entropy":4.303622304,
    "normalized_concept_entropy":4.567363279,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.15037954,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can use a map with category as the key and an ArrayList of lists as the value. ArrayList automatically changes size as you add to it. uses put(key, value) to add elements.uses add(element) or add(index, element)."
  },
  {
    "postid":6578,
    "postdate":1266168180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.055958152,
    "concept_entropy":4.553732072,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.464762646,
    "polarity":0,
    "normalized_text_entropy":4.055958152,
    "normalized_concept_entropy":4.553732072,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.121373977,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I would suggest you to use Map inside Map Outer Map will category against map of rows and value. So that every time you want to look up value based on row you can do it easily."
  },
  {
    "postid":6579,
    "postdate":1262867820,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.328109513,
    "concept_entropy":4.452312156,
    "UMASS(coherence)":0.506324182,
    "TFIDF(informativeness)":1.215392645,
    "polarity":3,
    "normalized_text_entropy":4.328109513,
    "normalized_concept_entropy":4.452312156,
    "normalized_UMASS":0.460294711,
    "normalized_TFIDF":0.100710541,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I may be wrong as I have not got too much experience with Java, but here is a question.I have a class which contains many methods (basically it is a simple library). I create an object of this class let's sayThe parameters set up any necessary functionality for the library to run correctly. Then I can call/ /etc etc... In my main class I really need only one this kind of library object. Now... Would it be more useful for me not to use it as an object, but put it as and then create a function inside of the library like a constructor which I would call manually? The relation between the one class and MyLibrary is very close. Basically, I have many classes which do similar things but have some different higher layer functionality. So I separated method which be in all those classes. It seems it is very similar to class and,, example. So is similar to which contains all the foundation. "
  },
  {
    "postid":6580,
    "postdate":1262868180,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.204405553,
    "concept_entropy":0,
    "UMASS(coherence)":0.385569663,
    "TFIDF(informativeness)":1.64340742,
    "polarity":3,
    "normalized_text_entropy":4.204405553,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.350517875,
    "normalized_TFIDF":0.136176939,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"What you described strongly resembles a, similar to Java's. The class has only methods, and a private constructor to prevent instantiations. This is a well-known idiomatic pattern in Java - you can use it to create your own groups of methods providing related functionality. You should not extend, or even instantiate, utility classes at all. Starting with Java-5, you can statically import them so that you could use their methods without making an explicit reference to their class."
  },
  {
    "postid":6581,
    "postdate":1262877780,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.288472323,
    "concept_entropy":3.893086896,
    "UMASS(coherence)":0.537936494,
    "TFIDF(informativeness)":1.837751464,
    "polarity":1,
    "normalized_text_entropy":4.288472323,
    "normalized_concept_entropy":3.893086896,
    "normalized_UMASS":0.489033176,
    "normalized_TFIDF":0.152280784,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" is used when you need an inheritance hierarchy.It seems more logical to put your code in two separate classes here, like you have it now. Also, if your \"library class\" does multiple unrelated things, it should probably be split into multiple classes - one for each task."
  },
  {
    "postid":6582,
    "postdate":1262879280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.339349135,
    "concept_entropy":0,
    "UMASS(coherence)":0.670429695,
    "TFIDF(informativeness)":3.844744777,
    "polarity":-3,
    "normalized_text_entropy":4.339349135,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.609481541,
    "normalized_TFIDF":0.31858538,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"You should really only use when you have a relationship. So, you can think, my main class a MyLibrary or should my class a MyLibrary. From your described problem, it sounds like having MyLibrary is the way to go."
  },
  {
    "postid":6583,
    "postdate":1373901900,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.745118487,
    "polarity":4,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.144604979,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"I would make this a class to use. Similiar to javas MATH class. You can just use the methods of the class without making an object of it. "
  },
  {
    "postid":6584,
    "postdate":1373902320,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.378258654,
    "concept_entropy":4.412989736,
    "UMASS(coherence)":0.666766713,
    "TFIDF(informativeness)":7.387592394,
    "polarity":-1,
    "normalized_text_entropy":4.378258654,
    "normalized_concept_entropy":4.412989736,
    "normalized_UMASS":0.606151557,
    "normalized_TFIDF":0.612154789,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"With the limited detail that you have provided, you might want to consider the.should only be used when one object needs to inherit the characteristics and functionality of another one because they are very closely related. For example, if you have a class, then you would extend to create,, and. Before you use you should learn more about inheritence and when you should and should not use it."
  },
  {
    "postid":6585,
    "postdate":1373902140,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.333303421,
    "concept_entropy":4.220438501,
    "UMASS(coherence)":0.585700214,
    "TFIDF(informativeness)":2.166002654,
    "polarity":5,
    "normalized_text_entropy":4.333303421,
    "normalized_concept_entropy":4.220438501,
    "normalized_UMASS":0.53245474,
    "normalized_TFIDF":0.179480516,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Well If your class if performing utility functions then you should mark all methods as and use operations likeBut this wont allow you to keep some data members in the class and if you keep them they will be static as well. I don't think so that suits your case. Also if you want to keep only an object then you should look at A class for which only one instance can be created."
  },
  {
    "postid":6586,
    "postdate":1373902140,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.390000932,
    "concept_entropy":0,
    "UMASS(coherence)":0.645502765,
    "TFIDF(informativeness)":5.680222469,
    "polarity":5,
    "normalized_text_entropy":4.390000932,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.586820695,
    "normalized_TFIDF":0.470677753,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Assuming you are just using and may not alter it, you should use a wrapper that makes the whole thing a Singleton, as already proposed by. So in your code you would use"
  },
  {
    "postid":6587,
    "postdate":1373902260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.30807844,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":4.263267752,
    "polarity":2,
    "normalized_text_entropy":4.30807844,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.353265263,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Best way to create singleton in java 1.5 or above is to use ENUM. INSTANCE is the only instance of Test class."
  },
  {
    "postid":6588,
    "postdate":1373903040,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.182873001,
    "concept_entropy":0,
    "UMASS(coherence)":0.339903752,
    "TFIDF(informativeness)":2.142288981,
    "polarity":3,
    "normalized_text_entropy":4.182873001,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.309003411,
    "normalized_TFIDF":0.177515541,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I wrote a class that overrides the equals(Object) method in class Object to compare objects of the class type to other objects of a class type using the object's instance values. When I put an instance of the object in a HashMap as the key, and then call get(Object) on the map with a new but identical object as the key, it returns null. I've tried passing a new, identical object to the equals method and it returns true, so the problem isn't my comparison code. From what I've gathered through debugging, the equals(Object) method in my object is never called. But if you use a String key in a HashMap and then pass a new instance with identical characters to get(Object), it returns the value successfully. Why is this happening?What do I have to do to have HashMap test keys based on MY equals method?"
  },
  {
    "postid":6589,
    "postdate":1285613400,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.30561233,
    "concept_entropy":4.342497424,
    "UMASS(coherence)":0.5176446,
    "TFIDF(informativeness)":2.116066991,
    "polarity":1,
    "normalized_text_entropy":4.30561233,
    "normalized_concept_entropy":4.342497424,
    "normalized_UMASS":0.470586,
    "normalized_TFIDF":0.17534272,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You need to also override.Take a look at the link, as it specifies that and have a contract to ensure proper functionality in's,'s, and's. In a, values are stored in buckets, which are reached by the hashcode of the key.Once the proper bucket is found, the equals method is then applied to each member of the bucket until equality is determined.Because of this, it is important to make sure that your hash algorithm 'hashes well'."
  },
  {
    "postid":6590,
    "postdate":1285613880,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.07664008,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.28768498,
    "TFIDF(informativeness)":1.969244167,
    "polarity":2,
    "normalized_text_entropy":4.07664008,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.2615318,
    "normalized_TFIDF":0.163176605,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You should also override hashCode otherwise it won't work as HashMap (as the name suggests) equates equality based on a collection of hashes. The Java \"honour code\" for overriding equals is that you should also override hashCode at the same time."
  },
  {
    "postid":6591,
    "postdate":1285613640,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.328513921,
    "concept_entropy":3.022055209,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.566910983,
    "polarity":0,
    "normalized_text_entropy":4.328513921,
    "normalized_concept_entropy":3.022055209,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.129838249,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If, what is the memory address resides at? Additionally, if as part of Debugger, number changes, is it indicative of the fact that a new object was created?"
  },
  {
    "postid":6592,
    "postdate":1285613700,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.11255517,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.935627607,
    "polarity":0,
    "normalized_text_entropy":4.11255517,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.160391051,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The answer to your second question is yes, the \"id\" you see in Eclipse's debugger uniquely identifies an object and so a change in it means a new object was created. So, for example: Here i and k will have the same id, since they refer to the same object; j will be different. The memory address of one of these objects is not really a useful piece of information, since objects move around in memory. All you can know is that if i == k, they are the same object. (So here, i == k but i != j)."
  },
  {
    "postid":6593,
    "postdate":1285614180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.204997945,
    "concept_entropy":0,
    "UMASS(coherence)":0.498146491,
    "TFIDF(informativeness)":2.290652181,
    "polarity":-3,
    "normalized_text_entropy":4.204997945,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.452860446,
    "normalized_TFIDF":0.189809295,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"Why would you need a memory address of any object in Java? All you can say is that instance lies in heap. You cannot find the exact address. Second question: yes, objects are immutable, so when the value of a variable of type changes it means it points to a different instance of. However it doesn't necessarily mean a new instance was. always creates a new instance while will create the same instance every time it is called."
  },
  {
    "postid":6594,
    "postdate":1285613760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.228627142,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.934904885,
    "polarity":1,
    "normalized_text_entropy":4.228627142,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.160331165,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Unless you have some one very close from JVM development team you cannot find out what type of data/address is stored in reference variable :) . All we need is access to the object residing in that reference and manipulate/execute it.i am not sure about the second part of your question. Also, i cannot confirm if ID (in debugger) refers to java heap memory location."
  },
  {
    "postid":6595,
    "postdate":1285613880,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.1939115,
    "concept_entropy":0,
    "UMASS(coherence)":0.71205178,
    "TFIDF(informativeness)":1.615230767,
    "polarity":1,
    "normalized_text_entropy":4.1939115,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.6473198,
    "normalized_TFIDF":0.13384215,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have a text file with a maximum of 4 lines to read from. Each line has a mixture of strings and integers spaced out by tabs. I have successfully made my program read 1 line and store all the information in the appropriate spot, while also storing a new object in the array.The problem: I can't figure out how to get it to read multiple lines while also storing a new object in the array depending on the line read. Here is my method that takes the file and and stores an object in the array: And the readRecord() method:"
  },
  {
    "postid":6596,
    "postdate":1285615560,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.181941561,
    "concept_entropy":0,
    "UMASS(coherence)":0.344285883,
    "TFIDF(informativeness)":3.059708754,
    "polarity":-1,
    "normalized_text_entropy":4.181941561,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.312987166,
    "normalized_TFIDF":0.253535288,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Finally fixed my problem!"
  },
  {
    "postid":6597,
    "postdate":1285616940,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.279010656,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.570296714,
    "polarity":0,
    "normalized_text_entropy":4.279010656,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.130118799,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you can only successfully store one Vehicle instance, it's because your closing the reader too soon. In addVehicle(), get rid of and in readRecord(), get rid of Close the reader at the end of addVehicle()."
  },
  {
    "postid":6598,
    "postdate":1345229460,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.406528646,
    "concept_entropy":4.436482918,
    "UMASS(coherence)":0.553358384,
    "TFIDF(informativeness)":2.192822257,
    "polarity":-1,
    "normalized_text_entropy":4.406528646,
    "normalized_concept_entropy":4.436482918,
    "normalized_UMASS":0.503053076,
    "normalized_TFIDF":0.181702857,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I'm reading the book by Joshua Bloch. In the first chapter, he says to use factories instead of constructors and lists the advantages and disadvantages of this approach. As far as I see disadvantages are not closely related to to object construction. Moreover, Bloch says that Java Bean style of construction has disadvantages as well. Source:OK, so using constructors is not great, Java beans are not great, factories are nice, so you can do some cache lookups and avoid creating extra objects (depends on the situation, sometimes you dont want caching).How am I supposed to create an object if I try to avoid constructors and java beans? Am I missing a point? What is the best practice? EDIT:"
  },
  {
    "postid":6599,
    "postdate":1237406460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.243147982,
    "concept_entropy":0,
    "UMASS(coherence)":0.41345442,
    "TFIDF(informativeness)":1.731194418,
    "polarity":3,
    "normalized_text_entropy":4.243147982,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.375867655,
    "normalized_TFIDF":0.143451195,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Use constructors until you start to feel the disadvantages Bloch mentions. Then consider whether factories, dependency injection, or some other approach is better."
  },
  {
    "postid":6600,
    "postdate":1276836960,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.405458842,
    "concept_entropy":0,
    "UMASS(coherence)":0.193365134,
    "TFIDF(informativeness)":2.072586884,
    "polarity":-3,
    "normalized_text_entropy":4.405458842,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.175786485,
    "normalized_TFIDF":0.171739847,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"Use constructors for simple objects with small number of arguments. If the number of arguments grow , then start thinking about either builder or factory as suggested by bloch. Most of the simple cases, constructors does the job neatly. My experiences is that, if the number of attributes to define a object grows a lot, I would go back and review the design and find out if I have to group the attributes in a better way. Like DININGTABLE can be broken into the n legs + 1 top wooden part. If you use factory pattern for all your object constructions, it does not look nice."
  },
  {
    "postid":6601,
    "postdate":1237686000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.266734203,
    "concept_entropy":0,
    "UMASS(coherence)":0.312338105,
    "TFIDF(informativeness)":1.686466537,
    "polarity":-1,
    "normalized_text_entropy":4.266734203,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.283943732,
    "normalized_TFIDF":0.139744928,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"It depends on the scenario. As you mentioned, if there is caching involved, then static factories are the preferable way. If there are lots of state variables, then use a Builder pattern."
  },
  {
    "postid":6602,
    "postdate":1295431260,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.108181144,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.773474134,
    "polarity":-1,
    "normalized_text_entropy":4.108181144,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.1469546,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You might be interested in getting familiar with the pattern, with being one of the most popular frameworks to implement it."
  },
  {
    "postid":6603,
    "postdate":1238691000,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.189311608,
    "concept_entropy":0,
    "UMASS(coherence)":0.454914904,
    "TFIDF(informativeness)":1.727614227,
    "polarity":1,
    "normalized_text_entropy":4.189311608,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.413559004,
    "normalized_TFIDF":0.143154531,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Well I think what the guy is reffering to there is Inversion of Control pattern: Not to make a dissertation here, I'll just say that inversion of control in this narrow context of object instanciation reffers to the fact (and benefits) of having a separate service deal with object instanciation, and not having to instanciate those objects manually. One way to achieve this is the Factory Pattern which, from what you say, the guy is describing. Another one would be to use a framework that does IOC for you, like Spring: (which is really not that far from the Factory Pattern) A third option is to make your own IOC Mechanism that deals with object instanciation in some way so you don't have to do it explicitly every time. The idea here is not to stop using the constructor to create instances, you always use that to get your instances, the idea here is WHEN and HOW you call that constructor: There are advantages to both ways. More often than not is better to deal with instanciation separatelly and not do it manually as it leads to cleaner, less coupled and more testable code."
  },
  {
    "postid":6604,
    "postdate":1327673520,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.285729513,
    "concept_entropy":0,
    "UMASS(coherence)":0.393866145,
    "TFIDF(informativeness)":2.000902383,
    "polarity":1,
    "normalized_text_entropy":4.285729513,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.358060132,
    "normalized_TFIDF":0.165799886,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you came across a program that was doing maths to work out what day of the week it was all over the place, what would you think? You'd probably think \"that maths to work out what day of the week it is should be in a method of its own, so it can be expressed once and only once, with the method being called wherever the code needs to know what day of the week it is\". Constructing an object is no different to working out what day of the week it is, really. Do it in one place, make that a method, and call that method from wherever you need a new object. Now, in some cases, that method can itself be the constructor (a constructor is really just a funny kind of method, right?). In others, the method will call the constructor, which will not be used anywhere else. It depends on how much work there is to do to create the object, and how much you want to hide the class of the object being created (imagine a factory method - it could return a, and hide the fact that it's an or or or whatever). Wrapping the construction in a factory method gives you more encapsulation, but less transparency. Both of those qualities are needed to make good code, but like beer and pies, you need to have a balance of them."
  },
  {
    "postid":6605,
    "postdate":1371742800,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.289581332,
    "concept_entropy":0,
    "UMASS(coherence)":0.563495061,
    "TFIDF(informativeness)":2.026195388,
    "polarity":1,
    "normalized_text_entropy":4.289581332,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.512268237,
    "normalized_TFIDF":0.167895729,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Always judge a recommendation in the context. Constructors are the standard way to create an object , but they are not entirely free from disadvantages. For example , he talks about a Service provider framework - this is made possible only on factory methods of constructing objects. But the point is you dont design Service Provider Framework all the time.Again , he quotes examples from Collection framework which use instance-controlled classes. This is not possible if you limit object creation to simple constructor style. But again , everyday code need not adopt the instance-controlled classes.There are other cases he makes in support of the factory method - all under some context of use. In other contexts , constructors may well suffice."
  },
  {
    "postid":6606,
    "postdate":1371745080,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.346267284,
    "concept_entropy":3.754077927,
    "UMASS(coherence)":0.191260137,
    "TFIDF(informativeness)":2.565502951,
    "polarity":0,
    "normalized_text_entropy":4.346267284,
    "normalized_concept_entropy":3.754077927,
    "normalized_UMASS":0.173872852,
    "normalized_TFIDF":0.212584132,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can create object using Cinstructor like using new as follows example: There is a concept called singleton.In that case you can use this type as you shown above but make the create function static else how the user will call the function create as follows:"
  },
  {
    "postid":6607,
    "postdate":1371743100,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.228702597,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.944503699,
    "polarity":0,
    "normalized_text_entropy":4.228702597,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.161126547,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Is there any solution for destroying current instance of object in itself ? I am looking for something which looks like:Thank you for any comments you posted."
  },
  {
    "postid":6608,
    "postdate":1371742860,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.295583381,
    "concept_entropy":4.462933809,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.302941386,
    "polarity":2,
    "normalized_text_entropy":4.295583381,
    "normalized_concept_entropy":4.462933809,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.19082761,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Java objects live until there are no longer any references to them. Since an object cannot determine how many references there are to itself, an object cannot \"destroy itself\". "
  },
  {
    "postid":6609,
    "postdate":1371743040,
    "tag":"1",
    "TFMvalue":0.705882353,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.226492877,
    "concept_entropy":0,
    "UMASS(coherence)":0.256750219,
    "TFIDF(informativeness)":0.968853191,
    "polarity":0,
    "normalized_text_entropy":4.226492877,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.23340929,
    "normalized_TFIDF":0.080281652,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The object doesn't have access to the references to it so there's no way to set them to or something else. An object can only be \"destroyed\" when the garbage collector comes around and clears out all unreferenced objects. That being said, try this:"
  },
  {
    "postid":6610,
    "postdate":1371743280,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.458256021,
    "concept_entropy":0,
    "UMASS(coherence)":0.520824899,
    "TFIDF(informativeness)":2.018910194,
    "polarity":3,
    "normalized_text_entropy":4.458256021,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.473477181,
    "normalized_TFIDF":0.167292059,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Your example of what you want to do demonstrates a lack of understanding of how/when objects are destroyed/cleaned up. } The call you have there ( ) gets a reference to the current object, and then sets that reference to null (ie, no longer pointing at the current object. It doesn't do anything to the object itself, nor does it change other variables elsewhere in the code that happen to point at the object. Consider it this way... variables point at values (objects). Until no more variables point at a given value, that value is kept around (not garbage collected/destroyed). In order to remove all variable references to a value, you need to find all the variables that point at it and point them at something else (ex, null). Realistically, you can't do this (though I suppose nothing is impossible with enough scary reflection and/or bytecode magic ;) To think of it another way, if you were able to destroy the value/object itself, what would happen to all the other variables that are currently pointing at it? Do they now point at freed memory, resulting in some Java version of a segfault?"
  },
  {
    "postid":6611,
    "postdate":1371742980,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.309120276,
    "concept_entropy":4.575588879,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.262847193,
    "polarity":-1,
    "normalized_text_entropy":4.309120276,
    "normalized_concept_entropy":4.575588879,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.187505302,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I'm new to Java but if I understand correctly, a char is a primitive. Doing char temp and temp.hashCode() won't compile but doing a char[] temp2 = new char[2] and temp2.hashCode() will compile and execute. Does this mean somehow a char[] is an object???"
  },
  {
    "postid":6612,
    "postdate":1371742980,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.365240635,
    "concept_entropy":0,
    "UMASS(coherence)":0.308201824,
    "TFIDF(informativeness)":1.473666704,
    "polarity":2,
    "normalized_text_entropy":4.365240635,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.280183476,
    "normalized_TFIDF":0.12211179,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"a is a primitive, but an array of type is an object one way to tell is by dynamically instantiating it: Output: (is a reference to the primitive class. Another way to access that class is through)"
  },
  {
    "postid":6613,
    "postdate":1371742980,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.315518447,
    "concept_entropy":0,
    "UMASS(coherence)":0.462220605,
    "TFIDF(informativeness)":1.210826399,
    "polarity":1,
    "normalized_text_entropy":4.315518447,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.42020055,
    "normalized_TFIDF":0.10033217,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Yes. All arrays are objects, even arrays of primitive types."
  },
  {
    "postid":6614,
    "postdate":1371743580,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.267324288,
    "concept_entropy":4.199084272,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.202458392,
    "polarity":0,
    "normalized_text_entropy":4.267324288,
    "normalized_concept_entropy":4.199084272,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.099638776,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Yes, all arrays are Objects in Java."
  },
  {
    "postid":6615,
    "postdate":1371742920,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.209137642,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.329666017,
    "polarity":-1,
    "normalized_text_entropy":4.209137642,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.110179525,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Yes, every Array of every type is an object."
  },
  {
    "postid":6616,
    "postdate":1371743040,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.297409796,
    "concept_entropy":0,
    "UMASS(coherence)":0.678515663,
    "TFIDF(informativeness)":1.523140015,
    "polarity":-1,
    "normalized_text_entropy":4.297409796,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.616832421,
    "normalized_TFIDF":0.126211275,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Yes arrays are objects in java."
  },
  {
    "postid":6617,
    "postdate":1371743280,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.496298324,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.319286143,
    "polarity":2,
    "normalized_text_entropy":4.496298324,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.192181978,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"An array isn't just several primitive types, it also has a \"length\" field.Primitive types don't have fields.Another thing that sets arrays appart from primitive types is they are references and thus have to be garbage collected."
  },
  {
    "postid":6618,
    "postdate":1371743400,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.277613437,
    "concept_entropy":0,
    "UMASS(coherence)":0.504764948,
    "TFIDF(informativeness)":1.439235496,
    "polarity":0,
    "normalized_text_entropy":3.277613437,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.458877225,
    "normalized_TFIDF":0.119258732,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In the constructor of my class, I map the current object ( ), along with its key (a string entered as a parameter in the constructor) into a static LinkedHashMap so I can reference the object by the string anywhere I might need it later. Here's the code (if it helps): The problem?Instances of this class won't get garbage collected when I'm done using them. I'm just curious if there's a way to have instances of this class clean themselves up when I'm done using them without having to manually call a Remove() method or something each time (to remove its reference in the internal LinkedHashMap when I'm no longer using them, I mean)."
  },
  {
    "postid":6619,
    "postdate":1309555920,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.093838437,
    "concept_entropy":4.271234461,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.47263399,
    "polarity":0,
    "normalized_text_entropy":4.093838437,
    "normalized_concept_entropy":4.271234461,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.122026217,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Making an object visible to others before its constructor is complete is not thread safe. It's not clear how the map is being used in this case, but suppose there's a static method like this in the class: Another thread, running concurrently, can access a while it is being created, and start to use an entry with an uninitialized. Even you reorder the code in the constructor so that adding the new instance to the map is the last thing you do, the JVM is allowed to reorder the instructions so that the object is added to the list first. Or, if the class is extended, the subclass initialization could take place after the object has been published. If more than one thread accesses the interacts with the class, you could have a concurrency bug that is platform dependent, intermittent, and very tough to diagnose. The article, by Brian Goetz has more information on this topic. Back to the original question: using, as mentioned by others, is a good approach, but rather than iterating over every entry in the map, I'd recommend creating a wrapper for your values that extends (it could be your itself, or a helper), and queuing each reference in a. That way, you can quickly poll the queue for any collected entries, and remove them from the map. This could be done by a background thread (blocking on) started in a class initializer, or any stale entries could be cleaned (by) each time a new entry is added. If your program is multi-threaded, you should abandon for a map from, or wrap the with."
  },
  {
    "postid":6620,
    "postdate":1309556580,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.401867588,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.116162332,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Make the values (or) instead. That way the values can still be garbage collected. You'll still have entries in the map, of course - but you can periodically clear out the map of any entries where the Weak/SoftReference is now empty."
  },
  {
    "postid":6621,
    "postdate":1309559100,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.213806814,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.504249723,
    "TFIDF(informativeness)":1.580955021,
    "polarity":0,
    "normalized_text_entropy":4.213806814,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.458408839,
    "normalized_TFIDF":0.131001974,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What you want to use seems to be a weak reference. The concept is that weak references are not strong enough to force an object not to be GC'ed. I don't have much experience with them but you can learn more."
  },
  {
    "postid":6622,
    "postdate":1344294120,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.154145335,
    "concept_entropy":4.341130124,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.562038879,
    "polarity":0,
    "normalized_text_entropy":4.154145335,
    "normalized_concept_entropy":4.341130124,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.129434534,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Is there any difference between and I mean, does Java waste many resources creating/deleting objects in loop? Thank you."
  },
  {
    "postid":6623,
    "postdate":1344294720,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.438521657,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.709735806,
    "polarity":0,
    "normalized_text_entropy":4.438521657,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.141673079,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The difference is in of variable.if defined inside the loop then it will be re-intialized with every iteration, which means an extra executable statement. If you want to re-intialize it with each iteration then good otherwise move it out to save wasted cpu for that statement."
  },
  {
    "postid":6624,
    "postdate":1344295620,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.099989256,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.842660403,
    "polarity":1,
    "normalized_text_entropy":4.099989256,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.152687551,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The only difference is the issue of. With the variable being declared outside the for-block, the variable (object reference) can be accessed outside the for-loop block. If the object reference variable is declared inside the for-loop, then it can only be accessed within the for-loop block."
  },
  {
    "postid":6625,
    "postdate":1346326440,
    "tag":"1",
    "TFMvalue":0.9,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.470125809,
    "concept_entropy":3.994476321,
    "UMASS(coherence)":0.359769699,
    "TFIDF(informativeness)":1.149530825,
    "polarity":0,
    "normalized_text_entropy":4.470125809,
    "normalized_concept_entropy":3.994476321,
    "normalized_UMASS":0.327063363,
    "normalized_TFIDF":0.095253062,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Java creates as many objects of as many times you are iterating your loop but the reference will be same. So its a bit resource and memory consuming. Use or."
  },
  {
    "postid":6626,
    "postdate":1389600180,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":16,
    "Normalized_count":0.266666667,
    "text_entropy":4.246027836,
    "concept_entropy":4.564000355,
    "UMASS(coherence)":0.761948171,
    "TFIDF(informativeness)":0.862838814,
    "polarity":-11,
    "normalized_text_entropy":4.246027836,
    "normalized_concept_entropy":4.564000355,
    "normalized_UMASS":0.692680155,
    "normalized_TFIDF":0.07149703,
    "normalized_polarity":0.055555556,
    "tagtext":"inheritance",
    "posttext":"In this case your temp would be available only forAnd here If you are writing this code inside a method then it would be availablethroughout the method.Local variables are created in Stack and are removed after execution of that method."
  },
  {
    "postid":6627,
    "postdate":1389607080,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.087653291,
    "concept_entropy":4.593529532,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.098580932,
    "polarity":-4,
    "normalized_text_entropy":4.087653291,
    "normalized_concept_entropy":4.593529532,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.008168668,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"So, I'm trying to understand some concepts here. 1) The general \"syntax\" (if you will) of creating a new object.For example, which of the following is \"correct\" (I know there's more than one way to instantiate an object): I know that the following two are \"legal,\" but I can't understand the difference between instantiating an object when it comes to Child/Parent classes (I already know that these two are okay): 2) Basically, what I'm trying to ask is \"Which refers to the class that the object is instantiated from/on (wording? sorry...), and which does the object belong to?\" My apologies if this doesn't really make sense.I tried wording it the best I can. (Some background: I am currently taking the first \"course\" of Object-Oriented Java)"
  },
  {
    "postid":6628,
    "postdate":1389608040,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.211802173,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.369005387,
    "polarity":1,
    "normalized_text_entropy":4.211802173,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.113439286,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If extends from, you can do but not the other way around. The left hand side of this declaration is placing a variable named of declared or static type into the current scope. The right hand side is assigning the variable a reference to a object of dynamic type. A object is being instantiated and assigned to a variable of type. In other words, with the variable, for the compiler to be happy, you'll only have access to the method declared on its declared type, ie.. If you want to call methods, you'll need to cast it."
  },
  {
    "postid":6629,
    "postdate":1389626340,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.004945532,
    "concept_entropy":4.417208661,
    "UMASS(coherence)":0.528941175,
    "TFIDF(informativeness)":1.302056258,
    "polarity":0,
    "normalized_text_entropy":4.004945532,
    "normalized_concept_entropy":4.417208661,
    "normalized_UMASS":0.480855614,
    "normalized_TFIDF":0.10789171,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have an object A that instance another object B.I was wondering whether or not is possible to modify A with instructions in B.In my circumstance, I have a Timetable (its code is under \"Object A\") that open (by) a Window to let the user compile its cells with lesson. At this time, the Window ( , code under \"object B\") get the lesson selection by user but it is not able to write in the table that selection. How can I do? Here the code Object A: Object B (which has to modify A):"
  },
  {
    "postid":6630,
    "postdate":1318547760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.159972596,
    "concept_entropy":3.617809684,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.9982341,
    "polarity":0,
    "normalized_text_entropy":4.159972596,
    "normalized_concept_entropy":3.617809684,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.082716229,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"To update the table in, must invoke the method on the of. Alternatively, add a method to your that does the update. A typical implementation of is seen. If that doesn't help, please edit your question to include an that exhibits the problem you encounter. Addendum:As a concrete example using your, the button below updates the table's model with each press. Compare the implmentation of to the one cited above. The button's method accesses a reference to the in the enclosing scope, but you can pass a reference to your as a parameter to the constructor of. Addendum:No, but I will outline the approach, assuming a class,"
  },
  {
    "postid":6631,
    "postdate":1318548240,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.828328953,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.50644159,
    "polarity":1,
    "normalized_text_entropy":3.828328953,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.124827601,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Is this a valid way to count instances of objects? Or should I not override finalize? The solution doesn't have to be Thread safe"
  },
  {
    "postid":6632,
    "postdate":1378190820,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.110650805,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.092031365,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Markas. And secondly, override the method. Also, in the code AS-IS, note that you can't access to variable in your method."
  },
  {
    "postid":6633,
    "postdate":1346014320,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.290356242,
    "concept_entropy":0,
    "UMASS(coherence)":0.324549031,
    "TFIDF(informativeness)":1.577565438,
    "polarity":0,
    "normalized_text_entropy":4.290356242,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.295044574,
    "normalized_TFIDF":0.130721105,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If I get what you are trying to accomplish, you want to keep count of the number of instances of MyClass that have been created in your application. If that's the case, you need to declare the instances variable and the getInstances method static. Also, I would rename instances to instancesCount (or simply count) and do the same rename for the getInstances method. "
  },
  {
    "postid":6634,
    "postdate":1346016000,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.41710738,
    "concept_entropy":0,
    "UMASS(coherence)":0.601718172,
    "TFIDF(informativeness)":1.605963163,
    "polarity":5,
    "normalized_text_entropy":4.41710738,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.54701652,
    "normalized_TFIDF":0.133074213,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"I have several pojos whose instance variables need to be converted to Object arrays.I am trying to find a way that this can be handled dynamically instead of adding a toObjectArray() method in each pojo. Here is a sample class with the toObjectArray() method that I would like to get rid of: The instance variables do not have to be returned in order.I have a custom annotation which allows me to reflect proper order for the object array.I'm simply wondering if it is possible to dynamically iterate the instance variables and values of an object in order to create an object array. Something like this... Any help would be greatly appreciated.Please let me know if I need to be more clear. Thank you!"
  },
  {
    "postid":6635,
    "postdate":1275173100,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.10978953,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.476785489,
    "polarity":1,
    "normalized_text_entropy":4.10978953,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.039507664,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"One possible way could be using reflection."
  },
  {
    "postid":6636,
    "postdate":1275173340,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.274186404,
    "concept_entropy":4.13419373,
    "UMASS(coherence)":0.458072662,
    "TFIDF(informativeness)":1.958034732,
    "polarity":2,
    "normalized_text_entropy":4.274186404,
    "normalized_concept_entropy":4.13419373,
    "normalized_UMASS":0.416429693,
    "normalized_TFIDF":0.162247763,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6637,
    "postdate":1275173280,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.221147562,
    "concept_entropy":3.699859447,
    "UMASS(coherence)":0.733327068,
    "TFIDF(informativeness)":2.248254905,
    "polarity":3,
    "normalized_text_entropy":4.221147562,
    "normalized_concept_entropy":3.699859447,
    "normalized_UMASS":0.666660971,
    "normalized_TFIDF":0.186296148,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"This is how you overload the method: In this example I get a JSON string when calling the method of instead of the default string representation of an. But what if I have an array of like: What do I have to do or which method(s) do I have to override in that case?"
  },
  {
    "postid":6638,
    "postdate":1275173340,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.2808644,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.698190723,
    "polarity":2,
    "normalized_text_entropy":4.2808644,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.140716424,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You cannot override default array's. If you want to convert an array of objects into the string, use."
  },
  {
    "postid":6639,
    "postdate":1294916460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.20856399,
    "concept_entropy":0,
    "UMASS(coherence)":0.184997728,
    "TFIDF(informativeness)":4.592650307,
    "polarity":0,
    "normalized_text_entropy":4.20856399,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.168179753,
    "normalized_TFIDF":0.380558744,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can't override the \"array\" version as their is no array version.What really happens is that the Array has a toString method which will be called. If you had used a Java Collection as opposed to an Array, it would print out your method 3 times as the iterates over each object in the collection."
  },
  {
    "postid":6640,
    "postdate":1294917900,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.272565569,
    "concept_entropy":0,
    "UMASS(coherence)":0.376982017,
    "TFIDF(informativeness)":1.795707372,
    "polarity":1,
    "normalized_text_entropy":4.272565569,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.342710925,
    "normalized_TFIDF":0.148796903,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You cannot override method on array but you can use to print array."
  },
  {
    "postid":6641,
    "postdate":1294916700,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.382355225,
    "concept_entropy":0,
    "UMASS(coherence)":0.44518954,
    "TFIDF(informativeness)":1.479547229,
    "polarity":1,
    "normalized_text_entropy":4.382355225,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.404717764,
    "normalized_TFIDF":0.122599065,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"First of all, you don't need to extend Object, it is there by default. To print the array content you can use:"
  },
  {
    "postid":6642,
    "postdate":1294916580,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.191274196,
    "concept_entropy":4.174535253,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.751616798,
    "polarity":1,
    "normalized_text_entropy":4.191274196,
    "normalized_concept_entropy":4.174535253,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.145143445,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I've got a custom class called 'Quad' which creates a textured quad to use as a sprite in my 2D OpenGL ES 2.0 game. Then I have a separate subclass (i.e. in a different file - not an innerclass) I create my object like so: However, if I attempt to access the 'heroX' and 'heroY' variables, I get nothing..... So I'll try but the above doesn't pick this variable up. It will. however, find variables that are located in my Quad class.But I would have thought that by extending my Quad class into my Hero class, they would be available through my object. Could someone please explain where my thinking is going wrong and how I can access these 2 variables? Thanks"
  },
  {
    "postid":6643,
    "postdate":1294917060,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.240348977,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.470402669,
    "polarity":3,
    "normalized_text_entropy":4.240348977,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.20470388,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Your variable is of type, not type, hence the compiler only knows that it is a. Use the specific subtype if you want access to methods."
  },
  {
    "postid":6644,
    "postdate":1324290120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.27284314,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.600267278,
    "polarity":1,
    "normalized_text_entropy":4.27284314,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.215464793,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In Java, let a custom object is of type. Then would make a reference without copying the contents of to. But will this behaviour remain for an array ofs: Will and be references or they will be direct copies of and thus separate objects?"
  },
  {
    "postid":6645,
    "postdate":1229919600,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.271609648,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.631516333,
    "polarity":1,
    "normalized_text_entropy":4.271609648,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.135191614,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Well, you actually mean and as arrays are 0-based in Java... but yes, they'll be references. Both array elements will refer to the same object. Importantly, isn't an object either: The value of an expression (whether it's a simple variable value, the result of a method call or whatever) is an in Java - it's either a reference or a primitive value. The way the Java Language Specification is just as a collection of variables: So it's really a bit like doing: As ever, the assignment operator just copies the value of the right hand side to the left hand side. That value is a reference."
  },
  {
    "postid":6646,
    "postdate":1229922840,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.231414168,
    "concept_entropy":0,
    "UMASS(coherence)":0.294639591,
    "TFIDF(informativeness)":1.94614902,
    "polarity":0,
    "normalized_text_entropy":4.231414168,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.267854174,
    "normalized_TFIDF":0.161262882,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm trying to make a battleship game, for which I need a 2D array of squares, which are the places that a person can pick. When I run my program however, I get a null pointer exception when I try to call the resetBoard() function. Battleship class: Driver:"
  },
  {
    "postid":6647,
    "postdate":1229920260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.22966755,
    "concept_entropy":0,
    "UMASS(coherence)":0.875833166,
    "TFIDF(informativeness)":4.403378939,
    "polarity":2,
    "normalized_text_entropy":4.22966755,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.796211969,
    "normalized_TFIDF":0.364875234,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Got it- uncomment the lines in, and then move above that for loop."
  },
  {
    "postid":6648,
    "postdate":1229921460,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":3.89366069,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.262843765,
    "polarity":0,
    "normalized_text_entropy":3.89366069,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.104642462,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Little Background: I have file which has lots of row and each row has string elements, one example of such row would beNow in my parser, I am parsing this csv file and getting each row present in the file as  , now in my log page, I need to have id as well as row present in the file.Current if I try to print then am getting values like , my question is how can i get actual list of array elements like? Tried using default but still it give same data. "
  },
  {
    "postid":6649,
    "postdate":1405804320,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.291511909,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.004425905,
    "polarity":0,
    "normalized_text_entropy":4.291511909,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.166091854,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Use to obtain something more human-readable."
  },
  {
    "postid":6650,
    "postdate":1288182360,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.413377597,
    "concept_entropy":4.585738977,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":4.568076625,
    "polarity":1,
    "normalized_text_entropy":4.413377597,
    "normalized_concept_entropy":4.585738977,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.378522505,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"use it will work"
  },
  {
    "postid":6651,
    "postdate":1288182780,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.621928095,
    "concept_entropy":3.924940796,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.988997189,
    "polarity":0,
    "normalized_text_entropy":3.621928095,
    "normalized_concept_entropy":3.924940796,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.247675947,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Read a line of the csv file and call String.split(\",\") on the line which will return you an array of each seperate string in the line you just read then you can simply loop through the array and print them out as you need."
  },
  {
    "postid":6652,
    "postdate":1288182720,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.269423724,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.049530353,
    "polarity":-4,
    "normalized_text_entropy":4.269423724,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.169829324,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"May be: ? or"
  },
  {
    "postid":6653,
    "postdate":1288182540,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.385003787,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.114764954,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm working on a big system, which I have written entirely in Java. But I'm also at some point communicating with a C program by running it as a process, communicating some input to it through the file system and then waiting for it to finish to read the results from it. For now, I can't do anything but this. There is no time for me to link them via an API or anything like that.This worked well until I needed to invoke this process twice to get the results. One I make the first invocation, it works just fine. However, for the second invocation the process just hangs! I don't if it is sleeping and waiting for a signal but I don't see why it should do so.Here is the method to do the invocation:I really do not need to communicate to the stdout or stdin. I just need the process to run and finish its job. But it just hangs when the calling process is waiting for it ONLY the second time I call it! My calling code is just simply making the command list and calling this method from another java object.Both calls to the method processCommand(List command) work fine when the input to the C program is smaller. Would that be some issue with the stdin or stdout? It's just driving me crazy! Anybody has an insight into this? I appreciate your commend :) Here is the solution based on what @Gray mentioned:I just need to drain the InputStream and possibly the ErrorStream:}"
  },
  {
    "postid":6654,
    "postdate":1288863600,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.225174193,
    "concept_entropy":4.56025336,
    "UMASS(coherence)":0.458072662,
    "TFIDF(informativeness)":1.666233277,
    "polarity":0,
    "normalized_text_entropy":4.225174193,
    "normalized_concept_entropy":4.56025336,
    "normalized_UMASS":0.416429693,
    "normalized_TFIDF":0.138068348,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Try following the solution suggested "
  },
  {
    "postid":6655,
    "postdate":1337070000,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.323481278,
    "concept_entropy":4.516385292,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.176972121,
    "polarity":2,
    "normalized_text_entropy":4.323481278,
    "normalized_concept_entropy":4.516385292,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.26325203,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"What difference between a and b? Am I right that first is object and 'a' is a link, and second is a primitive type and 'b' is a variable?But what advantages/disadvantages have first array?"
  },
  {
    "postid":6656,
    "postdate":1337070420,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.214674739,
    "concept_entropy":4.562620134,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.816960572,
    "polarity":1,
    "normalized_text_entropy":4.214674739,
    "normalized_concept_entropy":4.562620134,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.150557997,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In an like you have there, there is no difference between them at all. They result in the same bytecode. Note that you have to use the first form in an, though: No, in both cases, you have a variable ( ,) which is a the array."
  },
  {
    "postid":6657,
    "postdate":1350053880,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.500482629,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.530045681,
    "polarity":1,
    "normalized_text_entropy":4.500482629,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.126783496,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have the above 2 classes(POJOs) which are absolutely the same (except for the name of course) which I am adding to two arraylists: aListA and aListB. I need to compare if the two objects are the same. If they are same I need to add them to another list(commonList) andif they happen to be the different, I need to add them to another list(differentList). I have written the following code: My problem is that even when the data(both variables, firstId and secondID) in the 2 different POJOs are the same, they get put in the different list. That means the objects are not being compared for equality using the contains() method of the ArrayList class. I dont want to get the data from each variable inside the POJO and compare. Is there a way to compare the POJOs for both variables and be determined as either equal or unequal?"
  },
  {
    "postid":6658,
    "postdate":1350054420,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.312216352,
    "concept_entropy":4.644687766,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.852451223,
    "polarity":2,
    "normalized_text_entropy":4.312216352,
    "normalized_concept_entropy":4.644687766,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.073828302,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Eventhough content is same they are different objects which doesn't satifsy equal condition. You may need to do explicit a.getfirstId().equals(b.getfirsId()) and a.getscondID().equals(b.getSecondId()) by iterating. The other possibility may be overriding equals and hashcode methods in both POJO classes. Refer this link for."
  },
  {
    "postid":6659,
    "postdate":1350054420,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.140866221,
    "concept_entropy":4.380277211,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.899348733,
    "polarity":0,
    "normalized_text_entropy":4.140866221,
    "normalized_concept_entropy":4.380277211,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.075697373,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"With the default implementation of Object.equals, two objects of different classes will never be the same. If you want that behavior, you will need to override .equals in your classes (and .hashcode as well, look at the javadoc). (Or make a comparator and pass it to your collections)."
  },
  {
    "postid":6660,
    "postdate":1350054300,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.004165637,
    "concept_entropy":4.482020346,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.209642678,
    "polarity":0,
    "normalized_text_entropy":4.004165637,
    "normalized_concept_entropy":4.482020346,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.088063947,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can implement a or even a method in each that will do the field-level comparison and return if they meet your comparison criteria. You would then need to iterate over your lists and check against each element. Another alternative is to implement the/pair, which would, when coded properly, allow your to find and compare for equals-ness successfully.Your test would then work."
  },
  {
    "postid":6661,
    "postdate":1350055980,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.339974442,
    "concept_entropy":4.281892218,
    "UMASS(coherence)":0.178135967,
    "TFIDF(informativeness)":2.459128845,
    "polarity":2,
    "normalized_text_entropy":4.339974442,
    "normalized_concept_entropy":4.281892218,
    "normalized_UMASS":0.161941788,
    "normalized_TFIDF":0.098007065,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"What you are trying to do here in not correct. The 2 objects that you are comparing are not only different objects but are also of different types (and) which have no relational at all. Moreover if you try to compare like this As your contains objects of type and is of type, they will be compared using class's method.So returns if and only if and refer to the same object (has the value)."
  },
  {
    "postid":6662,
    "postdate":1228187280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.343123547,
    "concept_entropy":4.381387796,
    "UMASS(coherence)":0.545643424,
    "TFIDF(informativeness)":4.328710037,
    "polarity":1,
    "normalized_text_entropy":4.343123547,
    "normalized_concept_entropy":4.381387796,
    "normalized_UMASS":0.496039476,
    "normalized_TFIDF":0.172518071,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I expected this to compile, but I kept getting the error \"The type of an expression must be an array type, but it is resolved to Object\". Is there a simple workaround for this? }"
  },
  {
    "postid":6663,
    "postdate":1228188000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.228134007,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.633446053,
    "polarity":1,
    "normalized_text_entropy":4.228134007,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.10495437,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" is so will return anBut since you know that contains as instance of you will have to cast them to be so."
  },
  {
    "postid":6664,
    "postdate":1228187880,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.941133113,
    "concept_entropy":0,
    "UMASS(coherence)":0.191954374,
    "TFIDF(informativeness)":1.802405422,
    "polarity":1,
    "normalized_text_entropy":3.941133113,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.174503976,
    "normalized_TFIDF":0.071833757,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You want to declare as rather than. While arrays are of type so the assignment in the loop is legal, you're then losing that type information so the compiler doesn't know the elements of are in the bottom line."
  },
  {
    "postid":6665,
    "postdate":1228189440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.196020253,
    "concept_entropy":0,
    "UMASS(coherence)":0.583456966,
    "TFIDF(informativeness)":2.588562057,
    "polarity":2,
    "normalized_text_entropy":4.196020253,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.530415424,
    "normalized_TFIDF":0.103165546,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I would suggest think from the logic perspective rather than work around.You are trying to use multidimensional arrays , your looping is in a single dimension{which might be right as per your requirements}. Can you post the pseudo code, this might helpThis also works "
  },
  {
    "postid":6666,
    "postdate":1228191300,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.695020634,
    "concept_entropy":4.269844682,
    "UMASS(coherence)":0.183422041,
    "TFIDF(informativeness)":2.036289183,
    "polarity":0,
    "normalized_text_entropy":3.695020634,
    "normalized_concept_entropy":4.269844682,
    "normalized_UMASS":0.16674731,
    "normalized_TFIDF":0.081155051,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As far as I know, everything is an object in Java. I am looking through the java JDK and am experimenting with creating a custom JDK that allows me to perform more debugging operations. For example, I can manipulate every object by changing the Object.java class. My question is: do methods inherit a class from the JRE as well, so that I can modify this parent to eg. make a method save it's most recently passed arguments? Thanks."
  },
  {
    "postid":6667,
    "postdate":1228188180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.177640717,
    "concept_entropy":4.666636495,
    "UMASS(coherence)":0.448474459,
    "TFIDF(informativeness)":2.550448106,
    "polarity":1,
    "normalized_text_entropy":4.177640717,
    "normalized_concept_entropy":4.666636495,
    "normalized_UMASS":0.407704054,
    "normalized_TFIDF":0.101646538,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you only want to enhance debugging, you can start with looking at what has to offer. Even before that, see if, a much higher level (and therefore easier to use) API built on top of JVMTI suits your needs. And although what you're saying doesn't sound possible in itself, a similar effect can be achieved by, using a byte code manipulating library, like BCEL. As for your specific example, if you want to record method invocations and their parameters, simply setting a breakpoint with JDI and then querying the call stack can do the trick."
  },
  {
    "postid":6668,
    "postdate":1336437360,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.325904156,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.449735652,
    "polarity":2,
    "normalized_text_entropy":4.325904156,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.137487089,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"No, not everything in Java is an object. Methods are not object, primitive values are not objects, references are not objects. Only objects are objects in Java (and arrays). There are objects that classes ( ), methods ( ), constructors ( ) and fields ( ). But \"representing\" something is not the same thing as \"being\" something. So no: methods are not objects, they don't inherit from any base class (or \"base method\"). If you want to interact with the JVM at a low level, then might be the correct API for you."
  },
  {
    "postid":6669,
    "postdate":1336438080,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.238824222,
    "concept_entropy":4.450010254,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.588290523,
    "polarity":0,
    "normalized_text_entropy":4.238824222,
    "normalized_concept_entropy":4.450010254,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.103154724,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Fields, methods, parameters, local variables are not objects in Java.They have Object which can represent them using reflections, but they are not Objects. If you want to change the behaviour of a method to trace arguments passed to it you can use code injection. e.g. AspectJ does this and has examples on how to do it."
  },
  {
    "postid":6670,
    "postdate":1336437480,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.204618816,
    "concept_entropy":0,
    "UMASS(coherence)":0.317964164,
    "TFIDF(informativeness)":2.343193143,
    "polarity":0,
    "normalized_text_entropy":4.204618816,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.289058331,
    "normalized_TFIDF":0.093386519,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I need to dump all the attributes of a Java object. I have found a few functions that do this but none of them handle self references and all of the functions I have found spiral into infinite recursion. //I will be running this function on Android but that shouldn't really matter."
  },
  {
    "postid":6671,
    "postdate":1336437480,
    "tag":"1",
    "TFMvalue":0.705882353,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.146777297,
    "concept_entropy":4.169628751,
    "UMASS(coherence)":0.359769699,
    "TFIDF(informativeness)":2.785559069,
    "polarity":1,
    "normalized_text_entropy":4.146777297,
    "normalized_concept_entropy":4.169628751,
    "normalized_UMASS":0.327063363,
    "normalized_TFIDF":0.11101674,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If this is just for debugging or if you want some form of basic serialization take a peek at . Here is an example from their site talking about self references in particular... And the output is..."
  },
  {
    "postid":6672,
    "postdate":1336437780,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.507787051,
    "concept_entropy":4.343132789,
    "UMASS(coherence)":0.225039671,
    "TFIDF(informativeness)":3.146112741,
    "polarity":0,
    "normalized_text_entropy":4.507787051,
    "normalized_concept_entropy":4.343132789,
    "normalized_UMASS":0.204581519,
    "normalized_TFIDF":0.125386385,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have an ArrayList with Student Objects (Name, Mark in Math, Mark in Physics). How can I sort the ArrayList and edit with first highest number/s, then second highest then third and so on. For example I have the object value below: I will look for the student with highest number, I got H. I edit the object like: \"H\", 97, 90 and save it back to that ArraList. Again I look for 2nd highest but here I have students \"B\" and \"C\", I can see they same number in math but in Physics C has highest number so I will edit \"C\", 96, 90 and save it back to the ArrayList and so on. Here which student already edited, I will not fetch them for edit and save thr and so on. IF someone please help me! Thanks in advance"
  },
  {
    "postid":6673,
    "postdate":1345020840,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.416710524,
    "concept_entropy":0,
    "UMASS(coherence)":0.370311069,
    "TFIDF(informativeness)":2.161957864,
    "polarity":1,
    "normalized_text_entropy":4.416710524,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.336646426,
    "normalized_TFIDF":0.086163499,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You need to create a Comparator it can be anonymous or a class and in your do a get method for your mark so you can use it inside the comparator to compare the marks for sorting"
  },
  {
    "postid":6674,
    "postdate":1281609540,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.355360227,
    "concept_entropy":4.578375266,
    "UMASS(coherence)":0.543442756,
    "TFIDF(informativeness)":3.815927881,
    "polarity":5,
    "normalized_text_entropy":4.355360227,
    "normalized_concept_entropy":4.578375266,
    "normalized_UMASS":0.494038869,
    "normalized_TFIDF":0.152081454,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Implement a Comparable interface toyour student object and specify how you want it to compare.Here is a good example:"
  },
  {
    "postid":6675,
    "postdate":1281614760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.305229561,
    "concept_entropy":0,
    "UMASS(coherence)":0.240031277,
    "TFIDF(informativeness)":2.103755629,
    "polarity":0,
    "normalized_text_entropy":4.305229561,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.218210252,
    "normalized_TFIDF":0.083843884,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I am utilizing the follow class, which I have as an object: And I am trying to pass it across using: And I am trying to receive it using: I am getting the following error:"
  },
  {
    "postid":6676,
    "postdate":1281609840,
    "tag":"1",
    "TFMvalue":0.636363636,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.358657293,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.358846107,
    "TFIDF(informativeness)":2.038797435,
    "polarity":2,
    "normalized_text_entropy":4.358657293,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.326223734,
    "normalized_TFIDF":0.081255016,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Easiest Way to do this is to implementSerializeable .. Sending object fromActivity A to Activity B Getting Object in Activity B."
  },
  {
    "postid":6677,
    "postdate":1281610260,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.943610548,
    "concept_entropy":0,
    "UMASS(coherence)":0.240031277,
    "TFIDF(informativeness)":2.392587589,
    "polarity":0,
    "normalized_text_entropy":3.943610548,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.218210252,
    "normalized_TFIDF":0.095355104,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":", and paste your class structure.it will create parcelable class for you and then you can easily pass your object around activities."
  },
  {
    "postid":6678,
    "postdate":1281620640,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":14,
    "Normalized_count":0.233333333,
    "text_entropy":4.29915268,
    "concept_entropy":0,
    "UMASS(coherence)":0.665827317,
    "TFIDF(informativeness)":3.358104869,
    "polarity":3,
    "normalized_text_entropy":4.29915268,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.605297561,
    "normalized_TFIDF":0.1338352,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Try the following post.The problem is that the ImageManager is not a parable Object. So that's giving the cast error.If the imageManager is yours you should make the class implement Pracabale like the url above sais. EDIT:Above should be the right way of doing Parceables, But in your case i really would say you shouldn't pass the ImageManager between different activities. Because the context that your using in the ImageManager class will be disposed.. And you'll certainly get an error.So why don't you make a new instance of the class instead and only pass the Bitmap in to it (After transferring the bitmap and other not context related information with the bundle off course.)"
  },
  {
    "postid":6679,
    "postdate":1281611220,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.201884302,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.470901074,
    "TFIDF(informativeness)":2.165240723,
    "polarity":0,
    "normalized_text_entropy":4.201884302,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.428091885,
    "normalized_TFIDF":0.086294335,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"So I am trying to avoid using duplicate code. At the moment I have several lists which contain Strings; one list is called \"images\" and the other \"videos\" etc. These lists contain the properties of the content and they are in a linked list because that information was read from a text file.I am trying to go through these lists and create image/video objects to place in another object (later on).At the moment I have a methodinside of it how do I change the object declarations etc depending on the name of the list that was passed through. For example:If I call the method with the image list: I want the function to create image objects: And if I passed Videos list: I want the function to create video objects: Sorry if this is worded badly, I find it hard to articulate this question. I also understand the the concept of polymorphism; I just don't see it viable for the content object to do this job (of reading the string etc) as the object is created depending the contents of the list."
  },
  {
    "postid":6680,
    "postdate":1225951200,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.167956232,
    "concept_entropy":0,
    "UMASS(coherence)":0.432279736,
    "TFIDF(informativeness)":3.294741514,
    "polarity":0,
    "normalized_text_entropy":4.167956232,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.392981578,
    "normalized_TFIDF":0.131309893,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You brought up the subject of Polymorphism.This scenario would be a good candidate to demonstrate your understanding of how it works.You could create an abstract class named Media and have one method defined named Render().Then extend the Media class to two subclasses, ImageMedia and VideoMedia.Where each subclass extends class Media, they should override the method Render() with their own implementation of how to render the content.In the end you can just have a List of type Media like this:List<Media> and iterate over it while calling the Render() method on each.In this way you impose polymorphic behaviour and greatly simplify your code."
  },
  {
    "postid":6681,
    "postdate":1225951560,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.176521412,
    "concept_entropy":3.90922703,
    "UMASS(coherence)":0.329884055,
    "TFIDF(informativeness)":3.924652152,
    "polarity":1,
    "normalized_text_entropy":4.176521412,
    "normalized_concept_entropy":3.90922703,
    "normalized_UMASS":0.299894595,
    "normalized_TFIDF":0.156414593,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You could pass in an integer as an id for the type of media you are giving it.You could then use an if/else statement do only do certain things for certain content types."
  },
  {
    "postid":6682,
    "postdate":1225957440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.813206529,
    "concept_entropy":0,
    "UMASS(coherence)":0.254867504,
    "TFIDF(informativeness)":2.064141833,
    "polarity":0,
    "normalized_text_entropy":3.813206529,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.231697731,
    "normalized_TFIDF":0.082265101,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"There is a way to avoid the slow reflection to create an instance from a class, obviously within another method ? For example: I cannot create the instance using the keyword \"new\", because I must create the instance in another method in a dynamic way... You have carte blanche to improve in the best way (like performance) this code :) Thank you!"
  },
  {
    "postid":6683,
    "postdate":1225952580,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.81490557,
    "concept_entropy":4.522406042,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.427135447,
    "polarity":0,
    "normalized_text_entropy":3.81490557,
    "normalized_concept_entropy":4.522406042,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.096731988,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Leave your Dog and Animal classes the same. and use the Builder pattern } The answers over at explain it further as well."
  },
  {
    "postid":6684,
    "postdate":1225952520,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.106633359,
    "concept_entropy":0,
    "UMASS(coherence)":0.22423723,
    "TFIDF(informativeness)":2.208279046,
    "polarity":0,
    "normalized_text_entropy":4.106633359,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.203852027,
    "normalized_TFIDF":0.088009601,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6685,
    "postdate":1297537620,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.576617645,
    "concept_entropy":0,
    "UMASS(coherence)":0.070402361,
    "TFIDF(informativeness)":1.351416333,
    "polarity":0,
    "normalized_text_entropy":3.576617645,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.064002146,
    "normalized_TFIDF":0.053859865,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a very simple question but i can't figure out why I'm having this exception. I'm trying to create a 2-dimensional Array of objects for a sudoku puzzle, but when I'm initializing i'm getting. Please help, I've read similar questions and it should be working! Here I'm declaring the grid(2-dimensional array of objects used and constructor): So when i'm cliking a button to set the lines(size length) as shown below I'm getting the exception:"
  },
  {
    "postid":6686,
    "postdate":1297539360,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.131993247,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.302437725,
    "TFIDF(informativeness)":1.29007892,
    "polarity":1,
    "normalized_text_entropy":4.131993247,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.274943386,
    "normalized_TFIDF":0.0514153,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You should move your grid initialization into the make grid method since in the constructor the member is still not initialized with your desired value (default value of int is 0 so you get an empty array and you try to access it afterwards with bigger unallocated bounds)"
  },
  {
    "postid":6687,
    "postdate":1297538220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.290148293,
    "concept_entropy":0,
    "UMASS(coherence)":0.521311893,
    "TFIDF(informativeness)":2.156044055,
    "polarity":-1,
    "normalized_text_entropy":4.290148293,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.473919903,
    "normalized_TFIDF":0.085927807,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The problem is that the default value for an is 0.So when you create your object, is equivalent toEither change your method or provide a size in your constructor."
  },
  {
    "postid":6688,
    "postdate":1253379480,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.127317203,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.543765705,
    "polarity":0,
    "normalized_text_entropy":4.127317203,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.061525831,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" creates an array of size because is still when that statement is run. Whavetever changes you make to later on won't affect the array size, which will remain... Simpler example:"
  },
  {
    "postid":6689,
    "postdate":1253380200,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.264598614,
    "concept_entropy":3.991729297,
    "UMASS(coherence)":0.273345923,
    "TFIDF(informativeness)":1.53168297,
    "polarity":1,
    "normalized_text_entropy":4.264598614,
    "normalized_concept_entropy":3.991729297,
    "normalized_UMASS":0.248496294,
    "normalized_TFIDF":0.061044281,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Initialize before creation of array. Now you creating array with 0x0 dimensions, because is 0 be default."
  },
  {
    "postid":6690,
    "postdate":1253379780,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.354015209,
    "concept_entropy":4.490310702,
    "UMASS(coherence)":0.48759308,
    "TFIDF(informativeness)":1.283012164,
    "polarity":1,
    "normalized_text_entropy":4.354015209,
    "normalized_concept_entropy":4.490310702,
    "normalized_UMASS":0.443266436,
    "normalized_TFIDF":0.051133659,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I am trying to make a checkerboard given a template from a CS class I am taking. However, when I run it, nothing comes up on the screen. I am guessing I am missing some code to actually draw the squares onto the screen but I have tried a lot of things and still nothing."
  },
  {
    "postid":6691,
    "postdate":1406397840,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.353079109,
    "concept_entropy":4.543550515,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.496290736,
    "polarity":-1,
    "normalized_text_entropy":4.353079109,
    "normalized_concept_entropy":4.543550515,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.059633745,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You never call. Having said that, I would be wary about calling every time the method is called, in fact I'd discourage you from overriding in the first place. What I might do is check to see if is in and only generate the array then.Back in the paint method, I would simply use a compound loop and each square. Instead of overriding of, you should start with something like and override it's method, make sure you call! There are a number of reasons you should do this, but the main one here is is not double buffered, meaning you will get \"flashes\" as the drawing is updated.is double buffered by default, saving you a lot of work and time having to implement your own solution... Once you've done this, take custom panel and add it to the applet. I would move all the painting logic to it.Take a look at for more details"
  },
  {
    "postid":6692,
    "postdate":1277469840,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.339936068,
    "concept_entropy":4.379913873,
    "UMASS(coherence)":0.91117123,
    "TFIDF(informativeness)":2.21640866,
    "polarity":2,
    "normalized_text_entropy":4.339936068,
    "normalized_concept_entropy":4.379913873,
    "normalized_UMASS":0.828337482,
    "normalized_TFIDF":0.088333601,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Well as far as I could see unless I missed something you never actually called a repaint or paint or draw method.This code is set up differently than most other codes that I have seen trying to accomplish similar tasks and I don't really feel like figuring it all out but you have to actually call the method to draw the image.However, make sure that you pay close attention to where you call this method because it is rather important to place it correctly otherwise it may not serve its function correctly."
  },
  {
    "postid":6693,
    "postdate":1277470500,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.315119056,
    "concept_entropy":4.553622849,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":4.921579243,
    "polarity":-3,
    "normalized_text_entropy":4.315119056,
    "normalized_concept_entropy":4.553622849,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.196146508,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"I've asked this question. And now it has brought up another question. Is there a difference between this:For class Patient: and this: I thought they were the same thing? I have created these in the Patient class."
  },
  {
    "postid":6694,
    "postdate":1277470020,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.054201113,
    "concept_entropy":4.434355503,
    "UMASS(coherence)":0.257491511,
    "TFIDF(informativeness)":1.981384276,
    "polarity":1,
    "normalized_text_entropy":4.054201113,
    "normalized_concept_entropy":4.434355503,
    "normalized_UMASS":0.234083192,
    "normalized_TFIDF":0.078966849,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I've asked this question. And now it has brought up another question. Is there a difference between this:For class Patient: and this: I thought they were the same thing? I have created these in the Patient class."
  },
  {
    "postid":6695,
    "postdate":1277470500,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.017028475,
    "concept_entropy":0,
    "UMASS(coherence)":0.207353101,
    "TFIDF(informativeness)":1.167795428,
    "polarity":0,
    "normalized_text_entropy":4.017028475,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.188502819,
    "normalized_TFIDF":0.046541767,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This code will only work if all three variables are static like this Whereas something like this will work for non static variables, \"this\" simply is used to avoid confusion denote the object whose constructor is being called. Example would be same as saying \"this\" comes to rescue in a situation like this"
  },
  {
    "postid":6696,
    "postdate":1277470320,
    "tag":"1",
    "TFMvalue":0.846153846,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.350474942,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.519613991,
    "polarity":-1,
    "normalized_text_entropy":4.350474942,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.060563279,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":" is used to the access the properties that belong to an object whereas Classname is used to access the properties that belong to a class. Properties belonging to a class/attributes means that those will be shared by all the objects. Suggested reading: "
  },
  {
    "postid":6697,
    "postdate":1277470320,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.21153554,
    "concept_entropy":0,
    "UMASS(coherence)":0.493900989,
    "TFIDF(informativeness)":1.669522952,
    "polarity":0,
    "normalized_text_entropy":4.21153554,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.449000899,
    "normalized_TFIDF":0.066537809,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You use to access to the non-static members of the class, whereas is used to access the static members. The non-static fields of a class are unique to each instance of the class, whereas the fields are common to all instances."
  },
  {
    "postid":6698,
    "postdate":1277470320,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.285506062,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.414215734,
    "polarity":-1,
    "normalized_text_entropy":4.285506062,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.056362697,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":" is used to access Object properties. It is typically used to access non-static variables of the class, as they are associated with the object.is typically used to access static variables, as static variables are associated with the class.Static variable are initialized when class loads where as object variable are initialized only when object of class is created. "
  },
  {
    "postid":6699,
    "postdate":1295527680,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.228417271,
    "concept_entropy":0,
    "UMASS(coherence)":0.261961415,
    "TFIDF(informativeness)":1.89565155,
    "polarity":-1,
    "normalized_text_entropy":4.228417271,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.238146741,
    "normalized_TFIDF":0.075550024,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I have been looking at questions of how to add elements to an array. I do not understand how to add objects of a class type, not a datatype like. How am I supposed to do this, when the object patient has various datatypes? What I can't get my head around, is how to put the attributes of a Patient object into an array. Another class:"
  },
  {
    "postid":6700,
    "postdate":1295528040,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.630869382,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.692969789,
    "polarity":1,
    "normalized_text_entropy":3.630869382,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.067472268,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You need to access an array using the indexes but before that you need to initialize it as well. Since you want them to be dynamic, try to use an ArrayList and keep adding the objects to it."
  },
  {
    "postid":6701,
    "postdate":1295527800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.327922925,
    "concept_entropy":4.56420664,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":12.06817708,
    "polarity":0,
    "normalized_text_entropy":4.327922925,
    "normalized_concept_entropy":4.56420664,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.480969761,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You need to specify the array sizelike below Then now add the elements like below The complete code like below"
  },
  {
    "postid":6702,
    "postdate":1295527860,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.251556728,
    "concept_entropy":4.195728982,
    "UMASS(coherence)":0.181954379,
    "TFIDF(informativeness)":2.154428445,
    "polarity":-1,
    "normalized_text_entropy":4.251556728,
    "normalized_concept_entropy":4.195728982,
    "normalized_UMASS":0.165413072,
    "normalized_TFIDF":0.085863418,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Arrays are accessed via index:Please modify your code like this."
  },
  {
    "postid":6703,
    "postdate":1295536740,
    "tag":"1",
    "TFMvalue":0.692307692,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.197304893,
    "concept_entropy":4.337292239,
    "UMASS(coherence)":0.42087083,
    "TFIDF(informativeness)":1.863238352,
    "polarity":1,
    "normalized_text_entropy":4.197304893,
    "normalized_concept_entropy":4.337292239,
    "normalized_UMASS":0.382609845,
    "normalized_TFIDF":0.074258216,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You are using an array and not an ArrayList thus add them by specifying the index If you really want to assign the same object in the string you can even skip the object reference, like "
  },
  {
    "postid":6704,
    "postdate":1364475480,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.33319909,
    "concept_entropy":0,
    "UMASS(coherence)":0.524673384,
    "TFIDF(informativeness)":1.845022591,
    "polarity":-2,
    "normalized_text_entropy":4.33319909,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.476975804,
    "normalized_TFIDF":0.073532239,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"First you need to initialize an array to be of a specific size. Secondly, you need to use index when assigning a value. Finally;"
  },
  {
    "postid":6705,
    "postdate":1364475900,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.371126178,
    "concept_entropy":4.491218818,
    "UMASS(coherence)":0.387378081,
    "TFIDF(informativeness)":4.60630389,
    "polarity":2,
    "normalized_text_entropy":4.371126178,
    "normalized_concept_entropy":4.491218818,
    "normalized_UMASS":0.352161892,
    "normalized_TFIDF":0.183581403,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"First: Some fixes: Since you want your patients to be unique not the same as Patient.sth is class' property (common to all instances). Now array and inserting: but again do not fill array with the same objects. In addition not to be bound to fixed array size - use Vector (for example)about class members / aka static object members These 2 code samples are completely different things: and You must distinguish between what is unique to an abject and what is common to a class (ie available to all instances - common to them).With static keyword you declare class members (they will be common foa all instances). You cannot use them with 'this' keyword which is reserved for instance members from the first example.Here is what you must read "
  },
  {
    "postid":6706,
    "postdate":1364476740,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.277531857,
    "concept_entropy":4.525874712,
    "UMASS(coherence)":0.309151027,
    "TFIDF(informativeness)":3.141392527,
    "polarity":3,
    "normalized_text_entropy":4.277531857,
    "normalized_concept_entropy":4.525874712,
    "normalized_UMASS":0.281046388,
    "normalized_TFIDF":0.125198264,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I am trying to write a solitiare game on java. I'm trying to add the card objects to my arraylist but the MakeDeck function is not working properly. When I'm trying to print the values it prints \"0, null, null\" , 52 times. What is the problem? It looks like I can't reach to the ArrayList, but I don't know why. Edited: Card constructor: Print function:"
  },
  {
    "postid":6707,
    "postdate":1364475960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.226876165,
    "concept_entropy":0,
    "UMASS(coherence)":0.556035258,
    "TFIDF(informativeness)":2.654969647,
    "polarity":2,
    "normalized_text_entropy":4.226876165,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.505486598,
    "normalized_TFIDF":0.105812179,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"The issue is in your constructor; the assignments are the wrong way around. You want The other way around doesn't set the fields equal to the parameters, it sets the parameters equal to the fields. Specifically, what you had before sets to, to, and to, when you actually wanted to do the other way around in your constructor."
  },
  {
    "postid":6708,
    "postdate":1378471560,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.022055209,
    "concept_entropy":4.561663351,
    "UMASS(coherence)":0.495244196,
    "TFIDF(informativeness)":2.12772786,
    "polarity":0,
    "normalized_text_entropy":3.022055209,
    "normalized_concept_entropy":4.561663351,
    "normalized_UMASS":0.450221996,
    "normalized_TFIDF":0.084799283,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"All those assignments are back to front. You are assigning the parameters instead of them. It is customary to write it like this:"
  },
  {
    "postid":6709,
    "postdate":1364476620,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.940825891,
    "concept_entropy":4.441417191,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":6.902354546,
    "polarity":0,
    "normalized_text_entropy":3.940825891,
    "normalized_concept_entropy":4.441417191,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.275089087,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The assignments are backwards. ;is the thing you want to set while is the data you want it to become. When you did: You're changing the parameters,, and which you passed in as parameters to whatever,, and are. To fix this, flip around the values you're assigning like so:"
  },
  {
    "postid":6710,
    "postdate":1358201520,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.12779575,
    "concept_entropy":0,
    "UMASS(coherence)":0.30186188,
    "TFIDF(informativeness)":2.498291586,
    "polarity":2,
    "normalized_text_entropy":4.12779575,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.274419891,
    "normalized_TFIDF":0.099567872,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I have an ArrayList containing names of instantiated objects that I want to execute the method 'count' on. I'm unsure if/how to do that, though. I have a loop to scan through the array list, and added pseudocode with what I'm trying to achieve.I'm new to java and am not sure this is possible, but any help would be appreciated. Thanks."
  },
  {
    "postid":6711,
    "postdate":1360094880,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.421293677,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.647051428,
    "polarity":2,
    "normalized_text_entropy":4.421293677,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.06564222,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Simpler way to do it..."
  },
  {
    "postid":6712,
    "postdate":1360099560,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.405970184,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.469556112,
    "polarity":1,
    "normalized_text_entropy":4.405970184,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.058568253,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You have several ways to do so:Basic1: Basic2: Better1: Better2:"
  },
  {
    "postid":6713,
    "postdate":1358278380,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.2775337,
    "concept_entropy":4.462496919,
    "UMASS(coherence)":0.772935868,
    "TFIDF(informativeness)":1.508722426,
    "polarity":0,
    "normalized_text_entropy":4.2775337,
    "normalized_concept_entropy":4.462496919,
    "normalized_UMASS":0.702668971,
    "normalized_TFIDF":0.060129203,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Object references in java really confuse me. And when I started to study linkedlist, I realized that I know verry little about the subject. My question is Let's say list is the first node in my linkedlist and I know that this operation means that node refers to the same object that the list refers to. I mean, if I make changes to the node, consequently to the object that it refers to, list will be also affected by these changes. However, what I don't understand that do node.next and list.next also refer to the same object. I mean if I wrote the linkedlist like Does that mean I am also changing list with the list.next? Or if I write (node.next.name = \"B\"), do I also change the name of the list.next element?. I know the questions seems silly but I really don't know anything about references. And I also researched the subject a lot. But what I found online so far, they didn't help me much. If someone explains it to me in a clear and comprehensible way, I would be very appreciated. "
  },
  {
    "postid":6714,
    "postdate":1363341600,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.242128266,
    "concept_entropy":4.365336764,
    "UMASS(coherence)":0.25269753,
    "TFIDF(informativeness)":1.754484385,
    "polarity":3,
    "normalized_text_entropy":4.242128266,
    "normalized_concept_entropy":4.365336764,
    "normalized_UMASS":0.229725027,
    "normalized_TFIDF":0.069923894,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"You know a reference means that in the memory, they have the same \"reference\" to the data in memory. So it is as simple as and are the same object. If you consider that the data is stored in the memory (RAM). Consider the memory as a closet full of drawers, if the data of are in drawer number 2. \"by Reference\" means that means that also refers to drawer number 2. Now whatever you change in the data, you're changing the values of drawer number 2. So you're changing both and "
  },
  {
    "postid":6715,
    "postdate":1363341720,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.77437911,
    "concept_entropy":4.527758626,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.208603408,
    "polarity":1,
    "normalized_text_entropy":3.77437911,
    "normalized_concept_entropy":4.527758626,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.048168144,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" is a variable that holds a reference.The \"reference\" is another term for a \"pointer\" -- the memory address of an object. When you assign a value to you're storing the address of an object in that location.The same address can be stored other places, allowing the object to be accessed from different locations in the code. If you have a linked-list Node object, it presumably has fields for \"next\" and \"name\".The name field in this case is presumably a reference to an object (eg, a String) that is the \"value\" of the node (or at least part of the node's \"value).The \"next\" field is pretty much guaranteed to typed to hold a Node reference (though the value may be null for end-of-list). So your local variable may \"point\" to a Node object that contains a field that \"points\" to yet another Node object that contains a \"next\" field that points to yet another Node object, ad infinitum.(One important thing to understand is that, just because you have a Node object with a \"next\" field that points somewhere does not mean that Node object's \"next\" field points to that same somewhere.The name of the field is not the identity of the object.) When you do something like that can be decomposed into: The \"name\" field in the Node that you would address with node.next is changed. gives you the address of the closest Node, and then gives you the address of the node next to the closest Node. This sequence (from your original post): is something you might see in code that is beginning to traverse the list.The first line initializes from the \"list head\" pointer named.Then the second line \"advances\" node to the second Node in the list.So that after this statement is addressing the second Node of the list."
  },
  {
    "postid":6716,
    "postdate":1363341780,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.294167562,
    "concept_entropy":0,
    "UMASS(coherence)":0.825456476,
    "TFIDF(informativeness)":1.776405911,
    "polarity":5,
    "normalized_text_entropy":4.294167562,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.750414978,
    "normalized_TFIDF":0.070797563,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"You asked:No, you are just reassigning the object variable (object reference) to point at a different node in the list. When is assigned to then the statement you wrote is true.After the behavior will modify a different node. It helps if you keep in mind that any NODE or subset of NODES in your list, can be thought of as a list in its own right. Hope that helps."
  },
  {
    "postid":6717,
    "postdate":1363342020,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.440013732,
    "concept_entropy":0,
    "UMASS(coherence)":0.654425133,
    "TFIDF(informativeness)":2.094816421,
    "polarity":0,
    "normalized_text_entropy":4.440013732,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.594931939,
    "normalized_TFIDF":0.083487618,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I want to create a graphics whereby circles are overlapped and their colour fades out, also the circles should have a white space in between each other, something similar to this: Here is how far I've got: Frame:"
  },
  {
    "postid":6718,
    "postdate":1363341720,
    "tag":"1",
    "TFMvalue":0.533333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.252636794,
    "concept_entropy":3.902174814,
    "UMASS(coherence)":0.430187904,
    "TFIDF(informativeness)":2.396960011,
    "polarity":1,
    "normalized_text_entropy":4.252636794,
    "normalized_concept_entropy":3.902174814,
    "normalized_UMASS":0.391079913,
    "normalized_TFIDF":0.095529364,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"There are a number of ways to achieve this, but first, start by overriding instead of. Second, you will need some kind of loop that expand the radius of the circle on each iteration. Thirdly, you will want a simple value that acts as a alpha value, starting from 255 and decreases down to the faintest alpha level you want, perhaps 64 of example. On each iteration of the loop, you will want to increase the radius value and decrease the alpha value accordingly. You would then simply need to create a new object with the RGB & alpha values you need Check out for details You might also like to check out "
  },
  {
    "postid":6719,
    "postdate":1363341780,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.589258934,
    "concept_entropy":4.609240702,
    "UMASS(coherence)":0.665118117,
    "TFIDF(informativeness)":3.81013969,
    "polarity":0,
    "normalized_text_entropy":4.589258934,
    "normalized_concept_entropy":4.609240702,
    "normalized_UMASS":0.604652834,
    "normalized_TFIDF":0.15185077,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a game that runs off of which has on it many other things which have their own independent timers and such. It seems that when I try to remove the panel from my frame to replace it with another it refuses to actually end all of its own processes. So even if I am able to remove it from the screen of the panel by removing it and setting it, its processes are still going off in the background, IE the music and the stuff flying around.What i need to know is some solution as to how to completely kill this and terminate its life to its entirety. Seems not many people have run into this problem."
  },
  {
    "postid":6720,
    "postdate":1304946120,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.170355322,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.711830309,
    "TFIDF(informativeness)":0.736354837,
    "polarity":0,
    "normalized_text_entropy":4.170355322,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.647118463,
    "normalized_TFIDF":0.029346968,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I remember having that issue in my own game..Simply create some custom method i.e which will stop all timers gameloops music etc. i.e where panel would be:you could make your Swing Timers of sorts by making it check each time whether the panel is visible and if not it should stop executing. This would though now of course cause you to create a timer which will only start the others once the panel becomes visible: now all you would do is:"
  },
  {
    "postid":6721,
    "postdate":1304946720,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.912306193,
    "concept_entropy":4.205132082,
    "UMASS(coherence)":0.099226555,
    "TFIDF(informativeness)":0.49598713,
    "polarity":0,
    "normalized_text_entropy":3.912306193,
    "normalized_concept_entropy":4.205132082,
    "normalized_UMASS":0.090205959,
    "normalized_TFIDF":0.019767261,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Try this: Make sure your music and other components are within the panel so they are removed as well."
  },
  {
    "postid":6722,
    "postdate":1304946780,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.213280803,
    "concept_entropy":0,
    "UMASS(coherence)":0.214799368,
    "TFIDF(informativeness)":2.187547217,
    "polarity":5,
    "normalized_text_entropy":4.213280803,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.195272153,
    "normalized_TFIDF":0.087183346,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"I am implementing a heap for abstract objects.Now I was able to implement a stack as there are no comparisons required for a Stack.However the heap requires comparisons.So I have, and. I can ensure that the that are in the are of the same class, and that they can be ordered (that is the class has a function to know.But if I use, I get a syntax error saying that is not defined for objects.I did some research and found that Object does not implement Comparable.How can I go about this problem.Thank you."
  },
  {
    "postid":6723,
    "postdate":1304947260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.993743542,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.842237913,
    "polarity":1,
    "normalized_text_entropy":3.993743542,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.073421257,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"What if all your objects were descendants of a common ancestor which do implement? So in that case you could use that type in your code not."
  },
  {
    "postid":6724,
    "postdate":1304946480,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":0,
    "concept_entropy":4.421207906,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.480607152,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.421207906,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.09886307,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Object does not implements comparable. You should crate MyObject which implements interface. "
  },
  {
    "postid":6725,
    "postdate":1304947260,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.825251737,
    "concept_entropy":4.180886643,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.023937782,
    "polarity":0,
    "normalized_text_entropy":3.825251737,
    "normalized_concept_entropy":4.180886643,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.080662793,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" Well you can make that class implement Interface with as "
  },
  {
    "postid":6726,
    "postdate":1304947080,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":4.462210683,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.047268539,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.462210683,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.081592626,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have recently implemented and I am trying to teach myself the code by breaking it down line by line. I am having trouble understanding what the !FILTERS object on the line of code below means.It would be greatly appreciated if someone helped me understand !FILTERS"
  },
  {
    "postid":6727,
    "postdate":1294770720,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.245369528,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.259375276,
    "polarity":0,
    "normalized_text_entropy":4.245369528,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.090046009,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It is simply a negation of a condition... You should read it like this:Basically, if the filters don't match the href, AND that the href starts with \"http://www.ics.uci.edu/\", that function would return true."
  },
  {
    "postid":6728,
    "postdate":1294771680,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.069063997,
    "concept_entropy":4.5630285,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.066809867,
    "polarity":1,
    "normalized_text_entropy":4.069063997,
    "normalized_concept_entropy":4.5630285,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.082371434,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The opposite value of. basically exclamation point is also called sign. if this condition: returns true, it changes it to false."
  },
  {
    "postid":6729,
    "postdate":1357030920,
    "tag":"1",
    "TFMvalue":0.818181818,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.270630359,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.871806793,
    "polarity":1,
    "normalized_text_entropy":4.270630359,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.074599706,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"For example, I have a JSON format like this: I would like to create a Object, which is a Object, and get two attribute, and with the value of and.Here is the requirement: "
  },
  {
    "postid":6730,
    "postdate":1357031100,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.102893949,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.295637684,
    "polarity":1,
    "normalized_text_entropy":4.102893949,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.091491225,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Your first case is perfectly feasible using any Java/JSON parser. Your second case is possible, but hard work.You can construct classes at runtime using - e.g. using. Note that the JSON will contail fields only, and not behaviour nor type."
  },
  {
    "postid":6731,
    "postdate":1357031340,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.247581337,
    "concept_entropy":0,
    "UMASS(coherence)":0.417190719,
    "TFIDF(informativeness)":1.280575894,
    "polarity":0,
    "normalized_text_entropy":4.247581337,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.37926429,
    "normalized_TFIDF":0.051036563,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Take a look at it does what you want"
  },
  {
    "postid":6732,
    "postdate":1357031520,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.2250752,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.873626254,
    "polarity":2,
    "normalized_text_entropy":4.2250752,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.07467222,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You want a JSON processor, like. I'm not sure you can easily do your second case this way, for that you may be best looking at a JVM JavaScript implementation unless you want to get into stuff like on the fly bytecode manipulation. There's."
  },
  {
    "postid":6733,
    "postdate":1357037520,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.381790592,
    "concept_entropy":4.206850193,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.303547671,
    "polarity":-1,
    "normalized_text_entropy":4.381790592,
    "normalized_concept_entropy":4.206850193,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.051952089,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Given a really oversimplified example: Is there any way that B can communicate with A without Sockets?By communicate, I mean B sending values to A without A invoking a method on B. : Thank you for your responses. This following is my follow up question: If I had the following, and method signal() is called simultaneously by 2 instances of B, this will cause a conflict of every B calling action twice. What can I do to solve it?"
  },
  {
    "postid":6734,
    "postdate":1357135620,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.212958865,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.645837487,
    "TFIDF(informativeness)":1.561526529,
    "polarity":-1,
    "normalized_text_entropy":4.212958865,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.587124988,
    "normalized_TFIDF":0.062233678,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Give them both access to the same. One puts elements onto it, the other pulls elements from it. If they're in separate threads, one of the implementations should do the trick."
  },
  {
    "postid":6735,
    "postdate":1341699660,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.219260445,
    "concept_entropy":4.262979041,
    "UMASS(coherence)":0.524198179,
    "TFIDF(informativeness)":1.380756625,
    "polarity":3,
    "normalized_text_entropy":4.219260445,
    "normalized_concept_entropy":4.262979041,
    "normalized_UMASS":0.476543799,
    "normalized_TFIDF":0.055029205,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"You'd have to pass into the constructor for B: Admittedly it's generally not a great idea to let \"escape` in the constructor, but every so often it's cleaner than the alternatives."
  },
  {
    "postid":6736,
    "postdate":1341700260,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.262085737,
    "concept_entropy":0,
    "UMASS(coherence)":0.605032825,
    "TFIDF(informativeness)":1.483886773,
    "polarity":2,
    "normalized_text_entropy":4.262085737,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.550029841,
    "normalized_TFIDF":0.059139393,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"If passes an instance of itself in the constructor, you:(to answer the follow-up question) If you would like to make sure that multiple invocations of do not modify the the state of concurrently, you should protect its by using keyword. If the entire method represents a single critical section, you can add to method's declaration, like this:"
  },
  {
    "postid":6737,
    "postdate":1341700380,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.299768557,
    "concept_entropy":4.564916996,
    "UMASS(coherence)":0.745450958,
    "TFIDF(informativeness)":2.393106898,
    "polarity":0,
    "normalized_text_entropy":4.299768557,
    "normalized_concept_entropy":4.564916996,
    "normalized_UMASS":0.677682689,
    "normalized_TFIDF":0.095375801,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6738,
    "postdate":1333207020,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.184338553,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.21614267,
    "polarity":-1,
    "normalized_text_entropy":4.184338553,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.048468617,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Following program outputwhy its not 15 in both cases.Object of Value is passed and then object reference is changed in the Second method.Second method its 15 as it should be and seems like in First method it should also be 15"
  },
  {
    "postid":6739,
    "postdate":1333216800,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.294716165,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":0.499262313,
    "TFIDF(informativeness)":1.94504054,
    "polarity":-1,
    "normalized_text_entropy":4.294716165,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":0.45387483,
    "normalized_TFIDF":0.077518392,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Java method implementations are but not exactly a. You are passing an object means an in-line, method scope variable is referring to the object created in method. That means any modifications to the same object, referred by, will also reflect at calling end. But, in your method, you are creating a fresh object for but pointing to the method scope variable. This new objects memory location is not the same as that of passed in method parameter. To identify the difference, check the of the objects created using their reference variables. And hence changing the instance variables of in method will not be returned to the caller of the method, unless the method is returning the altered object. Your method returns a here. Programmers, most of the time, get confused with the same reference names used in caller and called methods. Look at the following example to understand the difference. I have included afourth` methods, to explain it further. When you run the above example, you may see an output as below: If you really want to hold the changes made to an object in a called method, say, the other possibility is to declare as. Following example will explain the differences. When you run with the above extended example, you may see an output as below: Hope this helps you. Other references:"
  },
  {
    "postid":6740,
    "postdate":1333208100,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.306234365,
    "concept_entropy":4.60993625,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":4.582627015,
    "polarity":8,
    "normalized_text_entropy":4.306234365,
    "normalized_concept_entropy":4.60993625,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.182637776,
    "normalized_polarity":0.407407407,
    "tagtext":"inheritance",
    "posttext":"When you pass to, what is passed by value is the that is stored in. Recall that Java has only reference types, not object types like C++. Inside, when you execute, it changes the same object that is referenced by the local variable in. That change remains in place even when the parameter is reassigned inside."
  },
  {
    "postid":6741,
    "postdate":1333207260,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.006573937,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.807975067,
    "polarity":0,
    "normalized_text_entropy":4.006573937,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.032201348,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Let me try and explain with an analogyImagine that your value object is a real object- a piece of paper with the number 15 written on it. You give that piece of paper to a friend named \"First\". First puts that piece of paper to one side and gets a new piece of paper, with 15 written on it, but crosses out the 15 and writes 25 on it.He gives this second piece of paper to another friend named \"Second\". Second takes that piece of paper, crosses out the 25 that First wrote and writes 20 on it instead. He then picks up yet another piece of paper with the number \"15\" and shows that to you - you see the number 15. Then you ask First to show you the piece of paper that he gave to Second. You see that it says \"20\""
  },
  {
    "postid":6742,
    "postdate":1225793220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.933562714,
    "concept_entropy":0,
    "UMASS(coherence)":0.169628916,
    "TFIDF(informativeness)":1.297308148,
    "polarity":0,
    "normalized_text_entropy":3.933562714,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.154208105,
    "normalized_TFIDF":0.051703417,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"All parameters in Java are value parameter.When you call method:JVM will copy object to, has the same pointer to.when you assign1, When you set, the value of and is change to 20(because these object have the same pointer) 2,; that mean you assignat this time, v1 and v have different pointer. after you call method, value of v is 20(step 1)."
  },
  {
    "postid":6743,
    "postdate":1225820460,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.414817126,
    "concept_entropy":0,
    "UMASS(coherence)":0.383450837,
    "TFIDF(informativeness)":0.945352959,
    "polarity":4,
    "normalized_text_entropy":4.414817126,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.34859167,
    "normalized_TFIDF":0.03767646,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"I am very new to Java and I was wondering if it is possible to assign an object to another object. For example, supposing I have an object called Classroom. In this classroom, I have got chairs, tables, board etc.Chairs, tables and the board are objects themselves with their own separate attributes such as number of chair legs, table legs, width of the board etc. So basically, I have 4 classes. Now I want to assign the chair, table, board to be attributes of the ClassRoom. I am not sure how to go about this.Any help would be appreciated,Thanks in advanceEster"
  },
  {
    "postid":6744,
    "postdate":1391869980,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.446477307,
    "concept_entropy":4.614686838,
    "UMASS(coherence)":0.328882528,
    "TFIDF(informativeness)":2.738718148,
    "polarity":9,
    "normalized_text_entropy":4.446477307,
    "normalized_concept_entropy":4.614686838,
    "normalized_UMASS":0.298984116,
    "normalized_TFIDF":0.109149924,
    "normalized_polarity":0.425925926,
    "tagtext":"inheritance",
    "posttext":"I'm not a big java guy but I suspect it is similar to doing this in C++...As long as the classes are defined you should be able to declare them as properties of another object just like you would with something such as a String. Just make sure each object is defined and it's supporting methods are defined within that class. This may not be exactly syntactically correct, but it should look something like this: Now if you want to access the classRoom chair you just do something like this: Although note that this is bad practice, you should set up functions to get such values, instead of directly accessing them."
  },
  {
    "postid":6745,
    "postdate":1391876040,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.370038942,
    "concept_entropy":4.441243803,
    "UMASS(coherence)":0.356956346,
    "TFIDF(informativeness)":0.798380181,
    "polarity":-2,
    "normalized_text_entropy":4.370038942,
    "normalized_concept_entropy":4.441243803,
    "normalized_UMASS":0.324505769,
    "normalized_TFIDF":0.03181895,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"You need to make Classroom a \"composite\" class, one that holds fields that refer to the other classes that you've mentioned. For instance, Classroom could hold an (or known as an ArrayList Furnature), and your Chair, Table, and similar classes could extend from an abstract Furnature class. Then you could give Classroom methods that allow you to add and remove Furnature items from the ArrayList."
  },
  {
    "postid":6746,
    "postdate":1382206140,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.381887058,
    "concept_entropy":4.087861736,
    "UMASS(coherence)":0.347610956,
    "TFIDF(informativeness)":0.934709781,
    "polarity":0,
    "normalized_text_entropy":4.381887058,
    "normalized_concept_entropy":4.087861736,
    "normalized_UMASS":0.31600996,
    "normalized_TFIDF":0.037252282,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You have a relation between classroom and table (for example). The basic design would look like this:"
  },
  {
    "postid":6747,
    "postdate":1382206380,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.037994969,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.609024721,
    "polarity":0,
    "normalized_text_entropy":4.037994969,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.064126689,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":": for adding objects and outside, from main for example now make your classroom:"
  },
  {
    "postid":6748,
    "postdate":1382206440,
    "tag":"1",
    "TFMvalue":0.6875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.2675263,
    "concept_entropy":0,
    "UMASS(coherence)":0.721426271,
    "TFIDF(informativeness)":2.146736445,
    "polarity":0,
    "normalized_text_entropy":4.2675263,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.655842065,
    "normalized_TFIDF":0.085556858,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I guess an easy way is to go with lists"
  },
  {
    "postid":6749,
    "postdate":1362045540,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":1,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.392749118,
    "polarity":0,
    "normalized_text_entropy":1,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.055507158,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I want to declare an object in java that is like a a pointer to a pointer in C++, let me show you an example :In the above code i have created a settings container class that contain all settings of my application components, then i have assigned each sub settings class to the related component, at this point during the execution of the program i want to update the settings and let the component of the application to see the updated settings, so for example during the execution i can update the settings container in this way :Now the problem is that when i update the settings container at runtime the application static class will contain the updated reference to the instance while each sub Settings instance keep referencing the old sub settings, so :While i want that the two reference automatically reference to the new instance of the settings, so :It is like a pointer to pointer ... Is it possible in Java ? How can it be done ? "
  },
  {
    "postid":6750,
    "postdate":1362045600,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.122606657,
    "concept_entropy":0,
    "UMASS(coherence)":0.510905151,
    "TFIDF(informativeness)":1.757692179,
    "polarity":0,
    "normalized_text_entropy":4.122606657,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.464459228,
    "normalized_TFIDF":0.070051739,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In Java, you only have references to objects.To have a reference to a reference you need some sort of indirection. e.g. You can pass the ref around and change it in one place.However, this won't notify any of the references that it has changed, just allow all references to see the same thing when they check next time."
  },
  {
    "postid":6751,
    "postdate":1362045660,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.194559074,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.63132284,
    "polarity":0,
    "normalized_text_entropy":4.194559074,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.065015367,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Well, instead of setting new settings in Application, update the existing ones.Or simply document the fact that these settings could change, and that any code interested in having the new settings must always go through."
  },
  {
    "postid":6752,
    "postdate":1362046440,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.292790292,
    "concept_entropy":4.120300687,
    "UMASS(coherence)":0.506324182,
    "TFIDF(informativeness)":1.488186111,
    "polarity":0,
    "normalized_text_entropy":4.292790292,
    "normalized_concept_entropy":4.120300687,
    "normalized_UMASS":0.460294711,
    "normalized_TFIDF":0.05931074,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You need to use some form of notification system to accomplish what you are trying to do.An observer/observable or some event based system with listeners that are interested in the changes is really the only way to go. You could certainly create threadsafe settings objects (like DatabaseSettings) that can be updated, and therefore the consumer of the object will get the new values, but this will only work in the simplest of cases.The problem with this approach is that the results of multiple calls to the settings instance will become inconsistent.Assuming that there are multiple settings in the settings object that are related to one another, if one settings is retrieved, the object is updated, and then the next setting is retrieved, you have no way of knowing that the two calls have produced inconsistent (to each other) values. For Example: If dbSettings is updated between these 2 calls, then the username and connection will no longer match. The other issue is that if anyone extracts specific values from a settings object and stores them in another variable or class, they will have no way of knowing that it changed. It makes the way in which these classes are used very rigid and error prone."
  },
  {
    "postid":6753,
    "postdate":1362045720,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.260187361,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.926029213,
    "polarity":4,
    "normalized_text_entropy":4.260187361,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.116615091,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"I have the following and at runtime I want to pass it an,, or:At the same time I want to get an,, or from it, so there are two things:"
  },
  {
    "postid":6754,
    "postdate":1362045780,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.189047671,
    "concept_entropy":3.74741304,
    "UMASS(coherence)":0.539966467,
    "TFIDF(informativeness)":1.919570582,
    "polarity":-7,
    "normalized_text_entropy":4.189047671,
    "normalized_concept_entropy":3.74741304,
    "normalized_UMASS":0.490878606,
    "normalized_TFIDF":0.076503303,
    "normalized_polarity":0.12962963,
    "tagtext":"inheritance",
    "posttext":"Casting: In case you have multiple types of objects inside the Vector you could check the type using: The third thing you can do to avoid the need ov casting objects to a particular type is using a typed:"
  },
  {
    "postid":6755,
    "postdate":1362045960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.37097961,
    "concept_entropy":0,
    "UMASS(coherence)":0.528475023,
    "TFIDF(informativeness)":2.319442479,
    "polarity":-9,
    "normalized_text_entropy":4.37097961,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.480431839,
    "normalized_TFIDF":0.092439951,
    "normalized_polarity":0.092592593,
    "tagtext":"inheritance",
    "posttext":"The only stores a to the object, not the object itself. However since the (non generic) class is defined as storing references to you have to cast the stored references back to the original type before using them: That does of course require that you know in advance which particular type is stored in which element... You could do:"
  },
  {
    "postid":6756,
    "postdate":1362045960,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.114166203,
    "concept_entropy":0,
    "UMASS(coherence)":0.160255139,
    "TFIDF(informativeness)":1.578083802,
    "polarity":0,
    "normalized_text_entropy":4.114166203,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.14568649,
    "normalized_TFIDF":0.062893558,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You'll have to iterate and check for instances, for example:"
  },
  {
    "postid":6757,
    "postdate":1382161980,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.358294747,
    "concept_entropy":0,
    "UMASS(coherence)":0.542201394,
    "TFIDF(informativeness)":1.567487139,
    "polarity":-3,
    "normalized_text_entropy":4.358294747,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.492910358,
    "normalized_TFIDF":0.062471234,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"You'd have to check the class of the object: That's not a good design though. You might want to consider storing the objects in different vectors or using a comming representation (e.g. String) along with conversion. Edit: Since, and the like all extend you might also just check for and then call, etc. on the casted object if all you need is the number and not the type."
  },
  {
    "postid":6758,
    "postdate":1331736360,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.464885143,
    "concept_entropy":4.325265367,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.35422068,
    "polarity":-1,
    "normalized_text_entropy":4.464885143,
    "normalized_concept_entropy":4.325265367,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.053971631,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Try using the instanceof and casting :"
  },
  {
    "postid":6759,
    "postdate":1331737320,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.315137776,
    "concept_entropy":4.325265367,
    "UMASS(coherence)":0.716457381,
    "TFIDF(informativeness)":1.643788667,
    "polarity":4,
    "normalized_text_entropy":4.315137776,
    "normalized_concept_entropy":4.325265367,
    "normalized_UMASS":0.651324892,
    "normalized_TFIDF":0.065512184,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"instanceof checks the \"isa\" releationship.If you want to be 100% sure of the class, use getClass().here is a long winded example:I did not complile the code above."
  },
  {
    "postid":6760,
    "postdate":1337191620,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.355173006,
    "concept_entropy":3.74741304,
    "UMASS(coherence)":0.649019878,
    "TFIDF(informativeness)":1.543845995,
    "polarity":-1,
    "normalized_text_entropy":4.355173006,
    "normalized_concept_entropy":3.74741304,
    "normalized_UMASS":0.590018071,
    "normalized_TFIDF":0.061529031,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"So lets say I want to make a deep copy of an object, but using its contsructor. So I have: And so say I have this being called: What I am doing, however, is incorrect, and Im not sure why.."
  },
  {
    "postid":6761,
    "postdate":1372083780,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.270353188,
    "concept_entropy":0,
    "UMASS(coherence)":0.460155421,
    "TFIDF(informativeness)":0.785566805,
    "polarity":-4,
    "normalized_text_entropy":4.270353188,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.41832311,
    "normalized_TFIDF":0.031308281,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"The problem lies in your deep copy logic: You are setting the field (which is redundant with the array) but are not assigning a new array to the field, which is presumably the whole point of your \"deep\" copy.You should initialize to the other's (or): (And get rid of all together)"
  },
  {
    "postid":6762,
    "postdate":1337190000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.29560988,
    "concept_entropy":0,
    "UMASS(coherence)":0.534670867,
    "TFIDF(informativeness)":0.638782696,
    "polarity":0,
    "normalized_text_entropy":4.29560988,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.486064425,
    "normalized_TFIDF":0.025458291,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Ok so say I have a class Now say I dont explicitly define a constructor, so it just uses the default one. If I were to create a new Ghost object, what value would direction have? 0 right? But I dont know why I keep getting a value of 1 for direction. Anything off the bat that you think could be wrong?"
  },
  {
    "postid":6763,
    "postdate":1315621800,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.33679038,
    "concept_entropy":0,
    "UMASS(coherence)":0.306579656,
    "TFIDF(informativeness)":1.828463802,
    "polarity":0,
    "normalized_text_entropy":4.33679038,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.278708778,
    "normalized_TFIDF":0.072872298,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Can you show us more code? Methinks something else is going on here.variables will default initialize to 0 in Java, and if I use your snippet, and instantiate a, all its members are 0. So from your comments, I think there might be an issue with your code, like you are accidentally setting when using or. In my extremely simple class implementation, this testing code works exactly as intended. Okay so I have a class based on your code. I don't see anything wrong with the other functions, since very few classes actually alter. I removed those extra functions because they didn't modify direction except for one thing that would set it to 0. You should try a very reduced test case to see if your code works. Try this: Everything still works here, so try that code as is. This is purely your code, and if it works (and it should), then there's other code like a user of your class that is doing something. Standalone, your code should work just fine. Are you familiar with a debugger? If you are using Eclipse or NetBeans, then you should get friendly with using the debuggers integrated into their environments. This should really help you track down when changes values by placing a watch on it. Using a debugger is way beyond the scope of this answer; it's something you really have to read up on and try yourself. Here's a link for debugging with Eclipse:"
  },
  {
    "postid":6764,
    "postdate":1315623180,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.339942359,
    "concept_entropy":0,
    "UMASS(coherence)":0.372636796,
    "TFIDF(informativeness)":3.281038485,
    "polarity":4,
    "normalized_text_entropy":4.339942359,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.338760724,
    "normalized_TFIDF":0.130763767,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"There's something you aren't showing us.Does your getDirection() method simply return direction, or does it do something more exotic?Is there a setter method that does something strange?Does some other part of the class that you did not show us modify direction in some way? In Java, instance variables of type int are initialized to 0, so you are either not showing us something or you are using some non-standard implementation (almost definitely not the latter)."
  },
  {
    "postid":6765,
    "postdate":1315622100,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.375007242,
    "concept_entropy":0,
    "UMASS(coherence)":0.709595383,
    "TFIDF(informativeness)":1.796926546,
    "polarity":0,
    "normalized_text_entropy":4.375007242,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.645086712,
    "normalized_TFIDF":0.0716154,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"my problem is to store details of people in java. I looked up at the oracle website topic and found out that one can use object arrays(2 dimensional) to store details.But my interest is to make a so I can store any amount of data and also to store those details from the user. For instance, at the beginning of the program I can specify an object array to hold 5 records, but I actually want an array that could add another available location if I need to add more records (dynamic). Is there a way this is possible in java ? If so, do you happen to know any good places I could start, perhaps a link. Is storing using an Object array the best option ? Thanks a million"
  },
  {
    "postid":6766,
    "postdate":1315622160,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.296684786,
    "concept_entropy":0,
    "UMASS(coherence)":0.486614614,
    "TFIDF(informativeness)":2.079756148,
    "polarity":-8,
    "normalized_text_entropy":4.296684786,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.442376922,
    "normalized_TFIDF":0.0828874,
    "normalized_polarity":0.111111111,
    "tagtext":"inheritance",
    "posttext":"An array holds data, i.e. usually the class of everything in every cell of an array is the same. You will likely not want to store a person's name and his shoe size in fields of the same type, so... let's drop one of the array's dimensions. You should declare a class called something like and specify within it all the attributes you want to store for a person. Having done that, you will only be wanting to store a one dimensional array (or something) of. Next, note that arrays are fixed in size. If you want to extend an array, you would need to allocate a new, bigger array, copy the contents of the old one into the new one and then go on working with the new one in place of the old one. That's a lot of work, and error prone. In the modified words of Apple, there's a class for that! The older qualified class was, a class where you could store objects and that would grow every time you add a new object to it. Nowadays, the class to use for this (it's a bit more efficient) is. Same thing: You do and then you can repeatedly and you can access folks in the list by doing or even OK, to store people with an ID and access them by that ID assuming the person ID is an integer, some appropriate code would be: then you can retrieve it with"
  },
  {
    "postid":6767,
    "postdate":1308074400,
    "tag":"1",
    "TFMvalue":0.785714286,
    "comparitive_count":15,
    "Normalized_count":0.25,
    "text_entropy":4.214131555,
    "concept_entropy":0,
    "UMASS(coherence)":0.236177295,
    "TFIDF(informativeness)":1.381843963,
    "polarity":-1,
    "normalized_text_entropy":4.214131555,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.214706632,
    "normalized_TFIDF":0.05507254,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Look at java.util.List, java.util.Map, and System.arraycopy for some data structures that will help you."
  },
  {
    "postid":6768,
    "postdate":1311098220,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.271097263,
    "concept_entropy":4.556929659,
    "UMASS(coherence)":0.372903936,
    "TFIDF(informativeness)":2.328894835,
    "polarity":2,
    "normalized_text_entropy":4.271097263,
    "normalized_concept_entropy":4.556929659,
    "normalized_UMASS":0.339003578,
    "normalized_TFIDF":0.092816669,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"First you should understand that the. It just be used to of what you've done.To store the values you've got, you have to use Files or DB. You can. I think with JDK 1.6 you can't dynamically change the size of the Array, but the upcoming JDK 7 may provide such a feature."
  },
  {
    "postid":6769,
    "postdate":1308088740,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.29605172,
    "concept_entropy":0,
    "UMASS(coherence)":0.476784417,
    "TFIDF(informativeness)":1.920405419,
    "polarity":-1,
    "normalized_text_entropy":4.29605172,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.433440379,
    "normalized_TFIDF":0.076536575,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Can you cast an object to one that implements an interface? Right now, I'm building a GUI, and I don't want to rewrite the Confirm/Cancel code (A confirmation pop-up) over and over again. So, what I'm trying to do is write a class that gets passed it's used in and tells whether or not the user pressed Confirm or Cancel. always implements a certain interface. Code: I realize that I'm probably over-complicating things, but now that I've run across this, I really want to know if you can cast an object to another object that implements a certain interface."
  },
  {
    "postid":6770,
    "postdate":1308081000,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.304691203,
    "concept_entropy":0,
    "UMASS(coherence)":0.684058576,
    "TFIDF(informativeness)":2.055108418,
    "polarity":3,
    "normalized_text_entropy":4.304691203,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.621871433,
    "normalized_TFIDF":0.08190508,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"You can cast objects either up or down the type hierarchy; sometimes this is safe, and sometimes it isn't. If you attempt to cast a variable to an incompatible type (i.e. try to convince the compiler it's something it's not), you'll get a runtime exception (i.e. error). Going to a more general type (like changing an into an) is called upcasting, and is always safe, assuming the class you're casting to is one of the ancestors of your current class (and is an ancestor of everything in Java). Going to a more specific type (like casting from to) only works if your object actually an instance of the more specific type.So, in your case, it sounds like what you're trying to do is say that ConfirmFrame implements the interface ActionListener. I assume that that interface includes: And then here, in your implementation of that virtual method, you want to delegate the evt to whatever object was passed into the constructor. The problem here is that doesn't have a method called; only a more specialized class (in this case, an implementation of like your class) would have it. So what you probably want is for that constructor to take an instead of an. Of course, more explanatory variable names than \"o\" or \"a\" would probably help you (and anyone else reading this) understand why you're passing an ActionListener into another ActionListener."
  },
  {
    "postid":6771,
    "postdate":1385025000,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.381452415,
    "concept_entropy":0,
    "UMASS(coherence)":0.865368364,
    "TFIDF(informativeness)":3.131753302,
    "polarity":-4,
    "normalized_text_entropy":4.381452415,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.786698513,
    "normalized_TFIDF":0.124814098,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"Of course you can - the usual syntax for casting applies. You could even declare the parameter type as the interface rather than.of course, the type of the variable also needs to be the interface or, alternatively you can cast it when calling a method on it, ie. or"
  },
  {
    "postid":6772,
    "postdate":1385025180,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":3.972724472,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.1531228,
    "polarity":1,
    "normalized_text_entropy":3.972724472,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045956999,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Example Usage ofthe Above answer: :)"
  },
  {
    "postid":6773,
    "postdate":1385025240,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.194291315,
    "concept_entropy":0,
    "UMASS(coherence)":0.438484386,
    "TFIDF(informativeness)":1.403829502,
    "polarity":1,
    "normalized_text_entropy":4.194291315,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.398622169,
    "normalized_TFIDF":0.05594876,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"So i have a class, that has its own width (w), height (h), x and y positions for drawning it later on a JPanel using this methodNow I need to make more of them and add them in ArrayList .. then call the method for each of the object stored in the ArrayList So far I've managed to make a method that stores the Kostka objects in ArrayList,"
  },
  {
    "postid":6774,
    "postdate":1385026620,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.234145109,
    "concept_entropy":0,
    "UMASS(coherence)":0.275560624,
    "TFIDF(informativeness)":1.234949116,
    "polarity":1,
    "normalized_text_entropy":4.234145109,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.250509658,
    "normalized_TFIDF":0.049218136,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"That's done the normal way: However, the way to retrieve the from your list will depend on how you declared the list."
  },
  {
    "postid":6775,
    "postdate":1385026680,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.438477891,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.240085482,
    "polarity":2,
    "normalized_text_entropy":4.438477891,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.089277227,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You can perform a \"cast\" in order to retrieve the Kostka elements of the ArrayList: If you are using a version of Java which supports Generics, the cast is unnecessary. You can do:"
  },
  {
    "postid":6776,
    "postdate":1385025180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.340487161,
    "concept_entropy":4.616845068,
    "UMASS(coherence)":0.557299216,
    "TFIDF(informativeness)":2.022567609,
    "polarity":1,
    "normalized_text_entropy":4.340487161,
    "normalized_concept_entropy":4.616845068,
    "normalized_UMASS":0.506635651,
    "normalized_TFIDF":0.080608186,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"/** There seems to be a problem with the intended method call from the performance class. The object is recognized as band but for some reason when i call band.begin() (band is the new performance object and begin its method) band is not recognized and it suggests it be initialized as a variable? */ "
  },
  {
    "postid":6777,
    "postdate":1385025180,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.480769716,
    "concept_entropy":4.736803971,
    "UMASS(coherence)":0.602260637,
    "TFIDF(informativeness)":1.358250418,
    "polarity":-1,
    "normalized_text_entropy":4.480769716,
    "normalized_concept_entropy":4.736803971,
    "normalized_UMASS":0.54750967,
    "normalized_TFIDF":0.054132233,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Change: To: This happens, since the compiler isn't sure the variable is ever assigned a value (if the while won't pass in first place). Although you could work with null values (resulting in NPEs in some cases), you can't work with unassigned values. Recall, a global variable is automatically assigned to null, but not local variables. Note this is true even if logically it must be assigned, for example in a block, you'll have to initialize ( probably) before the, in order to use it, since the compiler is not sure it will ever be assigned in the, but rather catch an exception. Even if you call in the block. That means, logically it must be defined (otherwise the program will terminate) but the compiler is not smart ;)"
  },
  {
    "postid":6778,
    "postdate":1364071800,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.164324678,
    "concept_entropy":4.701671405,
    "UMASS(coherence)":0.453622906,
    "TFIDF(informativeness)":2.225720821,
    "polarity":0,
    "normalized_text_entropy":4.164324678,
    "normalized_concept_entropy":4.701671405,
    "normalized_UMASS":0.41238446,
    "normalized_TFIDF":0.088704732,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm trying to run this code but it gives me a NullPointerException error. However, the methods I'm using seem to work fine separately. Can someone help me pointing out my mistake?Thank you in advance! Here are the methods in question:"
  },
  {
    "postid":6779,
    "postdate":1364074740,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.281010424,
    "concept_entropy":0,
    "UMASS(coherence)":0.355278654,
    "TFIDF(informativeness)":1.248002772,
    "polarity":-3,
    "normalized_text_entropy":4.281010424,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.322980595,
    "normalized_TFIDF":0.049738381,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"The method is lack of a modifierIt should be. Change your code of class as follows and you will get the right result. The result of one run is as follows:"
  },
  {
    "postid":6780,
    "postdate":1364072040,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.510586868,
    "concept_entropy":4.698335528,
    "UMASS(coherence)":0.956870943,
    "TFIDF(informativeness)":2.000916309,
    "polarity":-4,
    "normalized_text_entropy":4.510586868,
    "normalized_concept_entropy":4.698335528,
    "normalized_UMASS":0.869882675,
    "normalized_TFIDF":0.079745287,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"How can I check if an object is of type string? "
  },
  {
    "postid":6781,
    "postdate":1273680540,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.362813072,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.313578284,
    "polarity":3,
    "normalized_text_entropy":4.362813072,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.052351853,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6782,
    "postdate":1273681080,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.050773721,
    "concept_entropy":4.544374179,
    "UMASS(coherence)":0.355044468,
    "TFIDF(informativeness)":1.034672713,
    "polarity":2,
    "normalized_text_entropy":4.050773721,
    "normalized_concept_entropy":4.544374179,
    "normalized_UMASS":0.322767698,
    "normalized_TFIDF":0.041236243,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"By using the operator in java:"
  },
  {
    "postid":6783,
    "postdate":1348715460,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.35478666,
    "concept_entropy":0,
    "UMASS(coherence)":0.374761638,
    "TFIDF(informativeness)":0.877265382,
    "polarity":0,
    "normalized_text_entropy":4.35478666,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.340692398,
    "normalized_TFIDF":0.034962871,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Like this:"
  },
  {
    "postid":6784,
    "postdate":1269595920,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.339170918,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.304743249,
    "polarity":1,
    "normalized_text_entropy":4.339170918,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.051999738,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"is a way to check for the object you got is of String"
  },
  {
    "postid":6785,
    "postdate":1269596160,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.224059207,
    "concept_entropy":4.18350319,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.025452243,
    "polarity":2,
    "normalized_text_entropy":4.224059207,
    "normalized_concept_entropy":4.18350319,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.040868767,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"My experience shows that object creation in Java is very slow. Often, I optimize my code by just removing object creation and using the same objects repeatedly.I am wondering if its similarly slow in other language with OOP base, because, to me, it is very counter intuitive that a language that's hardcore object oriented, takes so much time for object creation. Has anybody profiled this on several langauges?"
  },
  {
    "postid":6786,
    "postdate":1269596160,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.107003751,
    "concept_entropy":0,
    "UMASS(coherence)":0.366260819,
    "TFIDF(informativeness)":1.328151804,
    "polarity":1,
    "normalized_text_entropy":4.107003751,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.332964381,
    "normalized_TFIDF":0.052932672,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Try see what you get from this - some exercising to try to get the VM to notoptimize the loop away: I gotWhich should be around 170 nanosecond per object."
  },
  {
    "postid":6787,
    "postdate":1397199660,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.970748705,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038688591,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"While there might be a under rare circumstances, in general object creation for current virtual machines is as fast as it can practically be.is an article I like called, I think this is just one of those myths. Also take a look at for ideas of how to performance tuning your Java App. Regards."
  },
  {
    "postid":6788,
    "postdate":1397594280,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.193137325,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.50989855,
    "TFIDF(informativeness)":1.585591913,
    "polarity":0,
    "normalized_text_entropy":4.193137325,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.463544136,
    "normalized_TFIDF":0.063192789,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have sorted AllayList with Objects refer to my previous postNow instep1: I want to fetch anyone (randomly select any object) of them else the first highest(that is \"H\"), then edit numbers then save it back.step2: I want to to fetch anyone (randomly select any object) of them else the second highest(that is \"C\"), then edit numbers then save it back.step3:I want to to fetch anyone (randomly select any object) of them else the third highest(that is \"B\"), then edit numbers then save it back. When all 5 will be finished, then the process will start again from step1. In this way I can reduce all student's numbers. If someone please suggest me how can I do that?"
  },
  {
    "postid":6789,
    "postdate":1341243000,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.036150057,
    "concept_entropy":4.332603678,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.22218008,
    "polarity":0,
    "normalized_text_entropy":4.036150057,
    "normalized_concept_entropy":4.332603678,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.048709234,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I got the answer bu doing some simple arithmetic. Create another class to select random number for bellow cases: step1: Taking current student indexstep2: Randomly selecting one student, whom number should reduce, rather than step1 student continuing again step1 and step2"
  },
  {
    "postid":6790,
    "postdate":1341243240,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.299128615,
    "concept_entropy":0,
    "UMASS(coherence)":0.435405106,
    "TFIDF(informativeness)":1.904157171,
    "polarity":0,
    "normalized_text_entropy":4.299128615,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.395822824,
    "normalized_TFIDF":0.075889011,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I've always been one to simply useI use the interface as the type name for portability, so that when I ask questions such as these I can rework my code. When should be used over and vice-versa?"
  },
  {
    "postid":6791,
    "postdate":1341243660,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.340038885,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.388460061,
    "polarity":2,
    "normalized_text_entropy":4.340038885,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.05533622,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"LinkedList and ArrayList are two different implementations of the List interface.LinkedList implements it with a doubly-linked list.ArrayList implements it with a dynamically resizing array. As with standard linked list and array operations, the various methods will have different algorithmic runtimes. ForFor allows for constant-time insertions or removals, but only sequential access of elements.In other words, you can walk the list forwards or backwards, but finding a position in the list takes time proportional to the size of the list. , on the other hand, allow fast random read access, so you can grab any element in constant time.But adding or removing from anywhere but the end requires shifting all the latter elements over, either to make an opening or fill the gap.Also, if you add more elements than the capacity of the underlying array, a new array (1.5 times the size) is allocated, and the old array is copied to the new one, so adding to an ArrayList is O(n) in the worst case but constant on average. So depending on the operations you intend to do, you should choose the implementations accordingly.Iterating over either kind of List is practically equally cheap.(Iterating over an is technically faster, but unless you're doing something really performance-sensitive, you shouldn't worry about this -- they're both constants.) The main benefits of using a arise when you re-use existing iterators to insert and remove elements. These operations can then be done in O(1) by changing the list locally only. In an array list, the remainder of the array needs to be (i.e. copied). On the other side, seeking in a means following the links in O(n), whereas in an the desired position can be computed mathematically and accessed in O(1). Also, if you have large lists, keep in mind that memory usage is also different.Each element of a LinkedList has more overhead since pointers to the next and previous elements are also stored.ArrayLists don't have this overhead.However, ArrayLists take up as much memory as is allocated for the capacity, regardless of whether elements have actually been added. The default initial capacity of an ArrayList is pretty small (10 from Java 1.4 - 1.7).But since the underlying implementation is an array, the array must be resized if you add a lot of elements.To avoid the high cost of resizing when you know you're going to add a lot of elements, construct the ArrayList with a higher initial capacity. It's worth noting that also implements the List interface and is almost identical to ArrayList.The difference is that Vector is synchronized, so it is thread-safe.Because of this, it is also slightly slower than ArrayList.So as far as I understand, most Java programmers avoid Vector in favor of ArrayList since they will probably synchronize explicitly anyway if they care about that."
  },
  {
    "postid":6792,
    "postdate":1341243240,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.418068865,
    "concept_entropy":4.447749745,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.58110287,
    "polarity":1,
    "normalized_text_entropy":4.418068865,
    "normalized_concept_entropy":4.447749745,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.063013881,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Thusfar, nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a is \"lots more\" than an so I did some number crunching to demonstrate exactly how much both lists take up for N null references. Since references are either 32 or 64 bits (even when null) on their relative systems, I have included 4 sets of data for 32 and 64 bit and.The sizes shown for the lines are for - In practice, the capacity of the backing array in an is generally larger than its current element count.As CompressedOops is default now from mid JDK6 and up, the values below for 64-bit machines will basically match their 32-bit counterparts, unless of course you specifically turn it off. The result clearly shows that is a whole lot more than, especially with a very high element count. If memory is a factor, steer clear of. The formulas I used follow, let me know if I have done anything wrong and I will fix it up. 'b' is either 4 or 8 for 32 or 64 bit systems, and 'n' is the number of elements. Note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not. : :"
  },
  {
    "postid":6793,
    "postdate":1341243540,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.288492867,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.389656684,
    "polarity":-1,
    "normalized_text_entropy":4.288492867,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.055383911,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"As someone who has been doing operational performance engineering on very large scale SOA web services for about a decade, I would prefer the behavior of LinkedList over ArrayList.While the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage, while under pressure, which is catastrophic behavior. Similarly, you can get better throughput in an app from the default throughput tenured garbage collector, but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.Even though the CMS collector takes more resources and does not achieve the same raw throughput, it is a much better choice because it has more predictable and smaller latency. ArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.In my experience at my job I cannot ignore worst-case latency."
  },
  {
    "postid":6794,
    "postdate":1339672200,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.331004745,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.106014047,
    "polarity":2,
    "normalized_text_entropy":4.331004745,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.044079508,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":" is what you want. is almost always a (performance) bug. Why sucks:"
  },
  {
    "postid":6795,
    "postdate":1339672680,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.331449404,
    "concept_entropy":0,
    "UMASS(coherence)":0.377840782,
    "TFIDF(informativeness)":0.637695406,
    "polarity":1,
    "normalized_text_entropy":4.331449404,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.34349162,
    "normalized_TFIDF":0.025414957,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Yeah, I know, this is an ancient question, but I'll throw in my two cents: LinkedList is the wrong choice, performance-wise.There are some very specific algorithms where a LinkedList is called for, but those are very, very rare and the algorithm will usually specifically depend on LinkedList's ability to insert and delete elements in the middle of the list relatively quickly, once you've navigated there with a ListIterator. There is one common use case in which LinkedList outperforms ArrayList: that of a queue.However, if your goal is performance, instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time, and can afford to allocate all the memory up front), or this.(Yes, it's from 2001, so you'll need to generify it, but I got comparable performance ratios to what's quoted in the article just now in a recent JVM)"
  },
  {
    "postid":6796,
    "postdate":1325159580,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.16819123,
    "concept_entropy":4.377427156,
    "UMASS(coherence)":0.523722974,
    "TFIDF(informativeness)":0.954712154,
    "polarity":1,
    "normalized_text_entropy":4.16819123,
    "normalized_concept_entropy":4.377427156,
    "normalized_UMASS":0.476111795,
    "normalized_TFIDF":0.038049465,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"ArrayLists are good for write-once-read-many or appenders, but bad at add/remove from the front or middle."
  },
  {
    "postid":6797,
    "postdate":1325159820,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.316097878,
    "concept_entropy":4.183208073,
    "UMASS(coherence)":0.896557048,
    "TFIDF(informativeness)":2.461174772,
    "polarity":2,
    "normalized_text_entropy":4.316097878,
    "normalized_concept_entropy":4.183208073,
    "normalized_UMASS":0.815051862,
    "normalized_TFIDF":0.098088604,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Correct or Incorrect: Please execute test locally and decide yourself!! Edit/Remove is faster in LinkedList than ArrayList. ArrayList, backed by Array, which needs to be double the size, is worse in large volume application. Below is the unit test result for each operation.Timing is given in Nanoseconds."
  },
  {
    "postid":6798,
    "postdate":1325159880,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.241248557,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.479871125,
    "polarity":1,
    "normalized_text_entropy":4.241248557,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.019124968,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It's an efficiency question.LinkedList is fast for adding and deleting elements, but slow to access a specific element.ArrayList is fast for accessing a specific element but can be slow to add to either end, and especially slow to delete in the middle. -- goes more in depth, as does "
  },
  {
    "postid":6799,
    "postdate":1325160000,
    "tag":"1",
    "TFMvalue":0.782608696,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.260204706,
    "concept_entropy":4.696874152,
    "UMASS(coherence)":0.572892305,
    "TFIDF(informativeness)":0.97161679,
    "polarity":0,
    "normalized_text_entropy":4.260204706,
    "normalized_concept_entropy":4.696874152,
    "normalized_UMASS":0.520811186,
    "normalized_TFIDF":0.038723188,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"ArrayList is randomly accessible, while LinkedList is really cheap to expand and remove elements from.For most cases, ArrayList is fine. Unless you're created large lists and have measured a bottleneck, you'll probably never need to worry about the difference."
  },
  {
    "postid":6800,
    "postdate":1292024520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.329441786,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.525573137,
    "polarity":3,
    "normalized_text_entropy":4.329441786,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.020946394,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"(note: might read a little oddly; that is because I merged a virtually identical .NET question; C# and Java are close enough that the concepts are identical) Well, you should avoid unless you are using .NET 1.1 (or micro-framework) - prefer typed collections like where possible. The difference comes from the cost of traversal and manipulation. It is trivial to remove a node from the start or middle of a linked list, since you just re-link the nodes (likewise insert at any point). Removing an element from the start or middle of an array-backed list (including and) involves copying the elements above that point (as does inserting). In both cases, inserting at the end is cheap (although the etc will occasionally have to resize the underlying array to make space, but it does this in a fairly sensible way). If you just want to append, then use etc."
  },
  {
    "postid":6801,
    "postdate":1292024880,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.564391566,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.162416248,
    "polarity":0,
    "normalized_text_entropy":3.564391566,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.046327383,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If your code has and, use a LinkedList and it's prettier and methods. Otherwise, use ArrayList. And of course,'s is your best friend."
  },
  {
    "postid":6802,
    "postdate":1292024880,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.304419837,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.042188381,
    "polarity":0,
    "normalized_text_entropy":4.304419837,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.121244543,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" is faster in add and remove, but slower in get. In brief, should be preferred if: is essentially an array. is implemented as a double linked list.The above discussion is mainly about, and.The is pretty clear. O(1) for, because allow random access by using index. O(n) for, because it needs to find the index first.There are different versions of and.=== === === ==="
  },
  {
    "postid":6803,
    "postdate":1292030400,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":22,
    "Normalized_count":0.366666667,
    "text_entropy":0,
    "concept_entropy":4.39345408,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.588344461,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.39345408,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.103156874,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In addition to the other good arguments above, you should notice ArrayList implements RandomAccess interface, while LinkedList implements Queue. So somehow they address slightly different problems, with difference of efficiency and behavior (see their list of methods)."
  },
  {
    "postid":6804,
    "postdate":1292025480,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.76140633,
    "concept_entropy":4.450527433,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.630992036,
    "polarity":0,
    "normalized_text_entropy":3.76140633,
    "normalized_concept_entropy":4.450527433,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.14471095,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"See."
  },
  {
    "postid":6805,
    "postdate":1292025840,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.445304001,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.822697151,
    "polarity":2,
    "normalized_text_entropy":4.445304001,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.072642472,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I know this is an old post, but I honestly can't believe nobody mentioned that LinkedList implements Deque.Just look at the methods in Deque (and Queue); if you want a fair comparison, try running LinkedList against ArrayDeque and do a feature-for-feature comparison. "
  },
  {
    "postid":6806,
    "postdate":1292028180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.314207874,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":5.748231757,
    "polarity":0,
    "normalized_text_entropy":4.314207874,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.229092235,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"An array list is essentially an array with methods to add items etc. (and you should use a generic list instead). It is a collection of items which can be accessed through an indexer(for example [0]). It implies a progression from one item to the next. A linked list specifies a progression from one item to the next (Item a -> item b).You can get the same effect with an array list, but a linked list absolutely says what item is supposed to follow the previous one. "
  },
  {
    "postid":6807,
    "postdate":1277892360,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":3.939552382,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.521406298,
    "polarity":0,
    "normalized_text_entropy":3.939552382,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.060634711,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have read the responses, but there is one scenario where I always use a LinkedList over an ArrayList that I want to share to hear opinions: Every time I had a method that returns a list of data obtained from a DB I always use a LinkedList. My rationale was that because it is impossible to know exactly how many results am I getting, there will be not memory wasted (as in ArrayList with the difference between the capacity and actual number of elements), and there would be no time wasted trying to duplicate the capacity. As far a ArrayList, I agree that at least you should always use the constructor with the initial capacity, to minimize the duplication of the arrays as much as possible."
  },
  {
    "postid":6808,
    "postdate":1277893800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.160355372,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.893408244,
    "polarity":0,
    "normalized_text_entropy":4.160355372,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.075460619,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"An important feature of a linked list (which I didn't read in another answer) is the concatenation of two lists. With an array this is O(n) (+ overhead of some reallocations) with a linked list this is only O(1) or O(2) ;-) For the Java LinkedList this is not true. See "
  },
  {
    "postid":6809,
    "postdate":1277892660,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.30033807,
    "concept_entropy":0,
    "UMASS(coherence)":0.536342414,
    "TFIDF(informativeness)":1.213035752,
    "polarity":-4,
    "normalized_text_entropy":4.30033807,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.487584013,
    "normalized_TFIDF":0.048344792,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"Here is the big O notation in both ArrayList and LinkedList and also CopyOnWrite-ArrayList  get --> O(1)add --> O(1)contains --> O(n)next --> O(1)remove --> O(n)iterator.remove --> O(n)get --> O(n)add --> O(1)contains --> O(n)next --> O(1)remove --> O(1)iterator.remove --> O(1) get --> O(1)add --> O(n)contains --> O(n)next --> O(1)remove --> O(n)iterator.remove --> O(n)Based on these you have to decide what to choose :)"
  },
  {
    "postid":6810,
    "postdate":1277898960,
    "tag":"1",
    "TFMvalue":0.545454545,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.296556392,
    "concept_entropy":4.331830832,
    "UMASS(coherence)":0.627008515,
    "TFIDF(informativeness)":1.492587859,
    "polarity":-2,
    "normalized_text_entropy":4.296556392,
    "normalized_concept_entropy":4.331830832,
    "normalized_UMASS":0.570007741,
    "normalized_TFIDF":0.059486169,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"It depends upon what operations you will be doing more on the List. ArrayList is faster to access an indexed value.It is much worse when inserting or deleting objects. To find out more, read any article that talks about the difference betwen arrays and linked lists."
  },
  {
    "postid":6811,
    "postdate":1274804940,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.351454729,
    "concept_entropy":0,
    "UMASS(coherence)":0.509391348,
    "TFIDF(informativeness)":0.997943568,
    "polarity":1,
    "normalized_text_entropy":4.351454729,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.463083044,
    "normalized_TFIDF":0.039772426,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"get(i) arraylist faster than linkedListbecause arraylist:Resizable-array implementation of the List interfacelinkedlist:Doubly-linked list implementation of the List and Deque interfaces, Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index. "
  },
  {
    "postid":6812,
    "postdate":1274866200,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.25785294,
    "concept_entropy":0,
    "UMASS(coherence)":0.683810124,
    "TFIDF(informativeness)":0.949598911,
    "polarity":0,
    "normalized_text_entropy":4.25785294,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.621645567,
    "normalized_TFIDF":0.037845679,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Generally speaking, if you have to frequently insert or delete elements from a list(especially in the middle of a list), it is better to use LinkedList. On the other hand, if you want to frequently get an element by index from a list, ArrayList would be a better choice.If you want to know more detail, I suggest you find a book about data structure. It should be a necessery part of any data structure book."
  },
  {
    "postid":6813,
    "postdate":1273846440,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.370514666,
    "concept_entropy":4.448012848,
    "UMASS(coherence)":0.953413755,
    "TFIDF(informativeness)":3.322336243,
    "polarity":6,
    "normalized_text_entropy":4.370514666,
    "normalized_concept_entropy":4.448012848,
    "normalized_UMASS":0.866739777,
    "normalized_TFIDF":0.132409664,
    "normalized_polarity":0.37037037,
    "tagtext":"inheritance",
    "posttext":"You should ask your self what you really want to do after define the variable becouse the arraylist is better to do a quick search accesing the data using the index for example and the linkedList perform better when you want insert or remove because there is no risk of resizing array and copying content to new array if array gets full."
  },
  {
    "postid":6814,
    "postdate":1273846800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.332230482,
    "concept_entropy":0,
    "UMASS(coherence)":0.481967021,
    "TFIDF(informativeness)":0.987796523,
    "polarity":-1,
    "normalized_text_entropy":4.332230482,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.438151837,
    "normalized_TFIDF":0.039368022,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"1) ArrayList search operation is pretty fast compared to the LinkedList search operation. get(int index) in ArrayList gives the performance of O(1) while LinkedList performance is O(n).ArrayList maintains index based system for its elements as it uses array data structure implicitly which makes it faster for searching an element in the list. On the other side LinkedList implements doubly linked list which requires the traversal through all the elements for searching an element. 2) LinkedList remove operation gives O(1) performance while ArrayList gives variable performance: O(n) in worst case (while removing first element) and O(1) in best case (While removing last element).LinkedList element deletion is faster compared to ArrayList.LinkedList��Η��s each element maintains two pointers (addresses) which points to the both neighbor elements in the list. Hence removal only requires change in the pointer location in the two neighbor nodes (elements) of the node which is going to be removed. While In ArrayList all the elements need to be shifted to fill out the space created by removed element. 3) LinkedList add method gives O(1) performance while ArrayList gives O(n) in worst case. Reason is same as explained for remove. 4) ArrayList maintains indexes and element data while LinkedList maintains element data and two pointers for neighbor nodes hence the memory consumption is high in LinkedList comparatively. There are between these classes which are as follows: Both ArrayList and LinkedList are implementation of List interface.They both maintain the elements insertion order which means while displaying ArrayList and LinkedList elements the result set would be having the same order in which the elements got inserted into the List.Both these classes are non-synchronized and can be made synchronized explicitly by using Collections.synchronizedList method.The iterator and listIterator returned by these classes are fail-fast (if list is structurally modified at any time after the iterator is created, in any way except through the iterator��Η��s own remove or add methods, the iterator will throw a ConcurrentModificationException). 1) As explained above the insert and remove operations give good performance (O(1)) in LinkedList compared to ArrayList(O(n)). Hence if there is a requirement of frequent addition and deletion in application then LinkedList is a best choice. 2) Search (get method) operations are fast in Arraylist (O(1)) but not in LinkedList (O(n)) so If there are less add and remove operations and more search operations requirement, ArrayList would be your best bet."
  },
  {
    "postid":6815,
    "postdate":1273846740,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.795088586,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.805649012,
    "polarity":0,
    "normalized_text_entropy":3.795088586,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.032108645,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"When should I use? When working with stacks mostly, or when working with buffers.When should I use? Only when working with indexes,otherwise you can use HashTable with linked list, then you get: It seems like a good solution, and in most of the cases it is, how ever you should know:HashTable takes a lot of disc space, so when you need to manage 1,000,000 elements list it can become a thing that matters. This can happen in server implementations, in clients it is rarely the case. Also take a look at "
  },
  {
    "postid":6816,
    "postdate":1273846740,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.465047063,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.875374678,
    "polarity":1,
    "normalized_text_entropy":4.465047063,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034887518,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Ok so I have a been making an addressbook application and have pretty much finished all the key features but I am looking to implement a sort feature in the program. I want to sort an Arraylist which is of a type called Contact (contactArray) which is a separate class which contains four fields; name, home number, mobile number and address.So I was looking into using the collection sort yet am not sure how i'd implement this. Is this the right sort I should be using / is it possible to use or should I look into making a custom sort?"
  },
  {
    "postid":6817,
    "postdate":1273846860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.284092419,
    "concept_entropy":0,
    "UMASS(coherence)":0.509140348,
    "TFIDF(informativeness)":1.892497199,
    "polarity":3,
    "normalized_text_entropy":4.284092419,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.462854862,
    "normalized_TFIDF":0.07542431,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Here's a tutorial about ordering objects: Although I will give some examples, I would recommend to read it anyway. There are various way to sort an. If you want to define a (default), then you need to let implement. Assuming that you want to sort by default on, then do (nullchecks omitted for simplicity): so that you can just do If you want to define an (which overrides the natural ordering), then you need to create a: You can even define thes in the itself so that you can reuse them instead of recreating them everytime: which can be used as follows: And to cream the top off, you could consider to use a: which you can use as follows:"
  },
  {
    "postid":6818,
    "postdate":1273846860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.384583823,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.891276082,
    "polarity":-2,
    "normalized_text_entropy":4.384583823,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035521259,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":" tells you all you need to know about sorting collections, such as ArrayList. Basically you need to There's another way as well, involving creating a Comparator class, and you can read about that from the linked page as well. Example:"
  },
  {
    "postid":6819,
    "postdate":1273848780,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.368475579,
    "concept_entropy":4.244107876,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.357845395,
    "polarity":-3,
    "normalized_text_entropy":4.368475579,
    "normalized_concept_entropy":4.244107876,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.054116092,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"BalusC and bguiz have already given very complete answers on how to use Java's built-in Comparators. I just want to add that google-collections has an class which is more \"powerful\" than the standard Comparators.It might be worth checking out. You can do cool things such as compounding Orderings, reversing them, ordering depending on a function's result for your objects...is a blog post that mentions some of its benefits."
  },
  {
    "postid":6820,
    "postdate":1261679640,
    "tag":"1",
    "TFMvalue":0.916666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.295687468,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.883978026,
    "polarity":1,
    "normalized_text_entropy":4.295687468,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.0352304,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You need make your Contact classes implement, and then implement the method.That way, the Collections.sort will be able to sort them for you.Per the page I linked to, compareTo 'returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.' For example, if you wanted to sort by name (A to Z), your class would look like this:"
  },
  {
    "postid":6821,
    "postdate":1261680120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.281464984,
    "concept_entropy":4.593886873,
    "UMASS(coherence)":0.983047242,
    "TFIDF(informativeness)":1.567910361,
    "polarity":11,
    "normalized_text_entropy":4.281464984,
    "normalized_concept_entropy":4.593886873,
    "normalized_UMASS":0.893679311,
    "normalized_TFIDF":0.062488101,
    "normalized_polarity":0.462962963,
    "tagtext":"inheritance",
    "posttext":"By using you can sort a collection of your contacts (for example by their name) as it follows or by their address: and so on. More in general, it offers a DSL to access and manipulate your collections in many ways, like filtering or grouping your contacts based on some conditions, aggregate some of their property values, etc."
  },
  {
    "postid":6822,
    "postdate":1261680120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.137519066,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.075466524,
    "polarity":-6,
    "normalized_text_entropy":4.137519066,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.042862056,
    "normalized_polarity":0.148148148,
    "tagtext":"inheritance",
    "posttext":"The Collections.sort is a good sort implementation. If you don't have The comparable implemented for Contact, you will need to pass in aOf note: The merge sort is probably better than most search algorithm you can do."
  },
  {
    "postid":6823,
    "postdate":1261680360,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.536805295,
    "concept_entropy":4.651904255,
    "UMASS(coherence)":0.568366917,
    "TFIDF(informativeness)":1.511270794,
    "polarity":4,
    "normalized_text_entropy":4.536805295,
    "normalized_concept_entropy":4.651904255,
    "normalized_UMASS":0.516697197,
    "normalized_TFIDF":0.060230766,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"You shoud use the Arrays.sort function. The containing classes should implement Comparable."
  },
  {
    "postid":6824,
    "postdate":1257388860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.188476519,
    "concept_entropy":0,
    "UMASS(coherence)":0.35931226,
    "TFIDF(informativeness)":2.553040422,
    "polarity":0,
    "normalized_text_entropy":4.188476519,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.326647509,
    "normalized_TFIDF":0.101749853,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I did it by the following way.number and name are two arraylist. I have to sort name .If any change happen to name arralist order then the number arraylist also change its order."
  },
  {
    "postid":6825,
    "postdate":1257428460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.283397373,
    "concept_entropy":4.564559234,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.666777617,
    "polarity":0,
    "normalized_text_entropy":4.283397373,
    "normalized_concept_entropy":4.564559234,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.146137163,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have an array that is initialised like: I would like to convert this array into an object of the ArrayList class. I am sure I have done this before, but the solution is sitting just at the edge of my memory."
  },
  {
    "postid":6826,
    "postdate":1257389520,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.307513244,
    "concept_entropy":4.391938302,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.160468691,
    "polarity":2,
    "normalized_text_entropy":4.307513244,
    "normalized_concept_entropy":4.391938302,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.086104148,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6827,
    "postdate":1257389100,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.278496786,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.605180817,
    "polarity":0,
    "normalized_text_entropy":4.278496786,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.063973492,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Given: The simplest answer is to do: This will work fine.But some caveats:"
  },
  {
    "postid":6828,
    "postdate":1385467920,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.292649452,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.32557941,
    "polarity":0,
    "normalized_text_entropy":4.292649452,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.052830151,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Since this question is pretty old, it suprises me that nobody suggested the simplest form yet: As of Java 5, Arrays.asList() takes a varargs parameter and you don't have to construct the array explicit."
  },
  {
    "postid":6829,
    "postdate":1385468340,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.223752423,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.889097158,
    "polarity":1,
    "normalized_text_entropy":4.223752423,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.075288803,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6830,
    "postdate":1363455600,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.267526278,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.858400631,
    "polarity":1,
    "normalized_text_entropy":4.267526278,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.074065412,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It's worth pointing out the Guava way, which greatly simplifies these shenanigans: Use the class and its and factory methods: Use the class and its factory methods: Please also note the similar methods for other data structures in other classes, for instance in. The main attraction could be to reduce the clutter due to generics for type-safety, as the use of the Guava allow the types to be inferred most of the time. However, this argument holds less water since Java 7 arrived with the new diamond operator. But it's not the only reason (and Java 7 isn't everywhere yet): the shorthand syntax is also very handy, and the methods initializers, as seen above, allow to write more expressive code. You do in one Guava call what takes 2 with the current Java Collections. Use the JDK's class and its factory method, wrapped with a: Note that the returned type for is a using a concrete implementation, but. It's an inner type, which emulates an but actually directly references the passed array and makes it \"write through\" (modifications are reflected in the array). It forbids modifications through some of the API's methods by way of simply extending an (so, adding or removing elements is unsupported), however it allows calls to to override elements. Thus this list isn't truly immutable and a call to should be wrapped with. See the next step if you need a mutable list. Same as above, but wrapped with an actual:"
  },
  {
    "postid":6831,
    "postdate":1363455960,
    "tag":"1",
    "TFMvalue":0.583333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.264229476,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.621168685,
    "polarity":0,
    "normalized_text_entropy":4.264229476,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.064610679,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Another way (although essentially equivalent to the solution performance-wise:"
  },
  {
    "postid":6832,
    "postdate":1340022120,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.349860057,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.513220363,
    "polarity":0,
    "normalized_text_entropy":4.349860057,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.060308465,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You probably just need a List, not an ArrayList.In that case you can just do:"
  },
  {
    "postid":6833,
    "postdate":1340022600,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.192647806,
    "concept_entropy":0,
    "UMASS(coherence)":0.240031277,
    "TFIDF(informativeness)":1.442169375,
    "polarity":-2,
    "normalized_text_entropy":4.192647806,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.218210252,
    "normalized_TFIDF":0.057476772,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6834,
    "postdate":1340022660,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.155245301,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.04604159,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you use : you create two lists ! Filling twice a big list is exactly what you don't want to do because it will create another Object[] array each time the capacity needs to be extended. Fortunately the JDK implementation is fast and is very well done. It create a kind of ArrayList named Arrays.ArrayList where the Object[] data points directly to the array. The dangerous side is that Are you sure you want that ? Maybe yes, maybe not. If not, the most understandable way is to do this : Don't use Collections, Arrays, or Guava. I love to use it, but if it don't fit, don't use it. Write another inelegant line instead. Well... still use and learn Guava if you can."
  },
  {
    "postid":6835,
    "postdate":1327667280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.080937352,
    "concept_entropy":0,
    "UMASS(coherence)":0.534966307,
    "TFIDF(informativeness)":1.510397755,
    "polarity":0,
    "normalized_text_entropy":4.080937352,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.486333006,
    "normalized_TFIDF":0.060195972,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"To convert an array to an ArrayList, developers often do this: Arrays.asList() will return an ArrayList which is a private static class inside Arrays, it is not the java.util.ArrayList class. The java.util.Arrays.ArrayList class has set(), get(), contains() methods, but does not have any methods for adding elements, so its size is fixed. To create a real ArrayList, you must do: The constructor of ArrayList can accept a Collection type, which is also a super type for java.util.Arrays.ArrayList"
  },
  {
    "postid":6836,
    "postdate":1327667700,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.258184832,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.443953967,
    "polarity":2,
    "normalized_text_entropy":4.258184832,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.057547896,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"There is another option if your goal is to generate a fixed list at runtime, which is as simple as it is effective: The benefit of using this pattern is, that the list is for once generated very intuitively and therefore is very easy to modify even with large lists or complex initialization, while on the other hand always contains the same Elements on every actual run of the program (unless you change it at a later point of course)."
  },
  {
    "postid":6837,
    "postdate":1327674180,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.944189894,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.950872061,
    "polarity":0,
    "normalized_text_entropy":3.944189894,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.077750804,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have an of, and I want to remove repeated strings from it. How can I do this?"
  },
  {
    "postid":6838,
    "postdate":1327668000,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.258303654,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.558938158,
    "polarity":1,
    "normalized_text_entropy":4.258303654,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.101984904,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you don't want duplicates in a Collection, you should consider why you're using a Collection that allows duplicates. The easiest way to remove repeated elements is to add the contents to a Set (which will not allow duplicates) and then add the Set back to the: Of course, this destroys the ordering of the elements in the ArrayList."
  },
  {
    "postid":6839,
    "postdate":1298285460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.480001406,
    "polarity":0,
    "normalized_text_entropy":3,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.098838928,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Although converting the to a effectively removes duplicates, if you need to preserve insertion order, I'd rather suggest you to use this variant Then, if you need to get back a reference, you can use again the conversion constructor."
  },
  {
    "postid":6840,
    "postdate":1298285820,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":2,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.391313991,
    "polarity":0,
    "normalized_text_entropy":2,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.135158729,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you don't want duplicates, use a instead of a. To convert a to a you can use the following code: If really necessary you can use the same construction to convert a back into a."
  },
  {
    "postid":6841,
    "postdate":1298285760,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.010931903,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.697105001,
    "polarity":1,
    "normalized_text_entropy":4.010931903,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.067637074,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"There is also from as an option:"
  },
  {
    "postid":6842,
    "postdate":1298285880,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.19999968,
    "concept_entropy":0,
    "UMASS(coherence)":0.352127365,
    "TFIDF(informativeness)":1.827864972,
    "polarity":0,
    "normalized_text_entropy":4.19999968,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.320115786,
    "normalized_TFIDF":0.072848432,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Here's a way that doesn't affect your list ordering: l1 is the original list, and l2 is the list whithout repeated items(Make sure YourClass has the equals method acording to what you want to stand for equality)"
  },
  {
    "postid":6843,
    "postdate":1298285940,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.02432486,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.650421086,
    "polarity":0,
    "normalized_text_entropy":4.02432486,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.065776515,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Probably a bit overkill, but I enjoy this kind of isolated problem. :) This code uses a temporary Set (for the uniqueness check) but removes elements directly inside the original list. Since element removal inside an ArrayList can induce a huge amount of array copying, the remove(int)-method is avoided. While we're at it, here's a version for LinkedList (a lot nicer!): Use the marker interface to present a unified solution for List: EDIT: I guess the generics-stuff doesn't really add any value here.. Oh well. :)"
  },
  {
    "postid":6844,
    "postdate":1298290740,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.144007284,
    "concept_entropy":3.942438726,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.923209096,
    "polarity":0,
    "normalized_text_entropy":4.144007284,
    "normalized_concept_entropy":3.942438726,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.076648313,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"this can solve the problem:"
  },
  {
    "postid":6845,
    "postdate":1291219200,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.316425345,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.712398018,
    "polarity":0,
    "normalized_text_entropy":3.316425345,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.068246568,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It is possible to remove duplicates from arraylist without using or.Try this code.. Output is"
  },
  {
    "postid":6846,
    "postdate":1291254300,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.090407143,
    "concept_entropy":3.738904981,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.976330942,
    "polarity":1,
    "normalized_text_entropy":4.090407143,
    "normalized_concept_entropy":3.738904981,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038911068,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"When you are filling the ArrayList, use a condition for each element. For example: We will get an array {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
  },
  {
    "postid":6847,
    "postdate":1291299300,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.484222781,
    "concept_entropy":0,
    "UMASS(coherence)":0.787894898,
    "TFIDF(informativeness)":1.390048344,
    "polarity":1,
    "normalized_text_entropy":4.484222781,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.716268089,
    "normalized_TFIDF":0.05539952,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In Java 8: Please note that the contract for list members should be respected for the filtering to work properly."
  },
  {
    "postid":6848,
    "postdate":1403606520,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.46955777,
    "concept_entropy":4.499700586,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.811257728,
    "polarity":1,
    "normalized_text_entropy":4.46955777,
    "normalized_concept_entropy":4.499700586,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.032332177,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"LinkedHashSet will do the trick. //output: 5,1,2,3,4"
  },
  {
    "postid":6849,
    "postdate":1403606880,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.583814296,
    "concept_entropy":4.668165635,
    "UMASS(coherence)":0.677749147,
    "TFIDF(informativeness)":1.803466275,
    "polarity":-2,
    "normalized_text_entropy":4.583814296,
    "normalized_concept_entropy":4.668165635,
    "normalized_UMASS":0.616135588,
    "normalized_TFIDF":0.071876037,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"If you want to preserve your Order then it is best to use.Because if you want to pass this List to an Insert Query by Iterating it, the order would be preserved. Try this This conversion will be very helpful when you want to return a List but not a Set."
  },
  {
    "postid":6850,
    "postdate":1403607180,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.310124781,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.0867138,
    "polarity":1,
    "normalized_text_entropy":4.310124781,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.043310309,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"As said before, you should use a class implementing Set interface instead of List to be sure of unicity of elements. If you have to keep the order of elements, the SortedSet interface can then be used ; the TreeSet class implements that interface."
  },
  {
    "postid":6851,
    "postdate":1403607360,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.344816708,
    "concept_entropy":4.625803089,
    "UMASS(coherence)":0.575820525,
    "TFIDF(informativeness)":1.640909171,
    "polarity":1,
    "normalized_text_entropy":4.344816708,
    "normalized_concept_entropy":4.625803089,
    "normalized_UMASS":0.523473205,
    "normalized_TFIDF":0.065397424,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6852,
    "postdate":1402507440,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.466103457,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.977534289,
    "polarity":-1,
    "normalized_text_entropy":4.466103457,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038959027,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6853,
    "postdate":1402554300,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.197030364,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.985892117,
    "polarity":0,
    "normalized_text_entropy":4.197030364,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.039292123,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6854,
    "postdate":1296949020,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.4143109,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.31574843,
    "polarity":2,
    "normalized_text_entropy":4.4143109,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.052438343,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6855,
    "postdate":1296950160,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.395527341,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.158926069,
    "polarity":0,
    "normalized_text_entropy":4.395527341,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.086042668,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm working in the android environment and have tried the following code, but it doesn't seem to be working. If I define as follows: it works. Is there something that I'm missing?"
  },
  {
    "postid":6856,
    "postdate":1296949980,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.300435228,
    "concept_entropy":4.4457533,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.613161252,
    "polarity":1,
    "normalized_text_entropy":4.300435228,
    "normalized_concept_entropy":4.4457533,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.064291548,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Use like this."
  },
  {
    "postid":6857,
    "postdate":1297027080,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.268284552,
    "concept_entropy":4.393342733,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.657651444,
    "polarity":1,
    "normalized_text_entropy":4.268284552,
    "normalized_concept_entropy":4.393342733,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.066064677,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Try this"
  },
  {
    "postid":6858,
    "postdate":1274452860,
    "tag":"1",
    "TFMvalue":0.823529412,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.348595208,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.252062244,
    "polarity":2,
    "normalized_text_entropy":4.348595208,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049900169,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"What is happening is that is creating an rather than a and hence the typecast is failing. The correct code would be: or even For more details, refer to the javadocs for the two overloads of. (From a technical perspective, the reason for this API behaviour / design is that an implementation of the method has no information of what the is at runtime.All it knows is that the raw element type is.By contrast, in the other case, the array parameter gives the base type of the array.(If the supplied array is big enough, it is used.Otherwise a new array of the same type and a larger size is allocated and returned as the result.)"
  },
  {
    "postid":6859,
    "postdate":1274453400,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.390015893,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.67815143,
    "polarity":1,
    "normalized_text_entropy":4.390015893,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.066881691,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In Java generics work in compile time. In runtime informations about generic type (like in your case) are removed and replaced with type (take a look at). That is why have no idea about what type to use to create new array and uses as common type.Why? Take a look at this example: Although it will compile it will throw because instance of A class cant be cast to B class. Why is this not allowed? One of reason is: what if B had methods/fields that A doesn't and someone woild like to use them via reference? Would that be safe? No. This would make application crash. Only way to be able to cast object from reference to reference is when under is instance of class like in this example Here we know that object is in fact instance of B class so casting it to its type is safe. So back to your example you cant expectto cast correctly from object of type to more precise type, but you would be able to do this in situation like this because now we are trying to cast to its type. You could say that one way to resolve this problem is to check most common type of all list elements and create array of that type, but this wont work in situations where all elements of list will be derived from generic type. Take a look now most common type is, not so would return array of class like and such array cant be cast to because it could lead to trying to add elements that extend A but not B to this array. So only solution to this problem is explicitly tell what type of array should be returned by passing this type as method argument likeor "
  },
  {
    "postid":6860,
    "postdate":1274453220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.500763679,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.639302327,
    "polarity":2,
    "normalized_text_entropy":4.500763679,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.065333384,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"The correct way to do this is: I'd like to add to the other great answers here and explain how you could have used the Javadocs to answer your question. The Javadoc for (no arguments) is. As you can see, this method returns an and which is an array of the runtime type of your list: Right below that method, though, is for. As you can see, this method returns a where is the type of the array you pass in. At first this seems like what you're looking for, but it's unclear exactly why you're passing in an array (are you adding to it, using it for just the type, etc). The documentation makes it clear that the purpose of the passed array is essentially to define the type of array to return (which is exactly your use case): Of course, an understanding of generics (as described in the other answers) is required to really understand the difference between these two methods. Nevertheless, if you first go to the Javadocs, you will usually find your answer and then see for yourself what else you need to learn (if you really do). Also note that reading the Javadocs here helps you to understand what the structure of the array you pass in should be. Though it may not really practically matter, you should not pass in an empty array like this: Because, from the doc, this implementation checks if the array is large enough to contain the collection; There's no need for the extra overhead in creating a new array when you could easily pass in the size. As is usually the case, the Javadocs provide you with a wealth of information and direction. Hey wait a minute, what's reflection?"
  },
  {
    "postid":6861,
    "postdate":1274453160,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.234877859,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.597862188,
    "polarity":0,
    "normalized_text_entropy":4.234877859,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.063681813,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"An alternative in Java 8:"
  },
  {
    "postid":6862,
    "postdate":1359445080,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.136943036,
    "concept_entropy":4.475000787,
    "UMASS(coherence)":0.234879028,
    "TFIDF(informativeness)":1.9663491,
    "polarity":0,
    "normalized_text_entropy":4.136943036,
    "normalized_concept_entropy":4.475000787,
    "normalized_UMASS":0.213526389,
    "normalized_TFIDF":0.078367632,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I want to create a list of options for testing purposes. At first, I did this: Then I refactored the code as follows: Is there a better way to do this?"
  },
  {
    "postid":6863,
    "postdate":1382030880,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.313167093,
    "concept_entropy":0,
    "UMASS(coherence)":0.269125885,
    "TFIDF(informativeness)":2.15266496,
    "polarity":7,
    "normalized_text_entropy":4.313167093,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.244659895,
    "normalized_TFIDF":0.085793136,
    "normalized_polarity":0.388888889,
    "tagtext":"inheritance",
    "posttext":"Actually, probably the \"best\" way to initialize the is the method you wrote, as it does not need to create a new in any way: The catch is that there is quite a bit of typing required to refer to that instance. There are alternatives, such as making an anonymous inner class with an instance initializer (also known as an \"double brace initialization\"): However, I'm not too fond of that method because what you end up with is a subclass of which has an instance initializer, and that class is created just to create one object -- that just seems like a little bit overkill to me. What would have been nice was if the for was accepted (it was slated to be introduced in Java 7, but it's not likely to be part of Java 8 neither.): Unfortunately it won't help you here, as it will initialize an immutable rather than an, and furthermore, it's not available yet, if it ever will be."
  },
  {
    "postid":6864,
    "postdate":1382031300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.422125995,
    "concept_entropy":0,
    "UMASS(coherence)":0.328842524,
    "TFIDF(informativeness)":2.044065871,
    "polarity":1,
    "normalized_text_entropy":4.422125995,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.298947749,
    "normalized_TFIDF":0.081464986,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It'd be simpler if you were to just declare it as a List - does it have to be an ArrayList? This would mean that places is immutable (trying to change it will cause an exception to be thrown). To make a mutable list that is a concrete ArrayList you can create an ArrayList from the immutable list:"
  },
  {
    "postid":6865,
    "postdate":1382030940,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.36774361,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.98187164,
    "polarity":2,
    "normalized_text_entropy":4.36774361,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.039131889,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"In most cases just use with an If you must for some reason have an, use You said you've declared the list as an in your code, but you should not do that unless you're using some member of that's not in, for example. Usually you should just declare variables by the most general interface that you are going to use (which for lists is usually if you need random access, if you need its size, or if you just need to iterate over it), and initialize them with the specific implementation, for example or. Work with interfaces, not implementations, otherwise you will find that you have to change in more than one place when you want to use another implementation. Another example would be always declaring variable an even though it is usually a, because one day soon you or somebody else will want to use some other kind of."
  },
  {
    "postid":6866,
    "postdate":1382031960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.322150864,
    "concept_entropy":0,
    "UMASS(coherence)":0.494898781,
    "TFIDF(informativeness)":2.73610613,
    "polarity":-2,
    "normalized_text_entropy":4.322150864,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.449907983,
    "normalized_TFIDF":0.109045824,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"if you need a simple list of size 1: if you need a list of several objects:"
  },
  {
    "postid":6867,
    "postdate":1382032920,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.21244471,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.350740307,
    "polarity":0,
    "normalized_text_entropy":4.21244471,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.053832923,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6868,
    "postdate":1382031660,
    "tag":"1",
    "TFMvalue":0.764705882,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.172283574,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.49948306,
    "polarity":-1,
    "normalized_text_entropy":4.172283574,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.059760973,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"With GUAVA you can write: In Guava there also other useful static constructors, you can read about them "
  },
  {
    "postid":6869,
    "postdate":1320665520,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.242857443,
    "concept_entropy":0,
    "UMASS(coherence)":0.523722974,
    "TFIDF(informativeness)":1.502546444,
    "polarity":-1,
    "normalized_text_entropy":4.242857443,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.476111795,
    "normalized_TFIDF":0.059883063,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You could create a factory method: But it's not much better than your first refactoring.for greater flexibility, it can be generic:"
  },
  {
    "postid":6870,
    "postdate":1320665760,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.082300803,
    "concept_entropy":4.257505738,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.61400416,
    "polarity":-1,
    "normalized_text_entropy":4.082300803,
    "normalized_concept_entropy":4.257505738,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.064325141,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Collection literals didn't make it into Java 8, but it is possible to use the Stream API to initialize a list in one rather long line: If you need to ensure that your is an:"
  },
  {
    "postid":6871,
    "postdate":1287611820,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.134511926,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.678286532,
    "polarity":1,
    "normalized_text_entropy":4.134511926,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.066887076,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Like: But since you complained of wanting an ArrayList, you should firstly know that ArrayList is a subclass of List and you could simply add this line: Although, that might make you complain of 'performance'. In that case it doesn't make sense to me, why, since your list is predefined it wasn't defined as an array (since the size is known at time of initialisation). And if that's an option for you: In case you don't care of the minor performance differences then you can also copy an array to an ArrayList very simply: Okay, but in future you need a bit more than just the place name, you need a country code too. Assuming this is still a predefined list which will never change during run-time, then it's fitting to use an set, which would require re-compilation if the list needed to be changed in the future. would become: Enum's have a static method that returns an array containing all of the values of the enum in the order they are declared, e.g.: In that case I guess you wouldn't need your ArrayList. P.S. another nice way using the static utility method."
  },
  {
    "postid":6872,
    "postdate":1287612300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.056339641,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.508758925,
    "polarity":2,
    "normalized_text_entropy":4.056339641,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.060130657,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Actually it's possible to do it one line:"
  },
  {
    "postid":6873,
    "postdate":1287612240,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.165865014,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.790413073,
    "polarity":-1,
    "normalized_text_entropy":4.165865014,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.07135581,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"In Java, you can't do As was pointed out, you'd need to do a double brace initialization: But this may force you into adding an annotation or generate a serial UUID which is annoying. Also most code formatters will unwrap that into multiple statements/lines. Alternatively you can do but then you may want to do a. Also according to javadoc you should be able to do this: But I'm not able to get it to compile with JDK 1.6."
  },
  {
    "postid":6874,
    "postdate":1317738480,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.174345225,
    "concept_entropy":3.902174814,
    "UMASS(coherence)":0.452351547,
    "TFIDF(informativeness)":1.600174202,
    "polarity":1,
    "normalized_text_entropy":4.174345225,
    "normalized_concept_entropy":3.902174814,
    "normalized_UMASS":0.411228679,
    "normalized_TFIDF":0.063773957,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"(Should be a comment, but too long, so new reply).As others have mentioned, the Arrays.asList method is fixed size, but that's not the only issue with it.It also doesn't handle inheritance very well.For instance, suppose you have the following: The above results in a compiler error, because(which is what is returned by Arrays.asList) is not a subclass of, even though you can add Objects of type B to a object.To get around this, you need to do something like: This is probably the best way to go about doing this, esp. if you need an unbounded list or need to use inheritance."
  },
  {
    "postid":6875,
    "postdate":1287612360,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.214075279,
    "concept_entropy":4.185867302,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.925957471,
    "polarity":4,
    "normalized_text_entropy":4.214075279,
    "normalized_concept_entropy":4.185867302,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.076757848,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"List names = Arrays.asList(\"2\",\"@2234\",\"21\",\"11\");"
  },
  {
    "postid":6876,
    "postdate":1287612420,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.331238643,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.3089353,
    "polarity":0,
    "normalized_text_entropy":4.331238643,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.05216681,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Simply use as follows."
  },
  {
    "postid":6877,
    "postdate":1398966300,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.32922011,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.359781828,
    "polarity":0,
    "normalized_text_entropy":4.32922011,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.054193267,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Ok so I know that, and are interfaces but what makes the first line of code any better than the second line?"
  },
  {
    "postid":6878,
    "postdate":1287612060,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.306083592,
    "concept_entropy":0,
    "UMASS(coherence)":0.255576895,
    "TFIDF(informativeness)":1.209969019,
    "polarity":4,
    "normalized_text_entropy":4.306083592,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.232342632,
    "normalized_TFIDF":0.04822257,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"If you use the first form, you are saying all you are ever going to use is the functionality of the interface - nothing else, especially nothing extra added by any implementation of it. This means you can easily change the implementation used (e.g. just substitute for in the instantiation), and not worry about it breaking the rest of the code because you might have used something specific to. "
  },
  {
    "postid":6879,
    "postdate":1287612060,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.273029573,
    "concept_entropy":4.725533639,
    "UMASS(coherence)":0.49016924,
    "TFIDF(informativeness)":1.517129991,
    "polarity":1,
    "normalized_text_entropy":4.273029573,
    "normalized_concept_entropy":4.725533639,
    "normalized_UMASS":0.4456084,
    "normalized_TFIDF":0.060464281,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"A useful general principle about types in programming (sometime referred to as the) is as follows: List is more liberal than ArrayList, since List can be any kind of List implementation e.g. an ArrayList, a LinkedList or FrancosSpecialList. Hence it is a good idea to be liberal and accept any kind of list since you may want to change the implementation later. The main reason to use ArrayList explicitly as a type (your second case) is if you need to use methods that are specific to ArrayList that are not available through the List interface. In this case a generic List won't work (unless you want to do lots of ugly and confusing casting), so you might as well be explicit and use an ArrayList directly. This has the added bonus of hinting to a reader that specific features of ArrayList are needed."
  },
  {
    "postid":6880,
    "postdate":1287612360,
    "tag":"1",
    "TFMvalue":0.727272727,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.305942094,
    "concept_entropy":0,
    "UMASS(coherence)":0.922341168,
    "TFIDF(informativeness)":2.164038245,
    "polarity":-3,
    "normalized_text_entropy":4.305942094,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.838491971,
    "normalized_TFIDF":0.086246411,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"As you can see from the source of, most of the methods implemented are annotated as because all of them that are defined through interface so, if you are gonna use just basic functionalities (that is what you are gonna do most of the time) the difference won't be any practical one. The difference will come if someday you will think that the features of the are not suitable anymore for your kind of problem and you will need something different (a for example). If you declared everything as but instantiated as you will easily switch to new implementation by changing the instantiations to while in other case you will have to change also all variable declarations. Using is more OOP style since you declare that you don't care about the specific implementation of the list, and that you want to discard the static information about the type since you will rely on the interface provided by this kind of collection abstracting from its implementation."
  },
  {
    "postid":6881,
    "postdate":1374791460,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.386955076,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.759161198,
    "polarity":1,
    "normalized_text_entropy":4.386955076,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.030255902,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"How could I go about detecting (returning true/false) whether an ArrayList contains more than one of the same element in Java? Many thanks,Terry Forgot to mention that I am not looking to compare \"Blocks\" with each other but their integer values. Each \"block\" has an int and this is what makes them different.I find the int of a particular Block by calling a method named \"getNum\" (e.g. table1[0][2].getNum();"
  },
  {
    "postid":6882,
    "postdate":1388524260,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.226232243,
    "concept_entropy":4.505194337,
    "UMASS(coherence)":0.399295237,
    "TFIDF(informativeness)":1.85030419,
    "polarity":1,
    "normalized_text_entropy":4.226232243,
    "normalized_concept_entropy":4.505194337,
    "normalized_UMASS":0.36299567,
    "normalized_TFIDF":0.073742733,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"How could I go about detecting (returning true/false) whether an ArrayList contains more than one of the same element in Java? Many thanks,Terry Forgot to mention that I am not looking to compare \"Blocks\" with each other but their integer values. Each \"block\" has an int and this is what makes them different.I find the int of a particular Block by calling a method named \"getNum\" (e.g. table1[0][2].getNum();"
  },
  {
    "postid":6883,
    "postdate":1315411140,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.344936818,
    "concept_entropy":0,
    "UMASS(coherence)":0.362345624,
    "TFIDF(informativeness)":1.931661844,
    "polarity":5,
    "normalized_text_entropy":4.344936818,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.329405113,
    "normalized_TFIDF":0.076985193,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Simplest: dump the whole collection into a Set (using the Set(Collection) constructor or Set.addAll), then see if the Set has the same size as the ArrayList. Update: If I'm understanding your question correctly, you have a 2d array of Block, as in Block table[][]; and you want to detect if any row of them has duplicates? In that case, I could do the following, assuming that Block implements \"equals\" and \"hashCode\" correctly: I'm not 100% sure of that for syntax, so it might be safer to write it as ..."
  },
  {
    "postid":6884,
    "postdate":1315469220,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.246525372,
    "concept_entropy":3.91494675,
    "UMASS(coherence)":0.415200609,
    "TFIDF(informativeness)":1.979910978,
    "polarity":2,
    "normalized_text_entropy":4.246525372,
    "normalized_concept_entropy":3.91494675,
    "normalized_UMASS":0.377455099,
    "normalized_TFIDF":0.078908132,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Improved code, using return value of instead of comparing the size of list and set."
  },
  {
    "postid":6885,
    "postdate":1338123420,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.338532688,
    "concept_entropy":0,
    "UMASS(coherence)":0.271076709,
    "TFIDF(informativeness)":1.687745278,
    "polarity":1,
    "normalized_text_entropy":4.338532688,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.246433372,
    "normalized_TFIDF":0.067264048,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you are looking to avoid having duplicates at all, then you should just cut out the middle process of detecting duplicates and use a."
  },
  {
    "postid":6886,
    "postdate":1338124020,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.168706166,
    "concept_entropy":0,
    "UMASS(coherence)":0.207353101,
    "TFIDF(informativeness)":1.599709384,
    "polarity":0,
    "normalized_text_entropy":4.168706166,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.188502819,
    "normalized_TFIDF":0.063755432,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If your elements are somehow Comparable (the fact that the order has any real meaning is indifferent -- it just needs to be consistent with your definition of equality), the fastest duplicate removal solution is going to sort the list ( 0(n log(n)) ) then to do a single pass and look for elements (that is, equal elements that follow each other) (this is O(n)). The overall complexity is going to be O(n log(n)), which is roughly the same as what you would get with a Set (n times long(n)), but with a much smaller constant. This is because the constant in sort/dedup results from the cost of comparing elements, whereas the cost from the set is most likely to result from a hash computation, plus one (possibly several) hash comparisons. If you are using a hash-based Set implementation, that is, because a Tree based is going to give you a O( n log���_(n) ), which is even worse. As I understand it, however, you do not need to duplicates, but merely test for their existence. So you should hand-code a merge or heap sort algorithm on your array, that simply exits returning true (i.e. \"there is a dup\") if your comparator returns 0, and otherwise completes the sort, and traverse the sorted array testing for repeats. In a merge or heap sort, indeed, when the sort is completed, you will have compared every duplicate pair unless both elements were already in their final positions (which is unlikely). Thus, a tweaked sort algorithm should yield a huge performance improvement (I would have to prove that, but I guess the tweaked algorithm should be in the O(log(n)) on uniformly random data)"
  },
  {
    "postid":6887,
    "postdate":1338127320,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.269367515,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.438601189,
    "polarity":0,
    "normalized_text_entropy":4.269367515,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.057334564,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Improved code to return the duplicate elements "
  },
  {
    "postid":6888,
    "postdate":1338123780,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.084311343,
    "concept_entropy":4.515826996,
    "UMASS(coherence)":0.395875538,
    "TFIDF(informativeness)":2.037337428,
    "polarity":0,
    "normalized_text_entropy":4.084311343,
    "normalized_concept_entropy":4.515826996,
    "normalized_UMASS":0.359886853,
    "normalized_TFIDF":0.081196828,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Simply put:1) make sure all items are comparable2) sort the array2) iterate over the array and find duplicates"
  },
  {
    "postid":6889,
    "postdate":1338128400,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.240591695,
    "concept_entropy":0,
    "UMASS(coherence)":0.504764948,
    "TFIDF(informativeness)":1.721960466,
    "polarity":0,
    "normalized_text_entropy":4.240591695,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.458877225,
    "normalized_TFIDF":0.068627673,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"To know the Duplicates in a List use the following code:It will give you the set which contains duplicates."
  },
  {
    "postid":6890,
    "postdate":1330778280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.260819608,
    "concept_entropy":0,
    "UMASS(coherence)":0.395073097,
    "TFIDF(informativeness)":1.714477539,
    "polarity":2,
    "normalized_text_entropy":4.260819608,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.359157361,
    "normalized_TFIDF":0.068329446,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"The real answer is to learn what the different types of collections actually are. To be sure read the Javadoc and learn what Queues and all the other types are."
  },
  {
    "postid":6891,
    "postdate":1330779060,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.439933658,
    "concept_entropy":4.033569416,
    "UMASS(coherence)":0.683059049,
    "TFIDF(informativeness)":2.437092827,
    "polarity":0,
    "normalized_text_entropy":4.439933658,
    "normalized_concept_entropy":4.033569416,
    "normalized_UMASS":0.620962772,
    "normalized_TFIDF":0.097128833,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Note: this will have major performance hit though as items are removed from start of the list.To address this, we have two options. 1) iterate in reverse order and remove elements. 2) Use LinkedList instead of ArrayList. Due to biased questions asked in interviews to remove duplicates from List without using any other collection, above example is the answer. In real world though, if I have to achieve this, I will put elements from List to Set, simple!"
  },
  {
    "postid":6892,
    "postdate":1330780500,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.458090484,
    "concept_entropy":4.459535346,
    "UMASS(coherence)":0.68899275,
    "TFIDF(informativeness)":0.331505173,
    "polarity":0,
    "normalized_text_entropy":4.458090484,
    "normalized_concept_entropy":4.459535346,
    "normalized_UMASS":0.626357045,
    "normalized_TFIDF":0.013211934,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a map like this, Now I have to iterate this Map and then the ArrayList inside the map. How can I do this using JSTL?"
  },
  {
    "postid":6893,
    "postdate":1312191000,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.349605013,
    "concept_entropy":0,
    "UMASS(coherence)":0.414569691,
    "TFIDF(informativeness)":1.81522591,
    "polarity":0,
    "normalized_text_entropy":4.349605013,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.376881537,
    "normalized_TFIDF":0.07234471,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can use tag to iterate over collections and maps. In case of maps, every iteration will give you a which in turn has and methods. Here's a basic example: In your particular case, the is actually a, thus you need to iterate over it as well: The is there just for convenience ;) To understand better what's all going on here, here's a raw Java translation:"
  },
  {
    "postid":6894,
    "postdate":1312191540,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.246245463,
    "concept_entropy":0,
    "UMASS(coherence)":0.428768334,
    "TFIDF(informativeness)":1.379477893,
    "polarity":0,
    "normalized_text_entropy":4.246245463,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.389789395,
    "normalized_TFIDF":0.054978241,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Did you try something like this?"
  },
  {
    "postid":6895,
    "postdate":1312191120,
    "tag":"1",
    "TFMvalue":0.538461538,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.332488784,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.570048226,
    "polarity":2,
    "normalized_text_entropy":4.332488784,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.062573305,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"you haven't closed c tag.try out this"
  },
  {
    "postid":6896,
    "postdate":1312191540,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.25513013,
    "concept_entropy":0,
    "UMASS(coherence)":0.703684619,
    "TFIDF(informativeness)":1.613400949,
    "polarity":2,
    "normalized_text_entropy":4.25513013,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.63971329,
    "normalized_TFIDF":0.064301101,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I have an ArrayList that I want to output completely as a String. Essentially I want to output it in order using the toString of each element separated by tabs. Is there any fast way to do this? You could loop through it (or remove each element) and concat it to a String but I think this will be very slow. "
  },
  {
    "postid":6897,
    "postdate":1363097160,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.448931748,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.584766169,
    "polarity":0,
    "normalized_text_entropy":4.448931748,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.063159879,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Basically, using a loop to iterate over the is the only option: In fact, a string concatenation is going to be just fine, as the compiler will optimize the string concatenation as a series of operations on a anyway. Here's a part of the disassembly of the bytecode from the loop from the above program: As can be seen, the compiler optimizes that loop by using a, so performance shouldn't be a big concern. (OK, on second glance, the is being instantiated on each iteration of the loop, so it may not be the most efficient bytecode. Instantiating and using an explicit would probably yield better performance.) In fact, I think that having any sort of output (be it to disk or to the screen) will be at least an order of a magnitude slower than having to worry about the performance of string concatenations.As pointed out in the comments, the above compiler optimization is indeed creating a new instance of on each iteration. (Which I have noted previously.) The most optimized technique to use will be the response by, as it only instantiates a single object outside of the loop. Rewriting to the above code to: Will only instantiate the once outside of the loop, and only make the two calls to the method inside the loop, as evidenced in this bytecode (which shows the instantiation of and the loop): So, indeed the hand optimization should be better performing, as the inside of the loop is shorter and there is no need to instantiate a on each iteration."
  },
  {
    "postid":6898,
    "postdate":1379776080,
    "tag":"1",
    "TFMvalue":0.692307692,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.986689036,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.366543666,
    "polarity":1,
    "normalized_text_entropy":3.986689036,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.054462756,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Download the Jakarta Commons Lang and use the methodYou can implement it by yourself, of course, but their code is fully tested and is probably the best possible implementation. I am a big fan of the Jakarta Commons library and I also think it's a great addition to the Java Standard Library."
  },
  {
    "postid":6899,
    "postdate":1272634620,
    "tag":"1",
    "TFMvalue":0.769230769,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.130865475,
    "concept_entropy":4.489332161,
    "UMASS(coherence)":0.440963405,
    "TFIDF(informativeness)":1.2296586,
    "polarity":-1,
    "normalized_text_entropy":4.130865475,
    "normalized_concept_entropy":4.489332161,
    "normalized_UMASS":0.400875823,
    "normalized_TFIDF":0.049007286,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If you happen to be doing this on Android, there is a nice utility for this called which has a method. Obviously not much use outside of Android, but figured I'd add it to this thread..."
  },
  {
    "postid":6900,
    "postdate":1272635340,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":19,
    "Normalized_count":0.316666667,
    "text_entropy":4.183852959,
    "concept_entropy":4.464741284,
    "UMASS(coherence)":0.634505437,
    "TFIDF(informativeness)":1.088840538,
    "polarity":1,
    "normalized_text_entropy":4.183852959,
    "normalized_concept_entropy":4.464741284,
    "normalized_UMASS":0.576823125,
    "normalized_TFIDF":0.023124629,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"This is a pretty old question, but I figure I might as well add a more modern answer - use the class from:"
  },
  {
    "postid":6901,
    "postdate":1369196400,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.310377849,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.546610933,
    "TFIDF(informativeness)":0.881615344,
    "polarity":0,
    "normalized_text_entropy":4.310377849,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.49691903,
    "normalized_TFIDF":0.018723612,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Loop through it and call toString.There isn't a magic way, and if there were, what do you think it would be doing under the covers other than looping through it?About the only micro-optimization would be to use StringBuilder instead of String, and even that isn't a huge win - concatenating strings turns into StringBuilder under the covers, but at least if you write it that way you can see what's going on."
  },
  {
    "postid":6902,
    "postdate":1369198260,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.345030213,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.29147173,
    "TFIDF(informativeness)":1.548853765,
    "polarity":2,
    "normalized_text_entropy":4.345030213,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.2649743,
    "normalized_TFIDF":0.03289432,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Most Java projects often have apache-commons lang available.StringUtils.join() methods is very nice and has several flavors to meet almost every need."
  },
  {
    "postid":6903,
    "postdate":1369197600,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.365851849,
    "concept_entropy":4.597462816,
    "UMASS(coherence)":0.740514423,
    "TFIDF(informativeness)":6.035655529,
    "polarity":24,
    "normalized_text_entropy":4.365851849,
    "normalized_concept_entropy":4.597462816,
    "normalized_UMASS":0.67319493,
    "normalized_TFIDF":0.128184331,
    "normalized_polarity":0.703703704,
    "tagtext":"inheritance",
    "posttext":"If you were looking for a quick one-liner, as of Java 5 you can do this: Additionally, if your purpose is just to print out the contents and are less concerned about the \"\t\", you can simply do this: which returns a string like If you have an Array (not ArrayList) then you can accomplish the same like this:"
  },
  {
    "postid":6904,
    "postdate":1369198380,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.312227376,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.107859952,
    "polarity":2,
    "normalized_text_entropy":4.312227376,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.023528561,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"The most elegant way to deal with trailing separation characters is to useThe toString method of Class Separator returns the separater, for the first call. Thus we print the list without trailing (or in this case) leading separators."
  },
  {
    "postid":6905,
    "postdate":1349107320,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.433919042,
    "concept_entropy":4.478635848,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.33502965,
    "polarity":1,
    "normalized_text_entropy":4.433919042,
    "normalized_concept_entropy":4.478635848,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.028353156,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6906,
    "postdate":1349107440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.295874584,
    "concept_entropy":0,
    "UMASS(coherence)":0.326326386,
    "TFIDF(informativeness)":1.051348159,
    "polarity":0,
    "normalized_text_entropy":4.295874584,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.296660351,
    "normalized_TFIDF":0.022328372,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It's an algorithm either way (unless you did some multi-threaded solution where you broke the list into multiple sublists, but I don't think that is what you are asking for). Just use a as below: The will be a lot faster than string concatenation because you won't be re-instantiating a object on each concatenation."
  },
  {
    "postid":6907,
    "postdate":1349107500,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.409155262,
    "concept_entropy":0,
    "UMASS(coherence)":0.682391493,
    "TFIDF(informativeness)":1.663685108,
    "polarity":-1,
    "normalized_text_entropy":4.409155262,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.620355903,
    "normalized_TFIDF":0.03533309,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":" class ( ) extends class, which extends class which contains a method ( ). So you simply write Java developers have already figured out the most efficient way and have given you that in a nicely packaged and documented method. Simply call that method."
  },
  {
    "postid":6908,
    "postdate":1349107440,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.406858823,
    "concept_entropy":0,
    "UMASS(coherence)":0.635876775,
    "TFIDF(informativeness)":1.116100985,
    "polarity":-3,
    "normalized_text_entropy":4.406858823,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.578069795,
    "normalized_TFIDF":0.023703582,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"Android has a TextUtil class you can use "
  },
  {
    "postid":6909,
    "postdate":1349107800,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.174870104,
    "concept_entropy":4.39505193,
    "UMASS(coherence)":0.264681257,
    "TFIDF(informativeness)":0.767986282,
    "polarity":0,
    "normalized_text_entropy":4.174870104,
    "normalized_concept_entropy":4.39505193,
    "normalized_UMASS":0.240619325,
    "normalized_TFIDF":0.016310375,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If each element has a non-trivial string representation, and you want tabs inserted, the only way to do this is by looping."
  },
  {
    "postid":6910,
    "postdate":1349107980,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.420927568,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.883544506,
    "polarity":0,
    "normalized_text_entropy":4.420927568,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.061240278,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Why not to use TextUtils.join? "
  },
  {
    "postid":6911,
    "postdate":1349107740,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":0,
    "concept_entropy":3.74741304,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.343819602,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":3.74741304,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.028539836,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you're using, you can use the method. If you can convert your ArrayList to a FastList, you can get rid of the adapter.I am a developer on GS collections."
  },
  {
    "postid":6912,
    "postdate":1349110980,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.629663483,
    "concept_entropy":0,
    "UMASS(coherence)":0.089990636,
    "TFIDF(informativeness)":1.345333813,
    "polarity":0,
    "normalized_text_entropy":3.629663483,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.081809669,
    "normalized_TFIDF":0.028571994,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In Java 8 or later:"
  },
  {
    "postid":6913,
    "postdate":1383690180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.580370149,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.435370626,
    "polarity":0,
    "normalized_text_entropy":4.580370149,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.030484182,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you don't want the last \t after the last element, you have to use the index to check, but remember that this only \"works\" (i.e. is O(n)) when lists implements the RandomAccess."
  },
  {
    "postid":6914,
    "postdate":1345449240,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.1312574,
    "concept_entropy":0,
    "UMASS(coherence)":0.618103375,
    "TFIDF(informativeness)":1.937043785,
    "polarity":1,
    "normalized_text_entropy":4.1312574,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.561912159,
    "normalized_TFIDF":0.04113864,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"This is quite an old conversation by now and apache commons are now using a StringBuilder internally:This will as we know improve performance, but if performance is critical then the method used might be somewhat inefficient. Whereas the interface is flexible and will allow for consistent behaviour across different Collection types it is somewhat inefficient for Lists, which is the type of Collection in the original question.I base this in that we are incurring some overhead which we would avoid by simply iterating through the elements in a traditional for loop. Instead there are some additional things happening behind the scenes checking for concurrent modifications, method calls etc. The enhanced for loop will on the other hand result in the same overhead since the iterator is used on the Iterable object (the List)."
  },
  {
    "postid":6915,
    "postdate":1345460520,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.094217003,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.41039301,
    "polarity":0,
    "normalized_text_entropy":4.094217003,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.029953712,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"How about this function: it works for any type of collection..."
  },
  {
    "postid":6916,
    "postdate":1342277220,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.239977178,
    "concept_entropy":4.576694484,
    "UMASS(coherence)":0.786177327,
    "TFIDF(informativeness)":2.144869469,
    "polarity":2,
    "normalized_text_entropy":4.239977178,
    "normalized_concept_entropy":4.576694484,
    "normalized_UMASS":0.714706661,
    "normalized_TFIDF":0.045552411,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"The below code may help you, Output:"
  },
  {
    "postid":6917,
    "postdate":1342277760,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.243609607,
    "concept_entropy":4.610483807,
    "UMASS(coherence)":0.642906641,
    "TFIDF(informativeness)":0.597114212,
    "polarity":0,
    "normalized_text_entropy":4.243609607,
    "normalized_concept_entropy":4.610483807,
    "normalized_UMASS":0.584460583,
    "normalized_TFIDF":0.012681421,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"How can I convert a to an in Java? Check the code below: I need to populate the array with the values of."
  },
  {
    "postid":6918,
    "postdate":1342277640,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.287542925,
    "concept_entropy":4.518997376,
    "UMASS(coherence)":0.675953097,
    "TFIDF(informativeness)":0.420047528,
    "polarity":-1,
    "normalized_text_entropy":4.287542925,
    "normalized_concept_entropy":4.518997376,
    "normalized_UMASS":0.614502815,
    "normalized_TFIDF":0.008920905,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Either: or: Note that this works only for arrays of reference types. For arrays of primitive types, use the traditional way:"
  },
  {
    "postid":6919,
    "postdate":1342284660,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.285272065,
    "concept_entropy":0,
    "UMASS(coherence)":0.563901242,
    "TFIDF(informativeness)":1.183820269,
    "polarity":1,
    "normalized_text_entropy":4.285272065,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.512637493,
    "normalized_TFIDF":0.025141794,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I think this is the simplest way:"
  },
  {
    "postid":6920,
    "postdate":1341489120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.182005815,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.481123113,
    "polarity":0,
    "normalized_text_entropy":3.182005815,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.010218019,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"An alternative in Java 8:"
  },
  {
    "postid":6921,
    "postdate":1341518820,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.121498984,
    "concept_entropy":0,
    "UMASS(coherence)":0.720785072,
    "TFIDF(informativeness)":0.644749721,
    "polarity":-1,
    "normalized_text_entropy":4.121498984,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.655259156,
    "normalized_TFIDF":0.013693096,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"All collection implementations have an overloaded constructor that takes another collection (with the template matching). The new instance is instantiated with the passed collection."
  },
  {
    "postid":6922,
    "postdate":1341489480,
    "tag":"1",
    "TFMvalue":0.727272727,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.140393827,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.018121535,
    "polarity":-1,
    "normalized_text_entropy":4.140393827,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02162271,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"This (Ondrej's answer): Is the most common idiom I see. Those who are suggesting that you use the actual list size instead of \"0\" are misunderstanding what's happening here.The toArray call does not care about the size or contents of the given array - it only needs its type. It would have been better if it took an actual Type in which case \"Foo.class\" would have been a lot clearer. Yes, this idiom generates a dummy object, but including the list size just means that you generate a larger dummy object.Again, the object is not used in any way; it's only the type that's needed."
  },
  {
    "postid":6923,
    "postdate":1341489540,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.191598508,
    "concept_entropy":3.902174814,
    "UMASS(coherence)":0.47996011,
    "TFIDF(informativeness)":1.086083123,
    "polarity":1,
    "normalized_text_entropy":4.191598508,
    "normalized_concept_entropy":3.902174814,
    "normalized_UMASS":0.436327373,
    "normalized_TFIDF":0.023066068,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Try this:"
  },
  {
    "postid":6924,
    "postdate":1278901800,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.285600583,
    "concept_entropy":4.654476761,
    "UMASS(coherence)":0.612154765,
    "TFIDF(informativeness)":1.802539698,
    "polarity":1,
    "normalized_text_entropy":4.285600583,
    "normalized_concept_entropy":4.654476761,
    "normalized_UMASS":0.556504332,
    "normalized_TFIDF":0.038282063,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'm trying to convert an ArrayList containing Integer objects to primitive int[] with the following piece of code, but it is throwing compile time error. Is it possible to convert in Java?"
  },
  {
    "postid":6925,
    "postdate":1278901980,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.423881031,
    "concept_entropy":0,
    "UMASS(coherence)":0.452351547,
    "TFIDF(informativeness)":1.697433691,
    "polarity":0,
    "normalized_text_entropy":4.423881031,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.411228679,
    "normalized_TFIDF":0.036049838,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can convert, but I don't think there's anything built in to do it automatically: (Note that this will throw a NullPointerException if either or any element within it is.) EDIT: As per comments, you may want to use the list iterator to avoid nasty costs with lists such as:"
  },
  {
    "postid":6926,
    "postdate":1278901980,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":0,
    "concept_entropy":4.471001441,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.129801912,
    "polarity":1,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":4.471001441,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.023994561,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Apache Commons has a ArrayUtils class, which has a method toPrimitive() that does exactly this. However, as Jon showed, it is pretty easy to do this by yourself instead of using external libraries."
  },
  {
    "postid":6927,
    "postdate":1278902040,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.44904498,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.251553715,
    "polarity":2,
    "normalized_text_entropy":4.44904498,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.026580307,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I believe iterating using the List's iterator is a better idea, as can have poor performance depending on the List implementation:"
  },
  {
    "postid":6928,
    "postdate":1397584140,
    "tag":"1",
    "TFMvalue":0.636363636,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.337890618,
    "concept_entropy":4.570557476,
    "UMASS(coherence)":0.663939798,
    "TFIDF(informativeness)":3.097390418,
    "polarity":6,
    "normalized_text_entropy":4.337890618,
    "normalized_concept_entropy":4.570557476,
    "normalized_UMASS":0.603581635,
    "normalized_TFIDF":0.065781905,
    "normalized_polarity":0.37037037,
    "tagtext":"inheritance",
    "posttext":"Google guava now provides a neat way to do this:"
  },
  {
    "postid":6929,
    "postdate":1397586480,
    "tag":"1",
    "TFMvalue":0.761904762,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.387466412,
    "concept_entropy":4.438336515,
    "UMASS(coherence)":0.646127104,
    "TFIDF(informativeness)":1.485648345,
    "polarity":0,
    "normalized_text_entropy":4.387466412,
    "normalized_concept_entropy":4.438336515,
    "normalized_UMASS":0.587388276,
    "normalized_TFIDF":0.031551973,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"using should be quite simple: I'm planning to improve the DSL in order to remove the intermediate call"
  },
  {
    "postid":6930,
    "postdate":1394364180,
    "tag":"1",
    "TFMvalue":0.583333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.391689279,
    "concept_entropy":0,
    "UMASS(coherence)":0.349247904,
    "TFIDF(informativeness)":1.078013852,
    "polarity":-1,
    "normalized_text_entropy":4.391689279,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.317498095,
    "normalized_TFIDF":0.022894694,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If you're using, you can use the method to switch from an object container to a primitive int container. If you can convert your ArrayList to a FastList, you can get rid of the adapter.I am a developer on GS collections."
  },
  {
    "postid":6931,
    "postdate":1394364900,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":21,
    "Normalized_count":0.35,
    "text_entropy":4.364549141,
    "concept_entropy":4.546302033,
    "UMASS(coherence)":0.399509453,
    "TFIDF(informativeness)":1.611732999,
    "polarity":-3,
    "normalized_text_entropy":4.364549141,
    "normalized_concept_entropy":4.546302033,
    "normalized_UMASS":0.363190412,
    "normalized_TFIDF":0.03422974,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"If you are using there's also another way to do this. What it does is: Example:"
  },
  {
    "postid":6932,
    "postdate":1394364960,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":17,
    "Normalized_count":0.283333333,
    "text_entropy":4.175209912,
    "concept_entropy":0,
    "UMASS(coherence)":0.112458036,
    "TFIDF(informativeness)":0.474258597,
    "polarity":0,
    "normalized_text_entropy":4.175209912,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.102234578,
    "normalized_TFIDF":0.010072232,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I agree with Andrew F., and would go with using a custom class or package.Surely one of the purposes of OO programming languages and software development is reusability and adaptability of code.After all, we are talking here about a language feature and functionality, not an intrinsic or interesting algorithm problem.It might be considered good practice for learners of a certain language to write code to do things it does not automatically provide, but the code will only teach them to rectify a language feature, not necessarily an algorithm for solving a useful language-independent problem."
  },
  {
    "postid":6933,
    "postdate":1394365140,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.387351458,
    "concept_entropy":0,
    "UMASS(coherence)":0.793216161,
    "TFIDF(informativeness)":1.13022725,
    "polarity":3,
    "normalized_text_entropy":4.387351458,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.721105601,
    "normalized_TFIDF":0.024003594,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"It bewilders me that we encourage one-off custom methods whenever a perfectly good, well used library like Apache Commons has solved the problem already.Though the solution is trivial if not absurd, it is irresponsible to encourage such a behavior due to long term maintenance and accessibility. Just go with "
  },
  {
    "postid":6934,
    "postdate":1346913300,
    "tag":"1",
    "TFMvalue":0.727272727,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.297166267,
    "concept_entropy":4.539017271,
    "UMASS(coherence)":0.38602417,
    "TFIDF(informativeness)":2.78458234,
    "polarity":1,
    "normalized_text_entropy":4.297166267,
    "normalized_concept_entropy":4.539017271,
    "normalized_UMASS":0.350931064,
    "normalized_TFIDF":0.059138535,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6935,
    "postdate":1346914320,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.282425336,
    "concept_entropy":0,
    "UMASS(coherence)":0.319788022,
    "TFIDF(informativeness)":2.137320654,
    "polarity":1,
    "normalized_text_entropy":4.282425336,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.290716384,
    "normalized_TFIDF":0.04539209,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"access like normal."
  },
  {
    "postid":6936,
    "postdate":1334247000,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.646966668,
    "concept_entropy":3.726474118,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.777190211,
    "polarity":1,
    "normalized_text_entropy":3.646966668,
    "normalized_concept_entropy":3.726474118,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.037743695,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"What are the differences between these two data structures and where should you use each of them?"
  },
  {
    "postid":6937,
    "postdate":1334247180,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.648148665,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.03500313,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Use ArrayLists if there is no specific requirement to use Vectors. If multiple threads access an ArrayList concurrently then we must externally synchronize the block of code which modifies the list either structurally or simply modifies an element. Structural modification means addition or deletion of element(s) from the list. Setting the value of an existing element is not a structural modification. Collections.synchronizedList is normally used at the time of creation of the list to avoid any accidental unsynchronized access to the list. Internally, both the ArrayList and Vector hold onto their contents using an Array. When an element is inserted into an ArrayList or a Vector, the object will need to expand its internal array if it runs out of room. "
  },
  {
    "postid":6938,
    "postdate":1316541660,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.503019863,
    "concept_entropy":4.208315459,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.948431881,
    "polarity":0,
    "normalized_text_entropy":4.503019863,
    "normalized_concept_entropy":4.208315459,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041380499,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As the documentation says, a and an are almost equivalent.The difference is that access to a is synchronized, whereas access to an is not.What this means is that only one thread can call methods on a at a time, and there's a slight overhead in acquiring the lock; if you use an, this isn't the case.Generally, you'll want to use an; in the single-threaded case it's a better choice, and in the multi-threaded case, you get better control over locking.Want to allow concurrent reads?Fine.Want to perform one synchronization for a batch of ten writes?Also fine.It does require a little more care onyour end, but it's likely what you want.Also note that if you have an ArrayList, you can use the function to create a synchronized list, thus getting you the equivalent of a."
  },
  {
    "postid":6939,
    "postdate":1316541780,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.969344385,
    "concept_entropy":3.726474118,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.078795718,
    "polarity":-1,
    "normalized_text_entropy":3.969344385,
    "normalized_concept_entropy":3.726474118,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.044149146,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":" is newer and 20-30% faster.If you don't need something explitly apparent in, use "
  },
  {
    "postid":6940,
    "postdate":1392621960,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.720950594,
    "concept_entropy":4.256031378,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.816045245,
    "polarity":0,
    "normalized_text_entropy":3.720950594,
    "normalized_concept_entropy":4.256031378,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038568892,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" is a class that is threadsafe, despite it being \"synchronized\" and is used by students and other inexperienced programmers.is the go-to List implementation used by professionals and experienced programmers. Professionals wanting a threadsafe List implementation use a."
  },
  {
    "postid":6941,
    "postdate":1316542620,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.206162988,
    "concept_entropy":4.423086242,
    "UMASS(coherence)":0.529407328,
    "TFIDF(informativeness)":2.122031886,
    "polarity":-2,
    "normalized_text_entropy":4.206162988,
    "normalized_concept_entropy":4.423086242,
    "normalized_UMASS":0.481279389,
    "normalized_TFIDF":0.045067389,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"Basically both ArrayList and Vector both uses internal Object Array. The ArrayList class extends AbstractList and implements the List interface and RandomAccess (marker interface). ArrayList supports dynamic arrays that can grow as needed. It gives us first iteration over elements.ArrayList uses internal Object Array; they are created with an default initial size of 10. When this size is exceeded, the collection is automatically increases to half of the default size that is 15.Vector is similar to ArrayList but the differences are, it is synchronized and its default initial size is 10 and when the size exceeds its size increases to double of the original size that means the new size will be 20. Vector is the only class other than ArrayList to implement RandomAccess. Some other differences are:"
  },
  {
    "postid":6942,
    "postdate":1376112420,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.237912168,
    "concept_entropy":4.465035746,
    "UMASS(coherence)":0.439161044,
    "TFIDF(informativeness)":2.254405591,
    "polarity":2,
    "normalized_text_entropy":4.237912168,
    "normalized_concept_entropy":4.465035746,
    "normalized_UMASS":0.399237313,
    "normalized_TFIDF":0.047878722,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":" : even though arraylist grows by 100%, you can avoid this by ensurecapacity() method to make sure that you are allocating sufficient memory at the initial stages itself. Hope it helps."
  },
  {
    "postid":6943,
    "postdate":1387807380,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.163452123,
    "concept_entropy":4.301262544,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.990088627,
    "polarity":0,
    "normalized_text_entropy":4.163452123,
    "normalized_concept_entropy":4.301262544,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.042265199,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have two arraylist and which related to each other, e.g. \"H1.txt\" related to \"e1.jpg\". How to automatically randomized the list of according to the randomization of? Like in excel, if we sort certain column, the other column will automatically follow? output after randomization e.g.: intended output:"
  },
  {
    "postid":6944,
    "postdate":1310753280,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.362831019,
    "concept_entropy":4.487990072,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.050609414,
    "polarity":5,
    "normalized_text_entropy":4.362831019,
    "normalized_concept_entropy":4.487990072,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.04355053,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Use twice, with two objects initialized with the same seed:"
  },
  {
    "postid":6945,
    "postdate":1310756520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.294450787,
    "concept_entropy":4.143052408,
    "UMASS(coherence)":0.446494806,
    "TFIDF(informativeness)":1.652841461,
    "polarity":0,
    "normalized_text_entropy":4.294450787,
    "normalized_concept_entropy":4.143052408,
    "normalized_UMASS":0.405904369,
    "normalized_TFIDF":0.035102795,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Wrap them in another class so that you can end up with a single array or of those objects. Usage example:"
  },
  {
    "postid":6946,
    "postdate":1310755020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.277031938,
    "concept_entropy":4.556938186,
    "UMASS(coherence)":0.861476183,
    "TFIDF(informativeness)":3.856485533,
    "polarity":13,
    "normalized_text_entropy":4.277031938,
    "normalized_concept_entropy":4.556938186,
    "normalized_UMASS":0.783160166,
    "normalized_TFIDF":0.081903451,
    "normalized_polarity":0.5,
    "tagtext":"inheritance",
    "posttext":"The simplest approach is to encapsulate the two values together into a type which has both the image and the file. Then build an of and shuffle it. That improves encapsulation as well, giving you the property that you'll always have the same number of files as images automatically. An alternative if you don't like that idea would be to write the shuffle code yourself (there are plenty of examples of a modified in Java, including several on Stack Overflow I suspect) and just operate on both lists at the same time. But I'd strongly recommend going with the \"improve encapsulation\" approach."
  },
  {
    "postid":6947,
    "postdate":1310754180,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.880770678,
    "concept_entropy":4.480691319,
    "UMASS(coherence)":0.30301357,
    "TFIDF(informativeness)":1.583433405,
    "polarity":1,
    "normalized_text_entropy":3.880770678,
    "normalized_concept_entropy":4.480691319,
    "normalized_UMASS":0.275466882,
    "normalized_TFIDF":0.033628717,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You could do this with maps: This will iterate through the images in the random order."
  },
  {
    "postid":6948,
    "postdate":1310754780,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.548223251,
    "concept_entropy":4.49636009,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.163219827,
    "polarity":0,
    "normalized_text_entropy":4.548223251,
    "normalized_concept_entropy":4.49636009,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045942133,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Instead of having two arrays of Strings, have one array of a custom class which contains your two strings."
  },
  {
    "postid":6949,
    "postdate":1310755380,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.403781452,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.01837809,
    "polarity":-1,
    "normalized_text_entropy":4.403781452,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.064103853,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You can create an array containing the numbers 0 to 5 and shuffle those. Then use the result as a mapping of \"oldIndex -> newIndex\" and apply this mapping to both your original arrays."
  },
  {
    "postid":6950,
    "postdate":1310142000,
    "tag":"1",
    "TFMvalue":0.769230769,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.501434473,
    "concept_entropy":3.973575053,
    "UMASS(coherence)":0.725667749,
    "TFIDF(informativeness)":2.272644344,
    "polarity":1,
    "normalized_text_entropy":4.501434473,
    "normalized_concept_entropy":3.973575053,
    "normalized_UMASS":0.659697954,
    "normalized_TFIDF":0.048266074,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Not totally sure what you mean by \"automatically\" - you can create a container object that holds both objects: public class FileImageHolder {String fileName;String imageName;//TODO: insert stuff here} And then put that in an array list and randomize that array list. Otherwise, you would need to keep track of where each element moved in one list, and move it in the other one as well."
  },
  {
    "postid":6951,
    "postdate":1310467080,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.505046163,
    "concept_entropy":0,
    "UMASS(coherence)":0.41345442,
    "TFIDF(informativeness)":2.03618954,
    "polarity":0,
    "normalized_text_entropy":4.505046163,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.375867655,
    "normalized_TFIDF":0.043244283,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Unless there's a way to retrieve the old index of the elements after they've been shuffled, I'd do it one of two ways: A) Make another list multi_shuffler = [0, 1, 2, ... , file.size()] and shuffle it. Loop over it to get the order for your shuffled file/image lists. ArrayList newFileList = new ArrayList();ArrayList newImgList = new ArrayList();for ( i=0; i or B) Make a StringWrapper class to hold the file/image names and combine the two lists you've already got into one: ArrayList combinedList;"
  },
  {
    "postid":6952,
    "postdate":1310144940,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.374826192,
    "concept_entropy":4.413517938,
    "UMASS(coherence)":0.432185864,
    "TFIDF(informativeness)":3.515249276,
    "polarity":-2,
    "normalized_text_entropy":4.374826192,
    "normalized_concept_entropy":4.413517938,
    "normalized_UMASS":0.39289624,
    "normalized_TFIDF":0.074656328,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"This can be done using the shuffle method: "
  },
  {
    "postid":6953,
    "postdate":1380040500,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.296973983,
    "concept_entropy":0,
    "UMASS(coherence)":0.618590123,
    "TFIDF(informativeness)":2.119882229,
    "polarity":6,
    "normalized_text_entropy":4.296973983,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.562354657,
    "normalized_TFIDF":0.045021735,
    "normalized_polarity":0.37037037,
    "tagtext":"inheritance",
    "posttext":"I have this code: I get this: How would be this the correct way? Java.15"
  },
  {
    "postid":6954,
    "postdate":1306704900,
    "tag":"1",
    "TFMvalue":0.615384615,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.292022404,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.356097173,
    "polarity":1,
    "normalized_text_entropy":4.292022404,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.050038432,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Quite a few problems with your code: From the API: You can't to it; you can't from it. You can't structurally modify the. Create a, which supports faster. From the API:is a regex metacharacter; if you want to split on a literal, you must escape it to, which as a Java string literal is. Instead of calling one at a time with random indices, it's better to generate enough random numbers in the range, and then traversing the once with a, calling at appropriate indices. There are questions on stackoverflow on how to generate random but distinct numbers in a given range. With this, your algorithm would be."
  },
  {
    "postid":6955,
    "postdate":1306705260,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.003836612,
    "concept_entropy":0,
    "UMASS(coherence)":0.329884055,
    "TFIDF(informativeness)":1.322735835,
    "polarity":0,
    "normalized_text_entropy":4.003836612,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.299894595,
    "normalized_TFIDF":0.028092062,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This one has burned me many times. creates an unmodifiable list.From the Javadoc: Returns a list backed by the specified array. Create a new list with the same content: This will create a little extra garbage, but you will be able to mutate it."
  },
  {
    "postid":6956,
    "postdate":1305181260,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.361423834,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.157290926,
    "polarity":-1,
    "normalized_text_entropy":4.361423834,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045816216,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Probably because you're working with. Change this line: to this line:"
  },
  {
    "postid":6957,
    "postdate":1305181740,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.220627189,
    "concept_entropy":0,
    "UMASS(coherence)":0.524673384,
    "TFIDF(informativeness)":1.810113072,
    "polarity":0,
    "normalized_text_entropy":4.220627189,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.476975804,
    "normalized_TFIDF":0.038442905,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Just read the JavaDoc for the asList method: This is from Java 6 but it looks like it is the same for the android java. The type of the resulting list is, which is a private class inside Arrays.class.Practically speaking, it is nothing but a List-view on the array that you've passed with. With a consequence: if you change the array, the list is changed too. And because an array is not resizeable, remove and add operation be unsupported."
  },
  {
    "postid":6958,
    "postdate":1305182400,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.971539143,
    "concept_entropy":4.074875776,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.643845356,
    "polarity":0,
    "normalized_text_entropy":3.971539143,
    "normalized_concept_entropy":4.074875776,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034911737,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Arrays.asList() returns a list that doesn't allow operations affecting its size (note that this is not the same as \"unmodifiable\").You could do to create a real copy, but seeing what you are trying to do, here is an additional suggestion (you have a algorithm right below that). You want to remove (lets call this) random elements from the list. Just pick as many random elements and swap them to the end positions of the list, then delete that whole range (e.g. using subList() and clear() on that). That would turn it to a lean and mean algorithm (is more precise). : As noted below, this algorithm only makes sense if the elements are unordered, e.g. if the List represents a Bag. If, on the other hand, the List has a meaningful order, this algorithm would not preserve it (polygenelubricants' algorithm instead would). : So in retrospect, a better (linear, maintaining order, but with O(n) random numbers) algorithm would be something like this:"
  },
  {
    "postid":6959,
    "postdate":1305185040,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.205082876,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.656694785,
    "polarity":1,
    "normalized_text_entropy":4.205082876,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035184631,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"the list returned by Arrays.asList might be immutable. could you try"
  },
  {
    "postid":6960,
    "postdate":1302443400,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.194504833,
    "concept_entropy":4.376012288,
    "UMASS(coherence)":0.450086689,
    "TFIDF(informativeness)":1.794725947,
    "polarity":2,
    "normalized_text_entropy":4.194504833,
    "normalized_concept_entropy":4.376012288,
    "normalized_UMASS":0.409169717,
    "normalized_TFIDF":0.038116116,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"This UnsupportedOperationException comes when you try to perform some operation on collection where its not allowed and in your case, When you call it does not return a. It returns a which is an immutable list. You cannot add to it and you cannot remove from it."
  },
  {
    "postid":6961,
    "postdate":1302443580,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.061306984,
    "concept_entropy":0,
    "UMASS(coherence)":0.675953097,
    "TFIDF(informativeness)":2.207029586,
    "polarity":1,
    "normalized_text_entropy":4.061306984,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.614502815,
    "normalized_TFIDF":0.046872558,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I think that replacing :List list=Arrays.asList(split); byList list=new ArrayList(Arrays.asList(split)); resolve the problem"
  },
  {
    "postid":6962,
    "postdate":1302443520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.367725103,
    "concept_entropy":4.655991401,
    "UMASS(coherence)":0.651595937,
    "TFIDF(informativeness)":1.48947196,
    "polarity":-1,
    "normalized_text_entropy":4.367725103,
    "normalized_concept_entropy":4.655991401,
    "normalized_UMASS":0.592359943,
    "normalized_TFIDF":0.031633178,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"U can't remove or u can't add to, a fixed-size-list of Arrays. list=list.subList(0,list.size()-(list.size()-count));"
  },
  {
    "postid":6963,
    "postdate":1302444000,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.826553584,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.293341158,
    "polarity":1,
    "normalized_text_entropy":3.826553584,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.027467782,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"yesOn Arrays.asList returning a fixed-size list Hi other than using linked list use simplymethod list Example. String idList=\"123,222,333,444\"; parentRecepeIdList. (Arrays.asList(idList.split(\",\")));parentRecepeIdList.add(\"555\"); working ..."
  },
  {
    "postid":6964,
    "postdate":1385025960,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":0,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.229349748,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.026108742,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have a ArrayList made up of different elements imported from a db, made up of strings, numbers, doubles and ints. Is there a way to use a reflection type technique to find out what each type of data each element holds? FYI: The reason that there is so many types of data is that this is a piece of java code being written to be implemented with different DB's."
  },
  {
    "postid":6965,
    "postdate":1385026320,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.172020333,
    "concept_entropy":4.559918101,
    "UMASS(coherence)":0.4930927,
    "TFIDF(informativeness)":0.631534098,
    "polarity":1,
    "normalized_text_entropy":4.172020333,
    "normalized_concept_entropy":4.559918101,
    "normalized_UMASS":0.448266091,
    "normalized_TFIDF":0.013412425,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In C#: Fixed with recommendation fromIn Java:"
  },
  {
    "postid":6966,
    "postdate":1385026380,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.10030526,
    "concept_entropy":0,
    "UMASS(coherence)":0.555616918,
    "TFIDF(informativeness)":0.679817427,
    "polarity":1,
    "normalized_text_entropy":4.10030526,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.505106289,
    "normalized_TFIDF":0.014437859,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can use the method, or you can use instanceof. For example or Note that instanceof will match subclasses. For instance, of is a subclass of, then the following will be true: However, the following will be false:"
  },
  {
    "postid":6967,
    "postdate":1385026800,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.311049921,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.129055772,
    "TFIDF(informativeness)":1.998853473,
    "polarity":0,
    "normalized_text_entropy":4.311049921,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.117323429,
    "normalized_TFIDF":0.042451345,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6968,
    "postdate":1385026980,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.165870334,
    "concept_entropy":4.327030129,
    "UMASS(coherence)":0.108126546,
    "TFIDF(informativeness)":0.717138206,
    "polarity":0,
    "normalized_text_entropy":4.165870334,
    "normalized_concept_entropy":4.327030129,
    "normalized_UMASS":0.09829686,
    "normalized_TFIDF":0.015230472,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You almost never want you use something like: because you aren't accounting for possible subclasses.You really want to use Class#isAssignableFrom:"
  },
  {
    "postid":6969,
    "postdate":1385027700,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.056020968,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.890076227,
    "polarity":0,
    "normalized_text_entropy":4.056020968,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.018903303,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In Java just use the instanceof operator. This will also take care of subclasses."
  },
  {
    "postid":6970,
    "postdate":1371632700,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.24847039,
    "concept_entropy":4.435627522,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.155540957,
    "polarity":0,
    "normalized_text_entropy":4.24847039,
    "normalized_concept_entropy":4.435627522,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.024541203,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Instanceof works if you don't depend on specific classes, but also keep in mind that you can have nulls in the list, so obj.getClass() will fail, but instanceof always returns false on null."
  },
  {
    "postid":6971,
    "postdate":1371632760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.810928306,
    "concept_entropy":0,
    "UMASS(coherence)":0,
    "TFIDF(informativeness)":1.136744048,
    "polarity":0,
    "normalized_text_entropy":3.810928306,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0,
    "normalized_TFIDF":0.024141997,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":6972,
    "postdate":1371632820,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.905639062,
    "concept_entropy":4.327957954,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.117434746,
    "polarity":0,
    "normalized_text_entropy":3.905639062,
    "normalized_concept_entropy":4.327957954,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.023731909,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You say \"this is a piece of java code being written\", from which I infer that there is still a chance that you could design it a different way. Having an ArrayList is like having a collection of stuff.Rather than force the instanceof or getClass every time you take an object from the list, why not design the system so that you get the type of the object when you retrieve it from the DB, and store it into a collection of the appropriate type of object? Or, you could use one of the many data access libraries that exist to do this for you."
  },
  {
    "postid":6973,
    "postdate":1371632880,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.267441775,
    "concept_entropy":4.587277837,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.477072063,
    "polarity":0,
    "normalized_text_entropy":4.267441775,
    "normalized_concept_entropy":4.587277837,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.031369831,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you expect the data to be numeric in some form, and all you are interested in doing is converting the result to a numeric value, I would suggest:"
  },
  {
    "postid":6974,
    "postdate":1371632880,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.892591231,
    "concept_entropy":4.723022528,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.668722975,
    "polarity":0,
    "normalized_text_entropy":3.892591231,
    "normalized_concept_entropy":4.723022528,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035440084,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Thanks very much for helping me out. In response to shoover's answer, I did find a way to do this without having to call getClass each time. The data had to be transferred to Number anyway, so i just put a Sentinel on the catch side of the loop. I laughed at myself when I figured out that the answer was from my intro to programming class from collage. I forgot K.I.S.S.."
  },
  {
    "postid":6975,
    "postdate":1371633960,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.160127237,
    "concept_entropy":4.350020485,
    "UMASS(coherence)":0.702765466,
    "TFIDF(informativeness)":2.634519829,
    "polarity":-1,
    "normalized_text_entropy":4.160127237,
    "normalized_concept_entropy":4.350020485,
    "normalized_UMASS":0.638877696,
    "normalized_TFIDF":0.05595153,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Just call on each in a loop. Unfortunately, Java doesn't have. :)"
  },
  {
    "postid":6976,
    "postdate":1371632760,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.02954981,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.642697623,
    "polarity":1,
    "normalized_text_entropy":4.02954981,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034887361,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'm adding three different objects to an ArrayList, but the list contains three copies of the last object I added.For example: Expected: Actual: What mistake have I made?"
  },
  {
    "postid":6977,
    "postdate":1371632760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.378280757,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.852055286,
    "polarity":2,
    "normalized_text_entropy":4.378280757,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.039333668,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"This problem has two typical causes: If you have static fields in your list object, each object in your list will appear to be the same because they hold the same values. Consider the class below: If you add multiple objects to a list using the code below, each instance will return from a call to: The solution is simple - don't use the keywords for fields in your class unless you actually want the values shared between every instance of that class. If you add a temporary variable to a list, you must create a new instance each time you loop. Consider the following erroneous code snippet: Here, the object was constructed outside the loop. As a result, the is being added to the list three times. The instance will hold the value, because that was the value passed during the last call to. To fix this, just move the object construction inside the loop:"
  },
  {
    "postid":6978,
    "postdate":1371633420,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.294797895,
    "concept_entropy":4.682523112,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.81217404,
    "polarity":-2,
    "normalized_text_entropy":4.294797895,
    "normalized_concept_entropy":4.682523112,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038486676,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"Say I create one object and add it to my. If I then create another object with exactly the same constructor input, will the method evaluate the two objects to be the same? Assume the constructor doesn't do anything funny with the input, and the variables stored in both objects are identical. Is this how the should be implemented to have return?"
  },
  {
    "postid":6979,
    "postdate":1351155660,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.293601482,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":0.892337585,
    "TFIDF(informativeness)":3.836056533,
    "polarity":0,
    "normalized_text_entropy":4.293601482,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":0.811215986,
    "normalized_TFIDF":0.081469583,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"ArrayList the List Interface. If you look at the at the method you will see that it uses the method to evaluate if two objects are the same."
  },
  {
    "postid":6980,
    "postdate":1351156320,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.229932992,
    "concept_entropy":0,
    "UMASS(coherence)":0.453853198,
    "TFIDF(informativeness)":3.058964068,
    "polarity":0,
    "normalized_text_entropy":4.229932992,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.412593816,
    "normalized_TFIDF":0.064965812,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I think that right implementations should be"
  },
  {
    "postid":6981,
    "postdate":1351156140,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":3.501397825,
    "concept_entropy":4.587534922,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.668528286,
    "polarity":1,
    "normalized_text_entropy":3.501397825,
    "normalized_concept_entropy":4.587534922,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035435949,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The ArrayList uses the equals method implemented in the class (your case Thing class) to do the equals comparison."
  },
  {
    "postid":6982,
    "postdate":1351156380,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.108216756,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.878588295,
    "polarity":0,
    "normalized_text_entropy":4.108216756,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.039897172,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It uses the equals method on the objects. So unless Thing overrides equals and uses the variables stored in the objects for comparison, it will not return true on the method."
  },
  {
    "postid":6983,
    "postdate":1351157160,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.005032003,
    "concept_entropy":0,
    "UMASS(coherence)":0.622304495,
    "TFIDF(informativeness)":2.2581101,
    "polarity":0,
    "normalized_text_entropy":4.005032003,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.565731359,
    "normalized_TFIDF":0.047957398,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Generally you should also override hashCode() each time you override equals(), even if just for the performance boost. HashCode() decides which 'bucket' your object gets sorted into when doing a comparison, so any two objects which equal() evaluates to true should return the same hashCode value(). I cannot remember the default behavior of hashCode() (if it returns 0 then your code should work but slowly, but if it returns the address then your code will fail). I do remember a bunch of times when my code failed because I forgot to override hashCode() though. :)"
  },
  {
    "postid":6984,
    "postdate":1345658040,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.209950965,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.530341853,
    "TFIDF(informativeness)":1.942375119,
    "polarity":3,
    "normalized_text_entropy":4.209950965,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.482128957,
    "normalized_TFIDF":0.041251866,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"You must write: Now it works ;)"
  },
  {
    "postid":6985,
    "postdate":1345658340,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.037376565,
    "concept_entropy":0,
    "UMASS(coherence)":0.308856558,
    "TFIDF(informativeness)":1.268571302,
    "polarity":0,
    "normalized_text_entropy":4.037376565,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.280778689,
    "normalized_TFIDF":0.026941724,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Other posters have addressed the question about how contains() works. An equally important aspect of your question is how to properly implement equals().And the answer to this is really dependent on what constitutes object equality for this particular class.In the example you provided, if you have two different objects that both have x=5, are they equal?It really depends on what you are trying to do. If you are only interested in object equality, then the implementation of .equals() (the one provided by Object) uses identity only (i.e. this == other).If that's what you want, then just don't implement equals() on your class (let it inherit from Object).The code you wrote, while kind of correct if you are going for identity, would never appear in a real class b/c it provides no benefit over using the default Object.equals() implementation. If you are just getting started with this stuff, I strongly recommend the Effective Java book by Joshua Bloch.It's a great read, and covers this sort of thing (plus how to correctly implement equals() when you are trying to do more than identity based comparisons)"
  },
  {
    "postid":6986,
    "postdate":1345658280,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.260828171,
    "concept_entropy":4.120300687,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.618472674,
    "polarity":0,
    "normalized_text_entropy":4.260828171,
    "normalized_concept_entropy":4.120300687,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034372876,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Just wanted to note that the following implementation is wrong when is not a primitive type: In that case I propose the following:"
  },
  {
    "postid":6987,
    "postdate":1343646360,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.125155667,
    "concept_entropy":4.544077198,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.470100041,
    "polarity":1,
    "normalized_text_entropy":4.125155667,
    "normalized_concept_entropy":4.544077198,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.03122176,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Is there any performance testing results available in comparing traditional for loop vs Iterator while traversing a ArrayList,HashMap and other collections? Or simply why should I use Iterator over for loop or vice versa?"
  },
  {
    "postid":6988,
    "postdate":1343646780,
    "tag":"1",
    "TFMvalue":0.9,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":3.89536765,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.16637781,
    "polarity":1,
    "normalized_text_entropy":3.89536765,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.024771354,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Assuming this is what you meant: Iterator is faster for collections with no random access (e.g. TreeSet, HashMap, LinkedList). For arrays and ArrayLists, performance differences should be negligible.Edit: I believe that micro-benchmarking is root of pretty much evil, just like early optimization. But then again, I think it's good to have a feeling for the implications of such quite trivial things. Hence I've run:Results are similar for all but \"for with counter\" with LinkedList. All the other five took less than 20 milliseconds to iterate over the whole list. Using on a LinkedList 100,000 times took more than 2 minutes (!) to complete (60,000 times slower). Wow! :) Hence it's best to use an iterator (explicitly or implicitly using for each), especially if you don't know what type and size of list your dealing with. "
  },
  {
    "postid":6989,
    "postdate":1343647500,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.513313797,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.90517443,
    "polarity":-2,
    "normalized_text_entropy":4.513313797,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.061699651,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"The first reason to use an iterator is.If you use a manual index, there may be very innocuous off-by-one errors that you can only see if you look very closely:did you start at 1 or at 0?Did you finish at?Did you use or?If you use an iterator, it is much easier to see that it is really iterating the whole array.\"Say what you do, do what you say.\" The second reason is uniform access to different data structures.An array can be accessed efficiently through an index, but a linked list is best traversed by remembering the last element accessed (otherwise you get a \" \").A hashmap is even more complicated.By providing a uniform interface from these and other data structures (e.g., you can also do tree traversals), you get obvious correctness again.The traversing logic has to be implemented only once, and the code using it can concisely \"say what it does, and do what it says.\""
  },
  {
    "postid":6990,
    "postdate":1343647140,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.297537661,
    "concept_entropy":4.571962006,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.276626314,
    "polarity":1,
    "normalized_text_entropy":4.297537661,
    "normalized_concept_entropy":4.571962006,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.048350642,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Performance is similar in most cases. However, whenever a code receives a List, and loops on it, there is well-known case:(example: LinkedList). The reason is that for these lists, accessing an element by index is not a constant time operation. So you can also consider the Iterator as more robust (to implementation details). As always, performance should not be hide readability issues. The java5 foreach loop is a big hit on that aspect :-)"
  },
  {
    "postid":6991,
    "postdate":1334599140,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.394833004,
    "concept_entropy":3.738904981,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.552149671,
    "polarity":0,
    "normalized_text_entropy":4.394833004,
    "normalized_concept_entropy":3.738904981,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.032964318,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"One of the best reasons to use an iterator over the i++ syntax is that not all data structures will support random access let alone have it perform well.You should also be programming to the list or collection interface so that if you later decided that another data structure would be more efficient you'd be able to swap it out without massive surgery.In that case (the case of coding to an interface) you won'tnecessarily know the implementation details and it's probably wiser to defer that to the data structure itself. "
  },
  {
    "postid":6992,
    "postdate":1334599620,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.17114934,
    "concept_entropy":4.519839586,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.114952165,
    "polarity":0,
    "normalized_text_entropy":4.17114934,
    "normalized_concept_entropy":4.519839586,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.044917031,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"One of the reasons I've learned to stick with the for each is that it simplifies nested loops, especially over 2+ dimensional loops. All the i's, j's, and k's that you may end up manipulating can get confusing very quickly."
  },
  {
    "postid":6993,
    "postdate":1334599740,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.174254521,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.507450798,
    "polarity":0,
    "normalized_text_entropy":4.174254521,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.053252857,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Use or against your generated code, and you will see that there is no real difference. The advantage of the new iterator form is that it looks cleaner in your codebase. : I see from the other answers that you actually meant the difference between using get(i) versus an iterator. I took the original question to mean the difference between the old and new ways of using the iterator. Using get(i) and maintaining your own counter, especially for the classes is not a good idea, for the reasons mentioned in the accepted answer."
  },
  {
    "postid":6994,
    "postdate":1334600220,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.973392696,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.179431233,
    "polarity":1,
    "normalized_text_entropy":3.973392696,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.025048581,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"+1 to what sfussenegger said. FYI, whether you use an explicit iterator or an implicit one (i.e. for each) won't make a performance difference because they compile to the same byte code. "
  },
  {
    "postid":6995,
    "postdate":1334646480,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.28936282,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.974760768,
    "polarity":2,
    "normalized_text_entropy":4.28936282,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041939668,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I don't believe that calculates .size() each time thru the loop and is therefore faster than"
  },
  {
    "postid":6996,
    "postdate":1333364100,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.212126198,
    "concept_entropy":4.549878588,
    "UMASS(coherence)":0.835054678,
    "TFIDF(informativeness)":1.623432342,
    "polarity":2,
    "normalized_text_entropy":4.212126198,
    "normalized_concept_entropy":4.549878588,
    "normalized_UMASS":0.759140616,
    "normalized_TFIDF":0.034478208,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Iterator may also under-perform: Check this: P.S: I also tried it myself and produced similar results..I wonder why then, iterator is preferred over normal looping??"
  },
  {
    "postid":6997,
    "postdate":1333364160,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.371230104,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.613523671,
    "polarity":1,
    "normalized_text_entropy":4.371230104,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.03426777,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have two ArrayLists. ArrayList A contains ArrayList B ContainsI have to compare ArrayLst A and ArrayLst B . The result ArrayList should contain theList which does not exist in ArrayList A.ArrayList result should behow to compare ?"
  },
  {
    "postid":6998,
    "postdate":1333364220,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.101158406,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.555927186,
    "polarity":1,
    "normalized_text_entropy":4.101158406,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.033044544,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In Java, you can use the interface's method. The above code will produce the following output:"
  },
  {
    "postid":6999,
    "postdate":1333364280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.191156077,
    "concept_entropy":0,
    "UMASS(coherence)":0.665425763,
    "TFIDF(informativeness)":1.759951036,
    "polarity":0,
    "normalized_text_entropy":4.191156077,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.604932512,
    "normalized_TFIDF":0.037377572,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm fairly new to ArrayLists anyway but I need them for this project I'm doing so if you guys could help me I would be more than grateful! Basically, I need to create a multidemensional ArrayList to hold String values. I know how to do this with a standard array,like so but this is no good because I don't know the size of my array, all I know is how many demensions it will have. So, if you guys know how to make a 'dynamically resizable array with 2/+ demensions', please could you tell me. Thanks In advance, Andy Edit/Update Maybe it would be easier to resize or define a standard array using a varible? But I don't know? It's probably easier to use my original idea of an ArrayList though... All I need is a complete example code to create a 2D ArrayList and add so example values to both dimensions without knowing the index."
  },
  {
    "postid":7000,
    "postdate":1333366380,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.115187077,
    "concept_entropy":4.600520822,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.788759188,
    "polarity":0,
    "normalized_text_entropy":4.115187077,
    "normalized_concept_entropy":4.600520822,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.037989395,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Depending on your requirements, you might use a class like the one below to make access easier:"
  },
  {
    "postid":7001,
    "postdate":1331792460,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.351638766,
    "concept_entropy":4.575801834,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":4.200625521,
    "polarity":3,
    "normalized_text_entropy":4.351638766,
    "normalized_concept_entropy":4.575801834,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.089212244,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":7002,
    "postdate":1331797560,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.372955752,
    "concept_entropy":4.613064557,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":25.09134263,
    "polarity":0,
    "normalized_text_entropy":4.372955752,
    "normalized_concept_entropy":4.613064557,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.532886107,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you're allowed to use predefined Java classes, you could do something like: Then you can add new elements, something like: Hope you can understand what I mean and what's going on. Also, you'll need to import java.util.ArrayList; for this, if you're making use of the Java class."
  },
  {
    "postid":7003,
    "postdate":1331794440,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.191311366,
    "concept_entropy":0,
    "UMASS(coherence)":0.169628916,
    "TFIDF(informativeness)":0.984130006,
    "polarity":1,
    "normalized_text_entropy":4.191311366,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.154208105,
    "normalized_TFIDF":0.020900803,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You can have ArrayList with elements which would be ArrayLists itself."
  },
  {
    "postid":7004,
    "postdate":1320942540,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.666585111,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.890695495,
    "polarity":0,
    "normalized_text_entropy":3.666585111,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.018916455,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I can think of An Array inside an Array or a? e.g."
  },
  {
    "postid":7005,
    "postdate":1320942540,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.347814739,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.053133853,
    "polarity":1,
    "normalized_text_entropy":4.347814739,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.022366296,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Wouldn't be a better (more efficient) implementation?"
  },
  {
    "postid":7006,
    "postdate":1320942780,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.863784878,
    "concept_entropy":0,
    "UMASS(coherence)":0.294639591,
    "TFIDF(informativeness)":1.195432755,
    "polarity":0,
    "normalized_text_entropy":3.863784878,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.267854174,
    "normalized_TFIDF":0.025388418,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I was following a on this that says: So by looking at this, I concluded that If I've to do just sequential insert in my collection for say 5000000 element, LinkedList will outclass ArrayList. And If I've to just fetch the elements from collection by iterating i.e. Not grabbing the element in middle, still LinkedList will outclass ArrayList.Now to verify my above two statements, I wrote below sample program... But I'm surprised that my above statements were proven wrong. ArrayList outclass Linkedlist in both the cases. It took less time than LinkedList for adding as well as fetching them from Collection. Is there anything I'm doing wrong, or the initial statements about LinkedList and ArrayList does not holds true for collections of size 5000000? I mentioned size, because if i reduce the number of elements to 50000, LinkedList perform better and initial statements holds true."
  },
  {
    "postid":7007,
    "postdate":1320944340,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.311731734,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.519846051,
    "TFIDF(informativeness)":2.019803643,
    "polarity":3,
    "normalized_text_entropy":4.311731734,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.472587319,
    "normalized_TFIDF":0.042896282,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Remember that big-O complexity describes asymptotic behaviour and may not reflect actual implementation speed. It describes how the cost of each operation grows with the size of the list, not the speed of each operation. For example, the following implementation of is O(1) but is not fast: I suspect in your case ArrayList is performing well because it increases it's internal buffer size fairly aggressively so there will not be a large number of reallocations. When the buffer does not need to be resized ArrayList will have fasters. You also need to be very careful when you do this kind of profiling. I'd suggest you change your profiling code to do a warm-up phase (so the JIT has the opportunity to do some optimization without affecting your results) and average the results over a number of runs. (Note that may overflow and you might be better to use). It's also possible that the compiler is optimizing away your empty loops. Make sure the loop actually does something to ensure that the right code is getting called."
  },
  {
    "postid":7008,
    "postdate":1320944340,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.235877671,
    "concept_entropy":4.351159571,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.499304907,
    "polarity":0,
    "normalized_text_entropy":4.235877671,
    "normalized_concept_entropy":4.351159571,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.031842009,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This is a bad benchmark IMO. For an arraylist: the jdk get is what you'd expect: (basically just return the indexed array element., For a linkedlist: looks similar? Not quite. entry is a method not an primitive array, and look what it has to do: That's right, if you ask for say, it's gotta start at the head and repeatedly iterate through the next element. 250000 accesses or so (there's an optimization in the code where it starts at head or tail depending on which would be less accesses.)"
  },
  {
    "postid":7009,
    "postdate":1320402180,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.02850064,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.521189628,
    "polarity":1,
    "normalized_text_entropy":4.02850064,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.032306793,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"An ArrayList is a simpler data structure than a LinkedList.An ArrayList has a single array of pointers in contiguous memory locations.It only has to be recreated if the array is expanded beyond its allocated size. A LinkedList consists of a chain of nodes; each node is separated allocated and has front and back pointers to other nodes. So what does this mean?Unless you need to insert in the middle, splice, delete in the middle etc. an ArrayList will usually be faster.It needs less memory allocations, has much better locality of reference (which is important for processor caching) etc."
  },
  {
    "postid":7010,
    "postdate":1320402900,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.059598155,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.517701738,
    "polarity":0,
    "normalized_text_entropy":4.059598155,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.032232718,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"To understand why the results you got do not contradict the \"big O\" characterization.We need to go back to first principles; i.e.. So, the statement, means is that the time cost of an operation on a list of size N tends towards a constant Cas N tends to infinity. And the statement, means is that the time cost of one of a sequence of N operations tends towards a constant Cas N tends to infinity. What is does not say is what those constants Cand Care.In fact the reason that LinkedList is slower than ArrayList in your benchmark is that Cis larger than C . The lesson is that big O notation does not predict absolute or even relative performance.All it predicts is the of the performance function as the controlling variable gets very large.This is useful to know, but it doesn't tell you everything you need to know."
  },
  {
    "postid":7011,
    "postdate":1320402480,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.902174814,
    "concept_entropy":4.351159571,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.23650772,
    "polarity":0,
    "normalized_text_entropy":3.902174814,
    "normalized_concept_entropy":4.351159571,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.026260762,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The big-O-notation is not about absolut timings, but about relative timings, and you can't compare the numbers of one algorithm to another.You only get information how the same algorithm reacts to increasing or decreasing numbers of tuples.One algorithm might take an hour for one operation, and 2h for two operations, and is O(n), and another one is O(n) too, and takes one millisecond for one operation, and two milliseconds for two operations.Another issue if measuring with the JVM is the optimization of the hotspot-compiler. A do-nothing-loop might be eliminated by the JIT-compiler.A third thing to consider is the OS and JVM, using caches and running the garbage collection meanwhile. "
  },
  {
    "postid":7012,
    "postdate":1320402720,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.183745914,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.523496659,
    "polarity":2,
    "normalized_text_entropy":4.183745914,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.03235579,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"It's hard to find a good use case for LinkedList. If you only need to make use of the Dequeu interface, you should probably use ArrayDeque. If you really need to use the List interface, you will often hear the suggestion to use always ArrayList because LinkedList behaves really poorly in accessing a random element. Unfortunately also ArrayList has its performance problems if elements at the beginning or in the middle of the list must be removed or inserted. There is however a new list implementation called GapList which combines the strengths of both ArrayList and LinkedList. It has been designed as drop-in replacement for both ArrayList and LinkedList and therefore implements both the interfaces List and Deque. Also all public methods provided by ArrayList are implemented (ensureCapacty, trimToSize). GapList's implementation guarantees efficient random access to elements by index (as ArrayList does) and at the same time efficient adding and removing elements to and from head and tail of the list (as LinkedList does). You find more information about GapList at."
  },
  {
    "postid":7013,
    "postdate":1320402960,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.520931505,
    "concept_entropy":3.754441846,
    "UMASS(coherence)":0.4818161,
    "TFIDF(informativeness)":2.179985597,
    "polarity":1,
    "normalized_text_entropy":4.520931505,
    "normalized_concept_entropy":3.754441846,
    "normalized_UMASS":0.438014636,
    "normalized_TFIDF":0.046298202,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"O notation analysis provides important information, but it has it's limitations. By definition O notation analysis considers that every operation takes approximately the same time to execute, which is not true. As @seand pointed out, linked lists internally uses more complex logic to insert and fetch elements (take a look at the source code, you can ctrl+click in your IDE). ArrayList internally only needs to insert elements into an array and increase its size once in a while (which even being an o(n) operation, in practice can be accomplished pretty fast). Cheers"
  },
  {
    "postid":7014,
    "postdate":1320402960,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.127298789,
    "concept_entropy":0,
    "UMASS(coherence)":0.590499746,
    "TFIDF(informativeness)":0.582645456,
    "polarity":1,
    "normalized_text_entropy":4.127298789,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.536817951,
    "normalized_TFIDF":0.012374135,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The usual constructor of is: But there is also an overloaded constructor with a parameter for its initial capacity: Why is it useful to create an with an initial capacity when we can append to it as we please?"
  },
  {
    "postid":7015,
    "postdate":1309361820,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.303964234,
    "concept_entropy":4.394099996,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.646312912,
    "polarity":2,
    "normalized_text_entropy":4.303964234,
    "normalized_concept_entropy":4.394099996,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.013726295,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"If you know in advance what the size of the is going to be, it is more efficient to specify the initial capacity. If you don't do this, the internal array will have to be repeatedly reallocated as the list grows. The larger the final list, the more time you save by avoiding the reallocations. That said, even without pre-allocation, inserting elements at the back of an is guaranteed to take total time. In other words, appending an element is an amortized constant-time operation. This is achieved by having each reallocation increase the size of the array exponentially, typically by a factor of. With this approach, the total number of operations."
  },
  {
    "postid":7016,
    "postdate":1309362000,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.305985976,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.517009183,
    "polarity":-1,
    "normalized_text_entropy":4.305985976,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.053455857,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Because is a data structure, which means it is implemented as an array with an initial (default) fixed size. When this is filled up, the array will be extended to a double sized one. This operation is costful, so you want as few as possible. So, if you know your upper bound is 20 items, then creating the array with initial length of 20 is better than using a default of, say, 15 and then resize it to and use only 20. P.S. - As AmitG says, the expansion factor is implementation specific (in this case)"
  },
  {
    "postid":7017,
    "postdate":1322499420,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":16,
    "Normalized_count":0.266666667,
    "text_entropy":4.215974014,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.222210019,
    "polarity":-2,
    "normalized_text_entropy":4.215974014,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.047194957,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"Default size of Arraylist is. So if you are going to add 100 or more records, you can see the overhead of memory reallocation. So if you have any idea about the number of elements which will be stored in Arraylist its better to create Arraylist with that size instead of starting with 10 and then going on increasing it."
  },
  {
    "postid":7018,
    "postdate":1305536280,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.293453389,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.893203045,
    "polarity":0,
    "normalized_text_entropy":4.293453389,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.040207557,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I actually wrote a on the topic 2 months ago. The article is for C#'s but Java's has a very similar implementation. Since is implemented using a dynamic array, it increases in size on demand. So the reason for the capacity constructor is for optimisation purposes. When one of these resizings operation occurs, the ArrayList copies the contents of the array into a new array that is twice the capacity of the old one. This operation runs in time. Here is an example of how the would increase in size: So the list starts with a capacity of, when the 11th item is added it is increase by to. On the 17th item the is increased again to and so on. Now consider the example where we're creating a list where the desired capacity is already known as. Creating the without the size constructor will call times which takes normally or on resize. Compare this using the constructor and then calling which is guaranteed to run in. Java is as above, starting at and increasing each resize at. C# starts at and increases much more aggressively, doubling at each resize. The adds example from above for C# uses operations."
  },
  {
    "postid":7019,
    "postdate":1305536400,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.379321296,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.831245553,
    "polarity":-2,
    "normalized_text_entropy":4.379321296,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038891714,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"Setting the initial size of an ArrayList, e.g. to, reduces the number of times the re-allocation of internal memory has to occur.As you see in the above example - an can be expanded if needed to be. What this doesn't show you is that the size of the Arraylist usually doubles (although note that the new size depends on your implementation). The following is quoted from: Obviously, if you have no idea as to what kind of range you will be holding, setting the size probably won't be a good idea - however, if you do have a specific range in mind, setting an initial capacity will increase memory efficiency. "
  },
  {
    "postid":7020,
    "postdate":1305536460,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.182030343,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.046341628,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I think each ArrayList is created with an init capacity value of \"10\". So anyway, if you create an ArrayList without setting capacity within constructor it will be created with a default value."
  },
  {
    "postid":7021,
    "postdate":1305536520,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.198071313,
    "concept_entropy":4.513533635,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.972335721,
    "polarity":-2,
    "normalized_text_entropy":4.198071313,
    "normalized_concept_entropy":4.513533635,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041888165,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"ArrayList can contain many values and when doing large initial insertions you can tell ArrayList to allocate a larger storage to begin with as to not waste CPU cycles when it tries to allocate more space for the next item. Thus to allocate some space at the beginning is more effiecient."
  },
  {
    "postid":7022,
    "postdate":1306002240,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.358129882,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.849376914,
    "polarity":1,
    "normalized_text_entropy":4.358129882,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.039276785,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'd say its an optimization.ArrayList without initial capacity will have ~10 empty rows and will expand when you are doing an add. To have a list with exactly the number of items you need to call "
  },
  {
    "postid":7023,
    "postdate":1401818520,
    "tag":"1",
    "TFMvalue":0.863636364,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.193205827,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.81668713,
    "polarity":1,
    "normalized_text_entropy":4.193205827,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038582524,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"This is to avoid possible efforts for reallocation for every single object.internally is created.JVM needs effort to createwhen you add element in the arraylist. If you don't have above code(any algo you think) for reallocation then every time when you invoke then has to be created which is pointless and we are loosing time for increasing size by 1 for each and every objects to be added. So it is better to increase size of with following formula. (JSL has used forcasting formula given below for dynamically growing arraylist instead of growing by 1 every time. Because to grow it takes effort by JVM)"
  },
  {
    "postid":7024,
    "postdate":1300811940,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.094927553,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.407394434,
    "polarity":0,
    "normalized_text_entropy":4.094927553,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.051127876,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As per my experience with, giving an initial capacity is a nice way to avoid reallocation costs. But it bears a caveat. All suggestions mentioned above say that one should provide initial capacity only when a rough estimate of the number of elements is known. But when we try to give an initial capacity without any idea, the amount of memory reserved and unused will be a waste as it may never be required once the list is filled to required number of elements. What i am saying is, we can be pragmatic at the beginning while allocating capacity, and then find a smart way of knowing required minimal capacity at runtime. ArrayList provides a method called. But then, one has find a smart way..."
  },
  {
    "postid":7025,
    "postdate":1300812600,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.522711956,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.164362252,
    "polarity":1,
    "normalized_text_entropy":3.522711956,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045966395,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Why do you type a size for the arraylist?You can declare arraylists with unlimited \"space\". Furthermore you can check the size of the arraylist withIt gets automaticly the size 10 if you add 10 variables."
  },
  {
    "postid":7026,
    "postdate":1300812180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.321892842,
    "concept_entropy":4.46321279,
    "UMASS(coherence)":0.612599719,
    "TFIDF(informativeness)":1.68984237,
    "polarity":4,
    "normalized_text_entropy":4.321892842,
    "normalized_concept_entropy":4.46321279,
    "normalized_UMASS":0.556908835,
    "normalized_TFIDF":0.035888614,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"What is wrong with this conversion? I made this after reading the solution found in. The second line (sorting) in causes the following exception: What is wrong here? I do realize that sorting could be done with, I'm just curious about this one."
  },
  {
    "postid":7027,
    "postdate":1300812300,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.168862656,
    "concept_entropy":0,
    "UMASS(coherence)":0.736631596,
    "TFIDF(informativeness)":2.02107605,
    "polarity":2,
    "normalized_text_entropy":4.168862656,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.669665087,
    "normalized_TFIDF":0.042923305,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"IntelliJ IDEA's inspections give an explanation: At the println line it prints something like \"[[I@190d11]\" which means that you have actually constructed an ArrayList that contains int. There is also an unchecked assignment. You should use instead of. If you had used it, there would have been a compile error because of trying to pass to the constructor. There is no autoboxing from int[] to Integer[], and anyways autoboxing is only syntactic sugar in the compiler, so in this case you need to do the array copy manually:"
  },
  {
    "postid":7028,
    "postdate":1300812240,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.26640913,
    "concept_entropy":4.380106107,
    "UMASS(coherence)":0.434223361,
    "TFIDF(informativeness)":1.590105031,
    "polarity":0,
    "normalized_text_entropy":4.26640913,
    "normalized_concept_entropy":4.380106107,
    "normalized_UMASS":0.39474851,
    "normalized_TFIDF":0.033770408,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You are trying to cast int[] to Integer[], this is not possible. You can use commons-lang's ArrayUtils to convert the ints to Integers before getting the List from the array:"
  },
  {
    "postid":7029,
    "postdate":1298803980,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.290555174,
    "concept_entropy":0,
    "UMASS(coherence)":0.57439168,
    "TFIDF(informativeness)":1.326925271,
    "polarity":3,
    "normalized_text_entropy":4.290555174,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.522174255,
    "normalized_TFIDF":0.028181036,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Use java.utils.Arrays: Or if you want to be efficient avoid all the object allocation just actually do the work:"
  },
  {
    "postid":7030,
    "postdate":1298809620,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.184448472,
    "concept_entropy":0,
    "UMASS(coherence)":0.368972025,
    "TFIDF(informativeness)":0.875152472,
    "polarity":0,
    "normalized_text_entropy":4.184448472,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.335429114,
    "normalized_TFIDF":0.018586355,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"there are two cause of this exception:returns a where is anyou forgot to add the type parameter to:with: resulting in a error:"
  },
  {
    "postid":7031,
    "postdate":1298804880,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.170880359,
    "concept_entropy":4.101867374,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.447769403,
    "polarity":3,
    "normalized_text_entropy":4.170880359,
    "normalized_concept_entropy":4.101867374,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.030747506,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"I think you have found an example where auto-boxing doesn't really work. Because has a varargs parameter the compiler apparently considers the int[] and returns a with a single element in it. You should change the method into this: and possibly add this for compatibility"
  },
  {
    "postid":7032,
    "postdate":1298810640,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.156466538,
    "concept_entropy":0,
    "UMASS(coherence)":0.464872791,
    "TFIDF(informativeness)":0.729628611,
    "polarity":0,
    "normalized_text_entropy":4.156466538,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.422611628,
    "normalized_TFIDF":0.015495741,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" returns a, not a. Since you're doing instead of you don't get a compile error for that, but create an which contains an and you then implicitly cast that arraylist to. Of course the first time you try to use one of those \"Integers\" you get an exception."
  },
  {
    "postid":7033,
    "postdate":1298810700,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.254152349,
    "concept_entropy":4.512047198,
    "UMASS(coherence)":0.48759308,
    "TFIDF(informativeness)":0.78284858,
    "polarity":2,
    "normalized_text_entropy":4.254152349,
    "normalized_concept_entropy":4.512047198,
    "normalized_UMASS":0.443266436,
    "normalized_TFIDF":0.016626019,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"This works from Java 5 to 7: In Java 4 there is no vararg... :-)"
  },
  {
    "postid":7034,
    "postdate":1295452320,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.429516961,
    "concept_entropy":0,
    "UMASS(coherence)":0.32801443,
    "TFIDF(informativeness)":1.500780616,
    "polarity":-1,
    "normalized_text_entropy":4.429516961,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.298194936,
    "normalized_TFIDF":0.03187335,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"this is from Java API \"sort public static void sort(List list)Sorts the specified list into ascending order, according to the natural ordering of its elements. All elements in the list must implement the Comparable interface. Furthermore, all elements in the list must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the list).\" it has to do with implementing the Comparable interface"
  },
  {
    "postid":7035,
    "postdate":1295452860,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.039211537,
    "concept_entropy":4.588298006,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.827487102,
    "polarity":1,
    "normalized_text_entropy":4.039211537,
    "normalized_concept_entropy":4.588298006,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.017574045,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"As far as I understand it, the sort function in the collection class can only be used to sort collections implementing the comparable interface. You are supplying it a array of integers.You should probably wrap this around one of the know Wrapper classes such as Integer.Integer implements comparable. Its been a long time since I have worked on some serious Java, however reading some matter on the sort function will help."
  },
  {
    "postid":7036,
    "postdate":1272281340,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":14,
    "Normalized_count":0.233333333,
    "text_entropy":4.288099851,
    "concept_entropy":0,
    "UMASS(coherence)":0.82150859,
    "TFIDF(informativeness)":1.279667103,
    "polarity":2,
    "normalized_text_entropy":4.288099851,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.746825991,
    "normalized_TFIDF":0.027177375,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"So basically I'm not sure if this is the correct way to synchronize my ArrayList. I have an ArrayList \"in_queue\" which is passed in from the registerInQueue function. Now I'm trying to synchronize it.. Is this sychronizing my in_queue object correctly? thanks!"
  },
  {
    "postid":7037,
    "postdate":1272289560,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.204691683,
    "concept_entropy":0,
    "UMASS(coherence)":0.309475817,
    "TFIDF(informativeness)":1.738170679,
    "polarity":1,
    "normalized_text_entropy":4.204691683,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.281341652,
    "normalized_TFIDF":0.036915004,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You're synchronizing twice, which is pointless and possibly slows down the code: changes while iterating over the list need a synchronnization over the entire operation, which you are doing with Using is superfluous in that case (it creates a wrapper that synchronizes individual operations). However, since you are emptying the list completely, the iterated removal of the first element is the worst possible way to do it, sice for each element all following elements have to be copied, making this an O(n^2) operation - horribly slow for larger lists. Instead, simply call - no iteration needed. If you need the single-method synchronization of later on, then this is the correct way: But in many cases, the single-method synchronization is insufficient (e.g. for all iteration, or when you get a value, do computations based on it, and replace it with the result). In that case, you have to use manual synchronization anyway, so is just useless additional overhead."
  },
  {
    "postid":7038,
    "postdate":1272283500,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.332790748,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.876987712,
    "polarity":4,
    "normalized_text_entropy":4.332790748,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.039863179,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"Looking at your example, I think (or its siblings) may be of use. They look after the synchronisation for you, so threads can write to the queue or peek/take without additional synchronisation work on your part."
  },
  {
    "postid":7039,
    "postdate":1268392200,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.358170159,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.676487425,
    "polarity":-2,
    "normalized_text_entropy":4.358170159,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035604984,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"That's correct, and documented: However, to clear the list, just call."
  },
  {
    "postid":7040,
    "postdate":1268393340,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.216447286,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.354600115,
    "polarity":1,
    "normalized_text_entropy":4.216447286,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.028768791,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Yes it is the correct way, but the synchronised block is required if you want all the removals together to be safe - unless the queue is empty no removals allowed. My guess is that you just want safe queue and dequeue operations, so you can remove the synchronised block. However, there are far advanced concurrent queues in Java such as "
  },
  {
    "postid":7041,
    "postdate":1354526580,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.36103087,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.806958493,
    "polarity":4,
    "normalized_text_entropy":4.36103087,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038375909,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"I am wondering what is the memory overhead of java HashMap compared to ArrayList? I would like to improve the speed for searching for specific values of a big pack (6 Millions+) of identical objects. Thus, I am thinking about using one or several HashMap instead of using ArrayList. But I am wondering what is the overhead of HashMap. As far as i understand, the key is not stored, only the hash of the key, so it should be something like. But what hash function is used? Is it or another one?"
  },
  {
    "postid":7042,
    "postdate":1268392320,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.292331432,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.636484415,
    "polarity":0,
    "normalized_text_entropy":4.292331432,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034755406,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you're comparing HashMap with ArrayList, I presume you're doing some sort of searching/indexing of the ArrayList, such as binary search or custom hash table...?Because a .get(key) thru 6 million entries would be infeasible using a linear search. Using that assumption, I've done some empirical tests and come up with the conclusion that \"You can store 2.5 times as many small objects in the same amount of RAM if you use ArrayList with binary search or custom hash map implementation, versus HashMap\".My test was based on small objects containing only 3 fields, of which one is the key, and the key is an integer.I used a 32bit jdk 1.6.See below for caveats on this figure of \"2.5\". The key things to note are: (a) it's not the space required for references or \"load factor\" that kills you, but rather the overhead required for object creation.If the key is a primitive type, or a combination of 2 or more primitive or reference values, then each key will require its own object, which carries an overhead of 8 bytes. (b) In my experience you usually need the key as part of the value, (e.g. to store customer records, indexed by customer id, you still want the customer id as part of the Customer object).This means it is IMO somewhat wasteful that a HashMap separately stores references to keys and values. Caveats: My code:"
  },
  {
    "postid":7043,
    "postdate":1268392620,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.401598768,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.124924351,
    "polarity":0,
    "normalized_text_entropy":4.401598768,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045128819,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The simplest thing would be to look at the source and work it out that way. However, you're really comparing apples and oranges - lists and maps are conceptually quite distinct. It's rare that you would choose between them on the basis of memory usage. What's the background behind this question?"
  },
  {
    "postid":7044,
    "postdate":1268392740,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.313970451,
    "concept_entropy":0,
    "UMASS(coherence)":0.573485134,
    "TFIDF(informativeness)":2.120108944,
    "polarity":1,
    "normalized_text_entropy":4.313970451,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.521350122,
    "normalized_TFIDF":0.04502655,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"All that is stored in either is pointers.Depending on your architecture a pointer should be 32 or 64 bits (or more or less) An array list of 10 tends to allocate 10 \"Pointers\" at a minimum (and also some one-time overhead stuff). A map has to allocate twice that (20 pointers) because it stores two values at a time.Then on top of that, it has to store the \"Hash\". which should be bigger than the map, at a loading of 75% it SHOULD be around 13 32-bit values (hashes). so if you want an offhand answer, the ratio should be about 1:3.25 or so, but you are only talking pointer storage--very small unless you are storing a massive number of objects--and if so, the utility of being able to reference instantly (HashMap) vs iterate (array) should be MUCH more significant than the memory size. Oh, also:Arrays can be fit to the exact size of your collection.HashMaps can as well if you specify the size, but if it \"Grows\" beyond that size, it will re-allocate a larger array and not use some of it, so there can be a little waste there as well."
  },
  {
    "postid":7045,
    "postdate":1263216120,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.335141625,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.643887615,
    "polarity":-1,
    "normalized_text_entropy":4.335141625,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034912634,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I don't have an answer for you either, but a quick google search turned up a function in Java that might help. Runtime.getRuntime().freeMemory(); So I propose that you populate a HashMap and an ArrayList with the same data. Record the free memory, delete the first object, record memory, delete the second object, record the memory, compute the differences,..., profit!!!You should probably do this with magnitudes of data. ie Start with 1000, then 10000, 100000, 1000000.Corrected, thanks to amischiefr. EDIT:Sorry for editing your post, but this is pretty important if you are going to use this (and It's a littlemuch for a comment).freeMemory does not work like you think it would.First, it's value is changed by garbage collection.Secondly, it's value is changed when java allocates more memory.Just using the freeMemory call alone doesn't provide useful data. Try this: Or you can return the memory used and store it, then compare it to a later value.Either way, remember the 2 gcs and subtracting from totalMemory(). Again, sorry to edit your post!"
  },
  {
    "postid":7046,
    "postdate":1263216300,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.322879869,
    "concept_entropy":0,
    "UMASS(coherence)":0.613490023,
    "TFIDF(informativeness)":2.092893513,
    "polarity":0,
    "normalized_text_entropy":4.322879869,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.557718203,
    "normalized_TFIDF":0.044448553,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Hashmaps try to maintain a load factor (usually 75% full), you can think of a hashmap as a sparsely filled array list. The problem in a straight up comparison in size is this load factor of the map grows to meet the size of the data. ArrayList on the other hand grows to meet it's need by doubling it's internal array size. For relatively small sizes they are comparable, however as you pack more and more data into the map it requires a lot of empty references in order to maintain the hash performance. In either case I recommend priming the expected size of the data before you start adding. This will give the implementations a better initial setting and will likely consume less over all in both cases. based on your updated problem check out. This is a neat little tool written by some of the Google people for doing operations similar to the one you describe. It's also very quick. Allows clustering, filtering, searching, etc."
  },
  {
    "postid":7047,
    "postdate":1263216180,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.110901162,
    "concept_entropy":4.644690736,
    "UMASS(coherence)":0.340519998,
    "TFIDF(informativeness)":1.184907005,
    "polarity":-1,
    "normalized_text_entropy":4.110901162,
    "normalized_concept_entropy":4.644690736,
    "normalized_UMASS":0.309563635,
    "normalized_TFIDF":0.025164874,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Basically, you should be using the \"right tool for the job\". Since there are different instances where you'll need a key/value pair (where you may use a) and different instances where you'll just need a list of values (where you may use a) then the question of \"which one uses more memory\", in my opinion, is moot, since it is not a consideration of choosing one over the other. But to answer the question, since stores key/value pairs while stores just values, I would assume that the addition of keys alone to the HashMap would mean that it takes up more memory, assuming, of course, we are comparing them by the same value (e.g. where the values in both are Strings)."
  },
  {
    "postid":7048,
    "postdate":1263218100,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.182065058,
    "concept_entropy":0,
    "UMASS(coherence)":0.474443126,
    "TFIDF(informativeness)":1.019726141,
    "polarity":0,
    "normalized_text_entropy":4.182065058,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.431311933,
    "normalized_TFIDF":0.021656788,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"hold a reference to the value and a reference to the key.just hold a reference to the value. So, assuming that the key uses the same memory of the value, HashMap uses 50% more memory ( although strictly speaking , is not the HashMap who uses that memory because it just keep a reference to it )In the other hand HashMap provides So, although it may use more memory, getting an element may be much faster using a HashMap than a ArrayList. So, the next thing you should do is but what are they. Using the correct data structure for your program saves more CPU/memory than how the library is implemented underneath. After Grant Welch answer I decided to measure for 2,000,000 integers. Here's theThis is the output "
  },
  {
    "postid":7049,
    "postdate":1262787780,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.159888707,
    "concept_entropy":4.268550536,
    "UMASS(coherence)":0.166890714,
    "TFIDF(informativeness)":1.362050012,
    "polarity":0,
    "normalized_text_entropy":4.159888707,
    "normalized_concept_entropy":4.268550536,
    "normalized_UMASS":0.151718831,
    "normalized_TFIDF":0.02892701,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I don't know the exact number, but HashMaps are much heavier.Comparing the two, ArrayList's internal representation is self evident, but HashMaps retain Entry objects (Entry) which can balloon your memory consumption. It's not that much larger, but it's larger.A great way to visualize this would be with a dynamic profiler such as which allows you to see all heap allocations.It's pretty nice."
  },
  {
    "postid":7050,
    "postdate":1262788020,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":19,
    "Normalized_count":0.316666667,
    "text_entropy":4.172919367,
    "concept_entropy":4.135699553,
    "UMASS(coherence)":0.471490796,
    "TFIDF(informativeness)":1.278224762,
    "polarity":0,
    "normalized_text_entropy":4.172919367,
    "normalized_concept_entropy":4.135699553,
    "normalized_UMASS":0.428627996,
    "normalized_TFIDF":0.027146742,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I think the wrong question is being asked here. If you would like to improve the speed at which you can search for an object in a containing six million entries, then you should look into these datatype'sretrieval operations perform. As usual, the Javadocs for these classes state pretty plainly what type of performance they offer: : This means that HashMap.get(key) is. : This means that most of's operations are, but likely not the ones that you would be using to find objects that match a certain value. If you are iterating over every element in the and testing for equality, or using, then this means that your operation is running at time (or worse). If you are unfamiliar with or notation, this is referring to how long an operation will take. In this case, if you can get constant-time performance, you want to take it. If is this means that retrieval operations take roughly the same amount of time of how many entries are in the Map.The fact that something like is means that the amount of time it takes grows as the size of the list grows; so iterating thru an with six million entries will not be very effective at all."
  },
  {
    "postid":7051,
    "postdate":1262788020,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":19,
    "Normalized_count":0.316666667,
    "text_entropy":4.171964182,
    "concept_entropy":4.135699553,
    "UMASS(coherence)":0.308856558,
    "TFIDF(informativeness)":0.755489885,
    "polarity":0,
    "normalized_text_entropy":4.171964182,
    "normalized_concept_entropy":4.135699553,
    "normalized_UMASS":0.280778689,
    "normalized_TFIDF":0.016044979,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" is giving a lot of information about objects sizes in Java."
  },
  {
    "postid":7052,
    "postdate":1262787960,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.000776858,
    "concept_entropy":4.268550536,
    "UMASS(coherence)":0.319052,
    "TFIDF(informativeness)":1.036842992,
    "polarity":1,
    "normalized_text_entropy":4.000776858,
    "normalized_concept_entropy":4.268550536,
    "normalized_UMASS":0.290047273,
    "normalized_TFIDF":0.022020313,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"If you're considering two ArrayLists vs one Hashmap, it's indeterminate; both are partially-full data structures.If you were comparing Vector vs Hashtable, Vector is probably more memory efficient, because it only allocates the space it uses, whereas Hashtables allocate more space. If you need a key-value pair and aren't doing incredibly memory-hungry work, just use the Hashmap."
  },
  {
    "postid":7053,
    "postdate":1262788080,
    "tag":"1",
    "TFMvalue":0.909090909,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.049560894,
    "concept_entropy":4.135699553,
    "UMASS(coherence)":0.225039671,
    "TFIDF(informativeness)":0.757922814,
    "polarity":1,
    "normalized_text_entropy":4.049560894,
    "normalized_concept_entropy":4.135699553,
    "normalized_UMASS":0.204581519,
    "normalized_TFIDF":0.016096649,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"As Jon Skeet noted, these are completely different structures.A map (such as HashMap) is a mapping from one value to another - i.e. you have a key that maps to a value, in a Key->Value kind of relationship.The key is hashed, and is placed in an array for quick lookup. A List, on the other hand, is a collection of elements with order - ArrayList happens to use an array as the back end storage mechanism, but that is irrelevant.Each indexed element is a single element in the list. edit: based on your comment, I have added the following information: The key is stored in a hashmap.This is because a hash is not guaranteed to be unique for any two different elements.Thus, the key has to be stored in the case of hashing collisions.If you simply want to see if an element exists in a set of elements, use a Set (the standard implementation of this being HashSet).If the order matters, but you need a quick lookup, use a LinkedHashSet, as it keeps the order the elements were inserted.The lookup time is O(1) on both, but the insertion time is slightly longer on a LinkedHashSet.Use a Map only if you are actually mapping from one value to another - if you simply have a set of unique objects, use a Set, if you have ordered objects, use a List."
  },
  {
    "postid":7054,
    "postdate":1262788500,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.142245504,
    "concept_entropy":4.509939333,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.385337812,
    "polarity":0,
    "normalized_text_entropy":4.142245504,
    "normalized_concept_entropy":4.509939333,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.029421593,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"This lists the memory consumption for several commonly (and not so commonly) used data structures. From there one can see that the takes roughly 5 times the space of an. The map will also allocate one additional object per entry. If you need a predictable iteration order and use a, the memory consumption will be even higher. You can do your own memory measurements with. There are two important facts to note however:"
  },
  {
    "postid":7055,
    "postdate":1262790300,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.341566773,
    "concept_entropy":4.497856048,
    "UMASS(coherence)":0.344097201,
    "TFIDF(informativeness)":2.186413588,
    "polarity":0,
    "normalized_text_entropy":4.341566773,
    "normalized_concept_entropy":4.497856048,
    "normalized_UMASS":0.312815637,
    "normalized_TFIDF":0.046434718,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In Java, using the following function for a huge matrix X to print its column-distinct elements: First I iterate by columns (index j) and inside by rows (index i). This function will be called millions of times for different matrices, so the code should be optimized to meet the performance requirements. I'm wondering about the values array. Would it be faster to use or instead of ?"
  },
  {
    "postid":7056,
    "postdate":1261541640,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.048055974,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.524996215,
    "polarity":0,
    "normalized_text_entropy":4.048055974,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.053625484,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"What would be much more efficient would be to use a instead of a list, for example the implementation. The contains method will run in O(1) instead of O(n) with a list. And you could save one call by only calling the add method. As for your specific question, I would just create a new Set at each loop - object creation is not that expensive, probably less than clearing the set (as confirmed by the benchmark at the bottom - see the most efficient version in EDIT 2): However, the only way to know which is quicker (new object vs. clear) is to profile that portion of your code and check the performance of both versions. I ran a quick benchmark and the clear version seems a little faster than creating a set at each loop (by about 20%). You should still check on your dataset / use case which one is better. Faster code with my dataset: An actually even faster version of the code is obtained by creating a new set of the right size at each loop: After JVM warm up + JIT:"
  },
  {
    "postid":7057,
    "postdate":1261552920,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.167069073,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.546610933,
    "TFIDF(informativeness)":0.973646729,
    "polarity":0,
    "normalized_text_entropy":4.167069073,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.49691903,
    "normalized_TFIDF":0.020678161,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Of course is faster than creating a new object (it saves the memory allocation). But as said by Assylias, (if the object has an adequate hashCode() method), HashSet would be a better choice for a collection. If you have performance in mind, I/O should be an issue as well, System.out.println() does a flush under the hood every time. If you have to write to console, try to do it as seldom as posible (as it might turn any other performance issues negligible). This would be my try: P.D.1. Also if you want O(1) (worst case) access performance, you should consider BitSet (that is, if the values of X are not too spread, and higher and lower bounds are reasonable). P.D.2. Also, as Assylias says, setting an initial size for HashSet may help. As , you might want an to be sure there is no resizing."
  },
  {
    "postid":7058,
    "postdate":1261543080,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.418019095,
    "concept_entropy":0,
    "UMASS(coherence)":0.528475023,
    "TFIDF(informativeness)":1.230874041,
    "polarity":0,
    "normalized_text_entropy":4.418019095,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.480431839,
    "normalized_TFIDF":0.026141115,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can use this keep address ArrayList in memory, without garbage collector effect on this address."
  },
  {
    "postid":7059,
    "postdate":1261544100,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.203490675,
    "concept_entropy":0,
    "UMASS(coherence)":0.56430408,
    "TFIDF(informativeness)":1.496823288,
    "polarity":4,
    "normalized_text_entropy":4.203490675,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.513003709,
    "normalized_TFIDF":0.031789305,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"You should use .clear() methods , using this you haven't need to assign memory your variable again and again."
  },
  {
    "postid":7060,
    "postdate":1261543860,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.367566151,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.976908763,
    "polarity":0,
    "normalized_text_entropy":4.367566151,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041985287,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"How can I split an ArrayList (size=1000) in multiple ArrayLists of the same size (=10) ?"
  },
  {
    "postid":7061,
    "postdate":1252884720,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.262103974,
    "concept_entropy":4.305471966,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.438993214,
    "polarity":0,
    "normalized_text_entropy":4.262103974,
    "normalized_concept_entropy":4.305471966,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.009323271,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can use to get a view of a portion of the original list. From the API: Example: If you need these chopped lists to be NOT a view, then simply create a new from the. Here's an example of putting a few of these things together:"
  },
  {
    "postid":7062,
    "postdate":1252885200,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.412787561,
    "concept_entropy":4.508774918,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.816045617,
    "polarity":-3,
    "normalized_text_entropy":4.412787561,
    "normalized_concept_entropy":4.508774918,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.017331052,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"You can add the library to your project and use the method, e.g."
  },
  {
    "postid":7063,
    "postdate":1254932280,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.208053467,
    "concept_entropy":4.604471695,
    "UMASS(coherence)":0.547477231,
    "TFIDF(informativeness)":1.371853795,
    "polarity":1,
    "normalized_text_entropy":4.208053467,
    "normalized_concept_entropy":4.604471695,
    "normalized_UMASS":0.497706574,
    "normalized_TFIDF":0.029135222,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"A similar question was discussed here,Mainly you can use sublist. More details here : "
  },
  {
    "postid":7064,
    "postdate":1254934440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":3.964137395,
    "concept_entropy":4.269170935,
    "UMASS(coherence)":0.714703462,
    "TFIDF(informativeness)":1.814188372,
    "polarity":1,
    "normalized_text_entropy":3.964137395,
    "normalized_concept_entropy":4.269170935,
    "normalized_UMASS":0.64973042,
    "normalized_TFIDF":0.038529456,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'm guessing that the issue you're having is with naming 100 ArrayLists and populating them.You can create an array of ArrayLists and populate each of those using a loop. The simplest (read stupidest) way to do this is like this:"
  },
  {
    "postid":7065,
    "postdate":1297245960,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.141329745,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.767673499,
    "polarity":0,
    "normalized_text_entropy":4.141329745,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.016303733,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The answer provided by polygenelubricants splits an array based on given size. I was looking for code that would split an array into a given number of parts. Here is the modification I did to the code: Hope it helps someone."
  },
  {
    "postid":7066,
    "postdate":1378008360,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.353897778,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.045304628,
    "polarity":0,
    "normalized_text_entropy":4.353897778,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02220002,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Which one of the 2 options is better and faster to clear an ArrayList, and why? or It happens that I have to, at random times, clear all entries from my ArrayList and I have no way to know how many new entries there will be in the future, there might be 0 or a 1000. Which method is faster and better, and why?"
  },
  {
    "postid":7067,
    "postdate":1378012320,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.430542844,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.661548708,
    "polarity":-1,
    "normalized_text_entropy":4.430542844,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035287718,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"It's hard to know without a benchmark, but if you have lots of items in your ArrayList and the average size is lower, it might be faster to make a new ArrayList. "
  },
  {
    "postid":7068,
    "postdate":1378011240,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.10755687,
    "concept_entropy":4.58939258,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.532250495,
    "polarity":0,
    "normalized_text_entropy":4.10755687,
    "normalized_concept_entropy":4.58939258,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.032541702,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I think that the answer is that it depends on a whole range of factors such as: These make it hard to predict which will be better.But my intuition is that the difference will not be that great. Two bits of advice:"
  },
  {
    "postid":7069,
    "postdate":1378012440,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.036145899,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.067738127,
    "polarity":0,
    "normalized_text_entropy":4.036145899,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.022676459,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" would remove the elements without reducing the capacity of the list. Here mylist got cleared, the references to the elements held by it got nulled out, but it keeps the same backing array. Then mylist was reinitialized and got a new backing array, the old one got GCed. So one way holds onto memory, the other one throws out its memory and gets reallocated from scratch (with the default capacity). Which is better depends on whether you want to reduce garbage-collection churn or minimize the current amount of unused memory. Whether the list sticks around long enough to be moved out of Eden might be a factor in deciding which is faster (because that might make garbage-collecting it more expensive)."
  },
  {
    "postid":7070,
    "postdate":1378029960,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.345072156,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.054513847,
    "polarity":2,
    "normalized_text_entropy":4.345072156,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.043633452,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Tried the below program , With both the approach. 1. With clearing the arraylist obj in for loop2. creating new New Arraylist in for loop.and to my surprise. the memory allocation didnt change much.Before loop total free memory: 64,909 ::After loop total free memory: 64,775 ::Before loop total free memory: 64,909 :: After loop total free memory: 64,765 :: So this says there is not much difference in using arraylist.clear from memory utilization perspective."
  },
  {
    "postid":7071,
    "postdate":1377803280,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.011008215,
    "concept_entropy":4.539844682,
    "UMASS(coherence)":0.352127365,
    "TFIDF(informativeness)":1.27179547,
    "polarity":0,
    "normalized_text_entropy":4.011008215,
    "normalized_concept_entropy":4.539844682,
    "normalized_UMASS":0.320115786,
    "normalized_TFIDF":0.027010198,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The first one will keep the same list just clear the list.The second one creates a new in memory. Suggestion: First one because that's what is is designed to do."
  },
  {
    "postid":7072,
    "postdate":1377803760,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.443134544,
    "concept_entropy":4.71905387,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.81053501,
    "polarity":-1,
    "normalized_text_entropy":4.443134544,
    "normalized_concept_entropy":4.71905387,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.017214019,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If there is a good chance that the list will contain as much elements as it contains when clearing it, and if you're not in need for free memory, clearing the list is a better option. But my guess is that it probably doesn't matter. Don't try to optimize until you have detected a performance problem, and identified where it comes from."
  },
  {
    "postid":7073,
    "postdate":1377804000,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.154180154,
    "concept_entropy":4.566339862,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.683245078,
    "polarity":1,
    "normalized_text_entropy":4.154180154,
    "normalized_concept_entropy":4.566339862,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.014510655,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" is going to keep the same ArrayList but the same memory allocation. is going to allocate new memory for your ArrayList. The big difference is that ArrayLists will expand dynamically as you need more space.Therefore, if you call you will still, potentially, have a large amount of memory allocated for an ArrayList that might not be needed. That said will be faster but if memory maters you might want to allocate a new ArrayList."
  },
  {
    "postid":7074,
    "postdate":1366519680,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.395073144,
    "concept_entropy":4.353985443,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.294956289,
    "polarity":0,
    "normalized_text_entropy":4.395073144,
    "normalized_concept_entropy":4.353985443,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.027502084,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I would suggest using list.clear() rather than allocating a new object. When you call the \"new\" keyword, you are creating more space in memory. In reality, it doesn't matter much. I suppose that if you know how large the list will be, it might be a good idea to create a new space but then specify how large the array will be. The truth is, it's not going to matter unless you're doing scientific programming. In that case, you need to go learn C++."
  },
  {
    "postid":7075,
    "postdate":1366520520,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.141438017,
    "concept_entropy":4.468410972,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.343320721,
    "polarity":0,
    "normalized_text_entropy":4.141438017,
    "normalized_concept_entropy":4.468410972,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.028529241,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have one million rows of data in .txt format. the format is very simple. For each row:You know what I mean. For each user, it could appear many times, or appear only once (you never know). I need to find out all the values for each user. Because user may appear randomly, I used Hashmap to do it. That is: HashMap(key: String, value: ArrayList). But to add data to the arrayList, I have to constantly use HashMap get(key) to get the arrayList, add value to it, then put it back to HashMap. I feel it is not that very efficient. Anybody knows a better way to do that? "
  },
  {
    "postid":7076,
    "postdate":1366519920,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.894646363,
    "concept_entropy":4.299927966,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.049668186,
    "polarity":-1,
    "normalized_text_entropy":3.894646363,
    "normalized_concept_entropy":4.299927966,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.022292693,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You don't need to re-add the ArrayList back to your Map. If the ArrayList already exists then just add your value to it. An improved implementation might look like: while processing each line:- I wrote the original answer back in 2009 when my knowledge of Google Guava was limited. In light of all that Google Guava does, I now recommend using its instead reinvent it. Outputs:"
  },
  {
    "postid":7077,
    "postdate":1366519920,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.169925001,
    "concept_entropy":4.533765242,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.213007566,
    "polarity":0,
    "normalized_text_entropy":3.169925001,
    "normalized_concept_entropy":4.533765242,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02576167,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Use Multimap from Google Collections. It allows multiple values for the same key"
  },
  {
    "postid":7078,
    "postdate":1365321720,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.350783415,
    "concept_entropy":0,
    "UMASS(coherence)":0.699861181,
    "TFIDF(informativeness)":2.456652747,
    "polarity":-2,
    "normalized_text_entropy":4.350783415,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.636237437,
    "normalized_TFIDF":0.052174016,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"The ArrayList values in your HashMap are references. You don't need to \"put it back to HashMap\". You're operating on the object that already exists as a value in the HashMap."
  },
  {
    "postid":7079,
    "postdate":1365322260,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.958901969,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.481204813,
    "polarity":-1,
    "normalized_text_entropy":3.958901969,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.031457602,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"i think what you want is the Multimap. You can get it from apache's commons collection, or google-collections."
  },
  {
    "postid":7080,
    "postdate":1365321900,
    "tag":"1",
    "TFMvalue":0.615384615,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.940351043,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.262012877,
    "polarity":-2,
    "normalized_text_entropy":3.940351043,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.026802437,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"As already mentioned, is your best option. Depending on your business requirements or constraints on the data file, you may want to consider doing a one-off sorting of it, to make it more optimised for loading."
  },
  {
    "postid":7081,
    "postdate":1365322200,
    "tag":"1",
    "TFMvalue":0.545454545,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.318923357,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.496596333,
    "TFIDF(informativeness)":1.346604555,
    "polarity":-4,
    "normalized_text_entropy":4.318923357,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.451451212,
    "normalized_TFIDF":0.028598982,
    "normalized_polarity":0.185185185,
    "tagtext":"inheritance",
    "posttext":"it would be faster if you used a LinkedList instead of an ArrayList, as the ArrayList will need to resize when it nears capacity. you will also want to appropriately estimate the capacity of the wrapping collection (HashMap or Multimap) you are creating to avoid repetitive rehashing."
  },
  {
    "postid":7082,
    "postdate":1365321900,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.31970871,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.49847144,
    "TFIDF(informativeness)":1.401467561,
    "polarity":-1,
    "normalized_text_entropy":4.31970871,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.453155855,
    "normalized_TFIDF":0.029764154,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I have an of words with duplicate entries. I want to count and save occurrences for each word in a data structure.How can I do it?"
  },
  {
    "postid":7083,
    "postdate":1365322800,
    "tag":"1",
    "TFMvalue":0.733333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.124928455,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.277277294,
    "polarity":-1,
    "normalized_text_entropy":4.124928455,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02712662,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"If you haven't big Strings list the shortest way to implement is using Collections.frequency method: Output:"
  },
  {
    "postid":7084,
    "postdate":1357464660,
    "tag":"1",
    "TFMvalue":0.705882353,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.472869022,
    "concept_entropy":0,
    "UMASS(coherence)":0.533823778,
    "TFIDF(informativeness)":2.006830701,
    "polarity":2,
    "normalized_text_entropy":4.472869022,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.485294344,
    "normalized_TFIDF":0.042620764,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"There are lots of possibilities. A fast to implement solution could be to use a where the String is each individual word and Integer the count of each. Traverse the list and increase the corresponding value in the map for it. In case there is no entry yet, add one with the value 1."
  },
  {
    "postid":7085,
    "postdate":1357466520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.532269278,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.611454873,
    "polarity":3,
    "normalized_text_entropy":4.532269278,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.05546168,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Here's a test-driven class that will do what you want.First the test: Now the class: To solve your specific problem, you would create a counter, and iterate over your list, counting each element."
  },
  {
    "postid":7086,
    "postdate":1357464780,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.862206411,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.452538108,
    "polarity":0,
    "normalized_text_entropy":3.862206411,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.030848783,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Or if you are too lazy to do it yourself (or a good industrial programmer :p), use from google guava."
  },
  {
    "postid":7087,
    "postdate":1357469700,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":12,
    "Normalized_count":0.2,
    "text_entropy":4.08021809,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.575862571,
    "polarity":0,
    "normalized_text_entropy":4.08021809,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.033467929,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I currently believe that: Am I generally correct? Are there situations where this is not correct?"
  },
  {
    "postid":7088,
    "postdate":1357538160,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":3.784527696,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.390485909,
    "polarity":0,
    "normalized_text_entropy":3.784527696,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.029530928,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Generally, yes, you are correct. There's also a combined data structure, the, which offers fast access to arbitrary elements as well as predictable ordering. However, it's worth noting that ArrayList and HashMap are only two implementations of the List and Map interfaces, respectively. There are other implementations of each that might be more suitable for more specific requirements. For example, a LinkedList might provide higher performance than an ArrayList for certain queueing/dequeueing requirements."
  },
  {
    "postid":7089,
    "postdate":1357466940,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.930645166,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041002747,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"A Map is a. It has a key->value layout. A List is on the other hand a, which is an ordered collection of elements. A more direct comparison would possibly be between and List: Both these hold values, where the list is explicitly ordered (you can get element # x), and the set is (typically) not ordered (well, unless it is an, in which case iteration order will be ordered by a Comparator). . To check if an element belongs in an arraylist (contains(element)), the implementation iterate over all the elements of it, checking whether one have found the element using the equals() method. To check if an element belongs in a hashset, first the element's hashCode() is gotten, then one goes \"directly\" to the position where this element reside, and checks if it is there. Thus,. On a list, you can ask for element# x, in addition to what you can do on a set, which is add, remove, ask-whether-present (contains), and iterate over all elements. On a map, you can ask for an element by its key, instead of by its index as you do with a list."
  },
  {
    "postid":7090,
    "postdate":1357465320,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.461954169,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.064577023,
    "polarity":1,
    "normalized_text_entropy":4.461954169,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.043847172,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I would say that you're generally correct, but not entirely accurate. You use a for data retrieval, but not always randomly. You use an for iteration but you can also use it for lookups via the index. More generally, you use a implementation when you need to efficiently retrieve items by lookup, i.e. retrieving something based on the key - such as dictionaries, caches, repositories, etc. You use a implementation when you just want a data structure where you can iterate over your data, usually when you want them in a predetermined and/or predictable order. In other words, you uses as an indexing data structure, and you uses as you would usually use arrays."
  },
  {
    "postid":7091,
    "postdate":1355137800,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.335952532,
    "concept_entropy":4.597463054,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.126362217,
    "polarity":0,
    "normalized_text_entropy":4.335952532,
    "normalized_concept_entropy":4.597463054,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045159356,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"For me, it's more whether I care about the ordering of the items in the collection. If you do care about the order then use the ArrayList. If you don't care about the order (you just want to store a bunch of items) then you can use a HashMap."
  },
  {
    "postid":7092,
    "postdate":1355138580,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.274077566,
    "concept_entropy":4.521812585,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.735783216,
    "polarity":2,
    "normalized_text_entropy":4.274077566,
    "normalized_concept_entropy":4.521812585,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.036864299,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Don't forget it's also much faster to get to one specific item with a map (if you have the key) than it is from an array (unless you have an index, but a key will always get you the right value whereas having an index may not work if new elements are inserted or older ones removed)."
  },
  {
    "postid":7093,
    "postdate":1355138520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.486487074,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.454802224,
    "polarity":0,
    "normalized_text_entropy":4.486487074,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.052134715,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'd disagree slightly.For me it depends more on how I want to retrieve the items.If I want to do so based on something like their order (by index, to be precise) I would tend to use a linear structure like an ArrayList (or even an array).If I need to look up items, I'd use a map structure like the HashMap. Another complicating factor has to do with insertions and order, as dan pointed out."
  },
  {
    "postid":7094,
    "postdate":1331591220,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.223799321,
    "concept_entropy":0,
    "UMASS(coherence)":0.41345442,
    "TFIDF(informativeness)":2.415192152,
    "polarity":1,
    "normalized_text_entropy":4.223799321,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.375867655,
    "normalized_TFIDF":0.051293482,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"So, normally would return a type of....but supposed it's an of object, how do I make to return a type of rather than?"
  },
  {
    "postid":7095,
    "postdate":1331591520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.236195938,
    "concept_entropy":0,
    "UMASS(coherence)":0.451715868,
    "TFIDF(informativeness)":1.854564048,
    "polarity":1,
    "normalized_text_entropy":4.236195938,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.410650789,
    "normalized_TFIDF":0.039386948,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Like this: It's tempting to do it like: but the internal implementation will realloc a properly sized array anyway so you are better doing it upfront. If your list is not properly typed you need to do a cast before calling toArray. Like this:"
  },
  {
    "postid":7096,
    "postdate":1331591520,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.613337314,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.972616428,
    "polarity":1,
    "normalized_text_entropy":3.613337314,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.041894127,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"It doesn't really need to return, for example:- Here's my class:-"
  },
  {
    "postid":7097,
    "postdate":1328547480,
    "tag":"1",
    "TFMvalue":0.875,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.321727491,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.353484959,
    "polarity":-1,
    "normalized_text_entropy":4.321727491,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049982954,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":7098,
    "postdate":1328547600,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.221773921,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.808607952,
    "polarity":0,
    "normalized_text_entropy":4.221773921,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.03841094,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Is an array or a list in java? what is the time complexity for the get operation, is it or?"
  },
  {
    "postid":7099,
    "postdate":1328547660,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.238246444,
    "concept_entropy":3.991729297,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.132413254,
    "polarity":-3,
    "normalized_text_entropy":4.238246444,
    "normalized_concept_entropy":3.991729297,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045287867,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"An in Java is a that is backed by an. The method is a constant time,, operation. The code straight out of the Java library for: Basically, it just returns a value straight out of the backing array. ( ) is also constant time)"
  },
  {
    "postid":7100,
    "postdate":1328548140,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.348686987,
    "concept_entropy":4.48445852,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.345877075,
    "polarity":0,
    "normalized_text_entropy":4.348686987,
    "normalized_concept_entropy":4.48445852,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.049821379,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It's implementation is done with an array and the get operation is O(1). javadoc says:"
  },
  {
    "postid":7101,
    "postdate":1309491360,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.324093688,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.190483214,
    "polarity":6,
    "normalized_text_entropy":4.324093688,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.046521148,
    "normalized_polarity":0.37037037,
    "tagtext":"inheritance",
    "posttext":"As everyone has already pointed out, read operations are constant time - O(1) but write operations have the potential to run out of space in the backing array, re-allocation, and a copy - so that runs in O(n) time, as the doc says: In practice everything is O(1) after a few adds, since the backing array is doubled each time it's capacity is exhausted. So if the array starts at 16, gets full, it's reallocated to 32, then 64, 128, etc. so it scales okay, but GC can hit up during a big realloc."
  },
  {
    "postid":7102,
    "postdate":1309491480,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.096273121,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.808042419,
    "polarity":-1,
    "normalized_text_entropy":4.096273121,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.038398929,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"To be pedantic, it's a backed by an array. And yes, the time complexity for is O(1)."
  },
  {
    "postid":7103,
    "postdate":1309492200,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.990283353,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.503737577,
    "polarity":-1,
    "normalized_text_entropy":3.990283353,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.031936149,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I am currently using the contains method belonging to the ArrayList class for making a search. Is there a way to make this search case insensitive in java? I found that in C# it is possible to use OrdinalIgnoreCase. Is there a java equivalent, or another way to do this?Thanks."
  },
  {
    "postid":7104,
    "postdate":1335550260,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.236689988,
    "concept_entropy":2.845350937,
    "UMASS(coherence)":0.53313655,
    "TFIDF(informativeness)":1.913418117,
    "polarity":0,
    "normalized_text_entropy":4.236689988,
    "normalized_concept_entropy":2.845350937,
    "normalized_UMASS":0.484669591,
    "normalized_TFIDF":0.040636882,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You can use this exactly like you'd use any other ArrayList. You can pass this List out to other code, and external code won't have to understand any string wrapper classes."
  },
  {
    "postid":7105,
    "postdate":1300807320,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.948676193,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":3.28069598,
    "polarity":0,
    "normalized_text_entropy":3.948676193,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.069674921,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Assuming you have anAbout the only way I can think of to do this would be to create a very light wrapper class around a String and override equals and hashcode to ignore case, leveraging where possible. Then you would have an. It's kinda an ugly idea though."
  },
  {
    "postid":7106,
    "postdate":1300811640,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.923325349,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.781835388,
    "polarity":2,
    "normalized_text_entropy":3.923325349,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.037842348,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Traditionally, you can develop your own logic to compare strings held by an. There may be several ways to do so like the one shown below. Why shouldn't be used some direct and convenient ways like a SortedSet as shown below with a?. Would compare two different sets ignoring case and return, in this particular situation and your comparision would work without any issue."
  },
  {
    "postid":7107,
    "postdate":1300808280,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.299128631,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.029400546,
    "polarity":1,
    "normalized_text_entropy":4.299128631,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.043100099,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Looking at the, there is no such method for contains. But you could do at least two things:"
  },
  {
    "postid":7108,
    "postdate":1297257360,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.347454536,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.658489822,
    "polarity":-1,
    "normalized_text_entropy":4.347454536,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.013984906,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The method is based on what the method of the objects stored in your returns. So yes it is possible if you use objects where uses a case insensitive comparison. So you could for example use a class like this (code might still contain some typos)"
  },
  {
    "postid":7109,
    "postdate":1297257660,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.253297935,
    "concept_entropy":0,
    "UMASS(coherence)":0.69335189,
    "TFIDF(informativeness)":1.015399817,
    "polarity":-2,
    "normalized_text_entropy":4.253297935,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.6303199,
    "normalized_TFIDF":0.021564906,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"If you're using Java 8, try:"
  },
  {
    "postid":7110,
    "postdate":1297257660,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.426307813,
    "concept_entropy":4.572862046,
    "UMASS(coherence)":0.577369704,
    "TFIDF(informativeness)":2.687223809,
    "polarity":2,
    "normalized_text_entropy":4.426307813,
    "normalized_concept_entropy":4.572862046,
    "normalized_UMASS":0.524881549,
    "normalized_TFIDF":0.057070849,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"By using compareToIgnoreCase, you should be able to do what you want!"
  },
  {
    "postid":7111,
    "postdate":1297257720,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.322686825,
    "concept_entropy":4.304229297,
    "UMASS(coherence)":0.240031277,
    "TFIDF(informativeness)":1.287429484,
    "polarity":1,
    "normalized_text_entropy":4.322686825,
    "normalized_concept_entropy":4.304229297,
    "normalized_UMASS":0.218210252,
    "normalized_TFIDF":0.027342231,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Another sollution:method uses indexOf... In this sollution you can also know in where position is the string. -> or .. You should also consider using a Set instead of List."
  },
  {
    "postid":7112,
    "postdate":1275902880,
    "tag":"1",
    "TFMvalue":0.588235294,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.232075136,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.344105999,
    "polarity":2,
    "normalized_text_entropy":4.232075136,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.028545918,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"ArrayList's contains() method checks equality by calling equals() method on the object you provide (NOT the objects in the array). Therefore, a slightly hackish way is to create a wrapper class around the String object, like this: Then you can use it to perform your test. Example \"manual\" test case:"
  },
  {
    "postid":7113,
    "postdate":1275903660,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.324674453,
    "concept_entropy":0,
    "UMASS(coherence)":0.503734498,
    "TFIDF(informativeness)":1.34044101,
    "polarity":4,
    "normalized_text_entropy":4.324674453,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.457940453,
    "normalized_TFIDF":0.028468082,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"I was wondering if it is possible to assign an array to an ArrayList in Java."
  },
  {
    "postid":7114,
    "postdate":1275903720,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.268458688,
    "concept_entropy":4.522860741,
    "UMASS(coherence)":0.546610933,
    "TFIDF(informativeness)":1.218521254,
    "polarity":-1,
    "normalized_text_entropy":4.268458688,
    "normalized_concept_entropy":4.522860741,
    "normalized_UMASS":0.49691903,
    "normalized_TFIDF":0.025878768,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You can use: or alternatively,: Note that you aren't technically assigning an array to a List (well, you can't do that), but I think this is the end result you are looking for."
  },
  {
    "postid":7115,
    "postdate":1275903180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.515452664,
    "concept_entropy":4.109412644,
    "UMASS(coherence)":0.621664687,
    "TFIDF(informativeness)":3.305198869,
    "polarity":0,
    "normalized_text_entropy":4.515452664,
    "normalized_concept_entropy":4.109412644,
    "normalized_UMASS":0.565149715,
    "normalized_TFIDF":0.070195309,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The class contains an method which you can use as follows:"
  },
  {
    "postid":7116,
    "postdate":1275904500,
    "tag":"1",
    "TFMvalue":0.928571429,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.372492467,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.396570292,
    "TFIDF(informativeness)":1.100996365,
    "polarity":-2,
    "normalized_text_entropy":4.372492467,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.360518447,
    "normalized_TFIDF":0.023382793,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"The problem occurs atAnd this code which contains that line, is inside of anAll of this is inside, where is anWhen I touch an, it may activate, which will create another with different properties, which will fall off the screen and destroy itself in less than a second. It's my way of creating particle effects. We can call this \"particle\", like the String parameter in the constructor. This all works fine until I add another main. Now I have two on the screen at the same time, and if I touch the newest, it works fine, and launches the particles. However, if I touch and activate on the older, then it gives me the exception. How can I make this work?"
  },
  {
    "postid":7117,
    "postdate":1275903840,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.248116152,
    "concept_entropy":4.316828529,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.744971716,
    "polarity":1,
    "normalized_text_entropy":4.248116152,
    "normalized_concept_entropy":4.316828529,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.015821596,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" occurs when you modify the list (by adding or removing elements) while traversing a list with. TryAlso you should consider enhanced for each loop as Jon suggested."
  },
  {
    "postid":7118,
    "postdate":1264705560,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.448124998,
    "concept_entropy":4.575377767,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.246160021,
    "polarity":-1,
    "normalized_text_entropy":4.448124998,
    "normalized_concept_entropy":4.575377767,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.047703604,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You're not allowed to add an entry to a collection while you're iterating over it. One option is to create a new for new entries while you're iterating over, and then add all the new ones to afterwards ( ). Of course, that means you won't have executed the loop body for those new elements - is that a problem? At the same time, I'd recommend that you update your code to use the:"
  },
  {
    "postid":7119,
    "postdate":1264708080,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.418416967,
    "concept_entropy":4.533214016,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.964694174,
    "polarity":1,
    "normalized_text_entropy":4.418416967,
    "normalized_concept_entropy":4.533214016,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.020488028,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"An indexed for loop should also work. As long as the size is evaluated each loop"
  },
  {
    "postid":7120,
    "postdate":1264706880,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.088246417,
    "concept_entropy":4.529683148,
    "UMASS(coherence)":null,
    "TFIDF(informativeness)":null,
    "polarity":null,
    "normalized_text_entropy":4.088246417,
    "normalized_concept_entropy":4.529683148,
    "normalized_UMASS":0,
    "normalized_TFIDF":0,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"adding from list in this case leads to CME, no amount of will let you avoid that. Instead, consider adding using the iterator... Also I think it's somewhat to state like... for the sake of precision note that above is not guaranteed.points out that this "
  },
  {
    "postid":7121,
    "postdate":1264707060,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.37889128,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.775814247,
    "polarity":1,
    "normalized_text_entropy":4.37889128,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.037714472,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"How much data can be added in java.util.List in Java at the maximumIs there any default size an array list?"
  },
  {
    "postid":7122,
    "postdate":1264706400,
    "tag":"1",
    "TFMvalue":0.555555556,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.082236921,
    "concept_entropy":3.91494675,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.206630156,
    "polarity":-1,
    "normalized_text_entropy":4.082236921,
    "normalized_concept_entropy":3.91494675,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.025626227,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"It depends on the implementation. Since you index arrays withs, an can't hold more than elements. A isn't limited in the same way, though, and can contain any amount of elements."
  },
  {
    "postid":7123,
    "postdate":1264706580,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.185571,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.844427572,
    "polarity":-1,
    "normalized_text_entropy":4.185571,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.017933824,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I am aware that you can initialize an array during instantiation as follows: Is there a way to do the same thing with an ArrayList? Or must I add the contents individually with?"
  },
  {
    "postid":7124,
    "postdate":1400770860,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":3.277613437,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.794443853,
    "polarity":-1,
    "normalized_text_entropy":3.277613437,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.016872277,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":" can help here:"
  },
  {
    "postid":7125,
    "postdate":1400771400,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.059196754,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.320721082,
    "polarity":0,
    "normalized_text_entropy":4.059196754,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.028049273,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Here is a simple sorting program of an ArrayList: I was expecting the output of this program as: But when I run this program I am getting output as: Why is this and how do I get the ArrayList to sort as shown in the expected output?"
  },
  {
    "postid":7126,
    "postdate":1400771040,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.234658181,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.728917966,
    "polarity":1,
    "normalized_text_entropy":4.234658181,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.036718496,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You could write a custom comparator:"
  },
  {
    "postid":7127,
    "postdate":1400772180,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.990234116,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.93451263,
    "polarity":0,
    "normalized_text_entropy":3.990234116,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.019847037,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"When you sort this type of data as a string, it is comparing the characters themselves, including the digits.All of the string that begin with \"1\", for example, will end up together. So the order ends up similar to this...110100220200 At no point does the sort \"realize\" that you are assigning meaning to subsets of the string, such as the variable length numbers at the front of the string.When sorting numbers as strings, padding to the left with zeros as much as required to cover the largest number can help, but it does not really solve the problem when you don't control the data, as in your example.In that case, the sort would be... 001002010020100200"
  },
  {
    "postid":7128,
    "postdate":1400771700,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.294556152,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.359811398,
    "polarity":0,
    "normalized_text_entropy":4.294556152,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.028879467,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It is sorted as text (alphabetically), not as numbers.To get around this you could implement a custom comparator as suggested in the answer by nsayer."
  },
  {
    "postid":7129,
    "postdate":1399916400,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.06765667,
    "concept_entropy":4.439525957,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.275258699,
    "polarity":0,
    "normalized_text_entropy":4.06765667,
    "normalized_concept_entropy":4.439525957,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02708375,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"It is doing a lexicographic comparison.It compares the first character in each string sorting them.It then compares the second string of those with the same first charater.When it compares the '_' character to a number, it is greater in value than any single number character just like 8 > 7 and a > 9.Remember it is doing a character comparison and not a numeric comparison. There are ways to implement your own custom sorting routing which may be better than renaming your script names. If renaming your script names is an option, this may allow other script tools to be used.One format may be By keeping your first two digits to two characters, the lexicographic comparison will work."
  },
  {
    "postid":7130,
    "postdate":1399917900,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.319529733,
    "concept_entropy":0,
    "UMASS(coherence)":0.646274598,
    "TFIDF(informativeness)":1.538565684,
    "polarity":-1,
    "normalized_text_entropy":4.319529733,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.587522362,
    "normalized_TFIDF":0.032675823,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"The Collections.sort() method's docs says: Which means for Strings that you are going to get the list in alphabetic order. The String 11_assign_privileges.sql comes before the string 1_create_table.sql and 12_07_insert_static_data.sql comes before 1_create_table.sql etc. So the program is working as expected."
  },
  {
    "postid":7131,
    "postdate":1399917120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.328333594,
    "concept_entropy":0,
    "UMASS(coherence)":0.709443281,
    "TFIDF(informativeness)":0.542219972,
    "polarity":-1,
    "normalized_text_entropy":4.328333594,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.644948437,
    "normalized_TFIDF":0.011515585,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Because strings are sorted in a alphabetic ordering and the underscore character is after characters for numbers. You have to provide a comparator implementing \"Natural Order\" to achieve desired result. "
  },
  {
    "postid":7132,
    "postdate":1399916400,
    "tag":"1",
    "TFMvalue":0.578947368,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.071976078,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.445594616,
    "polarity":1,
    "normalized_text_entropy":4.071976078,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.00946347,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The string compare algorithm compare at a time. sorts before. It doesn't matter that it is followed by a or a. So would sort before. If you don't want this behavior, you need a compare algorithm that handles this case."
  },
  {
    "postid":7133,
    "postdate":1399917900,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.356367164,
    "concept_entropy":4.522914392,
    "UMASS(coherence)":0.734174131,
    "TFIDF(informativeness)":2.906443335,
    "polarity":-5,
    "normalized_text_entropy":4.356367164,
    "normalized_concept_entropy":4.522914392,
    "normalized_UMASS":0.667431028,
    "normalized_TFIDF":0.0617266,
    "normalized_polarity":0.166666667,
    "tagtext":"inheritance",
    "posttext":"As others have stated, the elements will be sorted alphabetically by default. The solution is define a concrete java.util.Comparator class and pass it as a second argument to the sort method. Your comparator will need to parse out the leading integers from the strings and compare them."
  },
  {
    "postid":7134,
    "postdate":1399917120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.34167336,
    "concept_entropy":0,
    "UMASS(coherence)":0.647991191,
    "TFIDF(informativeness)":2.488877355,
    "polarity":-1,
    "normalized_text_entropy":4.34167336,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.589082901,
    "normalized_TFIDF":0.052858398,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"To have Collection.sort() sort arbitrarily you can use Then simply implement a Comparator that splits the string and sorts first based on the number and then on the rest or however you want it to sort."
  },
  {
    "postid":7135,
    "postdate":1395334440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.221756644,
    "concept_entropy":4.04637013,
    "UMASS(coherence)":0.653407815,
    "TFIDF(informativeness)":1.864673088,
    "polarity":-1,
    "normalized_text_entropy":4.221756644,
    "normalized_concept_entropy":4.04637013,
    "normalized_UMASS":0.594007105,
    "normalized_TFIDF":0.039601643,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"Everyone has already pointed out that the explanation is that your strings are sorting as strings, and a number have already directed your attention to Natural Order string comparison.I'll just add that it's a great exercise to write that comparator yourself, and a great opportunity to practice test-driven development.I've used it to demonstrate TDD at Code Camp; slides & code are."
  },
  {
    "postid":7136,
    "postdate":1395334620,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.128820141,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.411945829,
    "polarity":0,
    "normalized_text_entropy":4.128820141,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02998669,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As stated above, you are looking for a Comparator implementation that implements a natural sort. Jeff Atwood wrote an excellent some time ago - it's well worth a read. If you're looking for a Java implementation I have found this one to be useful:"
  },
  {
    "postid":7137,
    "postdate":1395334560,
    "tag":"1",
    "TFMvalue":0.615384615,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.026986833,
    "concept_entropy":4.00493571,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.296790543,
    "polarity":-1,
    "normalized_text_entropy":3.026986833,
    "normalized_concept_entropy":4.00493571,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02754104,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You can add the IComparable interface and then sort by a specific property. If you have a collections of items of a store for example maybe you want to sort themby price or by category etc. If you want to order by name here is an example: note how the ArrayList is sorted by the name property of the items. If you do not add the IComparable then when you use the sort method it will throw an error."
  },
  {
    "postid":7138,
    "postdate":1392045840,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.308447889,
    "concept_entropy":3.872611334,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.515545452,
    "polarity":-1,
    "normalized_text_entropy":4.308447889,
    "normalized_concept_entropy":3.872611334,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.032186923,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I am having an Arraylist of Objects. Those object have an attribute or datatype - 'String'. I need to sort the Arraylist by that string. How to achieve this? "
  },
  {
    "postid":7139,
    "postdate":1392045960,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.249296011,
    "polarity":-2,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.047770206,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"You need to write a and use to sort your. Or else, your can also, defining a that compares on your specific attribute, and then use instead. On sorting on various criteria: On and "
  },
  {
    "postid":7140,
    "postdate":1392046020,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.402898946,
    "concept_entropy":0,
    "UMASS(coherence)":0.740952299,
    "TFIDF(informativeness)":2.391841842,
    "polarity":0,
    "normalized_text_entropy":4.402898946,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.673592999,
    "normalized_TFIDF":0.050797572,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Another good way of doing this that is a bit more flexible if there is more than one property of an object that you may wish to sort by is to use's class with its option. This is ideally suited for sorting by properties since a can be used to retrieve and return a specific property of an object.For a simple example, imagine a class with and methods. The above will sort the list by first name. To make it read nicer, you may want to define the functions you might want to use as fields on the class. Then you could sort by last name like this: As a fun aside note, this will all be a lot easier in Java 8 with lambda expressions and method references. You'll be able to write something like this without having to define any clumsy anonymous inner classes or static final fields:"
  },
  {
    "postid":7141,
    "postdate":1392046020,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.211655738,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.018140376,
    "polarity":1,
    "normalized_text_entropy":4.211655738,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.042860957,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I'm learning Java and I'm having a problem with and. I have an object called which has an array list of objects created from another class called.I need a method in which returns all the information on one of theobjects in the list.The needs to be selected at random.I have used the random generator util but I cannot get it working. I can't work out what I have done wrong. When I try to compile I get an error pointing at the line saying 'cannot find symbol variable anyItem' Any help greatly appreciated :)Thanks"
  },
  {
    "postid":7142,
    "postdate":1392046080,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.298742917,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.703128637,
    "polarity":0,
    "normalized_text_entropy":4.298742917,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.036170786,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":" is a method and the call is after your return statement so that won't compile anyway since it is unreachable. Might want to re-write it like:"
  },
  {
    "postid":7143,
    "postdate":1392046080,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.657289952,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.162541638,
    "polarity":0,
    "normalized_text_entropy":3.657289952,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.024689882,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"your print comes after you return -- you can never reach that statement. Also, you never declared anyItem to be a variable. You might want The toString part is just a quickie -- you might want to add a method 'getItemDescription' that returns a useful String for this purpose..."
  },
  {
    "postid":7144,
    "postdate":1392046500,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.100816879,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.645833747,
    "polarity":2,
    "normalized_text_entropy":4.100816879,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034953966,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"You must remove the message from below the, like this: the statement basically says the function will now end. anything included beyond the statement that is also in scope of it will result in the behavior you experienced"
  },
  {
    "postid":7145,
    "postdate":1392046380,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.395268576,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.619814203,
    "polarity":0,
    "normalized_text_entropy":4.395268576,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.034401367,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"try thisAnd I strongly suggest you to get a book, such as Ivor Horton's Beginning Java 2"
  },
  {
    "postid":7146,
    "postdate":1392818100,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.168752196,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.885868594,
    "polarity":-2,
    "normalized_text_entropy":4.168752196,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.018813942,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"anyItem has never been declared as a variable, so it makes sense that it causes an error.But more importantly, you have code after a return statement and this will cause an unreachable code error."
  },
  {
    "postid":7147,
    "postdate":1402764300,
    "tag":"1",
    "TFMvalue":0.727272727,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.366413267,
    "concept_entropy":4.577609607,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.876412137,
    "polarity":1,
    "normalized_text_entropy":4.366413267,
    "normalized_concept_entropy":4.577609607,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.018613107,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"System.out.println(\"Managers choice this week\" + anyItem + \"our recommendation to you\"); You havent the variable anyItem initialized or even declared.This code: + anyItem +means get value of toString method of Object anyItem The second thing why this wont work. You have System.out.print after return statement. Program could never reach tha line. You probably want something like: } btw: in Java its convetion to place the curly parenthesis on the same line as the declaration of the function."
  },
  {
    "postid":7148,
    "postdate":1391715060,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.134005085,
    "concept_entropy":4.58936991,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.79741198,
    "polarity":0,
    "normalized_text_entropy":4.134005085,
    "normalized_concept_entropy":4.58936991,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.016935314,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The solution is not good, even you fixed your naming and unreachable statement of that print out.things you should pay attention also 1.randomness seed, and large data, will num of item is so big returned num of that random < itemlist.size(). "
  },
  {
    "postid":7149,
    "postdate":1392301680,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.18961247,
    "concept_entropy":4.403821778,
    "UMASS(coherence)":0.595393218,
    "TFIDF(informativeness)":1.51801334,
    "polarity":3,
    "normalized_text_entropy":4.18961247,
    "normalized_concept_entropy":4.403821778,
    "normalized_UMASS":0.541266562,
    "normalized_TFIDF":0.032239336,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"Yes, this is an old topic, but I still have some confusions. In Java, people say:"
  },
  {
    "postid":7150,
    "postdate":1388948520,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.318489338,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.188631332,
    "polarity":1,
    "normalized_text_entropy":4.318489338,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.025243971,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" has direct references to every element in the list, so it can get the n-th element in constant time. has to traverse the list from the beginning to get to the n-th element.is slower because it needs to copy part of the array in order to remove the slot that has become free. just has to manipulate a couple of references. Yes, this is what it means. is indeed slower than because it has to free up a slot in the middle of the array. This involves moving some references around and in the worst case reallocating the entire array. just has to manipulate some references."
  },
  {
    "postid":7151,
    "postdate":1388948940,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.088901847,
    "concept_entropy":4.328432261,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.564267834,
    "polarity":1,
    "normalized_text_entropy":4.088901847,
    "normalized_concept_entropy":4.328432261,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.011983834,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The class is a wrapper class for an array. It contains an inner array. A is a wrapper class for a linked list, with an inner node for managing the data. Note, the present code is used to show how the class may be, not the actual implementation. Knowing how the implementation may be, we can do the further analysis: Access time for ArrayList: O(1).Access time for LinkedList: O(n). In an array, you can access to any element by using, while in a linked list you must navigate through all the list starting from until you get the element you need. Deletion time for ArrayList: Access time + O(n).Deletion time for LinkedList: Access time + O(1). The ArrayList must move all the elements from to starting by the item to delete index. The LinkedList should navigate until that item and then erase that node by decoupling it from the list. Insertion time for ArrayList: O(n).Insertion time for LinkedList: O(1). Why the ArrayList can take O(n)? Because when you insert a new element and the array is full, you need to create a new array with more size (you can calculate the new size with a formula like 2 * size or 3 * size / 2). The LinkedList just add a new node next to the last. This analysis is not just in Java but in another programming languages like C, C++ and C#.More info here:"
  },
  {
    "postid":7152,
    "postdate":1388895180,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.18666704,
    "concept_entropy":4.565447739,
    "UMASS(coherence)":0.762189925,
    "TFIDF(informativeness)":1.292224375,
    "polarity":1,
    "normalized_text_entropy":4.18666704,
    "normalized_concept_entropy":4.565447739,
    "normalized_UMASS":0.692899932,
    "normalized_TFIDF":0.027444064,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Ignore this answer for now.The other answers, particularly that of, are mostly correct.Over the long term they're the way to bet.And if you have enough data (on one benchmark on one machine, it seemed to be about one million entries) ArrayList and LinkedList do currently work as advertized.However, there are some fine points that apply in the early 21st century. Modern computer technology seems, by my testing, to give an enormous edge to arrays.Elements of an array can be shifted and copied at insane speeds.As a result arrays and ArrayList will, in most practical situations, outperform LinkedList on inserts and deletes, often dramatically.In other words, ArrayList will beat LinkedList at its own game. The downside of ArrayList is it tends to hang onto memory space after deletions, where LinkedList gives up space as it gives up entries. The downside of arrays and ArrayList is they fragment free memory and overwork the garbage collector.As an ArrayList expands, it creates new, bigger arrays, copies the old array to the new one, and frees the old one.Memory fills with big contiguous chunks of free memory that are not big enough for the next allocation.Eventually there's no suitable space for that allocation.Even though 90% of memory is free, no individual piece is big enough to do the job.The GC will work frantically to move things around, but if it takes too long to rearrange the space, it will throw an OutOfMemoryException.If it doesn't give up, it can still slow your program way down. The worst of it is this problem can be hard to predict.Your program will run fine one time.Then, with a bit less memory available, with no warning, it slows or stops. LinkedList uses small, dainty bits of memory and GC's love it.It still runs fine when you're using 99% of your available memory. So in general, use ArrayList for smaller sets of data that are not likely to have most of their contents deleted, or when you have tight control over creation and growth.(For instance, creating one ArrayList that uses 90% of memory and using it without filling it for the duration of the program is fine.Continually creating and freeing ArrayList instances that use 10% of memory will kill you.)Otherwise, go with LinkedList (or a Map of some sort if you need random access).If you have very large collections (say over 100,000 elements), no concerns about the GC, and plan lots of inserts and deletes and no random access, run a few benchmarks to see what's fastest."
  },
  {
    "postid":7153,
    "postdate":1388895960,
    "tag":"1",
    "TFMvalue":0.625,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.300877431,
    "concept_entropy":4.57188135,
    "UMASS(coherence)":0.579795911,
    "TFIDF(informativeness)":1.319991749,
    "polarity":-2,
    "normalized_text_entropy":4.300877431,
    "normalized_concept_entropy":4.57188135,
    "normalized_UMASS":0.527087192,
    "normalized_TFIDF":0.028033783,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"Answer to 1: ArrayList uses an array under the hood.Accessing a member of an ArrayList object is as simple as accessing the array at the provided index, assuming the index is within the bounds of the backing array.A LinkedList has to iterate through its members to get to the nth element.That's O(n) for a LinkedList, versus O(1) for ArrayList."
  },
  {
    "postid":7154,
    "postdate":1388898060,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":10,
    "Normalized_count":0.166666667,
    "text_entropy":4.303093077,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.890484704,
    "polarity":1,
    "normalized_text_entropy":4.303093077,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.040149826,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In a LinkedList the elements have a reference to the element before and after it. In an ArrayList the data structure is just an array."
  },
  {
    "postid":7155,
    "postdate":1388927460,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.155650401,
    "concept_entropy":4.541797997,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.395418267,
    "polarity":0,
    "normalized_text_entropy":4.155650401,
    "normalized_concept_entropy":4.541797997,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.02963568,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":": ArrayList has a structure like an array, it has a direct reference to every element. So rendom access is fast in ArrayList. : In LinkedList for getting nth elemnt you have to traverse whole list, takes time as compared to ArrayList. Every element has a link to its previous & nest element, so deletion is fast."
  },
  {
    "postid":7156,
    "postdate":1384903080,
    "tag":"1",
    "TFMvalue":0.526315789,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.273633317,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.139324237,
    "polarity":3,
    "normalized_text_entropy":4.273633317,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.024196794,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":" The ArrayList class extends AbstractList and implements the List interface and RandomAccess (marker interface). ArrayList supports dynamic arrays that can grow as needed. A LinkedList is ordered by index position, like ArrayList, except that the elements are doubly-linked to one another. This linkage gives you new methods (beyond what you get from the List interface) for adding and removing from the beginning or end, which makes it an easy choice for implementing a stack or queue. Keep in mind that a LinkedList may iterate more slowly than an ArrayList, As of Java 5, the LinkedList class has been enhanced to implement the java.util.Queue interface. As such, it now supports the common queue methods: peek (), poll (), and offer ()."
  },
  {
    "postid":7157,
    "postdate":1384903200,
    "tag":"1",
    "TFMvalue":0.545454545,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.189471796,
    "concept_entropy":0,
    "UMASS(coherence)":0.792652513,
    "TFIDF(informativeness)":3.292791846,
    "polarity":-12,
    "normalized_text_entropy":4.189471796,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.720593194,
    "normalized_TFIDF":0.069931811,
    "normalized_polarity":0.037037037,
    "tagtext":"inheritance",
    "posttext":"I have an ArrayList that I want to iterate over it. While iterating over it I have to remove elements at the same time. Obviously this throws a. What is the best practice to handle this problem? Should I clone the list first? I remove the elements not in the loop itself but another part of the code. My code looks like this: a.doSomething might call Test.removeA();"
  },
  {
    "postid":7158,
    "postdate":1376242800,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.125184882,
    "concept_entropy":0,
    "UMASS(coherence)":0.59539854,
    "TFIDF(informativeness)":1.169779042,
    "polarity":0,
    "normalized_text_entropy":4.125184882,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.5412714,
    "normalized_TFIDF":0.024843589,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I have an ArrayList that I want to iterate over it. While iterating over it I have to remove elements at the same time. Obviously this throws a. What is the best practice to handle this problem? Should I clone the list first? I remove the elements not in the loop itself but another part of the code. My code looks like this: a.doSomething might call Test.removeA();"
  },
  {
    "postid":7159,
    "postdate":1376243160,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.189482939,
    "concept_entropy":0,
    "UMASS(coherence)":0.452145466,
    "TFIDF(informativeness)":1.058990591,
    "polarity":0,
    "normalized_text_entropy":4.189482939,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.411041333,
    "normalized_TFIDF":0.022490681,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Two options: As an example of the second option, removing any strings with a length greater than 5 from a list:"
  },
  {
    "postid":7160,
    "postdate":1376243340,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.017822485,
    "concept_entropy":0,
    "UMASS(coherence)":0.655236627,
    "TFIDF(informativeness)":0.963237081,
    "polarity":-2,
    "normalized_text_entropy":4.017822485,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.595669661,
    "normalized_TFIDF":0.020457082,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"how i can check if a value that is written in scanner exists in arrayList lista?"
  },
  {
    "postid":7161,
    "postdate":1374456360,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":11,
    "Normalized_count":0.183333333,
    "text_entropy":4.473501831,
    "concept_entropy":4.494980866,
    "UMASS(coherence)":0.727357605,
    "TFIDF(informativeness)":2.084652581,
    "polarity":0,
    "normalized_text_entropy":4.473501831,
    "normalized_concept_entropy":4.494980866,
    "normalized_UMASS":0.661234186,
    "normalized_TFIDF":0.044273533,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Just use.For example, if you're looking for the conta1 account from your example, you could use something like: Note that in order for this to work, you will need to properly override the and methods. If you are using Eclipse IDE, then you can have these methods generated by first opening the source file for your object and the selecting "
  },
  {
    "postid":7162,
    "postdate":1374456540,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.357016164,
    "concept_entropy":4.537963002,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.300723437,
    "polarity":5,
    "normalized_text_entropy":4.357016164,
    "normalized_concept_entropy":4.537963002,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.048862413,
    "normalized_polarity":0.351851852,
    "tagtext":"inheritance",
    "posttext":"Better to use a than an when you are checking for existence of a value.Java docs for says: might have to iterate the whole list to find the instance you are looking for."
  },
  {
    "postid":7163,
    "postdate":1374457380,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.106067889,
    "concept_entropy":4.267200395,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.430903093,
    "polarity":0,
    "normalized_text_entropy":4.106067889,
    "normalized_concept_entropy":4.267200395,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.030389302,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Hello just refer my answer on is explain here There is no need to iterate list just overwrite equals method. } public static void main(String args[]) { }"
  },
  {
    "postid":7164,
    "postdate":1369106400,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.022055209,
    "concept_entropy":0,
    "UMASS(coherence)":0.456029251,
    "TFIDF(informativeness)":1.263831569,
    "polarity":0,
    "normalized_text_entropy":3.022055209,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.414572046,
    "normalized_TFIDF":0.026841062,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I found other entries for this question that dealt with specific methods, but nothing comprehensive. I'd like to verify my own understanding of the most often used methods of this data structure: O(1) - Constant Time: O(N) - Linear Time: Is this correct? Thanks for your help."
  },
  {
    "postid":7165,
    "postdate":1369113780,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":3.93322494,
    "concept_entropy":4.232518227,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.275599334,
    "polarity":0,
    "normalized_text_entropy":3.93322494,
    "normalized_concept_entropy":4.232518227,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.027090984,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The best resource is straight from the:"
  },
  {
    "postid":7166,
    "postdate":1369106460,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.44097576,
    "concept_entropy":4.176898136,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.337997588,
    "polarity":0,
    "normalized_text_entropy":4.44097576,
    "normalized_concept_entropy":4.176898136,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.028416189,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"I'm trying to make use of the foreach loop with the arraylist, but when I use it, it gives me error, but when I use normal for loop, it works perfectly, what could be the problem? The code is here:this is the loop that doesnt work, and here is the one that works: the error I'm getting when using the foreach loop is:"
  },
  {
    "postid":7167,
    "postdate":1369106460,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.319951085,
    "concept_entropy":0,
    "UMASS(coherence)":0.962447783,
    "TFIDF(informativeness)":2.006295357,
    "polarity":-8,
    "normalized_text_entropy":4.319951085,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.87495253,
    "normalized_TFIDF":0.042609395,
    "normalized_polarity":0.111111111,
    "tagtext":"inheritance",
    "posttext":"You can't modify a in a loop, which is syntactic sugar around the as an implementation detail. Using the directly won't do you any good either, you can only safely call when using the directly as well.Calling inside the loop modifies the contents, and the that is used behind the scenes sees this and throws this exception. A more subtle concern is the that the second way you list, the is increasing every time you so you will end up processing all the things you, this could possibly cause an endless loop depending on what the input data is. I am not sure if this is what you desire. I would create another and to it all the new things, and then after the loop, use on the original to combine the two lists together. This will make things explicit in what you are trying to do, that is unless your intention is process all the newly added things as you add them."
  },
  {
    "postid":7168,
    "postdate":1369107000,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.291432165,
    "concept_entropy":4.385030272,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.683245078,
    "polarity":0,
    "normalized_text_entropy":4.291432165,
    "normalized_concept_entropy":4.385030272,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.014510655,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Under the hood, the for-each loop in Java uses an for traversing the collection (see this for a detailed explanation.) And the Iterator will throw a if you modify the collection while iterating over it, see this."
  },
  {
    "postid":7169,
    "postdate":1367038140,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.143827557,
    "concept_entropy":0,
    "UMASS(coherence)":0.474237774,
    "TFIDF(informativeness)":1.834526813,
    "polarity":0,
    "normalized_text_entropy":4.143827557,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.431125249,
    "normalized_TFIDF":0.038961401,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"The problem is that you're doing the R.add() in the first line of the loop. In the first situation you have an iterator open to the arraylist. When you do an add and then try to iterate again the iterator notices that the data structure has changed underneath you.In the case of the for look you're just getting a new element each time and don't have the concurrent modification issue, though the size is changing as you add more elements.To fix the problem you probably want to add to a temporary location and add that after the loop or make a copy of the initial data and add to the original."
  },
  {
    "postid":7170,
    "postdate":1367038620,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.967140654,
    "concept_entropy":0,
    "UMASS(coherence)":0.581486505,
    "TFIDF(informativeness)":1.224359714,
    "polarity":-1,
    "normalized_text_entropy":3.967140654,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.528624095,
    "normalized_TFIDF":0.026002765,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"This blog explains with example : "
  },
  {
    "postid":7171,
    "postdate":1360429140,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.305002434,
    "concept_entropy":3.690260391,
    "UMASS(coherence)":0.761799364,
    "TFIDF(informativeness)":1.516404642,
    "polarity":2,
    "normalized_text_entropy":4.305002434,
    "normalized_concept_entropy":3.690260391,
    "normalized_UMASS":0.692544876,
    "normalized_TFIDF":0.03220517,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"What is the difference in declaring a collection as such"
  },
  {
    "postid":7172,
    "postdate":1360429440,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.932467092,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.444105825,
    "TFIDF(informativeness)":0.906475479,
    "polarity":-1,
    "normalized_text_entropy":3.932467092,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.403732568,
    "normalized_TFIDF":0.019251588,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You should declare it as a, and initialize it as an.is an interface, and is an implementing class. It's almost always preferable to code against the interface and not the implementation. This way, if you need to change the implementation later, it won't break consumers who code against the interface. Depending on how you actually use the list, you might even be able to use the less-specific (an interface which extends). As for (you can read that as \"list of cat\") vs: that's Java's, which ensure compile-time type safely. In short, it lets the compiler make sure that the only contains objects."
  },
  {
    "postid":7173,
    "postdate":1360429440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.392646254,
    "concept_entropy":0,
    "UMASS(coherence)":0.427942545,
    "TFIDF(informativeness)":1.394922441,
    "polarity":-1,
    "normalized_text_entropy":4.392646254,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.389038677,
    "normalized_TFIDF":0.02962515,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I would do the following."
  },
  {
    "postid":7174,
    "postdate":1360429440,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.314885296,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.460352422,
    "polarity":0,
    "normalized_text_entropy":4.314885296,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.031014742,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"In order to ensure type safety, and because current Java compilers will complain if a generic type has no type argument, you should always specify a type explicitly - or if you really don't care. That said, unless you use something specific to the class, you should use to avoid tying your code to a particular implementation."
  },
  {
    "postid":7175,
    "postdate":1360429620,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.319544126,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.8084329,
    "polarity":0,
    "normalized_text_entropy":4.319544126,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.017169375,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"As Matt already stated, using the most common Interface/Superclass is the best way to go here.Make sure to always declare the Type that appears in your List, so make it a or evenIf, at some later point, you want to replace the with, say, a, you won't have to change the declaration, but only the instantiation."
  },
  {
    "postid":7176,
    "postdate":1360429620,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.313147939,
    "concept_entropy":4.506168752,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.009953928,
    "polarity":-1,
    "normalized_text_entropy":4.313147939,
    "normalized_concept_entropy":4.506168752,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.021449247,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":" is more flexible than, is safer than. so is good choice."
  },
  {
    "postid":7177,
    "postdate":1354932180,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.36362277,
    "concept_entropy":0,
    "UMASS(coherence)":0.506589989,
    "TFIDF(informativeness)":1.256781681,
    "polarity":-1,
    "normalized_text_entropy":4.36362277,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.460536354,
    "normalized_TFIDF":0.026691338,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"First of all, is an interface and is an implementation of the interface (actually, it subclasses and). Therefore is valid since. For this:becomes a raw-type (there is no reference to the Generic Type for), it hasn't been parameterised. Your 3rd solution is correct (it solves your problem for option 1),you have bounded a Generic Type for to a type. Therefore, your instantiation of is valid as the generic bounding is the same. Your 2nd solution allows that only of can be instantiated. The other 2 options allows you to instantiate any object that, e.g.."
  },
  {
    "postid":7178,
    "postdate":1354935180,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":9,
    "Normalized_count":0.15,
    "text_entropy":4.131646024,
    "concept_entropy":0,
    "UMASS(coherence)":0.436100594,
    "TFIDF(informativeness)":1.5208872,
    "polarity":-1,
    "normalized_text_entropy":4.131646024,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.396455085,
    "normalized_TFIDF":0.03230037,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"I have this code: It converts a JSON string to a of objects.But now I want to have this with a dynamic type (not just), defined at runtime. I tried this: But it doesn't work. This is the exception:"
  },
  {
    "postid":7179,
    "postdate":1353929040,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.241010821,
    "concept_entropy":0,
    "UMASS(coherence)":0.467182871,
    "TFIDF(informativeness)":1.893395831,
    "polarity":-1,
    "normalized_text_entropy":4.241010821,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.424711701,
    "normalized_TFIDF":0.040211652,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"What you are suggesting is not possible. The following because it's syntactically incorrect. The following is not possible because of how generics (type erasure) and reflection works. The whole hack works because does the following In other words, if it sees, that's the it will return and you won't be able to extract the compile time value that the type variable would have had. The only solution I can think of is to create a Factory with the types you expect can occur and return the appropriate, already created,."
  },
  {
    "postid":7180,
    "postdate":1353954540,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.099062458,
    "concept_entropy":4.168828769,
    "UMASS(coherence)":0.44009457,
    "TFIDF(informativeness)":1.439917257,
    "polarity":-1,
    "normalized_text_entropy":4.099062458,
    "normalized_concept_entropy":4.168828769,
    "normalized_UMASS":0.400085973,
    "normalized_TFIDF":0.030580743,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"What are the advantages and disadvantages of emptying a collection (in my case its an ArrayList) vs creating a new one (and letting the garbage collector clear the old one). Specifically, I have an called. When a certain condition occurs, I need to empty and refill it with other contents. Should I call or just make a new and let the old one be garbage collected? What are the pros and cons of each approach?"
  },
  {
    "postid":7181,
    "postdate":1348146540,
    "tag":"1",
    "TFMvalue":0.818181818,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.201216806,
    "concept_entropy":0,
    "UMASS(coherence)":0.551741113,
    "TFIDF(informativeness)":1.417580889,
    "polarity":1,
    "normalized_text_entropy":4.201216806,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.50158283,
    "normalized_TFIDF":0.030106367,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"You keep the container and call when you would like to reduce the load on GC: nulls out all the references inside the array, but does not make the array eligible for reclaiming by the garbage collector. This may speed up future inserts, because the array inside does not need to grow. This approach is especially advantageous when the data that you plan to add to the container has roughly the same size as you clearing out. In addition, you may need to use when other objects hold a reference to the array that you are about to clear. Releasing the container and creating a new one makes sense when the size of the new data may be different from what was there before. Of course you can achieve a similar effect by callingin combination with."
  },
  {
    "postid":7182,
    "postdate":1348146900,
    "tag":"1",
    "TFMvalue":0.888888889,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.286806775,
    "concept_entropy":0,
    "UMASS(coherence)":0.61206387,
    "TFIDF(informativeness)":0.280559573,
    "polarity":1,
    "normalized_text_entropy":4.286806775,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.5564217,
    "normalized_TFIDF":0.005958481,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"The advantage of recycling an (e.g. by calling) is that you avoid the overhead of allocating a new one, and the cost of growing it ... if you didn't provide a good hint. The disadvantages of recycling an include the following: It is not possible to accurately model the performance trade-offs for a real-life application.There are just too many variables.However, the \"received wisdom\" is that recycling is NOT normally a good idea if you have plenty of memoryand a half-decent garbage collector. It is also worth noting that a modern JVM can allocate objects very efficiently.It merely needs to update to the heap's \"free\" pointer and write 2 or 3 object header words.The zeroing of memory is done by the GC ... and besides the work in doing that is equivalent to the work that does to null out references in the list that is being recycled. My advice would be NOT to recycle objects unless you have a demonstrable need to minimize the (garbage) object creation rate; e.g. because it is the only option you have for reducing (harmful) GC pauses. All things being equal, on a modern Hotspot JVM my understanding is that you will get best performance by doing the following:"
  },
  {
    "postid":7183,
    "postdate":1348148100,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.286729536,
    "concept_entropy":0,
    "UMASS(coherence)":0.754989771,
    "TFIDF(informativeness)":1.330785655,
    "polarity":-2,
    "normalized_text_entropy":4.286729536,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.686354337,
    "normalized_TFIDF":0.028263023,
    "normalized_polarity":0.222222222,
    "tagtext":"inheritance",
    "posttext":"It doesn't really matter...A List.clear() implementation sets the internal array's references to null. Effectively setting the objects to be garbage collected if there are no more references. If your only concern is memory there's no real measurable difference in both approaches. Even operation wise the difference will be in array allocations (in resize operations) and other such operations. But clearing it may be marginally better although if creating a new list is more readable I'd go with that."
  },
  {
    "postid":7184,
    "postdate":1344852060,
    "tag":"1",
    "TFMvalue":0.7,
    "comparitive_count":6,
    "Normalized_count":0.1,
    "text_entropy":4.249081596,
    "concept_entropy":4.144106551,
    "UMASS(coherence)":0.898418157,
    "TFIDF(informativeness)":2.962744765,
    "polarity":2,
    "normalized_text_entropy":4.249081596,
    "normalized_concept_entropy":4.144106551,
    "normalized_UMASS":0.816743779,
    "normalized_TFIDF":0.062922321,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"As interesting points were already written, you can think about it even one level deeper. I've haven't realized it than I read article about disruptor pattern, seeIt's possible to not only to underlying, you can also within the collection. E.g. suppose producer and consumer use-case. Producer can fill data into the same (cyclic) array over and over again and even use same entities. Just clear properties, internal state, and fill it's own. It's one level better solution in the point of GC view. But it's obviously special case not useful for every problem."
  },
  {
    "postid":7185,
    "postdate":1344852360,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.881832666,
    "concept_entropy":4.454703906,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.702894978,
    "polarity":1,
    "normalized_text_entropy":3.881832666,
    "normalized_concept_entropy":4.454703906,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.036165824,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"I have a string arraylist called.How do I sort the arraylist in alphabetical order?"
  },
  {
    "postid":7186,
    "postdate":1344852540,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.101256157,
    "concept_entropy":4.397330011,
    "UMASS(coherence)":0.704042181,
    "TFIDF(informativeness)":1.16371409,
    "polarity":1,
    "normalized_text_entropy":4.101256157,
    "normalized_concept_entropy":4.397330011,
    "normalized_UMASS":0.640038346,
    "normalized_TFIDF":0.024714782,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":" implements:"
  },
  {
    "postid":7187,
    "postdate":1344795600,
    "tag":"1",
    "TFMvalue":0.75,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.29700732,
    "concept_entropy":0,
    "UMASS(coherence)":0.6524861,
    "TFIDF(informativeness)":1.807119924,
    "polarity":4,
    "normalized_text_entropy":4.29700732,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.593169182,
    "normalized_TFIDF":0.038379337,
    "normalized_polarity":0.333333333,
    "tagtext":"inheritance",
    "posttext":"import java.util.Collections; then use Collections.sort();"
  },
  {
    "postid":7188,
    "postdate":1344795720,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.379738687,
    "concept_entropy":4.35013813,
    "UMASS(coherence)":0.492734274,
    "TFIDF(informativeness)":1.607459794,
    "polarity":2,
    "normalized_text_entropy":4.379738687,
    "normalized_concept_entropy":4.35013813,
    "normalized_UMASS":0.447940249,
    "normalized_TFIDF":0.034138986,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Another solution but is best. I just want to show alternative"
  },
  {
    "postid":7189,
    "postdate":1342968000,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":8,
    "Normalized_count":0.133333333,
    "text_entropy":4.200911435,
    "concept_entropy":4.42396499,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.042412461,
    "polarity":0,
    "normalized_text_entropy":4.200911435,
    "normalized_concept_entropy":4.42396499,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.043376444,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"crop: has parameters that are two Points in the Cloud. One of these two points is a bottom corner, and the other a diagonally across top corner of a rectangle. Crop will remove all points outside this rectangle from the Cloud much like you would crop an image. The crop method must deal with two input points on a horizontal or vertical line segment, in which case all points not on the line segment are removed, and it must deal with two equal Points p1 and p2, in which case all Points but p1 are removed from the Cloud. For example, if the two input Points are (0.0,0,0) and (1.0,1.0), all Points outside the square delimited by (0.0,0.0), (0.0,1.0), (1.0,1.0), and (0.0,1.0) are removed, but if the two input Points are (0.0,0,0) and (0.0,1.0), all Points outside the line segment delimited by (0.0,0.0), and (0.0,1.0) are removed. I'm having a hard time approaching this logically. If anyone could help me out with that I would be thankful. orThanks "
  },
  {
    "postid":7190,
    "postdate":1343053380,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.179484817,
    "concept_entropy":4.545151364,
    "UMASS(coherence)":0.628741841,
    "TFIDF(informativeness)":1.456117623,
    "polarity":-1,
    "normalized_text_entropy":4.179484817,
    "normalized_concept_entropy":4.545151364,
    "normalized_UMASS":0.571583492,
    "normalized_TFIDF":0.030924804,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"crop: has parameters that are two Points in the Cloud. One of these two points is a bottom corner, and the other a diagonally across top corner of a rectangle. Crop will remove all points outside this rectangle from the Cloud much like you would crop an image. The crop method must deal with two input points on a horizontal or vertical line segment, in which case all points not on the line segment are removed, and it must deal with two equal Points p1 and p2, in which case all Points but p1 are removed from the Cloud. For example, if the two input Points are (0.0,0,0) and (1.0,1.0), all Points outside the square delimited by (0.0,0.0), (0.0,1.0), (1.0,1.0), and (0.0,1.0) are removed, but if the two input Points are (0.0,0,0) and (0.0,1.0), all Points outside the line segment delimited by (0.0,0.0), and (0.0,1.0) are removed. I'm having a hard time approaching this logically. If anyone could help me out with that I would be thankful. orThanks "
  },
  {
    "postid":7191,
    "postdate":1343068260,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.05569394,
    "concept_entropy":4.43318587,
    "UMASS(coherence)":0.73759349,
    "TFIDF(informativeness)":2.03435139,
    "polarity":2,
    "normalized_text_entropy":4.05569394,
    "normalized_concept_entropy":4.43318587,
    "normalized_UMASS":0.670539536,
    "normalized_TFIDF":0.043205244,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"try using geometric logic, for more understanding try on a paper using quadrants and sample points. assume if the parameter (x1,y1), and (x2,y2) to check for point (a,b) whether inside the square, condition. If satisfies condition it is inside the Square else not. assume if the parameter (x1,y1), and (x2,y2) [and x1==x2 OR y1==y2] to check for point (a,b) whether within a line, conditionit worked for me, to find whether a point is within a triangle of given vertices. hope this is helpful"
  },
  {
    "postid":7192,
    "postdate":1331208420,
    "tag":"1",
    "TFMvalue":0.777777778,
    "comparitive_count":13,
    "Normalized_count":0.216666667,
    "text_entropy":4.35784999,
    "concept_entropy":4.534449693,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.587315671,
    "polarity":2,
    "normalized_text_entropy":4.35784999,
    "normalized_concept_entropy":4.534449693,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.033711168,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"I came up with this sample code to give you some ideas. Hope I was able to understand your question. output:"
  },
  {
    "postid":7193,
    "postdate":1331208900,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":3.98333064,
    "concept_entropy":4.329976289,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.190743375,
    "polarity":1,
    "normalized_text_entropy":3.98333064,
    "normalized_concept_entropy":4.329976289,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.025288826,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"So right now I have a program containing a piece of code that looks like this... Am I doing that right, as far as iterating through the Arraylist goes?The error I am getting is: I would show the rest of the code, but it's pretty extensive, and if I am not doing the iteration correctly, I would assume the only possibility is that I am not initializing the array list properly. So thank you in advance for any help/advice that is offered."
  },
  {
    "postid":7194,
    "postdate":1315949700,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.25388414,
    "concept_entropy":4.440085652,
    "UMASS(coherence)":0.51518147,
    "TFIDF(informativeness)":2.42054469,
    "polarity":-1,
    "normalized_text_entropy":4.25388414,
    "normalized_concept_entropy":4.440085652,
    "normalized_UMASS":0.468346791,
    "normalized_TFIDF":0.051407159,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"No: by calling twice in each iteration, you're getting new iterators all the time. The easiest way to write this loop is using the construct: As for You just tried to get element number from an array. Counting starts at zero."
  },
  {
    "postid":7195,
    "postdate":1315951200,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":0,
    "concept_entropy":0,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.483184644,
    "polarity":0,
    "normalized_text_entropy":0,
    "normalized_concept_entropy":0,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.031499649,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"While I agree that the accepted answer is usually the best solution and definitely easier to use, I noticed no one displayed the proper usage of the iterator. So here is a quick example:"
  },
  {
    "postid":7196,
    "postdate":1315950000,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.433828076,
    "concept_entropy":4.65657849,
    "UMASS(coherence)":0.623689816,
    "TFIDF(informativeness)":2.53254524,
    "polarity":-7,
    "normalized_text_entropy":4.433828076,
    "normalized_concept_entropy":4.65657849,
    "normalized_UMASS":0.566990742,
    "normalized_TFIDF":0.053785809,
    "normalized_polarity":0.12962963,
    "tagtext":"inheritance",
    "posttext":"or But be carefull. So comparation should be when you are sure that value is not null or you should check if given element is null."
  },
  {
    "postid":7197,
    "postdate":1309290120,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":7,
    "Normalized_count":0.116666667,
    "text_entropy":4.034561866,
    "concept_entropy":4.66438509,
    "UMASS(coherence)":0.526102189,
    "TFIDF(informativeness)":1.792976682,
    "polarity":-1,
    "normalized_text_entropy":4.034561866,
    "normalized_concept_entropy":4.66438509,
    "normalized_UMASS":0.478274717,
    "normalized_TFIDF":0.038078965,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"You can also use like this: Its a good practice to cast and use the object.For example, if the 'arrayList' contains a list of 'Object1' objects. Then, we can re-write the code as:"
  },
  {
    "postid":7198,
    "postdate":1309290660,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.064880223,
    "concept_entropy":3.676440909,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.121680731,
    "polarity":0,
    "normalized_text_entropy":4.064880223,
    "normalized_concept_entropy":3.676440909,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.023822084,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"You could also do a for loop as you would for an array but instead of array[i] you would use list.get(i)"
  },
  {
    "postid":7199,
    "postdate":1292494020,
    "tag":"1",
    "TFMvalue":0.6,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.193204675,
    "concept_entropy":4.45612837,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.89848599,
    "polarity":0,
    "normalized_text_entropy":4.193204675,
    "normalized_concept_entropy":4.45612837,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.040319756,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"Apart of larsmans answer (who is indeed correct), the exception in a call to a get() method, so the code you have posted is not the one that is causing the error."
  },
  {
    "postid":7200,
    "postdate":1292494140,
    "tag":"1",
    "TFMvalue":0.714285714,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.174889124,
    "concept_entropy":4.548855352,
    "UMASS(coherence)":0.534838691,
    "TFIDF(informativeness)":1.531486326,
    "polarity":-1,
    "normalized_text_entropy":4.174889124,
    "normalized_concept_entropy":4.548855352,
    "normalized_UMASS":0.486216992,
    "normalized_TFIDF":0.032525473,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":" to iterate your ArrayList followed by this. This type will improve the performance of looping during iteration"
  },
  {
    "postid":7201,
    "postdate":1292494080,
    "tag":"1",
    "TFMvalue":0.5,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.277070762,
    "concept_entropy":4.580548063,
    "UMASS(coherence)":0.632929474,
    "TFIDF(informativeness)":0.644788075,
    "polarity":0,
    "normalized_text_entropy":4.277070762,
    "normalized_concept_entropy":4.580548063,
    "normalized_UMASS":0.575390431,
    "normalized_TFIDF":0.013693911,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"So, now I've figured out how to make multiple of the same object correctly, I need to know how to make an array of them, changing depending on how many are needed, because it is pretty much an object, that stores 3 numbers. How can I Create an arraylist that is of different objects, because I'm going to have the numbers inside them different"
  },
  {
    "postid":7202,
    "postdate":1292494740,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":3.858802914,
    "concept_entropy":4.522855054,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0.486677808,
    "polarity":-1,
    "normalized_text_entropy":3.858802914,
    "normalized_concept_entropy":4.522855054,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.010335989,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":""
  },
  {
    "postid":7203,
    "postdate":1292494200,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":0,
    "Normalized_count":0,
    "text_entropy":4.257959806,
    "concept_entropy":0,
    "UMASS(coherence)":0.592291343,
    "TFIDF(informativeness)":1.274796159,
    "polarity":1,
    "normalized_text_entropy":4.257959806,
    "normalized_concept_entropy":0,
    "normalized_UMASS":0.538446675,
    "normalized_TFIDF":0.027073926,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"In java, ArrayList and HashMap are using in collections. But i couldn't understand at which situations we should use ArrayList and which time use HashMap. What is the major difference between both of them?"
  },
  {
    "postid":7204,
    "postdate":1292494260,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.064086039,
    "concept_entropy":4.36958163,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.657729078,
    "polarity":3,
    "normalized_text_entropy":4.064086039,
    "normalized_concept_entropy":4.36958163,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035206597,
    "normalized_polarity":0.314814815,
    "tagtext":"inheritance",
    "posttext":"You are asking specifically about ArrayList and HashMap, but I think to fully understand what is going on you have to understand the Collections framework.So an ArrayList implements the List interface and a HashMap implements the Map interface.So the real question is when do you want to use a List and when do you want to use a Map.This is where the Java API documentation helps a lot. List: Map: So as other answers have discussed, the list interface (ArrayList) is an ordered collection of objects that you access using an index, much like an array (well in the case of ArrayList, as the name suggests, it is just an array in the background, but a lot of the details of dealing with the array are handled for you).You would use an ArrayList when you want to keep things in sorted order (the order they are added, or indeed the position within the list that you specify when you add the object). A Map on the other hand takes one object and uses that as a key (index) to another object (the value).So lets say you have objects which have unique IDs, and you know you are going to want to access these objects by ID at some point, the Map will make this very easy on you (and quicker/more efficient).The HashMap implementation uses the hash value of the key object to locate where it is stored, so there is no guarentee of the order of the values anymore.There are however other classes in the Java API that can provide this, e.g. LinkedHashMap, which as well as using a hash table to store the key/value pairs, also maintains a List (LinkedList) of the keys in the order they were added, so you can always access the items again in the order they were added (if needed)."
  },
  {
    "postid":7205,
    "postdate":1251719160,
    "tag":"1",
    "TFMvalue":0.857142857,
    "comparitive_count":2,
    "Normalized_count":0.033333333,
    "text_entropy":4.298264336,
    "concept_entropy":4.428765387,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":1.693284259,
    "polarity":0,
    "normalized_text_entropy":4.298264336,
    "normalized_concept_entropy":4.428765387,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.035961713,
    "normalized_polarity":0.259259259,
    "tagtext":"inheritance",
    "posttext":"If you use an ArrayList, you have to access the elements with an index (int type). And with a HashMap, you can access them by an index from another type (For example, a String) This is unpossible (or much more difficult) with an ArrayList. The only good way to access elements in an arraylist is by getting the elements by their index-number. So, this means you can use every type of key you want (with a HashMap). Another helpfull example is in a game: You have a set of images, and you want to flip them.So, you write a image-flip method, and then store the flipped results: You flipped player once, and then store it. You can access a BufferedImage with a BufferedImage as key-type for the HashMap. I hope you understand my second example. Hope this helps."
  },
  {
    "postid":7206,
    "postdate":1251719760,
    "tag":"1",
    "TFMvalue":0.833333333,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.279216216,
    "concept_entropy":4.554368274,
    "UMASS(coherence)":0.721505621,
    "TFIDF(informativeness)":0.76022594,
    "polarity":1,
    "normalized_text_entropy":4.279216216,
    "normalized_concept_entropy":4.554368274,
    "normalized_UMASS":0.655914201,
    "normalized_TFIDF":0.016145563,
    "normalized_polarity":0.277777778,
    "tagtext":"inheritance",
    "posttext":"Not really a Java specific question. It seems you need a \"primer\" on data structures. Try googling \"What data structure should you use\" Try this link "
  },
  {
    "postid":7207,
    "postdate":1251719760,
    "tag":"1",
    "TFMvalue":0.666666667,
    "comparitive_count":3,
    "Normalized_count":0.05,
    "text_entropy":4.285745751,
    "concept_entropy":4.350222422,
    "UMASS(coherence)":0.530149276,
    "TFIDF(informativeness)":0.590111789,
    "polarity":2,
    "normalized_text_entropy":4.285745751,
    "normalized_concept_entropy":4.350222422,
    "normalized_UMASS":0.481953887,
    "normalized_TFIDF":0.012532704,
    "normalized_polarity":0.296296296,
    "tagtext":"inheritance",
    "posttext":"Use a list for an ordered collection of just values. For example, you might have a list of files to process. Use a map for a (usually unordered) mapping from key to value. For example, you might have a map from a user ID to the details of that user, so you can efficiently find the details given just the ID. (You implement the interface by just storing a list of keys and a list of values, but generally there'll be a more efficient implementation - uses a hash table internally to get amortised O(1) key lookup, for example.)"
  },
  {
    "postid":7208,
    "postdate":1251720300,
    "tag":"1",
    "TFMvalue":0.571428571,
    "comparitive_count":1,
    "Normalized_count":0.016666667,
    "text_entropy":4.287719467,
    "concept_entropy":4.529983799,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":0,
    "polarity":-1,
    "normalized_text_entropy":4.287719467,
    "normalized_concept_entropy":4.529983799,
    "normalized_UMASS":1,
    "normalized_TFIDF":0,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"A Map vs a List. In a Map, you have key/value pairs. To access a value you need to know the key. There is a relationship that exists between the key and the value that persists and is not arbitrary. They are related somehow. Example: A persons DNA is unique (the key) and a persons name (the value) or a persons SSN (the key) and a persons name (the value) there is a strong relationship. In a List, all you have are values (a persons name), and to access it you need to know its position in the list (index) to access it. But there is no permanent relationship between the position of the value in the list and its index, it is arbitrary."
  },
  {
    "postid":7209,
    "postdate":1251719880,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":4,
    "Normalized_count":0.066666667,
    "text_entropy":4.287719467,
    "concept_entropy":4.529983799,
    "UMASS(coherence)":1.1,
    "TFIDF(informativeness)":2.131878121,
    "polarity":-1,
    "normalized_text_entropy":4.287719467,
    "normalized_concept_entropy":4.529983799,
    "normalized_UMASS":1,
    "normalized_TFIDF":0.045276502,
    "normalized_polarity":0.240740741,
    "tagtext":"inheritance",
    "posttext":"What is the reason why we cannot always use a HashMap, even though it is much more efficient than ArrayList or LinkedList in add,remove operations, also irrespective of the number of the elements. I googled it and found some reasons, but there was always a workaround for using HashMap, with advantages still alive."
  },
  {
    "postid":7210,
    "postdate":1251720000,
    "tag":"1",
    "TFMvalue":0.8,
    "comparitive_count":5,
    "Normalized_count":0.083333333,
    "text_entropy":4.272407353,
    "concept_entropy":4.362045187,
    "UMASS(coherence)":0.639764629,
    "TFIDF(informativeness)":2.441398827,
    "polarity":-3,
    "normalized_text_entropy":4.272407353,
    "normalized_concept_entropy":4.362045187,
    "normalized_UMASS":0.581604208,
    "normalized_TFIDF":0.051850056,
    "normalized_polarity":0.203703704,
    "tagtext":"inheritance",
    "posttext":"What is the reason why we cannot always use a HashMap, even though it is much more efficient than ArrayList or LinkedList in add,remove operations, also irrespective of the number of the elements. I googled it and found some reasons, but there was always a workaround for using HashMap, with advantages still alive."
  }
]